#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"			as Font

// IMAGE FOR UPLAY POPUP
#Const C_UplayImageBaseDir				"file://Media/Manialinks/Nadeo/TMConsole/Images/Uplay/"
#Const C_UplayActionFrame_StartPosition	160.
#Const C_UplayActionFrame_EndPosition	0.
#Const C_UplayActionFrame_DisplayTime	5000


// _ShowPopup si False, on ne montre pas la popup.
// la fonction devrait plutot s'appeler "register uplay action".
// mais fuck
Void ShowUplayPopup(Text _ActionUplayID, Text _ActionName, Text _ActionDesc, Integer _ActionValue, CUser _User, Integer _Context, Boolean _ShowPopup) {
	declare Text[] 	UIUplayActionsDone 		for _User;
		
	if(UIUplayActionsDone.exists(_ActionUplayID)) {
		// on a déjà l'action. next.
		return;
	}
	UIUplayActionsDone.add(_ActionUplayID);
	
	declare  Integer	Net_UpdateUplayAction		for _User;
	declare  Integer	Net_ShowUplayPopup			for _User;
	declare  Integer 	Net_ShowUplayPopupContext 	for _User;
	
	declare  Text 		Net_ActionUplayTechID		for _User;
	declare  Text 		Net_UplayActionID 			for _User;
	declare  Text 		Net_UplayActionName 		for _User;
	declare  Integer 	Net_UplayActionValue 		for _User;
	
	Net_UpdateUplayAction		= Now;
	if(_ShowPopup) {
		Net_ShowUplayPopup	 	= Now;
		Net_UplayActionID	 	= _ActionName;
		Net_UplayActionName	 	= _ActionDesc;
		Net_UplayActionValue 	= _ActionValue;
	}
	Net_ShowUplayPopupContext 	= _Context;
	Net_ActionUplayTechID 	= _ActionUplayID;
}


/// @param _Context : 0 pour les menus, 1 pour le ingame, 2 pour l'éditeur, etc.
/// (ajouter un indice > 0 si apparition dans un autre contexte).
Text CreateLayer(Integer _Context) {
	declare Text UplayPopupBG		= C_UplayImageBaseDir^"uplayPopupBg.dds";
	declare Text UplayClubIcon		= C_UplayImageBaseDir^"uplayClubIcon.dds";
	declare Text UplayPointsIcon	= C_UplayImageBaseDir^"uplayPointsIcon.dds";
	
	declare Text FontLabelNormal	= ""; //Font::GetFontName("Title");
	declare Text FontLabelBold		= ""; //Font::GetFontName("TitleSmall");
	declare Text FontLabelNumber	= ""; //Font::GetFontName("NumberBig");
	
	declare Text MLText = """
	<frame>
		<frame id="Frame_UplayActions" posn="{{{C_UplayActionFrame_StartPosition}}} 55 100" hidden="1">
			<frame>
				<quad image="{{{UplayPopupBG}}}"  posn="0 0 -1" sizen="200 25" />
				<quad image="{{{UplayClubIcon}}}" posn="42 -5.5 0" sizen="26 13" />
			</frame>
			<frame posn="71 -10 0" >
				<label id="Label_ActionCompleted"	posn="0  3 0"   textprefix="$o" textfont="{{{FontLabelBold}}}" 		sizen="65 10 0" textcolor="ffff" text="{{{_("Action Completed")}}}"	/>
				<label id="Label_ActionName"	posn="0 -2.5 0" textfont="{{{FontLabelNormal}}}" 	sizen="65 10 0" textcolor="ffff" text="This is the action name"/>
			</frame>
			<frame posn="145 -10 0">
				<label id="Label_ActionValue"		posn="6 3 0"  sizen="10 6"	fontsize="1" halign="right"  textfont="{{{FontLabelNumber}}}" textcolor="ffff"	text="+ 30"/>
				<quad id="Quad_UplayPoints" image="{{{UplayPointsIcon}}}" posn="6 4 0" 	sizen="6 6" />
			</frame>
		</frame>
	</frame>
	<script><!--
		#Const DebugName "L_UbiClubPopup"
				
		Void ShowUplayPopup() {
			declare Boolean UplayNet_IsPlayerConnectedMasterServer 	for LocalUser;
			declare Boolean UplayNet_HasUplayProfile 				for LocalUser;
			
			declare  Text Net_UplayActionID 		for LocalUser;
			declare  Text Net_UplayActionName 		for LocalUser;
			declare  Integer Net_UplayActionValue 	for LocalUser;
			
			declare CMlFrame Frame_UplayActions 	<=> (Page.GetFirstChild("Frame_UplayActions") as CMlFrame);
			declare CMlLabel Label_ActionCompleted	<=> (Frame_UplayActions.GetFirstChild("Label_ActionCompleted") as CMlLabel);
			declare CMlLabel Label_ActionName 		<=> (Frame_UplayActions.GetFirstChild("Label_ActionName") as CMlLabel);
			declare CMlLabel Label_ActionValue 		<=> (Frame_UplayActions.GetFirstChild("Label_ActionValue") as CMlLabel);
			declare CMlQuad Quad_UplayPoints 		<=> (Frame_UplayActions.GetFirstChild("Quad_UplayPoints") as CMlQuad);
			
			Frame_UplayActions.Show();
			
			Label_ActionName.SetText("");
			Quad_UplayPoints.Hide();
			Label_ActionValue.SetText("");
			Label_ActionCompleted.RelativePosition = <Label_ActionCompleted.RelativePosition.X, 0., Label_ActionCompleted.RelativePosition.Z>;
			
			if(UplayNet_IsPlayerConnectedMasterServer && UplayNet_HasUplayProfile) {
				Label_ActionName.SetText(Net_UplayActionID);
				if(Net_UplayActionID != "") {
					Label_ActionCompleted.RelativePosition = <Label_ActionCompleted.RelativePosition.X, 2.5, Label_ActionCompleted.RelativePosition.Z>;
				}
				if(Net_UplayActionValue > 0)  {
					Quad_UplayPoints.Show();
					Label_ActionValue.SetText("+ "^Net_UplayActionValue);
				}
			}
		}
		
		main() {
			declare Integer LayerContext = {{{_Context}}};
			
			log(Now^"> L_UbiClubPopup created with context "^LayerContext);
			
			declare CMlFrame Frame_UplayActions 	<=> (Page.GetFirstChild("Frame_UplayActions") as CMlFrame);
			
			
			// declare netwrite Boolean UplayNet_IsPlayerConnectedMasterServer for UI;
			
			declare  Integer Net_ShowUplayPopupContext 	for LocalUser;
			declare  Integer Net_ShowUplayPopup 		for LocalUser;
			declare  Integer PrevShowUplayPopup = Net_ShowUplayPopup;
			
			Net_ShowUplayPopupContext = -1;
			
			declare Integer MoveUplayPopup = 0;
			declare Real 	SpeedFactor = 0.5;
			
			while(True) {
				yield;
				
				// log("Uplay UplayNet_IsPlayerConnectedMasterServer : "^UplayNet_IsPlayerConnectedMasterServer);
				
				// UPlay Popup
				if(Net_ShowUplayPopup != PrevShowUplayPopup && (Net_ShowUplayPopupContext == LayerContext)) {
					PrevShowUplayPopup = Net_ShowUplayPopup;
					
					declare  Integer Net_UplayActionValue 	for LocalUser;
					declare Boolean ShouldShowPopup = (Net_UplayActionValue >= 0);
					if(ShouldShowPopup) {
						ShowUplayPopup();
						MoveUplayPopup = 1;
					}
				}
				
				if(MoveUplayPopup > 0) {
					declare Real LastX = Frame_UplayActions.RelativePosition.X - (Period * SpeedFactor);
					if(LastX <= {{{C_UplayActionFrame_EndPosition}}}) {
						LastX = {{{C_UplayActionFrame_EndPosition}}};
						MoveUplayPopup = - {{{C_UplayActionFrame_DisplayTime}}};
					}
					Frame_UplayActions.RelativePosition.X = LastX;
				}
				if(MoveUplayPopup < 0) {
					if(MoveUplayPopup < -1) {
						MoveUplayPopup += Period;
						if(MoveUplayPopup >= -1) MoveUplayPopup = -1;
					}
					else {
						declare Real LastX = Frame_UplayActions.RelativePosition.X + (Period * SpeedFactor);
						if(LastX >= {{{C_UplayActionFrame_StartPosition}}}) {
							LastX = {{{C_UplayActionFrame_StartPosition}}};
							MoveUplayPopup = 0;
							Frame_UplayActions.Hide();
						}
						Frame_UplayActions.RelativePosition.X = LastX;
					}
				}
			}
		}
	--></script>
	""";

	return MLText;
}