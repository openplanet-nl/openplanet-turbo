/** 
 *	In-Game UI library
 */

#Const Version		"2014-06-30"
#Const ScriptName	"UIHotSeat.Script.txt"

#Include "Libs/Nadeo/Layers2.Script.txt" 						as Layers
#Include "Libs/Nadeo/UIPadButtons.Script.txt"					as UIButtons

#Include "MathLib" as ML

#Const	ImgPathTest				"file://Media/Images/TMConsole/Ingame/Test/"

declare Ident G_ThePlayerId;
declare Integer[Integer]  G_LastPlayerPosition;

// ---------------------------------- //
/** Create the Main Layer
 *
 *	@return	The manialink Text
 */
Void Private_CreateLayerMainUI() {

	UIButtons::Load();
	declare Text MLText;
	
	declare Text ClockBGImage	= ImgPathTest^"SimpleBG.png";
	declare Text ClockMGImage  	= ImgPathTest^"MG.dds";
 	declare Text ClockFG1Image  = ImgPathTest^"FG1.dds";
 	declare Text ClockFG2Image  = ImgPathTest^"FG2.dds";
	declare Integer ClockSize = 15;
	
	MLText ^= """
	<frame posn="138 80" id="Frame_GiveUp" hidden="1">
		<quad 	id="Quad_Bg"		
				posn="0 0 0" 	
				sizen="50 20" 
				valign="center" 		
				halign="center"	
				bgcolor="333" 
		/>
		
		<quad 	id="Quad_Icon"		
				posn="-17 0 3" 	
				sizen="10 10" 		
				valign="center" 	
				halign="center" 	
				image="{{{UIButtons::GetIngameRestartImage()}}}" 
		/>
		
		<label 	id="Label_Change" 	
				posn="5 0 0" 	
				sizen="30 40" 		
				valign="center" 	
				halign="center" 	
				style="TextRaceMessageBig" 
				textsize="4" 
				text="GIVE UP"
		/>
		
		<frame id="TurnCursor" hidden="1" posn="-17 0 0" scale="1.">
			<frame id="Frame_Timer" posn="0 0 8" scale="1.">
				<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockBG" posn="0 0 1" image="{{{ClockBGImage}}}"  halign="center" valign="center" keepratio="Fit" />
				<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockMG" posn="0 0 2" image="{{{ClockMGImage}}}"  halign="center" valign="center" keepratio="Fit" />
				<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockFG" posn="0 0 3" image="{{{ClockFG2Image}}}" halign="center" valign="center" keepratio="Fit " />
			</frame>
		</frame>
	
	</frame>
	
	

	<script><!--
		#Include "MathLib" as ML
		
		#Const DebugName  "L_GiveUp"
		
		main() {
			
			declare CMlFrame 	Frame_GiveUp 			<=> (Page.MainFrame.GetFirstChild("Frame_GiveUp") as CMlFrame);
			declare CMlQuad 	ClockMG 				<=> (Page.GetFirstChild("ClockMG")								as CMlQuad);
			declare CMlQuad		ClockFG 				<=> (Page.GetFirstChild("ClockFG")								as CMlQuad);
			declare CMlFrame 	Frame_TurnCursor		<=> (Page.MainFrame	.GetFirstChild("TurnCursor") 				as CMlFrame);
			
			declare netwrite Integer 			Net_PlayerHasGiveUpUpdate 	for UI;
			declare netread  Boolean 			Net_PlayerHasMove 			for UI;
			declare netread Integer 			Net_PlayerHasRestart 		for UI;
			
			declare Integer						Pre_PlayerHasRestart = Net_PlayerHasRestart;
			
			declare Integer ClockTurnTime			= 1000; 
			declare Boolean ClockSwitched			= False;
			declare Boolean ClockColored			= False;
			declare Boolean GiveUpRequest			= False;
			declare Boolean PlayerHasMove 			= True;
			declare Integer CheckMoveTimer			= 0;
			
			declare Integer[Integer] LastPlayerPosition;
			LastPlayerPosition[0] = -1;
			LastPlayerPosition[1] = -1;
			LastPlayerPosition[2] = -1;
			
			Frame_GiveUp.Hide();
			
			while (True) {
				yield;
				
				// log(InputPlayer.Position);
				
				if(Pre_PlayerHasRestart != Net_PlayerHasRestart) {
					PlayerHasMove = False;
					Pre_PlayerHasRestart = Net_PlayerHasRestart;
				}
				
				if(InputPlayer.RaceState == CTmMlPlayer::ERaceState::BeforeStart) {
					// PlayerHasMove = False;
				} else if(InputPlayer.RaceState == CTmMlPlayer::ERaceState::Running) {
					if(!PlayerHasMove) {
						CheckMoveTimer -= Period;
						if(CheckMoveTimer <= 0) {
							if(LastPlayerPosition[0] != -1) {
								declare PosX = ML::NearestInteger(InputPlayer.Position.X);
								declare PosY = ML::NearestInteger(InputPlayer.Position.Y);
								declare PosZ = ML::NearestInteger(InputPlayer.Position.Z);
								
								if(LastPlayerPosition[0] != PosX || LastPlayerPosition[1] != PosY || LastPlayerPosition[2] != PosZ) {
									Frame_GiveUp.Hide();
									PlayerHasMove = True;
								}
							} else {
								LastPlayerPosition[0] = ML::NearestInteger(InputPlayer.Position.X);
								LastPlayerPosition[1] = ML::NearestInteger(InputPlayer.Position.Y);
								LastPlayerPosition[2] = ML::NearestInteger(InputPlayer.Position.Z);
							}
							CheckMoveTimer = 0;
						}
					}
				}
				
				if(GiveUpRequest) {
					Frame_TurnCursor.Show();
					declare Real TurnTick = (Period * 360.) / ClockTurnTime;

					if(Input.Pads[0].IdleDuration != 0) {
						GiveUpRequest = False;
						Frame_TurnCursor.Hide();
						ClockMG.RelativeRotation = 360.;
					}

					if(ClockMG.RelativeRotation == 0.) {
						GiveUpRequest = False;
						Net_PlayerHasGiveUpUpdate += 1;
						Frame_TurnCursor.Hide();
					}
					
					ClockMG.RelativeRotation -= TurnTick;
					if(ClockMG.RelativeRotation > 360.) {
						ClockMG.RelativeRotation = 360.;
					}
					
					if(ClockMG.RelativeRotation < 0.) {
						ClockMG.RelativeRotation = 0.;
					}
	
					if(!ClockSwitched && ClockMG.RelativeRotation < 180.) {
						ClockSwitched = True;
						ClockFG.ImageUrl = "{{{ClockFG1Image}}}";
					}

					if(!ClockColored && ClockMG.RelativeRotation < 90.) {
						ClockColored = True;
						ClockMG.Colorize = <0.7, 0., 0.>;
						ClockFG.Colorize = <0.7, 0., 0.>;
					}
				}
				
				if(!PlayerHasMove) {
					foreach(PadIndex => Pad in Input.Pads) {
						if(Input.Pads.existskey(Pad)) {
							foreach(Button in Input.Pads[PadIndex].ButtonEvents) {
								switch(Button) {
									case CInputScriptPad::EButton::B :  {
										ClockTurnTime	= 1000;
										ClockMG.RelativeRotation = 360.;
										ClockSwitched = False;
										ClockColored = False;
										ClockFG.ImageUrl = "{{{ClockFG2Image}}}";
										ClockMG.Colorize = <0., 1., 0.2>;
										ClockFG.Colorize = <0., 1., 0.2>;
										GiveUpRequest = True;
									}
								}
							}
						}
					}
					Frame_GiveUp.Show();
				} else {
					Frame_GiveUp.Hide();
				}
			}
		}
	--></script>
	""";

	Layers::Create("UIGiveUp", MLText);
	Layers::Attach("UIGiveUp");
}

Boolean PlayerHasGiveUp() {
	declare Boolean PlayerHasGiveUp = False;
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Integer 	Net_PlayerHasGiveUpUpdate for UI;
	declare netwrite Integer 	Pre_PlayerHasGiveUpUpdate for UI;
	if(Pre_PlayerHasGiveUpUpdate != Net_PlayerHasGiveUpUpdate) {
		PlayerHasGiveUp = True;
		Pre_PlayerHasGiveUpUpdate = Net_PlayerHasGiveUpUpdate;
	}
	return PlayerHasGiveUp;
}

Void HasRestartRace() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Boolean Net_PlayerHasMove for UI;
	Net_PlayerHasMove = False;
	declare netwrite Integer Net_PlayerHasRestart for UI;
	Net_PlayerHasRestart += 1;
	
	G_LastPlayerPosition[0] 	= -1;
	G_LastPlayerPosition[1] 	= -1;
	G_LastPlayerPosition[2]		= -1;
}

Void CheckPlayerHasMove() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Boolean Net_PlayerHasMove for UI;
	
	if(!Net_PlayerHasMove) {
		if(G_LastPlayerPosition[0] != -1) {
			declare PosX = ML::NearestInteger(Players[G_ThePlayerId].Position.X);
			declare PosY = ML::NearestInteger(Players[G_ThePlayerId].Position.Y);
			declare PosZ = ML::NearestInteger(Players[G_ThePlayerId].Position.Z);

			if(G_LastPlayerPosition[0] != PosX || G_LastPlayerPosition[1] != PosY || G_LastPlayerPosition[2] != PosZ) {
				Net_PlayerHasMove = True;
			}
		} else {
			G_LastPlayerPosition[0] = ML::NearestInteger(Players[G_ThePlayerId].Position.X);
			G_LastPlayerPosition[1] = ML::NearestInteger(Players[G_ThePlayerId].Position.Y);
			G_LastPlayerPosition[2] = ML::NearestInteger(Players[G_ThePlayerId].Position.Z);
		}
	}
}

Void Unload() {
	
}

Void Load(Ident _ThePlayerId) {
	G_ThePlayerId = _ThePlayerId;
	
	Private_CreateLayerMainUI();
}