/** 
 *	In-Game UI library
 */
#Include "TextLib" as TL
	
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"						as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"							as Font
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIOnlinePopupBuilder.Script.txt"		as UIPopupBuilder
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Nadeo/UIPadButtons.Script.txt"									as UIButtons

#Const Version		"2015-03-02"
#Const ScriptName	"UIOnlineTimeAttack.Script.txt"

#Const IMGPATH		"file://Media/Images/TMConsole/Ingame/"

#Const C_MAXCOUNT_SCORESTABLE 			10
#Const MODE_COLORID_MULTIPLAYER			1

#Const IMG_BG_LINE							"menu-bg-1.dds"
#Const IMG_BG								"slot-medium-bg.dds"
#Const IMG_FG								"slot-medium-fg.dds"
#Const C_RACE_MAPNAME_SIZE_X 			70.
#Const C_RACE_MAPNAME_SIZE_MEDAL		18
#Const C_RATIO 							12.962
#Const C_RATIO_1CIRCLE					0.06666666667
#Const C_MARGINS_GLOBALRATIO			1.
#Const C_LabelRankDecalY				7
#Const C_LabelBigRankDecalY				34
#Const C_TimeScrollRanking				1000
#Const C_REWARDS_TEXT_INTERVAL			-0.13
#Const C_RACE_MAPNAME_POSX_MEDAL		-1
#Const C_RACE_MAPNAME_TEXTSIZE_NAME		7

//////////////////////////////////////////
// ALIGN

#Const vT 	""" valign="top" """
#Const vC 	""" valign="center" """
#Const hC 	""" halign="center" """
#Const hR 	""" halign="right" """


Void ConstructRemainingTimeUI() {
	declare FontNumberBig 			= Font::GetFontName("NumberBig");
	
	
	declare MapNameSizeX 			= C_RACE_MAPNAME_SIZE_X + C_RACE_MAPNAME_SIZE_X * C_RATIO_1CIRCLE+0.2;
	declare MapNameSizeY 			= C_RACE_MAPNAME_SIZE_X / C_RATIO;
	declare MapMarginRatio 			= 1.  * C_MARGINS_GLOBALRATIO;
	declare MapNameMarginY			= 9.  * MapMarginRatio;
	declare QuadStyleBg				= """sizen="{{{MapNameSizeX}}} {{{MapNameSizeY}}}" image="{{{IMGPATH^IMG_BG_LINE}}}" """;
	
	declare MapNameSeparator 		= MapNameSizeY * 0.095;
	declare MapNameSizeXElement		= C_RACE_MAPNAME_SIZE_X * C_RATIO_1CIRCLE * 12.;
	declare MapNameSizeYElement			= MapNameSizeY * 2. - MapNameSeparator;
	
	declare QuadStyleBgRight			= """ {{{QuadStyleBg}}} {{{hR}}} """;
	declare TimeStyle					= """ textsize="{{{C_RACE_MAPNAME_TEXTSIZE_NAME}}}"  textcolor="{{{Colors::GetColorXml("White")}}}"	{{{vC}}} 	 """;
	
	/*
	declare Text ML = 
	"""
	
	<frame id="Frame_TimeAttackUI"posn="127 -20">
		<frame posn="-127 75">
			<label 	
				id="Label_RemainingTime" 
				hidden="0"	
				posn="3 25 1.25" 
				halign="center"
				valign="center"
				textfont="{{{FontNumberBig}}}" 
				textcolor="{{{ColorXmlWhite}}}" 
				textsize="10."
				scale="0.95" 
				text="40" 
			/>
		</frame>
		
		<frame posn="-0 0">
			<label 
				id="Label_Position" 				
				posn="-10 2 1.25" 
				textfont="{{{FontMain}}}" 
				textcolor="{{{ColorXmlWhite}}}" 
				textsize="25" 
				scale="0.95" 
				text="/16" 
			/>
			
			<label 
				id="Label_Slash" 				
				posn="3 -10.5 1.25" 
				textfont="{{{FontMain}}}" 
				textcolor="{{{ColorXmlWhite}}}" 
				textsize="7.5"
				scale="0.95" 
				text="/"
				opacity="0.7"
			/>
			<label 
				id="Label_MaxPlayer" 				
				posn="6 -10.5 1.25" 
				textfont="{{{FontMain}}}" 
				textcolor="{{{ColorXmlWhite}}}" 
				textsize="7.5"
				scale="0.95" 
				text="16" 
			/>
		</frame>
	</frame>
	
	<script ><!--
		#Include "TextLib" as TL
		#Include "MathLib" as ML
		
		main() {
			declare Frame_TimeAttackUI 				<=> (Page.MainFrame.GetFirstChild("Frame_TimeAttackUI")				as CMlFrame);
			declare Label_RemainingTime 			<=> (Page.MainFrame.GetFirstChild("Label_RemainingTime")			as CMlLabel);
			declare Label_Position 					<=> (Page.MainFrame.GetFirstChild("Label_Position")					as CMlLabel);
			declare Label_MaxPlayer 				<=> (Page.MainFrame.GetFirstChild("Label_MaxPlayer")				as CMlLabel);
			declare Label_Slash 					<=> (Page.MainFrame.GetFirstChild("Label_Slash")					as CMlLabel);
			
			Label_RemainingTime.Blend	= CMlLabel ::EBlendMode::Add;
			Label_Position.Blend 		= CMlLabel ::EBlendMode::Add;
			Label_MaxPlayer.Blend 		= CMlLabel::EBlendMode::Add;
			Label_Slash.Blend 			= CMlLabel::EBlendMode::Add;
			
			Label_Position.Opacity 		= 0.8;
			Label_MaxPlayer.Opacity 	= 0.8;
			Label_Slash.Opacity 		= 0.8;
			Label_RemainingTime.Opacity = 0.8;
			
			declare 			Integer 	NbMaxPlayer 					for Page;
			declare netread 	Integer 	Net_CutOffTimeLimit 			for UI;
			declare netwrite 	Boolean 	Net_IsPauseMenuEnabled 			for UI;
			
			declare Integer CurPosition;
			declare Integer PrePosition = -1;
			declare Boolean PreIsPauseMenuEnabled = False;

			while(True) {
				yield;
				if(GUIPlayer == Null) continue;
				
				declare IsRunning 				= GUIPlayer.RaceState == CTmMlPlayer::ERaceState::Running;
				Frame_TimeAttackUI.Visible 		= IsRunning;
				
				if(PreIsPauseMenuEnabled != Net_IsPauseMenuEnabled) {
					Frame_TimeAttackUI.Visible = !Net_IsPauseMenuEnabled;
					PreIsPauseMenuEnabled = Net_IsPauseMenuEnabled;
				}

				if (Net_CutOffTimeLimit > GameTime)
					Label_RemainingTime.Value = TL::TimeToText(Net_CutOffTimeLimit - GameTime);
				else
					Label_RemainingTime.Value = "0:00";
				foreach(IndexScore => Score in Scores) {
					if(Score.User.Login == GUIPlayer.Login) {
						CurPosition = IndexScore;
					}
				}
				
				if(PrePosition != CurPosition) {
					Label_Position.Value = CurPosition+1^"";
					PrePosition = CurPosition;
				}
				
			}
		}
	--></script> 
	""";
	*/
	
	declare Text ML = """
		<frame id="Frame_TimeAttackUI"posn="{{{160}}} {{{90 - MapNameMarginY - MapNameSizeY*3.}}}">
			<quad id="Quad_Bg1" 		posn="0. 0. 				   31." 	{{{QuadStyleBgRight}}} />
			<quad id="Quad_Bg2" 		posn="0. {{{-MapNameSizeY}}}   31." 	{{{QuadStyleBgRight}}} />
			<quad 	posn="-10. {{{-MapNameSeparator}}}	32."  	sizen="{{{MapNameSizeXElement+9}}} {{{MapNameSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
			<label 	id="Label_RemainingTime" posn="-45. -5.	32.5" textfont="{{{FontNumberBig}}}" 	{{{TimeStyle}}} {{{hC}}}  text="20"  />	
			<quad 	posn="-10. {{{-MapNameSeparator}}}	33."  	sizen="{{{MapNameSizeXElement+9}}} {{{MapNameSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_FG}}}" />
			
		</frame>
		
	<script ><!--
		#Include "TextLib" as TL
		#Include "MathLib" as ML
		
		main() {
			declare Label_RemainingTime 			<=> (Page.MainFrame.GetFirstChild("Label_RemainingTime")			as CMlLabel);
			
			declare netread 	Integer 	Net_CutOffTimeLimit 			for UI;
			
			while(True) {
				yield;
						
				if (Net_CutOffTimeLimit > GameTime)
					Label_RemainingTime.Value = TL::TimeToText(Net_CutOffTimeLimit - GameTime);
				else
					Label_RemainingTime.Value = "0:00";
				
			}
		}
	--></script>	
	""";
	
	Layers::Create("TimeAttackUI", ML);
	Layers::Attach("TimeAttackUI");
	declare Layer <=> Layers::Get("TimeAttackUI");
	Layer.InOutAnimation = CUILayer::EUILayerAnimation::RightFast;
}

Void ShowRemainingTime(Boolean _Show) {
	Layers::SetVisibility("TimeAttackUI", _Show);
}

Void ConstructScoresTable() {
	
	// SCORES TABLE	
	UIButtons::Load();	
	declare IMGSelect 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare TXTSelect 	= _("Select");
	declare TXTPlay 	= _("Play");
	declare TXTGo 		= _("let's go !");
	declare TXTCancel 	= _("Back");
	
	declare netwrite Text[] 	Net_ScoresTableInputs 					for UI;
	declare netwrite Text 		Net_ScoresTableTitle 					for UI;
	declare netwrite Text 		Net_ScoresTableSubtitle					for UI;
	declare netwrite Integer[] 	Net_ScoresTableRanks 					for UI;
	declare netwrite Text[] 	Net_ScoresTableName 					for UI;
	declare netwrite Integer[] 	Net_ScoresTableTime 					for UI;
	declare netwrite Integer[] 	Net_ScoresTableMedal 					for UI;
	declare netwrite Integer 	Net_ScoresTableSelectedPlayer 			for UI;
	Net_ScoresTableInputs 	= [IMGSelect, TXTPlay];
	
	declare InputUpdate					= "Net_ScoresTableInputs";
	declare RanksParam					= "Small Medal";
	declare RanksUpdateValues 			= "Net_ScoresTableRanks Net_ScoresTableName Net_ScoresTableTime Net_ScoresTableMedal Net_ScoresTableSelectedPlayer";
	declare ColorMode 					= Colors::GetModeColorName(MODE_COLORID_MULTIPLAYER);
	declare TitleParam					= "Switch ColorText "^ColorMode;
	
	declare Vec3 		LayerPos 		= <-85., 5., 30.>;
	declare Text[][] 	LayersContent;
	LayersContent.add(["Title", 	"ScoreTable", 	_("Time Attack"), 	"2",	"", TitleParam, "Net_ScoresTableTitle Net_ScoresTableSubtitle"]);
	LayersContent.add(["Space", 	"", 		  	"", 					"1",	"", "", ""]);
	for(I, 0, C_MAXCOUNT_SCORESTABLE-1) LayersContent.add(["Rank", "Player"^I, "-", "1", "", RanksParam, RanksUpdateValues]);
	LayersContent.add(["Space", 	"",		 	"", 					"1",	"", "", ""]);
	LayersContent.add(["Input", 	"Input", 		"", 					"1",	"", "", InputUpdate]);
	
	declare LayerBeforeWhile = 
	""" 
	""";
	
	UIPopupBuilder::CreateLayer(
		"ScoresTable",
		"ScoresTable",
		LayerPos,
		LayersContent,
		LayerBeforeWhile
	);
	
}

Void Loop() {
	declare netread Integer Net_CutOffTimeLimit for UI;
	if(Net_CutOffTimeLimit < Playground.GameTime) {
		ShowRemainingTime(False);
	} else {
		ShowRemainingTime(True);
	}
}

// Void ConstructMainMenu() {
	
	// declare Text 		LayerName		= "MainMenu";
	// declare Vec3 		LayerPos		= <-85., 15., 33.>;
	// declare Text[][] 	LayerContent 	= 
	// [
		// ["Title", 	"Pause", 		_("Menu"), 					"2",	"", "", "Net_MenuTitle Net_MenuSubtitle"], 
		// ["Space", 	"", 			  "", 						"1",	"", "", ""],
		// ["Button", 	"Resume", 			_("Resume"), 			"1",	"CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);", "", ""],
		// ["Button", 	"ManageFavorite", 	_("Manage favorite"), 		"1",	"Net_PlayerWantsToManageFavoriteUpdate += 1; CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);", "", ""],
		// ["Button", 	"LeaveRoom", 		_("Leave Room"), 			"1",	"Net_PlayerWantsToQuitUpdate += 1; CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);", "", ""],
		// ["Space", 	"", 		  	"", 							"1",	"", "", ""],
		// ["Input", 	"Input", 		"", 							"1",	"", "", "Net_MenuMainInputs"]
	// ];
	
	// declare Text LayerBeforeWhile = 
	// """
		// declare netwrite Integer 	Net_PlayerWantsToQuitUpdate 			for UI;
		// declare netwrite Integer 	Net_PlayerWantsToManageFavoriteUpdate 	for UI;
	// """;
	
	// UIPopupBuilder::CreateLayer(
		// LayerName, 
		// "IngameMenu",
		// LayerPos,
		// LayerContent,
		// LayerBeforeWhile
	// );
// }

Void Load()
{
	// ConstructScoresTable();
	// ConstructMainMenu();
	// ConstructTimeAttackUI();
}

/*
Boolean IsSpectatePlayer() {
	declare netwrite Integer	Net_ScoresTableSpectateUpdate for UI;
	declare   		Integer		Pre_ScoresTableSpectateUpdate for UI;
	if(Pre_ScoresTableSpectateUpdate != Net_ScoresTableSpectateUpdate) {
		Pre_ScoresTableSpectateUpdate = Net_ScoresTableSpectateUpdate;
		return True;
	}
	return False;
}

Boolean IsShowProfilePlayer() {
	declare netwrite Integer	Net_ScoresTableSpectateUpdate for UI;
	declare   		Integer		Pre_ScoresTableSpectateUpdate for UI;
	if(Pre_ScoresTableSpectateUpdate != Net_ScoresTableSpectateUpdate) {
		Pre_ScoresTableSpectateUpdate = Net_ScoresTableSpectateUpdate;
		return True;
	}
	return False;
}

Text GetSpectatePlayer() {
	declare netwrite Text Net_ScoresTableSpectatePlayerLogin for UI;
	return Net_ScoresTableSpectatePlayerLogin;
}

Text GetProfilePlayer() {
	declare netwrite Text Net_ScoresTableProfilePlayerLogin for UI;
	return Net_ScoresTableProfilePlayerLogin;
}

Void ShowScoresTable(Boolean _Show) {
	Layers::SetVisibility("ScoresTable", _Show);
}
*/