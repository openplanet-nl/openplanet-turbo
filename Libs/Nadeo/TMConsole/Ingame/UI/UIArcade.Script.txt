/** 
 *	In-Game UI library
 */
 

#Include "TextLib" as TL
	
#Include "Libs/Nadeo/Layers2.Script.txt" 							as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"				as Font
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIPopupBuilder.Script.txt"	as UIPopupBuilder
#Include "Libs/Nadeo/TMConsole/Ingame/Ghosts.Script.txt" 						as Ghosts
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 					as Colors
#Include "Libs/Nadeo/UIPadButtons.Script.txt"						as UIButtons
// #Include "Libs/Nadeo/UIPadButtons.Script.txt"						as UIButtons
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIButtonNamesPopup.Script.txt"			as UIButtonNamesPopup

#Const Version		"2016-01-20"
#Const ScriptName	"UIArcade.Script.txt"

#Const IMGPATH							"file://Media/Images/TMConsole/Ingame/"
#Const IMG_ARCADE						"mode-arcade.png"
#Const IMG_INSERTCOIN					"insert-coin.dds"


//////////////////////////////////////////
// NON-SETTINGS CONST
#Const C_LAYERNAME_CLEAROUT 			"Layer_ClearOut"
#Const C_LAYERNAME_CREDITS 				"Layer_CreditsStatus"
#Const C_LAYERNAME_PGTIMEOUT			"Layer_PostGameTimeOut"
#Const MODE_COLORID_MULTIPLAYER			1
#Const C_CLEAROUT_YES					1
#Const C_CLEAROUT_NO					0


declare Text 	G_FontMain;
declare Text 	G_FontChrono;

Text Private_GetCreditsStatus() 
{	
	
	declare SizeX = 50.;
	declare MarginX = 0;
	declare MarginY = 10;
	
	declare Text ML =
	
	"""
	
	<frame id="Frame_CreditsStatus" posn="{{{-155+SizeX/2. - MarginX}}} {{{-90 + MarginY}}} 6." hidden="0">
	
		<quad id="Quad_Credits" 
		posn="0 0 .1" 
		sizen="{{{SizeX}}} {{{SizeX/2.}}}" 
		valign="bottom" 
		halign="center" 
		bgcolor="0f0" 
		image="{{{IMGPATH^IMG_INSERTCOIN}}}"
		hidden="1"
		/>	
		
		<label id="Label_Credits" 
		posn="0 0 .2"
		sizen="320 180" 
		valign="top" 
		halign="center" 
		textfont="{{{G_FontMain}}}"
		textsize="5"
		text="CREDITS: 8"
		textprefix="$t"
		/>
		
	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	#Include "AnimLib" as AL
	
	#Const DebugName  "L_CreditsStatus"
	
	#Const C_AnimScale_Easing 	 "ElasticOut"
	#Const C_AnimScale_Duration  500.
	#Const C_AnimScale_Strength  0.5
			
				

	
	
	main() 
	{
		declare	netread Integer Net_Credits_Count	for UI;
		
		// declare Prev_Credits_Count 	= Net_Credits_Count;
		declare Prev_Credits_Count 	= 0;
		// declare Prev_Credits_Count 	= -1;
		declare Prev_PageIsVisible 	= PageIsVisible;
		declare TriggerScale 		= Now;
		
		declare Frame_CreditsStatus	<=> (Page.MainFrame.GetFirstChild("Frame_CreditsStatus") 	as CMlFrame);
		declare Label_Credits 		<=> (Page.MainFrame.GetFirstChild("Label_Credits") 			as CMlLabel);
		
		while(True) 
		{
			yield;
			
			if(LocalUser.StereoDisplayMode == CUser::EStereoDisplayMode::None) {
				Frame_CreditsStatus.Visible = True;
				
				if(Prev_PageIsVisible != PageIsVisible) {
					Prev_PageIsVisible 	= PageIsVisible;
					TriggerScale 		= Now;
				}
				
				if(Prev_Credits_Count != Net_Credits_Count) {
					Prev_Credits_Count 	= Net_Credits_Count;
					TriggerScale		= Now;
					Label_Credits.Value = TL::Compose(_("Credits: %1"), ""^Net_Credits_Count);
				}
				
				Frame_CreditsStatus.Scale = AL::Ease(
					C_AnimScale_Easing, 
					Now-TriggerScale*1., 
					1.-C_AnimScale_Strength, 
					C_AnimScale_Strength, 
					C_AnimScale_Duration
				);
			} else {
				Frame_CreditsStatus.Visible = False;
			}
		}
}
	--></script>
	""";
	
	return ML;
}

Text Private_FinalScreensTimeOutTimer() 
{
	// declare IMGSelect 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare Color 			=  Colors::GetColorXml("Red");
	
	declare Text ML =
	"""
	
	<frame id="Frame_TimeOutTimer" posn="60. 0. 0." hidden="0">
		<label id="Label_Title" 
			posn="0. 0. .2"
			valign="center"
			halign="center"
			textfont="{{{G_FontChrono}}}"
			textcolor="{{{Color}}}"
			textsize="10"
		/>
	</frame>
	
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL
	
	#Const DebugName  "L_PressToRestart"
	
	main() 
	{
		declare Frame_TimeOutTimer 		<=> (Page.MainFrame.GetFirstChild("Frame_TimeOutTimer") 	as CMlFrame);
		declare Label_Title 			<=> (Page.MainFrame.GetFirstChild("Label_Title") 			as CMlLabel);
		
		
		declare netread Integer Net_PostGameTimeOutTimer for UI;
		declare Boolean Pre_PageIsVisible = False;
		Label_Title.Value = _("");
		
		
		while(True) 
		{
			yield;
			
			if(Pre_PageIsVisible != PageIsVisible) {
				Pre_PageIsVisible = PageIsVisible;
				if(!PageIsVisible) Frame_TimeOutTimer.Hide();
				while(PageIsVisible && Net_PostGameTimeOutTimer <= 15000) {
					yield;
				}
			}

			if(Pre_PageIsVisible) {
				if(Net_PostGameTimeOutTimer <= 10000) {
					Frame_TimeOutTimer.Show();
				}
				
				if(Net_PostGameTimeOutTimer >= 0 && Net_PostGameTimeOutTimer <= 10000) {
					Label_Title.Visible 	= True;
					declare Opacity 		= 0.5 + 0.5 * ML::Sin(Now*0.02);
					Label_Title.Opacity 	= Opacity;
					Label_Title.Value 		= TL::TimeToText(Net_PostGameTimeOutTimer);
				} else if(Net_PostGameTimeOutTimer <= 10000) {
					Label_Title.Opacity 	= 1.0;
					Label_Title.Value 		= TL::TimeToText(0);
				}
			}
		}
	}
	--></script>
	""";
	
	return ML;
}

Void ConstructCameraReInit() {
	declare Text MLText;

	MLText ^= """
	<script><!--
		#Include "MathLib" as ML
		
		main()
		{
			declare netread Integer Net_NewPlayerUpdate for UI;
			declare Integer Pre_NewPlayerUpdate;
			
			while(True)
			{
				yield;
				if(GUIPlayer == Null) continue;
				
				if(Pre_NewPlayerUpdate != Net_NewPlayerUpdate) {
					CurPlayerCamera = 5;
					Pre_NewPlayerUpdate = Net_NewPlayerUpdate;
				}
			}
		}
	--></script>

	""";

	Layers::Create("Arcade_Camera", MLText);
	Layers::Attach("Arcade_Camera");
}

Void ReInitCamera() {
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netwrite Integer Net_NewPlayerUpdate for UI;
	Net_NewPlayerUpdate += 1;
}

Void SetVisibilityCredit(Boolean _Visible) 
{
	Layers::SetVisibility(C_LAYERNAME_CREDITS, _Visible);
}

Void SetVisibilityPGTimeOut(Boolean _Visible) 
{
	Layers::SetVisibility(C_LAYERNAME_PGTIMEOUT, _Visible);
}

Boolean GetVisibilityPGTimeOut() {
	return Layers::IsVisible(C_LAYERNAME_PGTIMEOUT);
}

Void SetVisibilityClearOutChoice(Boolean _Visible) {
	Layers::SetVisibility(C_LAYERNAME_CLEAROUT, _Visible);
}

Integer GetClearOutChoice() {
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netread Integer Net_ClearOutChoice for UI;
	return Net_ClearOutChoice;
}

Boolean PlayerWantsToEmptyScoreTable() 
{
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netread Integer 	Net_PlayerWantsToEmptySTUpdate 		for UI;
	declare netwrite Integer 	Pre_PlayerWantsToEmptySTUpdate 		for UI;
	if(Pre_PlayerWantsToEmptySTUpdate != Net_PlayerWantsToEmptySTUpdate) {
		Pre_PlayerWantsToEmptySTUpdate = Net_PlayerWantsToEmptySTUpdate;
		return True;
	}
	return False;
}

Void ConstructConfirmClearOutPopup() {
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netwrite Text 		Net_ClearOutTitle				for UI;
	declare netwrite Text 		Net_ClearOutSubtitle			for UI;
	declare netwrite Text[] 	Net_ClearOutInputs				for UI;
	
	declare IMGSelect 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare TXTSelect 		= UIButtonNamesPopup::GetSelectText();

	Net_ClearOutInputs 		= [IMGSelect, TXTSelect];
	Net_ClearOutTitle 		= IMGPATH^IMG_ARCADE;
	// Net_ClearOutSubtitle 	= _("Clear out scores");
	
	declare ColorMode 		= Colors::GetModeColorName(MODE_COLORID_MULTIPLAYER);
	declare TitleParam		= "ColorText "^ColorMode;
	declare Vec3 LayerPosition = <-85., 15., 30.>;
	declare Text[][] LayersContent;
	LayersContent.clear();
	LayersContent = 
	[
		["Title",  "Title", 	IMGPATH^IMG_ARCADE, 							"2",	"", TitleParam, "Net_ClearOutTitle Net_ClearOutSubtitle"],
		["Space",  "", 		  	"", 							"1",	"", "", ""],
		//L16N In a popup asking the player if he wants to clear out the scores registered in the table score
		["Label",  "Results1",	_("Clear out scores?"), 			"1",	"", "", ""],
		["Button", "Yes", 		UIButtonNamesPopup::GetYesText(), "1",					"Net_ClearOutChoice = "^C_CLEAROUT_YES^";", "", ""],
		["Button", "No", 		UIButtonNamesPopup::GetNoText(),  "1",					"Net_ClearOutChoice = "^C_CLEAROUT_NO^";", "", ""],
		["Space",  "", 		  	"", 							"1",	"", "", ""],
		["Input",  "Input", 		"", 							"1",	"", "", "Net_ClearOutInputs"]
	];
	
	declare LayerBeforeWhile = 
	""" 
		declare netwrite Integer Net_ClearOutChoice 	for UI;
	""";
	
	declare LayerWhenShown = """ 
		Net_ClearOutChoice = -1;
	""";
	
	UIPopupBuilder::CreateLayer(
		C_LAYERNAME_CLEAROUT, 
		LayerPosition,
		LayersContent, 
		LayerBeforeWhile, 
		LayerWhenShown,
		""
	);
	UIPopupBuilder::SetDefaultFocusedButton(C_LAYERNAME_CLEAROUT, 1);
	SetVisibilityClearOutChoice(False);
}

Void Load(Boolean _IsWearingHmd, Boolean _IsTrackUgc) 
{
	// log(S_TimeLimit);
	////////////////////////////////////////
	// INITS                                
	ConstructCameraReInit();
	UIButtons::Load();
	G_FontMain 					= Font::GetFontName("Main");
	declare IMGSelect 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare IMGCancel 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Cancel);
	declare TXTSelect 	= UIButtonNamesPopup::GetSelectText();
	declare TXTCancel 	= UIButtonNamesPopup::GetBackText();
	foreach(Player in AllPlayers) 
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare netwrite Text[] 	Net_PauseMenuInputs for UI;
		declare netwrite Boolean 	Net_IsTrackUgc 		for UI;
		declare netwrite Text[]		Net_PauseMenuInputsPc for UI;
		
		Net_PauseMenuInputs 	=  [IMGSelect, TXTSelect, IMGCancel, TXTCancel];
		Net_IsTrackUgc			= _IsTrackUgc;
	}
	G_FontChrono 				= Font::GetFontName("Chrono");
	////////////////////////////////////////
	// CREATE PAUSE LAYER               
	declare ColorMode 	= Colors::GetModeColorName(MODE_COLORID_MULTIPLAYER);
	declare TitleParam	= "ColorText "^ColorMode;
	
	declare Vec3 LayerPosition = <-85., 15., 33.>;
	
	declare ColorGrey			= Colors::GetColor("Grey");
	declare ColorWhite			= Colors::GetColor("White");
	
	declare Text[][] LayerContent;
	LayerContent.add(["Title", 	"Pause", 	IMGPATH^IMG_ARCADE, 	"2",	"", TitleParam, ""]);
	LayerContent.add(["Space", 	"", 		  "", 			"1",	"", "", ""]);
	LayerContent.add(["Button", 	"Resume", 	_("Resume"), 	"1",	"CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);", "", ""]);
	LayerContent.add(["Button", 	"GiveUp", 	UIButtonNamesPopup::GetGiveUpText(), 	"1",	
				""" 
					if(InputPlayer.RaceStartTime != 0) Net_PlayerHasGiveUpUpdate += 1;
					CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
					LibTMC_ScoresTable_PadsPlaying.clear();
				""", 
				"", ""]);
	LayerContent.add(["Button", 	"EmptyScoreTable", 	_("Clear out the scores"), "1",	"Net_PlayerWantsToEmptySTUpdate += 1; CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);", "", ""]);
	if(_IsTrackUgc) {
		LayerContent.add(["Button", 	"ManageFavorite", 	_("Favorite and report"), 		"1",	"Net_PlayerWantsToManageFavoriteUpdate += 1; CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);", "", ""]);
	}
	LayerContent.add(["Button", 	"Quit", 			_("Quit"), 					"1",	"CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);", "", ""]);
	LayerContent.add(["Space", 	"", 		  "", 			"1",				"", "", ""]);
	LayerContent.add(["Input", 	"Input", 	  "", 			"1",				"", "", "Net_PauseMenuInputs"]);

	declare IsSavingGhosts = Ghosts::GetSavingStatusVariableName();
	
	UIPopupBuilder::CreateLayer(
		"Menu", 
		"IngameMenu", 
		LayerPosition,
		LayerContent,
		"", // FUNCTIONS
		
		"""
		declare netwrite Integer 	Net_PlayerHasGiveUpUpdate 			for UI;
		declare netwrite Integer 	Net_PlayerWantsToEmptySTUpdate 		for UI;
		declare netwrite Integer 	Net_PlayerWantsToQuitUpdate 		for UI;
		declare netwrite Integer[] 	LibTMC_ScoresTable_PadsPlaying 		for UI;
		declare netwrite Integer 	Net_PlayerWantsToManageFavoriteUpdate 		for UI;
		declare netwrite Boolean 	Net_IsPlayerConnectedMasterServer 	for UI;
		declare netread Integer 	Net_GamePhase 						for UI;
		// declare netread Integer 	Net_PlayStep 						for UI;
		declare netread Boolean 	Net_ScoresTableOn 					for UI;
		declare netread Boolean 	Net_IsHandsOn 						for UI;
		declare netread Boolean 	Net_IsPairingSequence 				for UI;
		declare netread Boolean Net_IsUgcTrack for UI;

		{{{Ghosts::GetSavingStatusVariableDeclaration()}}}
		
		declare Integer CheatHoldTimer1 = 0;
		declare Integer CheatHoldTimer2 = 0;
		declare Integer CheatHoldTimer3	= 0;
		declare Integer HoldTimeToCheat = 1000;
		declare CMlEvent::EMenuNavAction CheatCodeButton1 = CMlEvent::EMenuNavAction::PageUp;
		declare CMlEvent::EMenuNavAction CheatCodeButton2 = CMlEvent::EMenuNavAction::PageDown;
		declare CMlEvent::EMenuNavAction CheatCodeButton3 = CMlEvent::EMenuNavAction::Action2;

		""", // BEFORE WHILE
		
		"" , // _CodeWhenShown
		
		"""
			if (Button_Quit.Visible == {{{IsSavingGhosts}}}) {
				Button_Quit.Visible = !{{{IsSavingGhosts}}};

				declare Label_Quit <=> (Page.MainFrame.GetFirstChild("Label_Quit") as CMlLabel);
				if (Button_Quit.Visible) {
					Label_Quit.TextColor = {{{ColorWhite}}};
				} else {
					Label_Quit.TextColor = {{{ColorGrey}}};
				}
			}

			if(Net_IsUgcTrack) {
				declare CMlLabel 	Label_ManageFavorite 				<=> (Page.MainFrame.GetFirstChild("Label_ManageFavorite") as CMlLabel);
				declare CMlQuad 	Button_ManageFavorite 				<=> (Page.MainFrame.GetFirstChild("Button_ManageFavorite") as CMlQuad);
				if(Net_IsPlayerConnectedMasterServer && !Net_IsPairingSequence) {
					Label_ManageFavorite.TextColor = {{{ColorWhite}}};
					Button_ManageFavorite.Show();
				} else {
					Label_ManageFavorite.TextColor = {{{ColorGrey}}};
					Button_ManageFavorite.Hide();
				}
			}
			declare CMlQuad 	Button_EmptyScoreTable 		<=> (Page.MainFrame.GetFirstChild("Button_EmptyScoreTable") as CMlQuad);
			declare CMlLabel 	Label_EmptyScoreTable 		<=> (Page.MainFrame.GetFirstChild("Label_EmptyScoreTable") as CMlLabel);
			if(Net_GamePhase == -1 && Net_ScoresTableOn && !Net_IsHandsOn) {
				Button_EmptyScoreTable.Show();
				Label_EmptyScoreTable.TextColor = {{{ColorWhite}}};
			} else {
				Button_EmptyScoreTable.Hide();
				Label_EmptyScoreTable.TextColor = {{{ColorGrey}}};
			}
			
			declare CMlQuad 	Button_GiveUp 		<=> (Page.MainFrame.GetFirstChild("Button_GiveUp") as CMlQuad);
			declare CMlLabel 	Label_GiveUp 		<=> (Page.MainFrame.GetFirstChild("Label_GiveUp") as CMlLabel);
			declare netread Boolean Net_IsPairingSequence for UI;
			if(Net_GamePhase == 1 && !Net_IsPairingSequence) {
				Button_GiveUp.Show();
				Label_GiveUp.TextColor = {{{ColorWhite}}};
			} else {
				Button_GiveUp.Hide();
				Label_GiveUp.TextColor = {{{ColorGrey}}};
			}
			
			foreach(Event in PendingEvents) {
			
			if(Event.Type == CMlEvent::Type::MenuNavigation) {
				
				if(Event.MenuNavAction != CheatCodeButton1 && Event.MenuNavAction != CheatCodeButton2 && Event.MenuNavAction != CheatCodeButton3) {
					CheatHoldTimer1 = 0;
					CheatHoldTimer2 = 0;
					CheatHoldTimer3 = 0;
				}
				
				// check cheat code 1
				if(Event.MenuNavAction == CheatCodeButton1) {
					CheatHoldTimer1 += Period;
				}
				
				// check cheat code 2
				if(Event.MenuNavAction == CheatCodeButton2) {
					CheatHoldTimer2 += Period;
				}
				
				// check cheat code 3
				if(Event.MenuNavAction == CheatCodeButton3) {
					CheatHoldTimer3 += Period;
				}
				
				// log(CheatHoldTimer1^" "^CheatHoldTimer2^" "^CheatHoldTimer3);
				
				if(CheatHoldTimer1 > HoldTimeToCheat && CheatHoldTimer2 > HoldTimeToCheat && CheatHoldTimer3 > HoldTimeToCheat) {
					CheatHoldTimer1 = 0;
					CheatHoldTimer2 = 0;
					CheatHoldTimer3 = 0;
					declare netwrite Integer Net_CheatCodeNow for UI;
					Net_CheatCodeNow = Now;
				}
			}
		}
		""" // _CodeInLoop
	);
	
	
	ConstructConfirmClearOutPopup();
	////////////////////////////////////////
	// CREATE LAYERS                        
	Layers::Create(C_LAYERNAME_CREDITS, Private_GetCreditsStatus());
	Layers::Attach(C_LAYERNAME_CREDITS);
	SetVisibilityCredit(False); 
	
	Layers::Create(C_LAYERNAME_PGTIMEOUT, Private_FinalScreensTimeOutTimer());
	Layers::Attach(C_LAYERNAME_PGTIMEOUT);
	SetVisibilityPGTimeOut(False);
}