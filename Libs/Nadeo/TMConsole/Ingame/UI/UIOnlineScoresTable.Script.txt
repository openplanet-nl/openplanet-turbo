/** 
 *	In-Game UI library
 */
#Include "TextLib" as TL
	
#Include "Libs/Nadeo/Manialink2.Script.txt"  									as Manialink
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"						as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"							as Font
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Nadeo/TMConsole/Volumes.Script.txt" 								as Volumes
#Include "Libs/Nadeo/UIPadButtons.Script.txt"									as UIButtons
#Include "Libs/Nadeo/TMConsole/UIXmlBuilder.Script.txt"							as UIXmlBuilder
#Include "Libs/Nadeo/SystemText.Script.txt" 									as SystemText
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIEchelon.Script.txt"					as UIEchelon
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIBindingPadButtons.Script.txt" 		as UIBindingPadButtons

#Const Version					"2016-01-31"
#Const ScriptName				"UIOnlineFakeScoresTable.Script.txt"
#Const C_LayerName				"OnlineScoresTable"
	
#Const C_ImgBaseIngame 			"file://Media/Images/TMConsole/Ingame/"

#Const SoundPath				"file://Media/Sounds/TMConsole/"
#Const C_ImgBaseManialinks		"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgBaseEchelon			"Online/BrowseServers/echelons/"
#Const IMGOnlineStatus			"circle.dds"

#Const SoundMove	   	 		"event-focus.wav"
#Const SoundValidate 			"event-validate.wav"
#Const SoundHideMenu 			"menu-page-back.wav"
#Const SoundShowMenu			"event-menushow.wav"

#Const C_ImgOnlineMode			"mode-online-big.png"
#Const C_ImgBgSmall				"slot-small-bg.dds"
#Const C_ImgBg	   				"slot-medium-bg.dds"
#Const C_ImgFg	   				"slot-medium-fg.dds"
#Const C_ImgSpleakerOn			"speaker_on.png"
#Const C_ImgSpleakerMute		"speaker_mute.png"

#Const C_LinesMaxCount			16
#Const C_PlayersMaxCount		10

#Const AlignTl				""" valign="top" 	halign="left" """
#Const AlignTr				""" valign="top" 	halign="right" """
#Const AlignCl				""" valign="center" halign="left" """
#Const AlignCr				""" valign="center" halign="right" """
#Const AlignCc				""" valign="center" halign="center" """
#Const AlignC2r				""" valign="center2" halign="right" """
#Const CapsLock				""" textprefix="$t" """

#Const C_TextSizeSmall 		3
#Const C_TextSizeSmall2 	4
#Const C_TextSizeMedium 	5
#Const C_TextSizeBig 		13
#Const C_TextSizeVeryBig 	27

#Const C_LabelPosX 			4.5


#Const C_PosXRatio_Rank 	0.013
#Const C_PosXRatio_Flag 	0.07
#Const C_PosXRatio_Name 	0.11

#Const C_PosXRatio_Helmet 	0.6955
#Const C_PosXRatio_Online	0.8075
#Const C_PosXRatio_Speak 	0.8495

#Const C_PosXRatio_DD 		0.8475

#Const ONLINEMODE_TIMEATTACK 	0
#Const ONLINEMODE_ROUNDS  		1
#Const ONLINEMODE_LAPS   		2
#Const ONLINEMODE_TEAM   		3
#Const ONLINEMODE_STUNT   		4

#Const ONLINEPOINTS_TIME  		0
#Const ONLINEPOINTS_POINTS  	1
#Const ONLINEPOINTS_CP   		2

Void Load()
{
	//log(Now^">CONSTRUCT FakeScores TABLE");
	SystemText::Load();
	UIButtons::Load();
	
	declare IMGSelect 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare IMGAction1 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action1);
	declare IMGAction2 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action2);
	declare IMGCancel 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Cancel);
	// declare IMGDown 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Down);
	
	declare IMGLeftStick 	= UIButtons::GetImage("LeftStick");
	declare IMGDown 		= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Down);
	
	
	declare TXTSelect 				= _("Play");
	declare TXTAction1 				= _("Spectate");
	declare TXTAction2 				= SystemText::GetShowProfileTextForInputCard();
	//L16N. Infinitive. Mute player in voice chat in FakeScores table
	declare TXTAction3 				= _("Mute");
	//L16N. Infinitive. Unmute player in voice chat in FakeScores table
	declare TXTAction4 				= _("Unmute");
	declare TXTCancel 				= _("Close");
	declare TXTMenu					= _("Browse");
	
	declare ColorXmlBlack 			= Colors::GetColorXml("Black");
	declare ColorXmlRed 			= Colors::GetColorXml("Red");
	declare ColorXmlWhite 			= Colors::GetColorXml("White");
	
	declare ColorRed 				= Colors::GetColor("Red");
	declare FontMain 				= Font::GetFontName("Main");
	declare FontMainSmall2 			= Font::GetFontName("MainSmall2");
	declare FontTitle 				= Font::GetFontName("Title");
	
	declare ItemSizeX 				= UIXmlBuilder::GetSize(True).X;
	declare ItemSizeY 				= UIXmlBuilder::GetSize(True).Y;
	declare DetailsSize 			= ItemSizeY * C_PlayersMaxCount / 2.;
	declare PlayerSizeX 			= ItemSizeX * 2. - DetailsSize;
	declare LabelSizeX 				= PlayerSizeX - 2*C_LabelPosX;
	declare InputSizeX 				= 0.40 * ItemSizeX;
	declare InputSpaceX 			= InputSizeX + ItemSizeX / 15.;
	
	declare Separator 	 			= ItemSizeY * 0.095;
	declare QuadSizeY				= ItemSizeY - Separator;
	declare QuadSizeYTitle 			= 2.*ItemSizeY - Separator;
	declare PosYLabel	 			= - ((ItemSizeY - Separator )* 0.5);
	
	declare ServerNameSizeXRatio 	= 0.68;
	declare IconSizeY 				= ItemSizeY - 3.;
	declare EchelonPosX 			= LabelSizeX*C_PosXRatio_Helmet + IconSizeY + 1.5;
	
	declare InputButtonPosY	 		= PosYLabel - 0.05;
	declare InputButtonMargin 		= 1.;
	declare InputButtonSizeX		= QuadSizeY - InputButtonMargin * 0.5;
	declare InputLabelSizeX			= InputSizeX - InputButtonSizeX - InputButtonMargin * 2.;
	
	declare ML_LabelStyleMain		= """ textfont="{{{FontMain}}}" textsize="{{{C_TextSizeMedium}}}" {{{CapsLock}}}  """;
	declare ML_LabelStyleInfo		= """ textfont="{{{FontMainSmall2}}}" textsize="{{{C_TextSizeSmall2}}}" {{{CapsLock}}}  """;
	declare MirrorName				= UIBindingPadButtons::GetMirrorButton();
	
	
	declare Text[][] LayersContent = [["Custom", "", "", ""^C_LinesMaxCount, "", "Button", ""]];
	declare Text[][] LayersContent2 = [["Label", "", "", ""^C_LinesMaxCount, "", "Button", ""]];
	
	declare MLText = """
	
		
		<framemodel	id="Framemodel_Input">
			<quad 	id="Quad_Bg" 		posn="0.  										{{{-Separator}}}		.2"  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	image="{{{C_ImgBaseIngame^C_ImgBg}}}" />
			<quad 	id="Quad_Light" 	posn="0.  										{{{-Separator}}}		.2"  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	bgcolor="{{{ColorXmlRed}}}" hidden="1"/>
			<quad 	id="Quad_Input" 	posn="0.										{{{InputButtonPosY}}}	.3"  	sizen="{{{InputButtonSizeX}}} 	{{{InputButtonSizeX}}}" {{{AlignCr}}} 	 />
			<label 	id="Label_Input" 	posn="{{{-InputButtonSizeX-InputButtonMargin}}}	{{{PosYLabel}}}			.4"  	sizen="{{{InputLabelSizeX}}} 	{{{InputButtonSizeX}}}" {{{AlignC2r}}} 	textfont="{{{FontMainSmall2}}}" textsize="{{{C_TextSizeMedium}}}" textcolor="{{{ColorXmlWhite}}}" {{{CapsLock}}}/>
			<quad 	id="Quad_Fg" 		posn="0.  										{{{-Separator}}}		1."  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	image="{{{C_ImgBaseIngame^C_ImgFg}}}" />
			
		</framemodel>

		<framemodel	id="Framemodel_Player" >
			<quad
				{{{AlignTl}}}
				posn="0 {{{-Separator}}} 1.15"
				sizen="{{{PlayerSizeX}}} {{{QuadSizeY}}}"
				image="{{{C_ImgBaseIngame^C_ImgBgSmall}}}"
			/>

			<quad id="Button_Bg"
				{{{AlignTl}}}
				posn="0. {{{-Separator}}} 1.2"
				sizen="{{{PlayerSizeX}}} 	{{{QuadSizeY}}}"
				bgcolor="{{{ColorXmlRed}}}"
				scriptevents="0"
			/>

			<frame posn="{{{C_LabelPosX}}} {{{PosYLabel}}}">
				<label id="Label_Rank" 		posn="{{{LabelSizeX*C_PosXRatio_Rank}}} 	0 1.25" 					{{{AlignCc}}} 	{{{ML_LabelStyleInfo}}} 						textcolor="{{{ColorXmlWhite}}}" text="20" />
				
				<quad  id="Quad_Flag"		posn="{{{LabelSizeX*C_PosXRatio_Flag}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY*1.5}}} 	{{{IconSizeY}}}" 	bgcolor="333" hidden="1"/>
				<label id="Label_Name"		posn="{{{LabelSizeX*C_PosXRatio_Name}}} 	0 1.25" sizen="92 10" 		{{{AlignCl}}} 	{{{ML_LabelStyleMain}}} 						textcolor="{{{ColorXmlWhite}}}" />
				<quad  id="Quad_Speaker"	posn="{{{LabelSizeX*C_PosXRatio_Speak}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 	{{{IconSizeY}}}" 	bgcolor="0f0" hidden="1"/>
				<quad  id="Quad_Helmet"		posn="{{{LabelSizeX*C_PosXRatio_Helmet}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 		{{{IconSizeY}}}" 	bgcolor="333" />
				<quad  id="Quad_Echelon"	posn="{{{EchelonPosX}}} 					{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 		{{{IconSizeY}}}" 	bgcolor="0f0" hidden="0" />
				<!--<quad  id="Quad_DD"			posn="{{{LabelSizeX*C_PosXRatio_DD}}} 		{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY*2.}}} 	{{{IconSizeY}}}" 	bgcolor="0f0" hidden="0" />-->
				<quad  id="Quad_Online"		posn="{{{LabelSizeX*C_PosXRatio_Online}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 		{{{IconSizeY}}}" 	bgcolor="0f0" image="{{{C_ImgBaseIngame^IMGOnlineStatus}}}" hidden="1" />
				<label id="Label_Score"		posn="{{{LabelSizeX}}} 						0 1.25" 					{{{AlignCr}}} 	{{{ML_LabelStyleInfo}}} 						textcolor="{{{ColorXmlWhite}}}" text="" />
			</frame>

			<quad
				{{{AlignTl}}}
				posn="0.  {{{-Separator}}}	2."
				sizen="{{{PlayerSizeX}}} 	{{{QuadSizeY}}}"
				image="{{{C_ImgBaseIngame^C_ImgFg}}}"
			/>
		</framemodel>
		
		<frame id="Frame_Main" posn="0. 0. 32." hidden="0">
		
		{{{UIXmlBuilder::GetXml("BgLeft", 	LayersContent, 1., <-ItemSizeX / 2., 0., 1.>)}}}
		{{{UIXmlBuilder::GetXml("BgRight", 	LayersContent, 1., < ItemSizeX / 2., 0., 1.>)}}}
		""";
		
		
		MLText ^= """
			<frame id="Frame_Title" posn="{{{-ItemSizeX}}} {{{8*ItemSizeY}}} 2.">
				<quad
					{{{AlignTl}}}
					posn="0 {{{-Separator}}} 0."
					sizen="{{{ItemSizeX*2.}}} {{{QuadSizeYTitle}}}"
					image="{{{C_ImgBaseIngame^C_ImgBgSmall}}}"
				/>

				<label id="Label_Title" 	
					{{{AlignCl}}} 	
					posn="{{{C_LabelPosX}}} 	{{{-QuadSizeY}}}	1."  
					textsize="{{{C_TextSizeBig}}}" 
					textcolor="{{{ColorXmlWhite}}}" 	
					textfont="{{{FontTitle}}}" 	
					text="{{{_("Rankings")}}}" 
					{{{CapsLock}}}
					hidden="1"
				/>
				
				<quad
					{{{AlignTl}}}
					posn="2.5  -2.5	2."
					sizen="{{{52.}}} 	{{{13.}}}"
					image="{{{C_ImgBaseIngame^C_ImgOnlineMode}}}"
					id="Quad_OnlineLogo"
				/>
				
				<quad
					{{{AlignTl}}}
					posn="0.  {{{-Separator}}}	2."
					sizen="{{{ItemSizeX*2.}}} 	{{{QuadSizeYTitle}}}"
					image="{{{C_ImgBaseIngame^C_ImgFg}}}"
				/>
			</frame>
			""";
			
		MLText ^="""
			<frame id="Frame_ServerDetails" posn="{{{-ItemSizeX}}} {{{6*ItemSizeY}}} 2." hidden="0">
				<quad  
					{{{AlignTl}}} 
					posn="0 {{{-Separator}}} .1"
					sizen="{{{ItemSizeX*2.}}} {{{QuadSizeY}}}" 
					bgcolor="{{{ColorXmlBlack}}}"
					hidden="0"
				/>
				
				<frame posn="0. {{{PosYLabel}}}">
					<label id="Label_ServerDetails" 
						posn="{{{ItemSizeX*1.-C_LabelPosX}}} 0 1" 
						sizen="{{{(ItemSizeX-C_LabelPosX)*2.*ServerNameSizeXRatio}}}"
						textcolor="{{{ColorXmlRed}}}" 
						text="THE SERVER NAME WAHOU" 
						{{{AlignCc}}} 
						{{{ML_LabelStyleInfo}}} 
					/>
					
					<label id="Label_Pages" 
						posn="{{{C_LabelPosX+InputButtonSizeX+1.0}}} 0. 1." 
						sizen="{{{(ItemSizeX-C_LabelPosX)*2.*(1.-ServerNameSizeXRatio)-C_LabelPosX}}}"
						textcolor="{{{ColorXmlRed}}}" 
						text="" 
						{{{AlignCl}}} 
						{{{ML_LabelStyleInfo}}} 
					/>
					
					<frame id="Frame_PageInput">
						{{{UIBindingPadButtons::InjectInManialink(C_LayerName, MirrorName, <InputButtonSizeX-1.0, 0., 2.>, 0.5)}}}
						
						<quad id="Quad_InputPage" 
							posn="{{{InputButtonSizeX}}} -1. 2." 
							sizen="{{{InputButtonSizeX}}} {{{InputButtonSizeX}}}" 
							image="{{{IMGSelect}}}"
							{{{AlignCc}}}
						/>
					</frame>
					
					<label id="Label_PlayerCount" 
						{{{AlignCr}}}  
						posn="{{{ItemSizeX*2.-C_LabelPosX}}} 0 1" 
						sizen="{{{(ItemSizeX-C_LabelPosX)*2.*(1.-ServerNameSizeXRatio)-C_LabelPosX}}}"
						textcolor="{{{ColorXmlRed}}}" 
						text="Players : 18/32"  
						{{{ML_LabelStyleInfo}}} 
					/>
				</frame>
			</frame>
			
			<frame id="Frame_PlayerDetails" posn="{{{-ItemSizeX}}} {{{4*ItemSizeY}}} 1.">			
				<frame id="Frame_HelmetBig" posn="0. 0. 1.">
					<quad 					posn="0. 0. .1" sizen="{{{DetailsSize}}} {{{DetailsSize}}}" bgcolor="222" />
					<quad id="Quad_HelmetBig" 	posn="0. 0. .2" sizen="{{{DetailsSize}}} {{{DetailsSize}}}" bgcolor="000" />
				</frame>		
				
				<frame id="Frame_FlagBig" posn="0. {{{-DetailsSize}}} 1.">
					<quad 					posn="0. 0. .1" sizen="{{{DetailsSize}}} {{{DetailsSize}}}" bgcolor="222" />
					<quad id="Quad_FlagBig" 	posn="0. 0. .2" sizen="{{{DetailsSize}}} {{{DetailsSize}}}" bgcolor="111" />
				</frame>
			</frame>
		
			<frame id="Frame_Players" posn="{{{-ItemSizeX+DetailsSize}}} {{{4*ItemSizeY}}} 1.">
	""";
	
	// MLText ^= """{{{UIXmlBuilder::GetXml("BgPlayer", LayersContent2, 1., < 0., 0., 1.>)}}}""";
	
	for(I, 0, C_PlayersMaxCount-1) {
		MLText ^= """ <frameinstance id="Frame_Player{{{I}}}" 	posn="0	{{{-I*ItemSizeY}}} 1" 	modelid="Framemodel_Player" hidden="1"/>""";
		MLText ^= """ <quad  
						{{{AlignTl}}} 
						posn="0 {{{-I*ItemSizeY-1.0}}} 2."
						sizen="{{{PlayerSizeX}}} {{{QuadSizeY-0.5}}}" 
						bgcolor="{{{ColorXmlBlack}}}"
						hidden="0"
					/> 
					<quad 	id="Quad_PlayersMouseEvent_{{{I}}}" bgcolor="000" opacity="0.0" posn="0. {{{-I*ItemSizeY}}} 35."  sizen="{{{PlayerSizeX}}} {{{QuadSizeY}}}" scriptevents="1" {{{AlignTl}}} />
					""";
	}
		
	MLText ^= """
			</frame>
		
			<frame id="Frame_Inputs" posn="{{{ItemSizeX}}} {{{-ItemSizeY*C_LinesMaxCount/2.+ItemSizeY}}} 1">
				<frameinstance id="Frame_Mute" 			posn="{{{-InputSpaceX*3.}}} 0 1"			modelid="Framemodel_Input" />
				<quad id="Quad_FrameInputEvent_Mute"	posn="{{{-InputSpaceX*3.}}}	{{{-Separator}}} 40"  		sizen="{{{InputSizeX}}} {{{QuadSizeY}}}"  bgcolor="000" opacity="0.0"  scriptevents="1" {{{AlignTr}}} />
				
				<frameinstance id="Frame_InputSpectate" 	posn="{{{-InputSpaceX}}} 	0 1" 		modelid="Framemodel_Input" />
				<quad id="Quad_FrameInputEvent_Spectate"	posn="{{{-InputSpaceX}}}	{{{-Separator}}} 40"  		sizen="{{{InputSizeX}}} {{{QuadSizeY}}}"  bgcolor="000" opacity="0.0"  scriptevents="1" {{{AlignTr}}} />
				
				<frameinstance id="Frame_InputProfile" 	posn="{{{-InputSpaceX*2.}}} 		0 1" 		modelid="Framemodel_Input" />
				<quad id="Quad_FrameInputEvent_Profile"	posn="{{{-InputSpaceX*2.}}}		{{{-Separator}}} 40"  		sizen="{{{InputSizeX}}} {{{QuadSizeY}}}"  bgcolor="000" opacity="0.0"  scriptevents="1" {{{AlignTr}}} />
				
				<frameinstance id="Frame_InputBack" 	posn="0 						0 1"		modelid="Framemodel_Input" />
				<quad id="Quad_FrameInputEvent_Back"	posn="0							{{{-Separator}}} 40"  		sizen="{{{InputSizeX}}} {{{QuadSizeY}}}"  bgcolor="000" opacity="0.0"  scriptevents="1" {{{AlignTr}}} />
			</frame>
		</frame>

	<script><!--

		#Include "TextLib" as TL
		{{{Manialink::GetIncludes()}}}
		
		
		#Const DebugName "L_OnlineScoresTable"
		#Const ONLINEMODE_TIMEATTACK 	0
		#Const ONLINEMODE_ROUNDS  		1
		#Const ONLINEMODE_LAPS   		2
		#Const ONLINEMODE_TEAM   		3
		#Const ONLINEMODE_STUNT   		4

		#Const ONLINEPOINTS_TIME  		0
		#Const ONLINEPOINTS_POINTS  	1
		#Const ONLINEPOINTS_CP   		2
		
		#Const ONLINESTATUS_PLAYING		0
		#Const ONLINESTATUS_SPECTATOR	1
		#Const ONLINESTATUS_OFFLINE		2
		
		#Const C_SpawnStatus_Racing			1	///< The player is currently racing
		#Const C_SpawnStatus_Waiting		2	///< The player is winting to be spawned
		#Const C_SpawnStatus_Outro			3	///< The player is watching the outro sequence
		#Const C_SpawnStatus_Browsing		4   ///< The player is browsing the score table
		#Const C_SpawnStatus_DisconnectPad	5   ///< The player is browsing the score table
		
		#Const C_Device_Keyboard 		0
		#Const C_Device_Pad 			1
		
		declare Integer G_LastDeviceUsed;
		{{{UIBindingPadButtons::InjectInGlobals()}}}
		{{{UIEchelon::GetMLEchelonFunctions()}}}
		
		{{{UIBindingPadButtons::InjectInFunctions()}}}
		
		Text GetCountryFlag(CUser _User) {
			if (SystemSkuIdentifier == CMlScript::ESystemSkuIdentifier::JP && _User.LadderZoneName == "|Zone|Taiwan") {
				return "file://Media/Manialinks/Nadeo/TMConsole/Images/Helmets/Drapeaux/NewFlag/CHN.dds";
			}
			return _User.CountryFlagUrl;
		}
		
		Text GetScoreTARounds(CTmScore _Score, Integer _ScoreType)
		{
			declare Score = "";
			switch(_ScoreType)
			{
				case ONLINEPOINTS_TIME 		: 
					if(_Score.BestRace.Time > 0) 
						Score = ""^TL::TimeToText(_Score.BestRace.Time, True);
				case ONLINEPOINTS_POINTS 	: Score = _Score.Points^" Pts";
			}
			
			return Score;
		}
		
		Text GetModeName(Integer _ModeType)
		{
			declare ModeName = "";
			switch(_ModeType)
			{
				case ONLINEMODE_TIMEATTACK 	: ModeName = "Time Attack";
				case ONLINEMODE_ROUNDS	 	: ModeName = "Rounds";
				case ONLINEMODE_LAPS 		: ModeName = "Laps";
				case ONLINEMODE_TEAM 		: ModeName = "Team";
				case ONLINEMODE_STUNT 		: ModeName = "Stunts";
			}

			if(InputPlayer != Null && InputPlayer.EnableStuntMode) {
				ModeName ^= " - Stunt";
			}
			
			return ModeName;
		}
		
		Vec3 GetTeamColor(Integer _Team)
		{
			switch(_Team)
			{
				case 0 : return {{{Colors::GetColor("Red")}}};
				case 1 : return {{{Colors::GetColor("Blue")}}};
			}
			
			return {{{Colors::GetColor("White")}}};
		}
		
		Text GetEchelonImageUrl(Integer _Echelon) 
		{
			if(_Echelon > 9 || _Echelon < 0)
			{
				log(Now^" [ERROR] Can't find echelon number "^_Echelon);
				return "";
			}
			
			return "{{{C_ImgBaseManialinks^C_ImgBaseEchelon}}}"^"Echelon_"^_Echelon^".tga";
		}
		
		Vec3 GetOnlineStatusImageUrl(Integer _Statut)
		{
			switch(_Statut)
			{
				case ONLINESTATUS_PLAYING 	: return {{{Colors::GetColor("Green")}}};
				case ONLINESTATUS_SPECTATOR : return {{{Colors::GetColor("Red")}}};
				case ONLINESTATUS_OFFLINE 	: return {{{Colors::GetColor("Grey")}}};
			}
			
			return {{{Colors::GetColor("White")}}};
		}
		
		Boolean GetPlayerAvailableToWatch(Text _PlayerLogin) {
			declare Boolean IsAvailableToWatch = False;
			foreach(Player in Players) {
				if(Player.User.Login == _PlayerLogin && !Player.User.RequestsSpectate  && _PlayerLogin != InputPlayer.User.Login) {
					IsAvailableToWatch = True;
				}
			}
			return IsAvailableToWatch;
		}
		
		{{{Manialink::Load()}}}
		{{{UIButtons::GetMLFunctionPcButtons()}}}
		
		
		main()
		{
			// CONTROL DECLARATIONS
			{{{UIBindingPadButtons::InjectInInit(C_LayerName)}}}
			declare Label_ServerDetails 	<=> (Page.MainFrame.GetFirstChild("Label_ServerDetails")	as CMlLabel);
			declare Label_PlayerCount 		<=> (Page.MainFrame.GetFirstChild("Label_PlayerCount")		as CMlLabel);
			declare Quad_HelmetBig 			<=> (Page.MainFrame.GetFirstChild("Quad_HelmetBig")			as CMlQuad);
			declare Quad_FlagBig 			<=> (Page.MainFrame.GetFirstChild("Quad_FlagBig")			as CMlQuad);
			declare Quad_OnlineLogo 			<=> (Page.MainFrame.GetFirstChild("Quad_OnlineLogo")			as CMlQuad);
			declare Quad_InputPage 			<=> (Page.MainFrame.GetFirstChild("Quad_InputPage")			as CMlQuad);
			
			declare Frame_InputSpectate 	<=> (Page.MainFrame.GetFirstChild("Frame_InputSpectate") 	as CMlFrame);
			declare Frame_InputProfile 		<=> (Page.MainFrame.GetFirstChild("Frame_InputProfile") 	as CMlFrame);
			declare Frame_InputBack 		<=> (Page.MainFrame.GetFirstChild("Frame_InputBack") 		as CMlFrame);
			declare Frame_Input 			<=> (Page.MainFrame.GetFirstChild("Frame_Inputs") 			as CMlFrame);
			declare Frame_Mute		 		<=> (Page.MainFrame.GetFirstChild("Frame_Mute") 			as CMlFrame);
			declare Frame_PageInput		 		<=> (Page.MainFrame.GetFirstChild("Frame_PageInput") 	as CMlFrame);

			declare Quad_InputSpectate 		<=> (Frame_InputSpectate	.GetFirstChild("Quad_Input")	as CMlQuad);
			declare Quad_InputProfile 		<=> (Frame_InputProfile		.GetFirstChild("Quad_Input")	as CMlQuad);
			declare Quad_InputBack 			<=> (Frame_InputBack		.GetFirstChild("Quad_Input")	as CMlQuad);
			declare Quad_Mute 				<=> (Frame_Mute				.GetFirstChild("Quad_Input")	as CMlQuad);

			declare Label_InputSpectate 	<=> (Frame_InputSpectate	.GetFirstChild("Label_Input")	as CMlLabel);
			declare Label_InputProfile 		<=> (Frame_InputProfile		.GetFirstChild("Label_Input")	as CMlLabel);
			declare Label_InputBack 		<=> (Frame_InputBack		.GetFirstChild("Label_Input")	as CMlLabel);
			declare Label_Mute 				<=> (Frame_Mute				.GetFirstChild("Label_Input")	as CMlLabel);
			declare Label_Pages 			<=> (Page.MainFrame	.GetFirstChild("Label_Pages")			as CMlLabel);

			Quad_InputSpectate	.ImageUrl = "{{{IMGAction1}}}";
			Quad_InputProfile	.ImageUrl = "{{{IMGAction2}}}";
			Quad_InputBack		.ImageUrl = "{{{IMGSelect}}}";
			Quad_Mute			.ImageUrl = "{{{IMGCancel}}}";
			
			Quad_OnlineLogo		.Colorize = {{{ColorRed}}};
			Label_InputSpectate	.Value = "{{{TXTAction1}}}";
			Label_InputProfile	.Value = "{{{TXTAction2}}}";
			Label_Mute			.Value = "{{{TXTAction3}}}";
			
			Frame_InputProfile.Visible = False;
			
			//L16N. Infinitive. 
			Label_InputBack		.Value = _("Go!");
			
			declare CMlFrame[] 	Frame_Player;
			declare CMlLabel[] 	Label_Rank;
			declare CMlLabel[] 	Label_Name;
			declare CMlLabel[] 	Label_Score;
			declare CMlQuad[] 	Quad_Flag;
			declare CMlQuad[] 	Quad_Helmet;
			declare CMlQuad[] 	Quad_Echelon;
			// declare CMlQuad[] 	Quad_DD;
			declare CMlQuad[] 	Quad_Online;
			declare CMlQuad[] 	Buttons;
			declare CMlQuad[] 	Quad_Speaker;
			
			for(I, 0, {{{C_PlayersMaxCount-1}}})
			{
				Frame_Player	.add((Page.MainFrame	.GetFirstChild("Frame_Player"^I) 	as CMlFrame));
				Label_Rank		.add((Frame_Player[I]	.GetFirstChild("Label_Rank") 		as CMlLabel));
				Label_Name		.add((Frame_Player[I]	.GetFirstChild("Label_Name") 		as CMlLabel));
				Quad_Speaker		.add((Frame_Player[I]	.GetFirstChild("Quad_Speaker") 		as CMlQuad));
				Label_Score		.add((Frame_Player[I]	.GetFirstChild("Label_Score") 		as CMlLabel));
				Quad_Flag		.add((Frame_Player[I]	.GetFirstChild("Quad_Flag") 		as CMlQuad));
				Quad_Helmet		.add((Frame_Player[I]	.GetFirstChild("Quad_Helmet") 		as CMlQuad));
				Quad_Echelon	.add((Frame_Player[I]	.GetFirstChild("Quad_Echelon") 		as CMlQuad));
				// Quad_DD			.add((Frame_Player[I]	.GetFirstChild("Quad_DD") 			as CMlQuad));
				Quad_Online		.add((Frame_Player[I]	.GetFirstChild("Quad_Online") 		as CMlQuad));
				Buttons			.add((Frame_Player[I]	.GetFirstChild("Button_Bg") 		as CMlQuad));
			}
			
			declare CMlQuad  ButtonSelected <=> Buttons[0];
			
			// VAR FOR PAGE DECLARATIONS			
			declare Integer RoomMode  		for Page;
			declare Integer NbMaxPlayer 	for Page;
			declare Integer ScoreType 		for Page;
			declare Boolean IsTeam  		for Page;
			declare Integer CurPlayerCount 	for Page;
			
			declare netread Boolean 	Net_IsInputValable 		for UI;
			
			declare netread Integer 	Net_LibTMC_SpawnStatus 	for UI;
			declare netwrite Boolean 	Net_IsScoreTableVisible for UI;
			declare netread Boolean 	Net_IsShowcase 			for Teams[0];
			declare Boolean 			Net_IsServerPrivate 	for UI;
			declare Text				Net_RoomFinalName		for UI;
			declare Boolean 			PlayerCanVoiceChat 			for UI = True;
			declare Boolean				Pre_PlayerCanVoiceChat		for UI;
			declare netwrite Integer Net_LibLastDeviceUsed_LastDeviceUsed for UI;
			declare CInputPad::EPadType Net_LibLastDeviceUsed_LastDeviceTypeUsed 	for UI;
			declare netread 	Integer 	Net_NbCheckpoints 				for Teams[0];
			declare netread 	Integer		Net_NbLaps						for Teams[0];

			declare Boolean IsPlayerSpec for UI;
			
			// Net_IsServerPrivate = True;
			// PlayerCanVoiceChat = True;
			// VAR DECLARATIONS
			declare M_PreSpawnStatus		= 0;
			declare M_PreInputValable		= Net_IsInputValable;
			declare M_PrevPageIsVisible 	= False;
			declare M_Page 					= 0;
			declare M_Index 				= 0;
			declare M_VisiblePlayersCount 	= 0;
			declare M_PlayerSelectedIndex 	= 0;
			declare Boolean				ScoresTableMenuOn = True;
			declare Integer LapsTimer 			= Now + 1000;
			declare Boolean DisplayCp 			= False;
			declare M_PrevPage 					= -1;
			declare M_PrevIndex 				= -1;
			declare M_PrevPlayerSelectedIndex 	= -1;
			declare M_TimerScrolling 			= Now + 50;
			declare ScoreTableTimer 			= 0;
			//log(Now^" > LOAD OK : {{{C_LayerName}}}");
			Quad_InputPage.ImageUrl 		= "{{{IMGDown}}}";
			// Quad_InputPage.Visible 			= False;
			if(Net_IsInputValable) {
				Frame_Input.Visible 		= True;
				Quad_InputPage.Visible 		= False;
			} else {
				Frame_Input.Visible 			= False;
				Quad_InputPage.Visible 			= True;
				Label_Pages.RelativePosition 	= <{{{C_LabelPosX+InputButtonSizeX+1.0}}}, 0., 1.>;
			}
			
			
			Frame_Mute.Hide();
			declare Ident[Integer] CurrentDisplayedScores;
			declare InputSkip = -1;
			
			while(True)
			{
				yield;
				if(InputPlayer == Null) continue;
				
				{{{UIBindingPadButtons::InjectInLoop()}}}
				
				
				
				/*
				declare Integer InputDevice = GetInputDevice();
				if(InputDevice != -1) {
					G_LastDeviceUsed = InputDevice;
				}
				*/
				
				declare NeedUpdatePlayers = False;
				
				/*
				if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Keyboard) {
					Quad_InputSpectate	.ImageUrl = GetPcImageForButton("{{{IMGAction1}}}");
					Quad_InputProfile	.ImageUrl = GetPcImageForButton("{{{IMGAction2}}}");
					Quad_InputBack		.ImageUrl = GetPcImageForButton("{{{IMGSelect}}}");
					Quad_Mute			.ImageUrl = GetPcImageForButton("{{{IMGCancel}}}");
					Quad_InputPage		.ImageUrl = GetPcImageForButton("{{{IMGDown}}}");
				} else if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Pad) {
					Quad_InputSpectate	.ImageUrl = "{{{IMGAction1}}}";
					Quad_InputProfile	.ImageUrl = "{{{IMGAction2}}}";
					Quad_InputBack		.ImageUrl = "{{{IMGSelect}}}";
					Quad_Mute			.ImageUrl = "{{{IMGCancel}}}";
					Quad_InputPage		.ImageUrl = "{{{IMGDown}}}";
				}
				*/
				
				Quad_InputSpectate	.ImageUrl = GetImageForButton("{{{IMGAction1}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
				Quad_InputProfile	.ImageUrl = GetImageForButton("{{{IMGAction2}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
				Quad_InputBack		.ImageUrl = GetImageForButton("{{{IMGSelect}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
				Quad_Mute			.ImageUrl = GetImageForButton("{{{IMGCancel}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
				Quad_InputPage		.ImageUrl = GetImageForButton("{{{IMGDown}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
				
				
				if(M_PrevPageIsVisible != PageIsVisible)
				{
					M_PrevPageIsVisible = PageIsVisible;
					if(PageIsVisible) {
						InputSkip = Now + 100;
						ScoreTableTimer = 10;
					} else {
						ScoreTableTimer = 500;
					}
					
					declare PlayerIndex = -1;
					foreach(I => Score in Scores) {
						if(Score.User.Login == InputPlayer.Login) {
							PlayerIndex = I;
						}
					}
					
					if(PlayerIndex != -1) {
						M_Page 			= PlayerIndex / {{{C_PlayersMaxCount}}};
						M_Index 		= 0;
						M_PrevIndex 	= -1;
						M_PrevPage 		= -1;
					}
					
					if(M_PrevPageIsVisible) {
						Audio.PlaySoundEvent("{{{SoundPath^SoundShowMenu}}}", {{{Volumes::GetVolumedB("MenuShow")-3.}}});
					} else {
						Audio.PlaySoundEvent("{{{SoundPath^SoundHideMenu}}}", {{{Volumes::GetVolumedB("MenuHide")}}});
					}
					
					M_PreSpawnStatus = -1;
				}

				if(ScoreTableTimer > 0) {
					ScoreTableTimer -= Period;
				} else {
					Net_IsScoreTableVisible = PageIsVisible;
				}
				
				if(!PageIsVisible) continue;
				LibManialink_AnimLoop();

				EnableMenuNavigation(Net_IsInputValable, False, Null, 2);

				if(M_PreInputValable != Net_IsInputValable) {
					if(Net_IsInputValable) {
						Frame_Input.Visible 			= True;
						Frame_PageInput.Visible 		= False;
					} else {
						Frame_Input.Visible 			= False;
						Frame_PageInput.Visible 		= True;
						Label_Pages.RelativePosition 	= <{{{C_LabelPosX+InputButtonSizeX+1.0}}}, 0., 1.>;
					}

					M_PreInputValable = Net_IsInputValable;
				}
				
				if(Net_LibTMC_SpawnStatus != M_PreSpawnStatus) {
					if(Net_LibTMC_SpawnStatus == C_SpawnStatus_Outro) {
						ScoresTableMenuOn 				= False;
						Label_InputSpectate	.Value = "{{{TXTMenu}}}";
					} else {
						ScoresTableMenuOn = True;
					}
					M_PreSpawnStatus = Net_LibTMC_SpawnStatus;
				}
				
				if(ScoresTableMenuOn && Net_IsInputValable) {
					// Frame_Input.Visible 			= True;
					Label_InputSpectate	.Value = "{{{TXTAction1}}}";
				}
				
				if(!Net_IsInputValable) {
					
					if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Keyboard) {
						SetBindableKeysVisible("{{{MirrorName}}}", True);
						Quad_InputPage.Visible = False;
					} else if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Pad) {
						SetBindableKeysVisible("{{{MirrorName}}}", False);
						Quad_InputPage.Visible = True;
					}
					
					if(Now > M_TimerScrolling) {
						foreach(PadIndex => Pad in Input.Pads) 
						{
							foreach(Button in Pad.ButtonEvents)
							{
								switch(Button) 
								{
									case CInputScriptPad::EButton::Down : 
									{
										declare MaxPage = Scores.count / {{{C_PlayersMaxCount}}};
										if(M_Page < MaxPage) {
											M_Page += 1;
										} else {
											M_Page = 0;
										}
										M_TimerScrolling = Now + 50;
									}
								}
							}
						}
					}
				}
				
				// EVENTS UPDATE
				foreach(Event in PendingEvents)
				{
					switch(Event.Type)
					{
						case CMlEvent::Type::MouseClick: {
							declare Text[] IdSplitted = TL::Split("_", Event.ControlId);
							if(IdSplitted.existskey(1)) {
								declare Text CategoryEvent = IdSplitted[1];
								
								if(CategoryEvent == "PlayersMouseEvent") {
									if(IdSplitted.existskey(2)) {
										declare Integer Cur_Index = TL::ToInteger(IdSplitted[2]);
										//Si on clique bien à l'endroit où il y a le selecteur et qu'il s'agit bien du même joueur
										if(M_Index == Cur_Index && M_PlayerSelectedIndex == (M_Index + M_Page * {{{C_PlayersMaxCount}}})) {
											if(Scores.existskey(M_PlayerSelectedIndex)) {
												if(GetPlayerAvailableToWatch(Scores[M_PlayerSelectedIndex].User.Login)) {
													SendCustomEvent("Spectate", [""^Scores[M_PlayerSelectedIndex].User.Login]);
													Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
												}
											}
										}
									}
								} else if(CategoryEvent == "FrameInputEvent") {
									/*
									if(IdSplitted.existskey(2)) {
										declare Text Action = IdSplitted[2];
										if(Action == "Back") {
											CloseScoresTable();
											SendCustomEvent("CloseScoresTable", [""]);
										} else if(Action == "Mute") {
											if(PlayerCanVoiceChat && Net_IsServerPrivate && Scores.existskey(M_PlayerSelectedIndex))
											{
												declare User <=> Scores[M_PlayerSelectedIndex].User;
												if(User.Login != InputPlayer.User.Login) {
													if(User.VoiceChat_IsMuted) {
														User.VoiceChat_MuteSetting 	= CUser::EMuteSetting::NotMuted;
														Label_Mute.Value 			= "{{{TXTAction3}}}";
													} else {
														User.VoiceChat_MuteSetting 	= CUser::EMuteSetting::Muted;
														Label_Mute.Value 			= "{{{TXTAction4}}}";
													}
													NeedUpdatePlayers = True;
												}
											}
										} else if(Action == "Spectate") {
											if(Scores.existskey(M_PlayerSelectedIndex))
											{
												if(GetPlayerAvailableToWatch(Scores[M_PlayerSelectedIndex].User.Login)) {
													SendCustomEvent("Spectate", [""^Scores[M_PlayerSelectedIndex].User.Login]);
													Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
												}
											}
										} else if(Action == "Profile") {
											
											if(Scores.existskey(M_PlayerSelectedIndex))
											{
												if(Scores[M_PlayerSelectedIndex].User.Login != InputPlayer.User.Login) {
													SendCustomEvent("ShowProfile", [""^Scores[M_PlayerSelectedIndex].User.Login]);
													Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
												}
											}
											
										}
									}
									*/
								}
							}
						}
						
						case CMlEvent::Type::MouseOver: {
							declare Text[] IdSplitted = TL::Split("_", Event.ControlId);
							if(IdSplitted.existskey(2)) {
								declare Integer NextIndex = TL::ToInteger(IdSplitted[2]);
								if(NextIndex <= M_VisiblePlayersCount-1 && NextIndex != -1) {
									M_Index = NextIndex;
								}
							}
						}
						
						case CMlEvent::Type::MenuNavigation :
						{
							if(ScoresTableMenuOn) {
								if (InputSkip < 0 || Now > InputSkip) {
									switch (Event.MenuNavAction)
									{
										case CMlEvent::EMenuNavAction::Select :
										{
											CloseScoresTable();
											SendCustomEvent("CloseScoresTable", [""]);
										}
										
										case CMlEvent::EMenuNavAction::Action2 :
										{
											if(Scores.existskey(M_PlayerSelectedIndex))
											{
												if(Scores[M_PlayerSelectedIndex].User.Login != InputPlayer.User.Login) {
													SendCustomEvent("ShowProfile", [""^Scores[M_PlayerSelectedIndex].User.Login]);
													Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
												}
											}
										}
										
										case CMlEvent::EMenuNavAction::Action1 :
										{
											if(Scores.existskey(M_PlayerSelectedIndex))
											{
												if(GetPlayerAvailableToWatch(Scores[M_PlayerSelectedIndex].User.Login)) {
													SendCustomEvent("Spectate", [""^Scores[M_PlayerSelectedIndex].User.Login]);
													Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
												}
											}
										}
										
										case CMlEvent::EMenuNavAction::Cancel :
										{
											if(PlayerCanVoiceChat && Net_IsServerPrivate && Scores.existskey(M_PlayerSelectedIndex))
											{
												declare User <=> Scores[M_PlayerSelectedIndex].User;
												if(User.Login != InputPlayer.User.Login) {
													if(User.VoiceChat_IsMuted) {
														User.VoiceChat_MuteSetting 	= CUser::EMuteSetting::NotMuted;
														Label_Mute.Value 			= "{{{TXTAction3}}}";
													} else {
														User.VoiceChat_MuteSetting 	= CUser::EMuteSetting::Muted;
														Label_Mute.Value 			= "{{{TXTAction4}}}";
													}
													NeedUpdatePlayers = True;
												}
											}
										}
										
										case CMlEvent::EMenuNavAction::Up :
										{
											// log("UP");
											if(M_Index > 0) 
												M_Index -= 1;
											
										}
										
										case CMlEvent::EMenuNavAction::Down :
										{
											// log("DOWN");
											if(M_Index < M_VisiblePlayersCount-1) 
												M_Index += 1;
										}
										
										case CMlEvent::EMenuNavAction::Left :
										{
											if(M_Page > 0) {
												M_Page -= 1;
											} else {
												M_Page = Scores.count / {{{C_PlayersMaxCount}}};
											}
										}
										
										case CMlEvent::EMenuNavAction::Right :
										{
											declare MaxPage = Scores.count / {{{C_PlayersMaxCount}}};
											if(M_Page < MaxPage) {
												M_Page += 1;
											} else {
												M_Page = 0;
											}
										}
										case CMlEvent::EMenuNavAction::AppMenu :
										{
											ShowInGameMenu();
										}
									}
								}
							} else {
								if (InputSkip < 0 || Now > InputSkip) {
									switch (Event.MenuNavAction)
									{
										case CMlEvent::EMenuNavAction::Select :
										{
											CloseScoresTable();
											SendCustomEvent("CloseScoresTable", [""]);
										}
										
										case CMlEvent::EMenuNavAction::Action1 :
										{
											ScoresTableMenuOn = True;
											NeedUpdatePlayers = True;
										}
									}
								}
							}
						}
					}
				}
				
				if(M_PrevPage != M_Page) {
					NeedUpdatePlayers = True;
					Label_Pages.Value = TL::Compose(_("Page %1"), ""^M_Page+1);
					M_PrevPage = M_Page;
				}
				
				if(M_PrevIndex != M_Index) {
					NeedUpdatePlayers = True;
					Audio.PlaySoundEvent("{{{SoundPath^SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
					M_PrevIndex = M_Index;
				}
				
				if(ScoreType == ONLINEMODE_LAPS) {
					if(Now >= LapsTimer) {
						NeedUpdatePlayers = True;
						if(!DisplayCp) {
							DisplayCp = True;
						} else if(DisplayCp) {
							DisplayCp = False;
						}
						LapsTimer = Now + 1500;
					}
				}
				
				if (!NeedUpdatePlayers) {
					for(I, 0, 9) {
						declare ScoreIndex = I + M_Page * {{{C_PlayersMaxCount}}};
						if(CurrentDisplayedScores.existskey(I) && ScoreIndex < Scores.count) {
							declare CurrentDisplayedScoreId = CurrentDisplayedScores[I];
							if(Scores.existskey(CurrentDisplayedScoreId)) {
								declare CurrentDisplayedScore <=> Scores[CurrentDisplayedScoreId];
								declare EntryScore <=> Scores[ScoreIndex];

								if(CurrentDisplayedScore.User.Login != EntryScore.User.Login) {
									NeedUpdatePlayers = True;
									break;
								}
								
								declare Text CurrentDisplayedScoreScore;
								declare Text CurentScoreScore;
								
								if(ScoreType != ONLINEMODE_LAPS) {
									CurrentDisplayedScoreScore 	=  GetScoreTARounds(CurrentDisplayedScore, ScoreType);
									CurentScoreScore			=  GetScoreTARounds(EntryScore, ScoreType);
								}
								
								if(CurrentDisplayedScoreScore != CurentScoreScore) {
									NeedUpdatePlayers = True;
									break;
								}
							}
						}
					}
				}
				
				// UPDATE PLAYER LIST
				if(NeedUpdatePlayers)
				{
					M_VisiblePlayersCount = 0;
					
					foreach(I => Frame in Frame_Player)
					{
						declare ScoreIndex = I + M_Page * {{{C_PlayersMaxCount}}};
						if(ScoreIndex < Scores.count)
						{
							M_VisiblePlayersCount += 1;
							declare Score <=> Scores[ScoreIndex];
							declare Boolean DoesDisplayScore = True;
							
							//C.B. : on affiche toujours le joueur car on ne peut pas rejoindre un serveur "juste" en spectateur. Il ny a pas de mode "silencieux"
							/*
							foreach(Player in Players) {
								if(Score.User.Login == Player.User.Login) {
									declare netread Boolean Net_HasPlayedOnce for Player;
									if(Player.RequestsSpectate && !Net_HasPlayedOnce) {
										DoesDisplayScore = False;
									}
								}
							}
							*/
							
							if(DoesDisplayScore) {
								Frame.Visible = True;
								
								Label_Rank[I]	.Value 		= ""^ScoreIndex + 1;
								Label_Name[I]	.Value 		= TL::ToUpperCase(Score.User.Name);
								// Label_Name[I]	.Value 		= TL::ToUpperCase("MWMWMWMWMWMWMWMW");
								declare Text ScoreText;
								
								if(ScoreType == ONLINEMODE_ROUNDS || ScoreType == ONLINEMODE_TIMEATTACK) {
									ScoreText = GetScoreTARounds(Score, ScoreType);
								} else if(ScoreType == ONLINEMODE_LAPS) {
									
									if(DisplayCp) {
										declare netread Integer NbCheckpoints for Score;
										declare Integer TotalCheckpoint = 0;
										if(Map.TMObjective_IsLapRace) {
											TotalCheckpoint = Net_NbCheckpoints*Net_NbLaps;
										} else {
											TotalCheckpoint = Net_NbCheckpoints;
										}
										ScoreText = TL::Compose("%1/%2 Cp", ""^NbCheckpoints, ""^TotalCheckpoint);
									} else {
										declare netread Integer[Integer] 	CustomTimeCheckpoint 	for Score;
										if (CustomTimeCheckpoint.count > 0) {
											declare Integer LastCpTime = CustomTimeCheckpoint[CustomTimeCheckpoint.count-1];
											ScoreText = TL::TimeToText(LastCpTime, True);
										} else {
											ScoreText = "";
										}
									}
								}
								Label_Score[I]	.Value 		= ScoreText;
								
								if(!Net_IsShowcase) {
									Quad_Flag[I]	.ImageUrl 	= GetCountryFlag(Score.User);
									Quad_Helmet[I]	.ImageUrl 	= Score.User.AvatarUrl;
									Quad_Flag[I]	.Visible 	= True;
									Quad_Helmet[I]	.Visible 	= True;
								} else {
									Quad_Flag[I]	.Visible 	= False;
									Quad_Helmet[I]	.Visible 	= False;
								}
								
								declare Integer OnlineStatus;
								declare Boolean IsInPlayers 		= False;
								declare Boolean HasRequestSpectate 	= False;
								declare Integer EchelonIndex;
								
								foreach(Player in Players) {
									if(Score.User.Login == Player.User.Login) {
										IsInPlayers 			= True;
										HasRequestSpectate 		= Player.RequestsSpectate;
										EchelonIndex 			= GetEchelonPlayerIndex(Player);
									}
								}
								
								if(IsInPlayers) {
									if(HasRequestSpectate) {
										OnlineStatus = ONLINESTATUS_SPECTATOR;
									} else {
										OnlineStatus = ONLINESTATUS_PLAYING;
									}
								} else {
									OnlineStatus = ONLINESTATUS_OFFLINE;
								}
								
								Quad_Online[I].Colorize 		= GetOnlineStatusImageUrl(OnlineStatus);
								Quad_Online[I].Visible 			= True;
								declare Text EchelonPath 		= GetImgEchelon(EchelonIndex);
								
								if(Score.User.Login == InputPlayer.Login)
									Label_Name[I].TextColor = {{{Colors::GetColor("Yellow")}}};
								else
									Label_Name[I].TextColor = {{{Colors::GetColor("White")}}};
								
								if(!Net_IsShowcase) {
									Quad_Echelon[I]	.ImageUrl 	= EchelonPath;
									Quad_Echelon[I]	.Visible 	= True;
								} else {
									Quad_Echelon[I]	.ImageUrl = "";
									Quad_Echelon[I]	.Visible = False;
								}
								CurrentDisplayedScores[I] = Score.Id;
							}
						}
						else {
							Frame.Visible = False;
						}
					}

					// Update inputs frame
					if (M_Index > M_VisiblePlayersCount-1) {
						if (Buttons.existskey(M_VisiblePlayersCount-1)) M_Index = M_VisiblePlayersCount-1;
					}

					ButtonSelected = Buttons[M_Index];
				}
				
				M_PlayerSelectedIndex = M_Index + M_Page * {{{C_PlayersMaxCount}}};
				
				if(Net_IsInputValable && ScoresTableMenuOn) {
					if(Scores.existskey(M_PlayerSelectedIndex)) {
						if(GetPlayerAvailableToWatch(Scores[M_PlayerSelectedIndex].User.Login)) {
							Frame_InputSpectate.Visible = True;
						} else {
							Frame_InputSpectate.Visible = False;
						}
						
						if(Scores[M_PlayerSelectedIndex].User.Login != InputPlayer.User.Login) {
							Frame_InputProfile.Visible = True;
						} else {
							Frame_InputProfile.Visible = False;
						}
						
						// log("[Scores TABLE] Use Voice chat: "^PlayerCanVoiceChat^" SERVER PRIVATE: "^Net_IsServerPrivate^" USER VOICE CHAT SUPPORTED: "^Scores[M_PlayerSelectedIndex].User.VoiceChat_Supported);
						if(Scores[M_PlayerSelectedIndex].User.Login != InputPlayer.User.Login) {
							if(PlayerCanVoiceChat && Net_IsServerPrivate && Scores[M_PlayerSelectedIndex].User.VoiceChat_Supported) {
								Frame_Mute.Visible = True;
								if(Scores[M_PlayerSelectedIndex].User.VoiceChat_IsMuted) {
									Label_Mute.Value 			= "{{{TXTAction4}}}";
								} else {
									Label_Mute.Value 			= "{{{TXTAction3}}}";
								}
							}
							
						} else {
							Frame_Mute.Visible = False;
						}						
					}
				} else if(Net_IsInputValable && !ScoresTableMenuOn){
					Frame_InputSpectate.Visible 	= True;
					Frame_InputProfile.Visible 		= False;
					Frame_Mute.Visible 				= False;
				}
				
				// We update speakers each frame because the state can change without player input or Scores object change
				foreach(I => Frame in Frame_Player)
				{
					declare ScoreIndex = I + M_Page * {{{C_PlayersMaxCount}}};
					if(ScoreIndex < Scores.count)
					{
						declare Score <=> Scores[ScoreIndex];
						if(Score.User.Login != InputPlayer.User.Login) {
							if(PlayerCanVoiceChat && Net_IsServerPrivate && Score.User.VoiceChat_Supported) {
								if(Score.User.VoiceChat_IsMuted) {
									Quad_Speaker[I].ImageUrl 	= "{{{C_ImgBaseIngame^C_ImgSpleakerMute}}}";
									Quad_Speaker[I].Visible 	= True;
								} else {
									if(Score.User.VoiceChat_IsSpeaking) {
										Quad_Speaker[I].ImageUrl = "{{{C_ImgBaseIngame^C_ImgSpleakerOn}}}";
										Quad_Speaker[I].Visible = True;
									} else {
										Quad_Speaker[I].Visible = False;
									}
								}
							}
						} else {
							if(Score.User.VoiceChat_IsSpeaking) {
								Quad_Speaker[I].ImageUrl = "{{{C_ImgBaseIngame^C_ImgSpleakerOn}}}";
								Quad_Speaker[I].Visible = True;
							} else {
								Quad_Speaker[I].Visible = False;
							}
						}
					}
				}
				
				// BUTTONS (SELECTED) RED QUAD BLINKING
				if(Net_IsInputValable && ScoresTableMenuOn) {
					declare ButtonSelectedSinVar 	= ML::Sin(Now * 0.01) * 0.5 + 0.5;
					declare ButtonSelectedOpacity 	= 0.0 + ButtonSelectedSinVar * 1.;

					foreach(Button in Buttons)
						Button.Opacity = 0.;

					ButtonSelected.Opacity = ButtonSelectedOpacity;
				} else {
					foreach(Button in Buttons)
						Button.Opacity = 0.;
				}

				Label_ServerDetails	.Value = GetModeName(RoomMode);				
				Label_PlayerCount	.Value = TL::Compose(_("%1: %2/%3"), _("Players"), ""^Players.count, ""^NbMaxPlayer);

				// UPDATE PLAYER DETAILS
				if(NeedUpdatePlayers) {
					declare Exists = Scores.existskey(M_PlayerSelectedIndex);
					if(Exists && Net_IsInputValable && ScoresTableMenuOn) {
						declare PlayerSelected <=> Scores[M_PlayerSelectedIndex]; 
						Quad_HelmetBig	.ImageUrl 	= PlayerSelected.User.AvatarUrl;
						Quad_FlagBig	.ImageUrl 	= GetCountryFlag(PlayerSelected.User);
						
						Quad_HelmetBig.Visible 		= True;
						Quad_FlagBig.Visible 		= True;
					} else {
						Quad_HelmetBig.Visible 		= False;
						Quad_FlagBig.Visible 		= False;
					}
				}
			}
		}
	--></script>
	""";
	declare Layer <=> Layers::Get(C_LayerName);
	if(Layer == Null) {
		Layers::Create(C_LayerName, MLText);
		Layers::Attach(C_LayerName);
		Layer <=> Layers::Get(C_LayerName);
	}
	Layer.InOutAnimation = CUILayer::EUILayerAnimation::RightFast;
	Layers::SetType(C_LayerName, CUILayer::EUILayerType::ScoresTable);
}

Void UpdateServerValue() {
	declare CUILayer ScoreTable <=> Layers::Get(C_LayerName);
	if(ScoreTable == Null) return;
	
	declare Integer	RoomMode 		for ScoreTable.LocalPage;
	declare Integer CurPlayerCount 	for ScoreTable.LocalPage;
	declare Integer NbMaxPlayer 	for ScoreTable.LocalPage;
	declare Integer ScoreType		for ScoreTable.LocalPage;
	declare Boolean IsTeam			for ScoreTable.LocalPage;
	
	declare Integer SModeIndex = ONLINEMODE_TIMEATTACK;
	declare Integer SScoreType = ONLINEPOINTS_TIME;
	
	// ---------------------------------- //
	// Load specific UI according the mode and score table
	switch(Playground.ServerInfo.ModeName) {
		case "TMC_OnlineTimeAttack" : {
			SModeIndex = ONLINEMODE_TIMEATTACK;
			SScoreType = ONLINEPOINTS_TIME;
		}
		case "TMC_OnlineRounds" : { 
			SModeIndex = ONLINEMODE_ROUNDS;
			SScoreType = ONLINEPOINTS_POINTS;
		}
		case "TMC_OnlineLaps" : {
			SModeIndex = ONLINEMODE_LAPS;
			SScoreType = ONLINEPOINTS_CP;
		}
	}
	
	RoomMode 		= SModeIndex;
	NbMaxPlayer		= Playground.ServerInfo.MaxPlayerCount;
	CurPlayerCount	= Playground.ServerInfo.PlayerCount;
	ScoreType		= SScoreType;
}
