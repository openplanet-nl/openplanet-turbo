/** 
 *	In-Game UI library
 */
#Include "TextLib" as TL
	
#Include "Libs/Nadeo/Manialink2.Script.txt"  									as Manialink
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"						as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"							as Font
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Nadeo/TMConsole/Volumes.Script.txt" 								as Volumes
#Include "Libs/Nadeo/UIPadButtons.Script.txt"									as UIButtons
#Include "Libs/Nadeo/TMConsole/UIXmlBuilder.Script.txt"							as UIXmlBuilder
#Include "Libs/Nadeo/SystemText.Script.txt" 									as SystemText
#Include "Libs/Nadeo/TMConsole/Menu/Controller/UserController.Script.txt" 		as UserController

#Const Version					"2015-07-06"
#Const ScriptName				"UIOnlineScoresTable.Script.txt"
#Const C_LayerName				"OnlineBuddiesList"
	
#Const C_ImgBaseIngame 			"file://Media/Images/TMConsole/Ingame/"
#Const SoundPath				"file://Media/Sounds/TMConsole/"
#Const C_ImgBaseManialinks		"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgBaseEchelon			"Online/BrowseServers/echelons/"

#Const SoundMove	   	 		"event-focus.wav"
#Const SoundValidate 			"event-validate.wav"
#Const SoundHideMenu 			"menu-page-back.wav"
#Const SoundShowMenu			"event-menushow.wav"

#Const C_ImgOnlineMode			"mode-online-big.png"
#Const C_ImgBgSmall				"slot-small-bg.dds"
#Const C_ImgBg	   				"slot-medium-bg.dds"
#Const C_ImgFg	   				"slot-medium-fg.dds"

#Const C_LinesMaxCount			16
#Const C_PlayersMaxCount		10

#Const AlignTl				""" valign="top" 	halign="left" """
#Const AlignTr				""" valign="top" 	halign="right" """
#Const AlignCl				""" valign="center" halign="left" """
#Const AlignCr				""" valign="center" halign="right" """
#Const AlignCc				""" valign="center" halign="center" """
#Const AlignC2r				""" valign="center2" halign="right" """
#Const CapsLock				""" textprefix="$t" """

#Const C_TextSizeSmall 		3
#Const C_TextSizeSmall2 	4
#Const C_TextSizeMedium 	5
#Const C_TextSizeBig 		13
#Const C_TextSizeVeryBig 	27

#Const C_LabelPosX 			4.5

#Const C_PosXRatio_Rank 	0.013
#Const C_PosXRatio_Flag 	0.08
#Const C_PosXRatio_Name 	0.00
#Const C_PosXRatio_Helmet 	0.69
#Const C_PosXRatio_DD 		0.7895
#Const C_PosXRatio_Online	0.8475

#Const C_GAMEPHASE_CHALLENGE			3
#Const C_GAMEPHASE_PREPARATION			0
#Const C_GAMEPHASE_GAME					1
#Const C_GAMEPHASE_POSTGAME				2
#Const C_GAMEPHASE_OUTRO				4

/*
Void Load()
{
	SystemText::Load();
	UIButtons::Load();
	UserController::Load();
	UserController::Layer_GetBuddies(C_LayerName);
	
	declare netwrite Integer 	Net_PlayerWantsToInviteFriendsUpdate 		for UI;
	declare   			Integer	Pre_PlayerWantsToInviteFriendsUpdate 		for UI;
	Pre_PlayerWantsToInviteFriendsUpdate = Net_PlayerWantsToInviteFriendsUpdate;
	
	declare IMGAction1 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action1);
	declare IMGCancel 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Cancel);
	
	declare TXTSelect 				= _("Play");
	
	//L16N. Infinitive | Invite a friend to join the game
	declare TXTAction1 				= _("Invite friend");
	declare TXTClose 				= _("Close");

	declare ColorXmlBlack 			= Colors::GetColorXml("Black");
	declare ColorXmlRed 			= Colors::GetColorXml("Red");
	declare ColorXmlWhite 			= Colors::GetColorXml("White");
	declare FontMain 				= Font::GetFontName("Main");
	declare FontMainSmall2 			= Font::GetFontName("MainSmall2");
	declare FontTitle 				= Font::GetFontName("Title");
	
	declare ItemSizeX 				= UIXmlBuilder::GetSize(True).X;
	declare ItemSizeY 				= UIXmlBuilder::GetSize(True).Y;
	declare DetailsSize 			= ItemSizeY * C_PlayersMaxCount / 2.;
	declare PlayerSizeX 			= ItemSizeX * 2.;
	declare LabelSizeX 				= PlayerSizeX - 2*C_LabelPosX;
	declare InputSizeX 				= 0.4666666 * ItemSizeX;
	declare InputSpaceX 			= InputSizeX + ItemSizeX / 15.;
	
	declare Separator 	 			= ItemSizeY * 0.095;
	declare QuadSizeY				= ItemSizeY - Separator;
	declare QuadSizeYTitle 			= 2.*ItemSizeY - Separator;
	declare PosYLabel	 			= - ((ItemSizeY - Separator )* 0.5);
	
	declare IconSizeY 				= ItemSizeY - 3.;
	declare EchelonPosX 			= LabelSizeX*C_PosXRatio_Helmet + IconSizeY + 1.5;
	
	declare InputButtonPosY	 		= PosYLabel - 0.05;
	declare InputButtonMargin 		= 1.;
	declare InputButtonSizeX		= QuadSizeY - InputButtonMargin * 0.5;
	declare InputLabelSizeX			= InputSizeX - InputButtonSizeX - InputButtonMargin * 2.;
	
	declare ML_LabelStyleMain		= """ textfont="{{{FontMain}}}" textsize="{{{C_TextSizeMedium}}}" {{{CapsLock}}}  """;
	declare ML_LabelStyleInfo		= """ textfont="{{{FontMainSmall2}}}" textsize="{{{C_TextSizeSmall2}}}" {{{CapsLock}}}  """;
	
	declare Text[][] LayersContent = [["Custom", "", "", ""^C_LinesMaxCount, "", "Button", ""]];
	declare Text[][] LayersContent2 = [["Label", "", "", ""^C_LinesMaxCount, "", "Button", ""]];
	
	declare MLText = """
		<framemodel	id="Framemodel_Input">
			<quad 	id="Quad_Bg" 		posn="0.  										{{{-Separator}}}		.2"  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	image="{{{C_ImgBaseIngame^C_ImgBg}}}" />
			<quad 	id="Quad_Light" 	posn="0.  										{{{-Separator}}}		.2"  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	bgcolor="{{{ColorXmlRed}}}" hidden="1"/>
			<quad 	id="Quad_Input" 	posn="0.										{{{InputButtonPosY}}}	.3"  	sizen="{{{InputButtonSizeX}}} 	{{{InputButtonSizeX}}}" {{{AlignCr}}} 	 />
			<label 	id="Label_Input" 	posn="{{{-InputButtonSizeX-InputButtonMargin}}}	{{{PosYLabel}}}			.4"  	sizen="{{{InputLabelSizeX}}} 	{{{InputButtonSizeX}}}" {{{AlignC2r}}} 	textfont="{{{FontMainSmall2}}}" textsize="{{{C_TextSizeMedium}}}" textcolor="{{{ColorXmlWhite}}}" {{{CapsLock}}}/>
			<quad 	id="Quad_Fg" 		posn="0.  										{{{-Separator}}}		1."  	sizen="{{{InputSizeX}}} 		{{{QuadSizeY}}}" 		{{{AlignTr}}} 	image="{{{C_ImgBaseIngame^C_ImgFg}}}" />
		</framemodel>

		<framemodel	id="Framemodel_Player" >
			<quad
				{{{AlignTl}}}
				posn="0 {{{-Separator}}} 1.15"
				sizen="{{{PlayerSizeX}}} {{{QuadSizeY}}}"
				image="{{{C_ImgBaseIngame^C_ImgBgSmall}}}"
			/>

			<quad id="Button_Bg"
				{{{AlignTl}}}
				posn="0. {{{-Separator}}} 1.2"
				sizen="{{{PlayerSizeX}}} 	{{{QuadSizeY}}}"
				bgcolor="{{{ColorXmlRed}}}"
				scriptevents="1"
			/>

			<frame posn="{{{C_LabelPosX}}} {{{PosYLabel}}}">
				<quad  id="Quad_Flag"		posn="{{{LabelSizeX*C_PosXRatio_Flag}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY*2.}}} 	{{{IconSizeY}}}" 	bgcolor="0f0" hidden="1"/>
				<label id="Label_Name"		posn="{{{LabelSizeX*C_PosXRatio_Name}}} 	0 1.25" 					{{{AlignCl}}} 	{{{ML_LabelStyleMain}}} 						textcolor="{{{ColorXmlWhite}}}" text="POWERPROUST" />
				<quad  id="Quad_Helmet"		posn="{{{LabelSizeX*C_PosXRatio_Helmet}}} 	{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 		{{{IconSizeY}}}" 	bgcolor="0f0" />
				<quad  id="Quad_Echelon"	posn="{{{EchelonPosX}}} 					{{{-Separator*0.75}}} 1.25" {{{AlignCc}}} 	sizen="{{{IconSizeY}}} 		{{{IconSizeY}}}" 	bgcolor="0f0" hidden="0" />
				<label id="Label_OnlineStatus"		posn="{{{LabelSizeX}}} 						0 1.25" 					{{{AlignCr}}} 	{{{ML_LabelStyleInfo}}} 						textcolor="{{{ColorXmlWhite}}}" text="" />
			</frame>

			<quad
				{{{AlignTl}}}
				posn="0.  {{{-Separator}}}	2."
				sizen="{{{PlayerSizeX}}} 	{{{QuadSizeY}}}"
				image="{{{C_ImgBaseIngame^C_ImgFg}}}"
			/>
		</framemodel>
		
		<frame id="Frame_Main" posn="0. 0. 30." hidden="0">
		
		{{{UIXmlBuilder::GetXml("BgLeft", 	LayersContent, 1., <-ItemSizeX / 2., 0., 1.>)}}}
		{{{UIXmlBuilder::GetXml("BgRight", 	LayersContent, 1., < ItemSizeX / 2., 0., 1.>)}}}
		""";

		MLText ^= """
			<frame id="Frame_Title" posn="{{{-ItemSizeX}}} {{{8.0*ItemSizeY}}} 2.">
				<quad
					{{{AlignTl}}}
					posn="0 {{{-Separator}}} 0."
					sizen="{{{ItemSizeX*2.}}} {{{QuadSizeYTitle}}}"
					image="{{{C_ImgBaseIngame^C_ImgBgSmall}}}"
				/>

				<label id="Label_Title" 	
					{{{AlignCl}}} 	
					posn="{{{C_LabelPosX}}} 	{{{-QuadSizeY}}}	1."  
					textsize="{{{C_TextSizeBig}}}" 
					textcolor="{{{ColorXmlWhite}}}" 	
					textfont="{{{FontTitle}}}" 	
					
					text="{{{_("Buddies")}}}" 
					{{{CapsLock}}}
					hidden="0"
				/>
				
				<!--
				<quad
					{{{AlignTl}}}
					posn="2.5  -2.5	2."
					sizen="{{{52.}}} 	{{{13.}}}"
					image="{{{C_ImgBaseIngame^C_ImgOnlineMode}}}"
					id="Quad_OnlineLogo"
				/>
				-->
				
				<quad
					{{{AlignTl}}}
					posn="0.  {{{-Separator}}}	2."
					sizen="{{{ItemSizeX*2.}}} 	{{{QuadSizeYTitle}}}"
					image="{{{C_ImgBaseIngame^C_ImgFg}}}"
				/>
			</frame>
			""";
			
		MLText ^="""
			<frame id="Frame_Players" posn="{{{-ItemSizeX+DetailsSize}}} {{{4*ItemSizeY}}} 1.">
	""";
	
	// MLText ^= """{{{UIXmlBuilder::GetXml("BgPlayer", LayersContent2, 1., < 0., 0., 1.>)}}}""";
	
	for(I, 0, C_PlayersMaxCount-1) {
		MLText ^= """ <frameinstance id="Frame_Player{{{I}}}" 	posn="{{{-DetailsSize}}}	{{{-I*ItemSizeY}}} 1" 	modelid="Framemodel_Player" hidden="1"/>""";
		MLText ^= """ <quad  
						{{{AlignTl}}} 
						posn="{{{-DetailsSize}}} {{{-I*ItemSizeY-1.0}}} 2."
						sizen="{{{PlayerSizeX}}} {{{QuadSizeY-0.5}}}" 
						bgcolor="{{{ColorXmlBlack}}}"
						hidden="0"
					/> """;
	}
		
	MLText ^= """
			</frame>
		
			<frame id="Frame_Inputs" posn="{{{ItemSizeX}}} {{{-ItemSizeY*C_LinesMaxCount/2.+ItemSizeY}}} 1">
				<frameinstance id="Frame_InputInvite" posn="{{{-InputSpaceX}}} 	0 1" 		modelid="Framemodel_Input" />
				<frameinstance id="Frame_InputClose" 	posn="0 					0 1"	modelid="Framemodel_Input" />
			</frame>
		</frame>

	<script><!--

		#Include "TextLib" as TL
		{{{Manialink::GetIncludes()}}}

		#Const DebugName "L_OnlineScoresTable"
		#Const ONLINEMODE_TIMEATTACK 	0
		#Const ONLINEMODE_ROUNDS  		1
		#Const ONLINEMODE_LAPS   		2
		#Const ONLINEMODE_TEAM   		3

		#Const ONLINEPOINTS_TIME  		0
		#Const ONLINEPOINTS_POINTS  	1
		#Const ONLINEPOINTS_CP   		2
		
		#Const ONLINESTATUS_PLAYING		0
		#Const ONLINESTATUS_SPECTATOR	1
		#Const ONLINESTATUS_OFFLINE		2
		
		Text GetScore(CTmMlPlayer _Player, Integer _ScoreType)
		{
			declare Score = "";
			if (_Player.Score != Null) {
				switch(_ScoreType)
				{
					case ONLINEPOINTS_TIME 		: 
						if(_Player.Score.BestRace.Time > 0) 
							Score = ""^TL::TimeToText(_Player.Score.BestRace.Time, True);
					case ONLINEPOINTS_POINTS 	: Score = _Player.Score.Points^" Pts";
					case ONLINEPOINTS_CP 		: Score = _Player.CurrentNbLaps^" Laps";
				}
			}
			
			return Score;
		}
		
		Text GetModeName(Integer _ModeType)
		{
			declare ModeName = "";
			switch(_ModeType)
			{
				case ONLINEMODE_TIMEATTACK 	: ModeName = "Time Attack";
				case ONLINEMODE_ROUNDS	 	: ModeName = "Rounds";
				case ONLINEMODE_LAPS 		: ModeName = "Laps";
				case ONLINEMODE_TEAM 		: ModeName = "Team";
			}
			
			return ModeName;
		}
		
		Vec3 GetTeamColor(Integer _Team)
		{
			switch(_Team)
			{
				case 0 : return {{{Colors::GetColor("Red")}}};
				case 1 : return {{{Colors::GetColor("Blue")}}};
			}
			
			return {{{Colors::GetColor("White")}}};
		}
		
		Text GetEchelonImageUrl(Integer _Echelon) 
		{
			if(_Echelon > 9 || _Echelon < 0)
			{
				log(Now^" [ERROR] Can't find echelon number "^_Echelon);
				return "";
			}
			
			return "{{{C_ImgBaseManialinks^C_ImgBaseEchelon}}}"^"Echelon_"^_Echelon^".tga";
		}
		
		{{{Manialink::Load()}}}
		
		main()
		{
			// CONTROL DECLARATIONS
			
			
			declare Frame_InputInvite 		<=> (Page.MainFrame.GetFirstChild("Frame_InputInvite") 	as CMlFrame);
			declare Frame_InputClose 		<=> (Page.MainFrame.GetFirstChild("Frame_InputClose") 	as CMlFrame);

			declare Quad_InputInvite 		<=> (Frame_InputInvite		.GetFirstChild("Quad_Input")	as CMlQuad);
			declare Quad_InputClose 		<=> (Frame_InputClose		.GetFirstChild("Quad_Input")	as CMlQuad);
			
			declare Label_InputInvite 		<=> (Frame_InputInvite		.GetFirstChild("Label_Input")	as CMlLabel);
			declare Label_InputClose 		<=> (Frame_InputClose		.GetFirstChild("Label_Input")	as CMlLabel);
			
			Quad_InputInvite	.ImageUrl = "{{{IMGAction1}}}";
			Quad_InputClose		.ImageUrl = "{{{IMGCancel}}}";

			Label_InputInvite	.Value = "{{{TXTSelect}}}";
			Label_InputClose	.Value = "{{{TXTClose}}}";
			
			declare CMlFrame[] 	Frame_Player;
			declare CMlLabel[] 	Label_Name;
			// declare CMlQuad[] 	Quad_Flag;
			declare CMlQuad[] 	Quad_Helmet;
			declare CMlQuad[] 	Quad_Echelon;
			declare CMlLabel[]	Label_OnlineStatus;
			declare CMlQuad[] 	Buttons;
			
			for(I, 0, {{{C_PlayersMaxCount-1}}})
			{
				Frame_Player		.add((Page.MainFrame	.GetFirstChild("Frame_Player"^I) 		as CMlFrame));
				Label_Name			.add((Frame_Player[I]	.GetFirstChild("Label_Name") 			as CMlLabel));
				Quad_Helmet			.add((Frame_Player[I]	.GetFirstChild("Quad_Helmet") 			as CMlQuad));
				Label_OnlineStatus	.add((Frame_Player[I]	.GetFirstChild("Label_OnlineStatus") 	as CMlLabel));
				Quad_Echelon		.add((Frame_Player[I]	.GetFirstChild("Quad_Echelon") 			as CMlQuad));
				Buttons				.add((Frame_Player[I]	.GetFirstChild("Button_Bg") 			as CMlQuad));
				// Quad_Flag			
				
			}
			
			declare CMlQuad  ButtonSelected <=> Buttons[0];
			declare Text[Text][] RequestedBuddies for Page;
			
			// VAR FOR PAGE DECLARATIONS			
			declare Integer RoomMode  	for Page;
			declare Integer NbMaxPlayer for Page;
			declare Integer ScoreType 	for Page;
			declare Boolean IsTeam  	for Page;
			// declare Boolean M_PreInputValable = !Net_IsInputValable;
			
			// VAR DECLARATIONS
			declare M_PrevPageIsVisible = False;
			declare M_Page = 0;
			declare M_Index = 0;
			declare M_VisiblePlayersCount = 0;
			declare M_BuddySelectedIndex = 0;
			
			declare M_NeedsUpdate			= False;
			// declare M_IsBuddiesListReceived = False;
			declare M_PrevPage = -1;
			declare M_PrevIndex = -1;
			declare M_PrevPlayersCount = -1;
			
			declare Text[] InvitedFriends;
			InvitedFriends.clear();
			

			while(True)
			{
				yield;
				if(InputPlayer == Null) continue;

				if(M_PrevPageIsVisible != PageIsVisible)
				{
					M_PrevPageIsVisible 	= PageIsVisible;
					EnableMenuNavigation(PageIsVisible, False, Null, 2);
					
					if(M_PrevPageIsVisible)
						Audio.PlaySoundEvent("{{{SoundPath^SoundShowMenu}}}", {{{Volumes::GetVolumedB("MenuShow")-3.}}});
					else
						Audio.PlaySoundEvent("{{{SoundPath^SoundHideMenu}}}", {{{Volumes::GetVolumedB("MenuHide")}}});
					
					declare PlayerIndex = -1;
					foreach(I => Score in Scores)
						if(Score.User.Login == InputPlayer.Login)
							PlayerIndex = I;
					if(PlayerIndex != -1)
					{
						M_Page 	= PlayerIndex / {{{C_PlayersMaxCount}}};
						M_Index = PlayerIndex - M_Page * {{{C_PlayersMaxCount}}};
					}
					M_NeedsUpdate = True;
				}
				
				if(!PageIsVisible) continue;
				LibManialink_AnimLoop();
				
				// EVENTS UPDATE
				foreach(Event in PendingEvents)
				{
					switch(Event.Type)
					{
						case CMlEvent::Type::PluginCustomEvent :
						{
							switch(Event.PluginCustomEventType)
							{
								case "Event":
								{
								}
								case "BuddiesSent" : {

									M_NeedsUpdate = True;
								}
							}
						}
						
						case CMlEvent::Type::MenuNavigation :
						{
							switch (Event.MenuNavAction)
							{
								case CMlEvent::EMenuNavAction::Cancel :
								{
									SendCustomEvent("CloseBuddiesList", [""]);
									Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
								}
								case CMlEvent::EMenuNavAction::AppMenu :
								{
									SendCustomEvent("CloseBuddiesList", [""]);
									Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
								}
						
								case CMlEvent::EMenuNavAction::Select :
								{
									if(RequestedBuddies.existskey(M_BuddySelectedIndex))
									{
										declare Text FriendName = TL::ToUpperCase(RequestedBuddies[M_BuddySelectedIndex]["login"]);
										if(!InvitedFriends.exists(FriendName)) {
											InvitedFriends.add(FriendName);
											SendCustomEvent("InviteFriend", [""^RequestedBuddies[M_BuddySelectedIndex]["login"]]);
											Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
										} else {
											InvitedFriends.remove(FriendName);
										}
										M_NeedsUpdate = True;
									}
								}
								
								case CMlEvent::EMenuNavAction::Up :
								{
									if(M_Index > 0) 
										M_Index -= 1;
								}
								
								case CMlEvent::EMenuNavAction::Down :
								{
									if(M_Index < M_VisiblePlayersCount-1) 
										M_Index += 1;
								}
								
								case CMlEvent::EMenuNavAction::Left :
								{
									if(M_Page > 0) 
										M_Page -= 1;
								}
								
								case CMlEvent::EMenuNavAction::Right :
								{
									declare MaxPage = Scores.count / {{{C_PlayersMaxCount}}};
									if(M_Page < MaxPage) 
										M_Page += 1;
								}
								case CMlEvent::EMenuNavAction::AppMenu :
								{
									ShowInGameMenu();
								}
							}
						}
					}
				}

				// UPDATE SELECTED BUTTON
				if(M_PrevIndex != M_Index)
				{
					M_PrevIndex = M_Index;
					ButtonSelected = Buttons[M_Index];
					M_BuddySelectedIndex = M_Index + M_Page * {{{C_PlayersMaxCount}}};
					Audio.PlaySoundEvent("{{{SoundPath^SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
				}
				
				declare ButtonSelectedSinVar 	= ML::Sin(Now * 0.01) * 0.5 + 0.5;
				declare ButtonSelectedOpacity 	= 0.0 + ButtonSelectedSinVar * 1.;

				foreach(Button in Buttons)
					Button.Opacity = 0.;

				ButtonSelected.Opacity = ButtonSelectedOpacity;

				// M_NeedsUpdate = True;
				
				// UPDATE PLAYER LIST
				if(M_PrevPage != M_Page || M_NeedsUpdate)
				{
					if(M_PrevPage != M_Page)
						M_Index = 0;

					M_PrevPage = M_Page;
					M_PrevPlayersCount = RequestedBuddies.count;
					M_VisiblePlayersCount = 0;
					foreach(I => Frame in Frame_Player)
					{
						declare BuddiesIndex = I + M_Page * {{{C_PlayersMaxCount}}};
						if(BuddiesIndex < RequestedBuddies.count)
						{
							Frame.Visible 				= True;
							M_VisiblePlayersCount 		+= 1;
							declare Text FriendsName 	= TL::ToUpperCase(RequestedBuddies[BuddiesIndex]["displayname"]);
							Label_Name[I]	.Value 		= FriendsName;
							// Quad_Flag[I]	.Visible	= False;
							Quad_Helmet[I]	.Visible	= False;
							Quad_Echelon[I]	.Visible	= False;
							Label_OnlineStatus[I].Visible = True;
							
							
							declare Boolean FriendIsHere;
							foreach(Player in Players) {
								declare Text PlayerName = TL::ToUpperCase(Player.User.Name);
								if(PlayerName == FriendsName) {
									FriendIsHere = True;
								}
							}
							
							if(FriendIsHere) {
								//L16N. Status of a player saying he is currently in-game
								Label_OnlineStatus[I].Value = _("In the room");
							} else {
								FriendsName = TL::ToUpperCase(RequestedBuddies[BuddiesIndex]["login"]);
								if(!InvitedFriends.exists(FriendsName)) {
									Label_OnlineStatus[I].Value = "";
									// log(FriendsName);
								} else {
									// log(FriendsName);
									//L16N. Invitation has been sent to a friend to join him online
									Label_OnlineStatus[I].Value = _("Invitation sent");
								}
							}
							
						} else {
							Frame.Visible = False;
						}	
					}
					M_NeedsUpdate = False;
				}
			}
		}
	--></script>
	""";
	
	Layers::Create(C_LayerName, MLText);
	Layers::Attach(C_LayerName);
	declare Layer <=> Layers::Get(C_LayerName);
	Layer.InOutAnimation = CUILayer::EUILayerAnimation::RightFast;
	Layers::SetVisibility(C_LayerName, False);
}
*/

Void FlushEvent() {
	declare netwrite Integer 	Net_PlayerWantsToInviteFriendsUpdate 		for UI;
	declare   			Integer	Pre_PlayerWantsToInviteFriendsUpdate 		for UI;
	Pre_PlayerWantsToInviteFriendsUpdate = Net_PlayerWantsToInviteFriendsUpdate;
}

Void Load() {
	FlushEvent();
}

Void SetBuddiesListVisible(Boolean _Visible) {
	Layers::SetVisibility(C_LayerName, _Visible);
	declare netwrite Boolean Net_IsBuddiesListShown for UI;
	Net_IsBuddiesListShown = _Visible;
	if(_Visible == True) {
		UserController::Layer_GetBuddies(C_LayerName);
	}
}

Boolean IsBuddiesListShown() {
	return Layers::IsVisible(C_LayerName);
}

Boolean MustShowBuddiesList() {
	declare netwrite Integer 	Net_PlayerWantsToInviteFriendsUpdate 		for UI;
	declare   			Integer	Pre_PlayerWantsToInviteFriendsUpdate 		for UI;
	if(Pre_PlayerWantsToInviteFriendsUpdate != Net_PlayerWantsToInviteFriendsUpdate) {
		Pre_PlayerWantsToInviteFriendsUpdate = Net_PlayerWantsToInviteFriendsUpdate;
		return True;
	}
	return False;
}

Void PlayerWantsToBrowseUpdate() {
	declare netwrite Integer Net_PlayerWantsToBrowse for UI;
	Net_PlayerWantsToBrowse += 1;
}

Void PlayerWantsToStopBrowseUpdate() {
	declare netwrite Integer Net_PlayerWantsToStopBrowse for UI;
	Net_PlayerWantsToStopBrowse += 1;
}

Void Loop() {
	UserController::Loop();
	
	if(MustShowBuddiesList()) {
		// SetBuddiesListVisible(True);
		UserMgr.ShowInviteUI(DataMgr.MenuUserId);
	}
	
	declare netread Integer Net_GamePhase for UI;
	if(Net_GamePhase == C_GAMEPHASE_POSTGAME) {
		if(IsBuddiesListShown()) {
			SetBuddiesListVisible(False);
		}
	}
	
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "InviteFriend" : {
				if(Event.CustomEventData.existskey(0)) {
					UserMgr.InviteBuddyToServer(DataMgr.MenuUserId, Event.CustomEventData[0]);
					log(Now^"> INVITE BUDDY: "^Event.CustomEventData[0]);
				}
			}
			case "CloseBuddiesList" : {
				SetBuddiesListVisible(False);
			}
		}
	}
}