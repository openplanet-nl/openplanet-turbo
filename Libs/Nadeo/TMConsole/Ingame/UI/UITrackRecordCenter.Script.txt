/** 
 *	UICampaignRecordCenter
 */
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Nadeo/TMConsole/UIXmlBuilder.Script.txt"							as UIXmlBuilder
#Include "Libs/Nadeo/UIPadButtons.Script.txt"									as UIButtons
// #Include "Libs/Nadeo/RecordsHandler.Script.txt"									as UIRecordsHandler
#Include "Libs/Nadeo/TMConsole/Ingame/FriendsRecordsHandler.Script.txt"    		as FriendsRecordsHandler
#Include "Libs/Nadeo/SystemText.Script.txt" 									as SystemText
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"						as Layers
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIButtonNamesPopup.Script.txt"			as UIButtonNamesPopup
#Include "Libs/Nadeo/Manialink2.Script.txt"										as Manialink

#Const C_ImgBaseManialinks				"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_LAYERNAME_FRIENDSRECORD		"TMC_Lib_CampaignFriendsRecord"
#Const C_PlayersMaxCount	10

declare Integer G_PreBestTime;
declare Integer G_ForceUpdate;

Text GetMLRecordCenter() {
	UIButtons::Load();
	SystemText::Load();

	declare Text 	IMGSelect            	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMGCancel            	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Cancel);
	declare Text 	IMGSort  			 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action1);
	declare Text 	IMGProfile           	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action2);
	// declare Text	TXTSelect 				= _("Details");
	declare Text	TXTCancel 				= _("Back");
	declare Text	TXTSort 				= _("Sort");
	declare Text 	TXTProfile 				= SystemText::GetShowProfileTextForInputCard();
	
	declare ColorGrey 						= Colors::GetColor("Grey");
	declare ColorWhite 						= Colors::GetColor("White");
	
	declare RanksParam 						= "NoRank Medal Button";
	declare PlayerRanksParam 				= "NoRank Medal";
	declare Vec3 LayerPos 					= <-85., 5., 20.>;
	// declare PlayerRankParam					= "NoRank Medal";
	
	declare Text[][] 	LayerContent;
	LayerContent.add(["Title", 	"Title",    "Record Center", 	"2",	"", "", ""]);
	
	// LayerContent.add(["Switch", 	"Switch",  	"Page 1",	 		"1",	"", "L1R1", ""]);
	// LayerContent.add(["Label", 	"Player",  	"VersusText",	 		"1",	CustomLabel, "Big Bg3", ""]);
	LayerContent.add(["Rank", "Player", "Player Rank", "1",	"", PlayerRanksParam, ""]);
	LayerContent.add(["Space", 	"", 	    "", 			 	"1",	"", "", ""]);
	
	for(I, 0, 9) {
		LayerContent.add(["Rank", "Rank"^I, "Player "^I+1, "1", "", RanksParam, ""]);
	}
	
	declare ColorYellow 	= Colors::GetColor("Yellow");
	
	LayerContent.add(["Space", 	"", 	    "", 			 	"1",	"", "", ""]);
	LayerContent.add(["Label", 	"Filters",  "",	 		"1",	"", 	"", ""]);
	LayerContent.add(["Input", 	"Input",    "", 			 	"1",	"", "", ""]);
	LayerContent.add(["Input", 	"Input2",    "", 			 	"1",	"", "", ""]);
	
	declare TXTSelect 	= UIButtonNamesPopup::GetSelectText();
	// declare TXTCancel 	= UIButtonNamesPopup::GetBackText();
	
	// declare Text[][] LayerContent = [["Title", "", "", ""^16, "", "Button", ""]];
	
	declare MLShowAnim = UIXmlBuilder::GetShowAnim(LayerContent, LayerPos);
	
	return """
		<frame>
		
			{{{UIXmlBuilder::GetXml(C_LAYERNAME_FRIENDSRECORD, LayerContent, 1., LayerPos)}}}
						
		</frame>
		
		<script><!--
			#Include "TextLib" as TL
			#Include "MathLib" as ML
			{{{Manialink::GetIncludes()}}}
			
			#Const DebugName  "L_{{{C_LAYERNAME_FRIENDSRECORD}}}"
			#Const TMC_FRIENDSRECORDCHOICE_DEFY		0
			#Const TMC_FRIENDSRECORDCHOICE_RETURN	1
			#Const C_SORTBY_TIME  		0
			#Const C_SORTBY_DATE   		1
			#Const C_SORTBY_RECORD 		2
			
			{{{UIXmlBuilder::GetConst()}}}
			
			declare Integer G_SelectedFilter;
			
			{{{Manialink::Load()}}}
			{{{UIXmlBuilder::GetMLFunctions()}}}
			{{{UIButtons::GetMLFunctionPcButtons()}}}
			
			Void EmptyFunction() {
			
			}
			
			Text GetFilterTitle() {
				switch(G_SelectedFilter) {
					//L16N. times means best chrono.
					case C_SORTBY_TIME 		: return _("Sort by best times");
					case C_SORTBY_DATE 		: return _("Sort by: Latest records");
					case C_SORTBY_RECORD	: return _("Sort by records");
				}
				return "";
			}
			
			main() {
				{{{MLShowAnim[0]}}}
				declare Frame_{{{C_LAYERNAME_FRIENDSRECORD}}} <=> (Page.MainFrame.GetFirstChild("Frame_{{{C_LAYERNAME_FRIENDSRECORD}}}") 		as CMlFrame);
				
				declare Quad_RightInput 			<=> (Page.MainFrame.GetFirstChild("Quad_RightInputInput") 	as CMlQuad);
				declare Label_RightInput 		<=> (Page.MainFrame.GetFirstChild("Label_RightInputInput") 	as CMlLabel);
				
				declare Quad_RightInput2 		<=> (Page.MainFrame.GetFirstChild("Quad_RightInputInput2") 	as CMlQuad);
				declare Label_RightInput2 		<=> (Page.MainFrame.GetFirstChild("Label_RightInputInput2") 	as CMlLabel);
				
				declare Quad_LeftInput 			<=> (Page.MainFrame.GetFirstChild("Quad_LeftInputInput") 	as CMlQuad);
				declare Label_LeftInput 		<=> (Page.MainFrame.GetFirstChild("Label_LeftInputInput") 	as CMlLabel);
				
				declare Quad_LeftInput2			<=> (Page.MainFrame.GetFirstChild("Quad_LeftInputInput2") 	as CMlQuad);
				declare Label_LeftInput2		<=> (Page.MainFrame.GetFirstChild("Label_LeftInputInput2") 	as CMlLabel);
				
				Quad_RightInput2.ImageUrl 		= "{{{IMGSelect}}}";
				Label_RightInput2.Value 		= "{{{TXTSelect}}}";
				
				Quad_RightInput.ImageUrl 		= "{{{IMGCancel}}}";
				Label_RightInput.Value 			= "{{{TXTCancel}}}";
				
				Quad_LeftInput.ImageUrl			= "{{{IMGSort}}}";
				Label_LeftInput.Value			= "{{{TXTSort}}}";
				
				Quad_LeftInput2.ImageUrl		= "{{{IMGProfile}}}";
				Label_LeftInput2.Value			= "{{{TXTProfile}}}";
				
				declare netwrite Integer Net_FriendsOpponent_Choice for UI;
				
				declare CWebServicesTaskResult_BuddiesChallengeRecord 	RecordsTaskResult 		for Page;
				declare Boolean 				RecordsTaskResultLoaded	for Page;
				declare Text[Text][] 			RequestedTrackRecord 	for Page;
			
				declare M_PrevPageIsVisible 			= False;
				declare M_PrevIsPauseMenuEnabled 		= False;
				declare M_PrevIsPadMissingMenuEnable 	= False;
				declare M_PrevIsFavoriteMenuEnable 		= False;
				
				declare netwrite Boolean Net_IsPauseMenuEnabled 				for UI;
				declare netwrite Boolean Net_IsPadMissingMenuEnable 			for UI;
				declare netwrite Boolean Net_IsFavoriteMenuEnable 				for UI;
				declare netwrite Boolean Net_IsPlayerConnectedMasterServer 		for UI;
				
				declare CInputPad::EPadType Net_LibLastDeviceUsed_LastDeviceTypeUsed 	for UI;
				
				declare netwrite Boolean 	Net_CanUseTask								for UI;
				
				// declare Integer FriendsRecordsUpdate for UI;
				declare netwrite Integer FriendsRecordsHandler_RecordsTaskResultUpdate 		for UI;
				declare netread Integer 	Net_BestTime 		for UI;
				declare	netread Integer 	Net_BestMedal 		for UI;
				
				declare Text[Text][] FinalLogin;
				
				declare M_Page 					= 0;
				declare M_Index 				= 0;
				
				declare CMlQuad[] 	Buttons;
				declare CMlLabel[]	PlayersName;
				declare CMlLabel[]	PlayersTime;
				declare CMlLabel[]	PlayersScore;
				declare CMlLabel[]	PlayersRecordCount;
				declare CMlLabel[]	OpponentRecordCount;
				declare CMlFrame[]	PlayersFrame;
				declare CMlQuad[]	PlayersMedal;
				
				declare CMlLabel PlayerName 	<=> (Page.MainFrame.GetFirstChild("Label_Name_Player") 	as CMlLabel);
				declare CMlQuad  PlayerMedal 	<=> (Page.MainFrame.GetFirstChild("Quad_Medal_Player") 	as CMlQuad);
				declare CMlLabel PlayerTime 	<=> (Page.MainFrame.GetFirstChild("Label_Time_Player") 	as CMlLabel);
				declare CMlLabel PlayerRecordCount 			<=> (Page.MainFrame.GetFirstChild("Label_PlayerRecordCount_Player") 	as CMlLabel);
				declare CMlLabel PlayerLabel_Tiret 			<=> (Page.MainFrame.GetFirstChild("Label_Tiret_Player") 	as CMlLabel);
				declare CMlLabel PlayerOpponentRecordCount 	<=> (Page.MainFrame.GetFirstChild("Label_OpponentRecordCount_Player") 	as CMlLabel);
				PlayerRecordCount.Visible 		= False;
				PlayerLabel_Tiret.Visible 			= False;
				PlayerOpponentRecordCount.Visible 	= False;
				
				for(I, 0, 9) {
					Buttons			.add((Page.MainFrame	.GetFirstChild("Button_Rank"^I) 		as CMlQuad));
					PlayersMedal	.add((Page.MainFrame	.GetFirstChild("Quad_Medal_Rank"^I) 		as CMlQuad));
					PlayersName		.add((Page.MainFrame	.GetFirstChild("Label_Name_Rank"^I) 		as CMlLabel));
					PlayersTime		.add((Page.MainFrame	.GetFirstChild("Label_Time_Rank"^I) 		as CMlLabel));
					PlayersFrame	.add((Page.MainFrame	.GetFirstChild("Frame_Rank"^I) 		as CMlFrame));
					PlayersRecordCount			.add((Page.MainFrame	.GetFirstChild("Label_PlayerRecordCount_Rank"^I) 		as CMlLabel));
					OpponentRecordCount			.add((Page.MainFrame	.GetFirstChild("Label_OpponentRecordCount_Rank"^I) 		as CMlLabel));
					// PlayersRecordCount[I].Value = "5 - 6";
					PlayersFrame[I].Hide();
				}

				declare CMlQuad  ButtonSelected <=> Buttons[0];
				declare Boolean HasBeenAffected = False;
				declare M_VisiblePlayersCount 	= 0;
				declare M_PlayerSelectedIndex 	= 0;
				declare M_FriendsRecordsUpdate 	= 0;
				declare M_CanUseTask 			= False;
				declare M_MustUpdate 			= False;
				declare M_PreConnectedToMasterServer = False;
				// declare M_UpdateFriendsDisplayed = False;
				
				//Because we are on PC
				// Quad_LeftInput2.Visible 	= False;
				// Label_LeftInput2.Visible 	= False;
				
				while(True) {
					yield;
					if(InputPlayer == Null) continue;
					LibManialink_AnimLoop();
					
					{{{MLShowAnim[1]}}}
					
					Quad_RightInput2.ImageUrl 		= GetImageForButton("{{{IMGSelect}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
					Quad_RightInput.ImageUrl 		= GetImageForButton("{{{IMGCancel}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
					Quad_LeftInput.ImageUrl			= GetImageForButton("{{{IMGSort}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
					Quad_LeftInput2.ImageUrl		= GetImageForButton("{{{IMGProfile}}}", Net_LibLastDeviceUsed_LastDeviceTypeUsed);
					
					// log(Now^" "^Net_IsPlayerConnectedMasterServer);
					if(Net_IsPlayerConnectedMasterServer != M_PreConnectedToMasterServer) {
						if(Net_IsPlayerConnectedMasterServer) {
							for(I, 0, 9) {
								Buttons[I].Show();
								PlayersName[I].TextColor = {{{ColorWhite}}};
								PlayersTime[I].TextColor = {{{ColorWhite}}};
							}
							Quad_LeftInput2.Visible 		= True;
							Label_LeftInput2.Visible 	= True;
						} else {
							for(I, 0, 9) {
								Buttons[I].Hide();
								PlayersName[I].TextColor = {{{ColorGrey}}};
								PlayersTime[I].TextColor = {{{ColorGrey}}};
							}
							Quad_LeftInput2.Visible 	= False;
							Label_LeftInput2.Visible 	= False;
						}
						M_PreConnectedToMasterServer = Net_IsPlayerConnectedMasterServer;
					}
					
					// log(Label_LeftInput2.Value);
					
					if(!Net_CanUseTask) {
						Quad_LeftInput.Visible			= False;
						Label_LeftInput.Visible			= False;
					} else {
						Quad_LeftInput.Visible			= True;
						Label_LeftInput.Visible			= True;
					}
					
					PlayerName.TextColor 	= <{{{ColorYellow.X}}}, {{{ColorYellow.Y}}}, {{{ColorYellow.Z}}}>;
					PlayerTime.TextColor 	= <{{{ColorYellow.X}}}, {{{ColorYellow.Y}}}, {{{ColorYellow.Z}}}>;
					PlayerName.Value 		= InputPlayer.User.Name;

					if(Net_BestTime > 0) {
						PlayerTime.Value 		= TL::TimeToText(Net_BestTime, True);
					} else {
						PlayerTime.Value 		= "--:--.--";
					}
					
					if(M_PrevPageIsVisible != PageIsVisible) {
						M_PrevPageIsVisible = PageIsVisible;
						
						if(M_PrevPageIsVisible) {
							SendCustomEvent("GetTrackRecords", [""^G_SelectedFilter, "False"]);
							declare Label_Filters <=> (Page.GetFirstChild("Label_Filters") as CMlLabel);
							Label_Filters.Value = GetFilterTitle();
							
							EnableMenuNavigation(True, False, Null, 2);
							M_LaunchShowAnim 		= True;
							// M_MustUpdate			= True;
						} else {
							EnableMenuNavigation(False, False, Null, 2);
						}
						Net_FriendsOpponent_Choice = -1;
					}
					
					declare IsLayerEnable 				= True;
					IsLayerEnable = M_PrevPageIsVisible && !(Net_IsPauseMenuEnabled || Net_IsPadMissingMenuEnable || Net_IsFavoriteMenuEnable);
					
					if(IsLayerEnable != Frame_{{{C_LAYERNAME_FRIENDSRECORD}}}.Visible) {
						Frame_{{{C_LAYERNAME_FRIENDSRECORD}}}.Visible  = IsLayerEnable;
						M_LaunchShowAnim 		= True;
					}
					
					foreach(Event in PendingEvents)
					{
						switch(Event.Type)
						{
							
							case CMlEvent::Type::MouseClick: {
								Net_FriendsOpponent_Choice = 0;
								SendCustomEvent("LoadGhostUrl", [""^RequestedTrackRecord[M_PlayerSelectedIndex]["GhostUrl"]]);
								
							}
							
							case CMlEvent::Type::MouseOver: {
								foreach(IndexButton => Button in Buttons) {
									if(Button.ControlId == Event.ControlId) {
										M_Index 		= IndexButton;
										M_MustUpdate 	= True;
									}
								}
							}
							
							case CMlEvent::Type::MenuNavigation :
							{
								switch (Event.MenuNavAction)
								{
									case CMlEvent::EMenuNavAction::Select : {
										Net_FriendsOpponent_Choice = 0;
										SendCustomEvent("LoadGhostUrl", [""^RequestedTrackRecord[M_PlayerSelectedIndex]["GhostUrl"]]);
									}
									
									case CMlEvent::EMenuNavAction::Action1 : {
										if(Net_CanUseTask) {
											G_SelectedFilter += 1;
											if(G_SelectedFilter > C_SORTBY_RECORD) {
												G_SelectedFilter = C_SORTBY_TIME;
											}
											
											SendCustomEvent("GetTrackRecords", [""^G_SelectedFilter, "False"]);
											declare Label_Filters <=> (Page.GetFirstChild("Label_Filters") as CMlLabel);
											Label_Filters.Value = GetFilterTitle();
										}
									}
									
									case CMlEvent::EMenuNavAction::Action2 : {
										if(Net_IsPlayerConnectedMasterServer) {
											SendCustomEvent("ShowProfile", [""^RequestedTrackRecord[M_PlayerSelectedIndex]["OpponentLogin"]]);
										}
									}
									
									case CMlEvent::EMenuNavAction::Cancel : {
										Net_FriendsOpponent_Choice = 1;
										// SendCustomEvent("ReleaseRecordsTaskResult", ["Main"]);
									}
									
									case CMlEvent::EMenuNavAction::AppMenu : {
										ShowInGameMenu();
									}
									
									case CMlEvent::EMenuNavAction::Up :
									{
								
										if(M_Index > 0) 
											M_Index -= 1;
										
										M_MustUpdate = True;
									}
									
									case CMlEvent::EMenuNavAction::Down :
									{
										if(M_Index < M_VisiblePlayersCount-1)
											M_Index += 1;
											
										M_MustUpdate = True;
									}
									
									case CMlEvent::EMenuNavAction::Left :
									{
										declare MaxPage = RequestedTrackRecord.count / {{{C_PlayersMaxCount}}};
										if(M_Page > 0) {
											M_Page -= 1;
										} else {
											
											M_Page = MaxPage;
										}
										M_MustUpdate = True;
									}
									
									case CMlEvent::EMenuNavAction::Right :
									{
										
										declare MaxPage = RequestedTrackRecord.count / {{{C_PlayersMaxCount}}};
										if(M_Page < MaxPage) {
											M_Page += 1;
										} else {
											M_Page = 0;
										}
										M_MustUpdate = True;
									}									
								}
							}
						}
					}
					
					if(FriendsRecordsHandler_RecordsTaskResultUpdate != M_FriendsRecordsUpdate) {
						M_MustUpdate = True;
						log(Now^">[MANIALINK] FRIENDS RECORD ARE DIFFERENT");
						M_FriendsRecordsUpdate = FriendsRecordsHandler_RecordsTaskResultUpdate;
					}
					
					if(RequestedTrackRecord.count > 0 && M_MustUpdate) {
						log(Now^">[MANIALINK] FRIENDS RECORD UPDATE");
						M_VisiblePlayersCount = 0;
						
						for(I, 0, 9) {	
							declare BuddyIndex = I + M_Page * {{{C_PlayersMaxCount}}};
							if(RequestedTrackRecord.existskey(BuddyIndex)) {
								M_VisiblePlayersCount += 1;
								PlayersFrame[I].Show();
								declare Text[Text] BuddyThing = RequestedTrackRecord[BuddyIndex];
								if(BuddyThing.existskey("RecordOnMap"))	PlayersTime[I].Value			= TL::TimeToText(TL::ToInteger(BuddyThing["RecordOnMap"]), True);
								if(BuddyThing.existskey("OpponentDisplayName")) PlayersName[I].Value 	= BuddyThing["OpponentDisplayName"];
								if(BuddyThing.existskey("OpponentBestRecordCount") && BuddyThing.existskey("BestRecordCount")) {
									PlayersRecordCount[I].Value = "$ed0"^BuddyThing["BestRecordCount"];
									// PlayersRecordCount[I].Value = "$ed0"^100;
									OpponentRecordCount[I].Value = "$fff"^BuddyThing["OpponentBestRecordCount"];
									// OpponentRecordCount[I].Value = "$fff"^100;
								}
								 // PlayersName[I].Value = "MWMWMWMWMWMWMWMW";
							} else {
								PlayersFrame[I].Hide();
							}
						}					
					}
					
					M_PlayerSelectedIndex = M_Index + M_Page * {{{C_PlayersMaxCount}}};
					
					ButtonSelected = Buttons[M_Index];
					declare ButtonSelectedSinVar 	= ML::Sin(Now * 0.01) * 0.5 + 0.5;
					declare ButtonSelectedOpacity 	= 0.0 + ButtonSelectedSinVar * 1.;

					foreach(Button in Buttons)
						Button.Opacity = 0.;

					ButtonSelected.Opacity = ButtonSelectedOpacity;
					
					M_MustUpdate = False;
				}
			}
		--></script>
	""";
}

Void FlushEvent() {
	declare netread 	Integer Net_ShowTrackRecordCenterUpdate for UI;
	declare				Integer Pre_ShowTrackRecordCenterUpdate for UI;
	Pre_ShowTrackRecordCenterUpdate = Net_ShowTrackRecordCenterUpdate;
	
	declare netread 	Integer Net_HideTrackRecordCenterUpdate for UI;
	declare				Integer Pre_HideTrackRecordCenterUpdate for UI;
	Pre_HideTrackRecordCenterUpdate = Net_HideTrackRecordCenterUpdate;
	
	// declare Integer FriendsRecordsUpdate 			for UI;
	// declare Integer PreFriendsRecordsUpdate			for UI;
	// PreFriendsRecordsUpdate = FriendsRecordsUpdate;
}

Void Load() {
	FlushEvent();
	// log(GetMLRecordCenter());
	Layers::Create(C_LAYERNAME_FRIENDSRECORD, GetMLRecordCenter());
	Layers::Attach(C_LAYERNAME_FRIENDSRECORD);
	declare Layer <=> Layers::Get(C_LAYERNAME_FRIENDSRECORD);
	Layer.InOutAnimation = CUILayer::EUILayerAnimation::LeftFast;
	Layers::SetVisibility(C_LAYERNAME_FRIENDSRECORD, False);
	
	declare CUILayer Layer_FriendsRecords 			for This;
	Layer_FriendsRecords 	= Layer;
	G_ForceUpdate 			= Now;
}

Boolean MustShowTrackRecordCenter() {
	declare netread 	Integer Net_ShowTrackRecordCenterUpdate for UI;
	declare				Integer Pre_ShowTrackRecordCenterUpdate for UI;
	if(Pre_ShowTrackRecordCenterUpdate != Net_ShowTrackRecordCenterUpdate) {
		Pre_ShowTrackRecordCenterUpdate = Net_ShowTrackRecordCenterUpdate;
		return True;
	}
	return False;
}

Boolean MustHideTrackRecordCenter() {
	declare netread 	Integer Net_HideTrackRecordCenterUpdate for UI;
	declare				Integer Pre_HideTrackRecordCenterUpdate for UI;
	if(Pre_HideTrackRecordCenterUpdate != Net_HideTrackRecordCenterUpdate) {
		Pre_HideTrackRecordCenterUpdate = Net_HideTrackRecordCenterUpdate;
		return True;
	}
	return False;
}

Boolean GetTrackRecordCenterAnswer()
{
	declare netwrite Boolean Net_Layer_CampaignTrackRecord_PopupChoice 	for UI;
	declare netwrite Integer Net_Layer_CampaignTrackRecord_PopupUpdate 	for UI;
	declare 		Integer Prev_Layer_CampaignTrackRecord_PopupUpdate 	for UI;
	if(Prev_Layer_CampaignTrackRecord_PopupUpdate != Net_Layer_CampaignTrackRecord_PopupUpdate)
	{
		Prev_Layer_CampaignTrackRecord_PopupUpdate = Net_Layer_CampaignTrackRecord_PopupUpdate;
		Layers::SetVisibility(C_LAYERNAME_FRIENDSRECORD, False);
		return True;
	}
	return False;
}

Void ReleaseTrackRecordResult() {
	FriendsRecordsHandler::ReleaseRecordsTaskResult();
}

Void SetVisibility(Boolean _Show) {
	Layers::SetVisibility(C_LAYERNAME_FRIENDSRECORD, _Show);
}

Void Loop() {
	declare netread Integer		Net_BestTime 							for	UI;
	declare netwrite Boolean 	Net_IsPlayerConnectedMasterServer 		for UI;
	declare Integer		Net_IsMedalOpenUpdate			for UI;
	declare	Integer		Pre_IsMedalOpenUpdate			for UI;
	
	// declare Integer FriendsRecordsUpdate 			for UI;
	// declare Integer PreFriendsRecordsUpdate			for UI;
	declare Boolean Pre_IsBuddiesMapRecordDirty 	for UI;
	
	// if(ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid)) 
		// log(ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid));
	
	/*
	if(Pre_IsBuddiesMapRecordDirty != ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid)) {
		Pre_IsBuddiesMapRecordDirty = ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid);
		if(Pre_IsBuddiesMapRecordDirty) {
			log("NEW RECORD FROM FRIEND");
			FriendsRecordsUpdate += 1;
		}
	}
	*/
	
	// if((Now >= G_NextUpdate || PreFriendsRecordsUpdate != FriendsRecordsUpdate)) {
	if(Net_IsMedalOpenUpdate != Pre_IsMedalOpenUpdate) {
		if(ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid) || (Now >= G_ForceUpdate && G_ForceUpdate != -1)) {
			log(Now^"--------UPDATE FRIENDS RECORD------------");
			log(Now^">OPEN MENU				: "^(Net_IsMedalOpenUpdate != Pre_IsMedalOpenUpdate));
			log(Now^">NEW RECORD FROM FRIEND: "^( ScoreMgr.Campaign_IsBuddiesMapRecordDirty(DataMgr.MenuUserId, Map.MapInfo.MapUid) ));
			
			FriendsRecordsHandler::ReleaseRecordsTaskResult();
			FriendsRecordsHandler::LoadTrackRecordTaskResult("0");
			G_ForceUpdate			= -1;
			// G_PreBestTime 			= Net_BestTime;
			
			// Pre_IsMedalOpenUpdate	= Net_IsMedalOpenUpdate;
			// PreFriendsRecordsUpdate	= FriendsRecordsUpdate;
			// log(Now^">TIMER UPDATE			: "^( Now >= G_NextUpdate));
		} 
		Pre_IsMedalOpenUpdate	= Net_IsMedalOpenUpdate;
	}
	
	if(MustShowTrackRecordCenter()) {
		declare netwrite Text Net_FriendsOpponent_Url for UI;
		Net_FriendsOpponent_Url = "";
		Layers::SetVisibility(C_LAYERNAME_FRIENDSRECORD, True);
	}
	
	if(MustHideTrackRecordCenter()) {
		Layers::SetVisibility(C_LAYERNAME_FRIENDSRECORD, False);
	}
	
	foreach(Event in PendingEvents)
	{
		if(Event.Type == CMlAppEvent::EType::LayerCustomEvent)
		{
			switch(Event.CustomEventType) {
				case "Something" : {
					log("RECEIVE SOMETHING EVENT");
				}
				case "ShowProfile" : {
					if(Event.CustomEventData.existskey(0)) {
						UserMgr.ShowProfile(DataMgr.MenuUserId, Event.CustomEventData[0]);
					}
				}
				case "LoadGhostUrl" : {
					if(Event.CustomEventData.existskey(0)) {
						declare netwrite Text Net_FriendsOpponent_Url for UI;
						Net_FriendsOpponent_Url = Event.CustomEventData[0];
						log("SET OPPONENT URL: "^Net_FriendsOpponent_Url);
					}
				}
			}
		}
	}
	
	FriendsRecordsHandler::Loop();
}