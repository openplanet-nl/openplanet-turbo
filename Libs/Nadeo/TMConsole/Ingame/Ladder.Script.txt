/**
 *	ScoreTable Library
 * 	Especially made for console
 */

#Const Version				"2014-07-17"
#Const ScriptName			"Ladder.Script.txt"

#Include "MathLib" as ML
#Include "TextLib" as TL

#Include "Libs/Nadeo/Layers2.Script.txt" 				as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt" 	as Font
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIPopupBuilder.Script.txt"			as UIPopupBuilder
#Include "Libs/Nadeo/UIPadButtons.Script.txt"			as UIButtons
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 		as Colors


#Const VolumeSilent 		-99.
#Const VolumeDefault 		-3.

#Const C_LayerNameLadder	"LibTMC_LayerName_Ladder"


// ---------------------------------- //
// Functions
// ---------------------------------- //

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() 
{
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() 
{
	return ScriptName;
}

// ---------------------------------- //
/// Unload the library
Void Unload() 
{
	Layers::Destroy(C_LayerNameLadder);
}

// ---------------------------------- //
/// Load the library
Void Load(CTmMode _Mode) 
{
	Unload();
	UIButtons::Load();
	foreach(Player in _Mode.AllPlayers)
	{
		declare UI <=> UIManager.GetUI(Player);
		if(UI != Null)
		{
			declare IMGSelect 	= UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select);
			declare TXTSelect 	= _("Continue");
			declare TXTGo 		= _("let's go !");
			declare TXTCancel 	= _("Back");
			
			declare netwrite Text[] 	Net_MenuActionInputs			for UI;

			Net_MenuActionInputs = [IMGSelect, TXTSelect];
		}
	}
	
	declare PopupSizeX		= UIPopupBuilder::GetSize(True).X;
	declare FontMain		= Font::GetFontName("Main");
	declare RankDiffColor	= Colors::GetColorXml("GreenMaster");
	declare RankTextSize 	= 10;
	declare RankSizeX 		= 40;
	declare RankPosX 		= 4.5;
	declare RankPosY 		= -8.;
	declare RankDiffPosX 	= RankPosX + RankSizeX;
	
	declare LadderML = """
		<frame id="Frame_Rank" posn="0. {{{RankPosY}}}">
			<label 	id="Label_Rank" 	posn="{{{RankPosX}}}  		0.  1."	textfont="{{{FontMain}}}" 	textsize="{{{RankTextSize}}}" text="146508" 	valign="center"	halign="left" />
			<label 	id="Label_RankDiff" posn="{{{RankDiffPosX}}}  	0.  1."	textfont="{{{FontMain}}}" 	textsize="{{{RankTextSize}}}" text="1268"  		valign="center"	halign="left" textcolor="{{{RankDiffColor}}}" />
		</frame>
	""";
	
	declare LadderFunctions = """
	
		Void SetLabelPositionNextTo(CMlLabel _LabelNextTo, CMlLabel _LabelToPlace, Real _Margin)
		{
			declare SizeX 		= _LabelNextTo.ComputeWidth(_LabelNextTo.Value);
			declare SizeX2 		= _LabelToPlace.ComputeWidth(_LabelToPlace.Value);
			declare PosX 		= _LabelNextTo.RelativePosition.X;
			declare NewPosition = PosX + _Margin;
			
			if(_LabelNextTo	.HorizontalAlign == CMlControl::AlignHorizontal::Left) 		NewPosition += SizeX;
			if(_LabelNextTo	.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) 	NewPosition += SizeX * 0.5;
			
			if(_LabelToPlace.HorizontalAlign == CMlControl::AlignHorizontal::Right) 	NewPosition += SizeX2;
			if(_LabelToPlace.HorizontalAlign == CMlControl::AlignHorizontal::HCenter) 	NewPosition += SizeX2 * 0.5;
			
			_LabelToPlace.RelativePosition.X = NewPosition - 0.5;
		}

		Real GetTotalWidth(CMlLabel[] _Labels, Real _Margin)
		{
			declare Width = -_Margin;
			
			foreach(Label in _Labels) Width += Label.ComputeWidth(Label.Value) + _Margin;
			
			return Width;
		}

		Real GetTotalWidth(CMlLabel[] _Labels)
		{
			return GetTotalWidth(_Labels, 0.);
		}

		Real GetTotalWidthFromFirstToLast(CMlLabel _LabelFirst, CMlLabel _LabelLast)
		{
			
			declare PosX1 	= _LabelFirst	.AbsolutePosition.X;
			declare PosX2 	= _LabelLast	.AbsolutePosition.X;
			declare SizeX1 	= _LabelFirst	.ComputeWidth(_LabelFirst.Value);
			declare SizeX2 	= _LabelLast	.ComputeWidth(_LabelLast .Value);
			declare Halign1 = _LabelFirst	.HorizontalAlign;
			declare Halign2 = _LabelLast	.HorizontalAlign;
			
			declare Width = PosX2 - PosX1;
			
			if		(Halign1 == CMlControl::AlignHorizontal::Right) 	Width += SizeX1;
			else if	(Halign1 == CMlControl::AlignHorizontal::HCenter) 	Width += SizeX1 * 0.5;
			
			if		(Halign2 == CMlControl::AlignHorizontal::Left) 		Width += SizeX2;
			else if	(Halign2 == CMlControl::AlignHorizontal::HCenter) 	Width += SizeX2 * 0.5;
			
			
			return Width;
		}
	""";
	
	declare LadderMain = """
			declare Frame_Rank	 		<=> (Page.GetFirstChild("Frame_Rank") 		as CMlFrame);
			declare Label_Rank	 		<=> (Page.GetFirstChild("Label_Rank") 		as CMlLabel);
			declare Label_RankDiff	 	<=> (Page.GetFirstChild("Label_RankDiff") 	as CMlLabel);
			
			SetLabelPositionNextTo(Label_Rank, Label_RankDiff, 4.);
			declare TotalWith = GetTotalWidthFromFirstToLast(Label_Rank, Label_RankDiff);
			Frame_Rank.RelativePosition.X = ({{{PopupSizeX}}} - TotalWith) * 0.5;
			declare netread Integer Net_NewRankTrigger 	for UI;
			declare netread Integer Net_NewRank 		for UI;
			
			declare Integer Prev_NewRankTrigger;
			declare Integer Prev_NewRank;
			
			declare RankDiff 				= 5260.;
			declare RankDiffAnim 			= 0.;
			declare RankDiffAnimTrigger		= Now;
	
	""";
	
	declare LadderLoop = """
				if(Prev_NewRankTrigger != Net_NewRankTrigger)
				{
					RankDiffAnim 		= 0.;
					RankDiff 			= (Prev_NewRank - Net_NewRank)*1.;
					
					Prev_NewRank 		= Net_NewRank;
					Prev_NewRankTrigger = Net_NewRankTrigger;
				}
				
				if(RankDiffAnim < RankDiff) RankDiffAnim = AL::Ease("QuartOut", (Now - RankDiffAnimTrigger)*1., 0., RankDiff*1., 2000.);
				else 						RankDiffAnim = RankDiff;
				
				Label_RankDiff.Value = TL::ToText(ML::NearestInteger(RankDiffAnim));
	""";
	
	UIPopupBuilder::CreateLayer(
		C_LayerNameLadder, 
		<40., 0., 1.>,
		
		[
			["Title", 	"Title", 			_("Ladder Ranking"), 			"2",	"", "", ""], 
			["Space", 	"", 		  		"", 							"1",	"", "", ""],
			["Custom", 	"Ladder", 			LadderML, 						"2",	"", "Bg Fg", ""],
			["Label", 	"Status1", 			_("Congrats!"), 			"1",	"", "", ""],
			["Label", 	"Status2", 			"Vous avez gagn√© 268 places au ladder.", 			"1",	"", "", ""],
			["Space", 	"", 		 		"", 							"1",	"", "", ""],
			["Input", 	"Input", 			"", 							"1",	"", "", "Net_MenuActionInputs"]
		], 
		
		LadderFunctions, 
		LadderMain, 
		
		"""
		""",
		
		LadderLoop
	);
	
}

// ---------------------------------- //
/// To re-attach layers in case of UI ResetAll
Void Attach() 
{
	Layers::Attach(C_LayerNameLadder);
}

