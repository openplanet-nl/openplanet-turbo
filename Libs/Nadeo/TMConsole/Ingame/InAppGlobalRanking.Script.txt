/**
 * Communique avec la ManiaApp et le module UI de Global Ranking
 **/

#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIOnlineGlobalRanking.Script.txt" 				as UIGR
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"								as Layers
#Include "Libs/Nadeo/TMConsole/ManiaAppTracking.Script.txt"								as ManiaAppTracking
// #Include "Libs/Nadeo/TMConsole/Ingame/InAppRewardScreen.Script.txt"						as InAppRewardScreen
#Include "Libs/Nadeo/TMConsole/Ingame/RewardScreens.Script.txt" 						as RewardScreens
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 										as Colors

#Include "TextLib" as TL
#Include "MathLib" as ML

#Const GLOBALRANKING_WAITINGTIME 	5000
#Const GLOBALRANKING_FIRSTWAIT		20000

#Const TMC_GLOBALRANKING	0
#Const TMC_MAPRANKING		1

declare Integer					G_UpdateGlobalRankingTimer;
declare Integer					G_UpdateMapRankingTimer;
declare Integer[Text]			G_PlayerGlobalRankings;
declare Integer[Text]			G_PlayerMapRankings;
declare Integer[Text]			G_PlayersCountMapRanking;
declare Integer[Text]			G_PlayersCountGlobalRanking;
declare Text[]					G_PlayerZones;
declare Boolean					G_GlobalRankingComplete;
declare Boolean					G_MapRankingComplete;
declare Boolean					G_GlobalRankingNeedInit;
declare Boolean					G_MapRankingNeedInit;
declare Boolean					G_SecondTime;
declare Boolean					G_SecondTimeMap;
declare Integer[Text]			G_GlobalRankingDiff;
declare Integer[Text]			G_MapRankingDiff;
declare Boolean					G_GlobalRankingHasChanged;
declare Boolean					G_MapRankingHasChanged;
declare Boolean					G_IsCampaign;
declare Integer					G_PreEchelon;

Integer GetEchelonPlayerIndex(CUser::EEchelon _Echelon) {
	switch(_Echelon) {
		case CUser::EEchelon::None 		: return 0;
		case CUser::EEchelon::Bronze1 	: return 1;
		case CUser::EEchelon::Bronze2 	: return 2;
		case CUser::EEchelon::Bronze3 	: return 3;
		case CUser::EEchelon::Silver1 	: return 4;
		case CUser::EEchelon::Silver2 	: return 5;
		case CUser::EEchelon::Silver3 	: return 6;
		case CUser::EEchelon::Gold1 	: return 7;
		case CUser::EEchelon::Gold2 	: return 8;
		case CUser::EEchelon::Gold3 	: return 9;
	}
	return -1;
}

Void SendPlayerGlobalRankingsTimer() {
	declare CUILayer GlobalRankingLayer = Layers::Get("GlobalRanking");
	declare Integer WaitforPlayerRankingsUpdateTimer for GlobalRankingLayer.LocalPage;
	WaitforPlayerRankingsUpdateTimer = GLOBALRANKING_WAITINGTIME;
}

Void SendPlayerGlobalRankings() {
	declare CUILayer GlobalRankingLayer = Layers::Get("GlobalRanking");
	declare Integer[Text] PlayerRankings 				for GlobalRankingLayer.LocalPage;
	declare Integer[Text] PlayersCount					for GlobalRankingLayer.LocalPage;
	declare Integer		  UpdatePlayerGlobalRankings 	for GlobalRankingLayer.LocalPage;
	PlayerRankings 				= G_PlayerGlobalRankings;
	PlayersCount				= G_PlayersCountGlobalRanking;
	log(Now^">SEND WORLD RANKING: "^PlayerRankings^PlayersCount);
	UpdatePlayerGlobalRankings 	+= 1;
}

Void SendPlayerMapRankings() {
	declare CUILayer GlobalRankingLayer = Layers::Get("GlobalRanking");
	declare Integer[Text] PlayerMapRankings 				for GlobalRankingLayer.LocalPage;
	declare Integer[Text] PlayersMapCount					for GlobalRankingLayer.LocalPage;
	declare Integer		  UpdatePlayerMapRankings 			for GlobalRankingLayer.LocalPage;
	PlayerMapRankings 				= G_PlayerMapRankings;
	PlayersMapCount					= G_PlayersCountMapRanking;
	
	declare netwrite Text Net_TextMapRanking for UI;
	Net_TextMapRanking = "";
	for(I, 0, G_PlayerZones.count-1) {
		// Net_TextMapRanking 	^= TL::Compose(_("%1: %2/%3"), TL::GetTranslatedText(G_PlayerZones[I]), ""^PlayerMapRankings[G_PlayerZones[I]], ""^PlayersMapCount[G_PlayerZones[I]]);
		Net_TextMapRanking 	^= "        "^TL::GetTranslatedText(G_PlayerZones[I])^": "^PlayerMapRankings[G_PlayerZones[I]]^"/"^PlayersMapCount[G_PlayerZones[I]];
	}
	
	log(Now^">SEND MAP RANKING: "^Net_TextMapRanking);
	UpdatePlayerMapRankings 	+= 1;
}

Boolean IsPlayerGlobalRankingsComplete() {
	return G_PlayerGlobalRankings.count == G_PlayerZones.count && G_PlayersCountGlobalRanking.count  == G_PlayerZones.count && G_PlayerZones.count != 0;
}

Boolean IsPlayerMapRankingsComplete() {
	return G_PlayerMapRankings.count == G_PlayerZones.count && G_PlayersCountMapRanking.count  == G_PlayerZones.count && G_PlayerZones.count != 0;
}

Void GetPlayerGlobalRankings() {	
	if(ManiaPlanet.MasterServer_MainMSUser == Null || G_PlayerZones.count == 0) return;

	declare Text ConcatenatedZones = "";
	foreach(IndexZone => Zone in G_PlayerZones) {
		if(IndexZone == 0) {
			ConcatenatedZones ^= Zone;
		} else {
			ConcatenatedZones ^= "|"^Zone;
		}

		declare Integer PlayerRank			= ScoreMgr.GlobalLeaderBoard_GetPlayerRanking(ManiaPlanet.MasterServer_MainMSUser.Id, ConcatenatedZones);
		declare Integer PlayersCount		= ScoreMgr.GlobalLeaderBoard_GetPlayerCount(ConcatenatedZones);
		
		if(PlayerRank > 0) {
			if(G_SecondTime) {
				// G_PlayerGlobalRankings[Zone] = 0;
			} else {
				// G_PlayerGlobalRankings[Zone] = 0;
			}
			G_PlayerGlobalRankings[Zone] = PlayerRank;
			// if(G_PlayerGlobalRankings.existskey(Zone) && G_PlayerGlobalRankings[Zone] != PlayerRank && Zone == "World")  ManiaAppTracking::SendGlobalRanking(PlayerRank);
			// G_PlayerGlobalRankings[Zone] = PlayerRank;
		}
		
		if(PlayersCount > 0) {
			if(G_SecondTime) {
				// G_PlayersCountGlobalRanking[Zone] = 0;
			} else {
				// G_PlayersCountGlobalRanking[Zone] = 0;
			}
			G_PlayersCountGlobalRanking[Zone] = PlayersCount;
			// G_PlayersCountGlobalRanking[Zone] = PlayersCount;
		}
	}
}

Void GetPlayerMapRanking() {
	if(ManiaPlanet.MasterServer_MainMSUser == Null || G_PlayerZones.count == 0) return;
	
	declare Text ConcatenatedZones = "";
	foreach(IndexZone => Zone in G_PlayerZones) {
		if(IndexZone == 0) {
			ConcatenatedZones ^= Zone;
		} else {
			ConcatenatedZones ^= "|"^Zone;
		}

		declare Integer PlayerRank			= ScoreMgr.MapLeaderBoard_GetPlayerRanking(ManiaPlanet.MasterServer_MainMSUser.Id, Map.MapInfo.MapUid, ConcatenatedZones);
		declare Integer PlayersCount		= ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, ConcatenatedZones);
		if(PlayerRank > 0) {
			// if(G_SecondTime) {
				// G_PlayerMapRankings[Zone] = PlayerRank;
			// } else {
				// G_PlayerMapRankings[Zone] = PlayerRank + ML::Rand(115, 356);
			// }
			// if(G_SecondTimeMap) {
				// log("FILL MAP RANKING");
				// G_PlayerMapRankings[Zone] = PlayerRank;
			// }
			
			G_PlayerMapRankings[Zone] = PlayerRank;
		}
		
		if(PlayersCount > 0) {
			// if(G_SecondTimeMap) {
				// G_PlayersCountMapRanking[Zone] = PlayersCount;
			// }
			G_PlayersCountMapRanking[Zone] = PlayersCount;
		}
	}
}

Boolean IsMapRankingIsDifferent() {
	if(ManiaPlanet.MasterServer_MainMSUser == Null || G_PlayerZones.count == 0) return False;
	
	declare Text ConcatenatedZones = "";
	foreach(IndexZone => Zone in G_PlayerZones) {
		if(IndexZone == 0) {
			ConcatenatedZones ^= Zone;
		} else {
			ConcatenatedZones ^= "|"^Zone;
		}

		declare Integer PlayerRank			= ScoreMgr.MapLeaderBoard_GetPlayerRanking(ManiaPlanet.MasterServer_MainMSUser.Id, Map.MapInfo.MapUid, ConcatenatedZones);
		declare Integer PlayersCount		= ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, ConcatenatedZones);
		if(PlayerRank > 0 && G_PlayerMapRankings.existskey(Zone)) {
			if(G_PlayerMapRankings[Zone] != PlayerRank) {
				// log("HERE"^G_PlayerMapRankings[Zone]^PlayerRank);
				return True;
			}
		} else if(!G_PlayerMapRankings.existskey(Zone)) {
			return True;
		}
		
		if(PlayersCount > 0 && G_PlayersCountMapRanking.existskey(Zone)) {
			if(G_PlayersCountMapRanking[Zone] != PlayersCount) {
				log(G_PlayersCountMapRanking[Zone]^PlayersCount);
				return True;
			}
		} else if(!G_PlayersCountMapRanking.existskey(Zone)) {
			return True;
		}
		log(Zone^" "^PlayerRank^" "^PlayersCount);
	}
	log("MAP RANKING NOT DIFFERENT");
	return False;
}

Boolean IsGlobalRankingIsDifferent() {
	if(ManiaPlanet.MasterServer_MainMSUser == Null || G_PlayerZones.count == 0) return False;

	declare Text ConcatenatedZones = "";
	foreach(IndexZone => Zone in G_PlayerZones) {
		if(IndexZone == 0) {
			ConcatenatedZones ^= Zone;
		} else {
			ConcatenatedZones ^= "|"^Zone;
		}

		declare Integer PlayerRank			= ScoreMgr.GlobalLeaderBoard_GetPlayerRanking(ManiaPlanet.MasterServer_MainMSUser.Id, ConcatenatedZones);
		declare Integer PlayersCount		= ScoreMgr.GlobalLeaderBoard_GetPlayerCount(ConcatenatedZones);
		
		if(PlayerRank > 0 && G_PlayerGlobalRankings.existskey(Zone)) {
			if(G_PlayerGlobalRankings[Zone] != PlayerRank) return True;
		} else if(!G_PlayerGlobalRankings.existskey(Zone)) {
			return True;
		}
		
		if(PlayersCount > 0 && G_PlayersCountGlobalRanking.existskey(Zone)) {
			if(G_PlayersCountGlobalRanking[Zone] != PlayersCount) return True;
		} else if(!G_PlayersCountGlobalRanking.existskey(Zone)) {
			return True;
		}
		// log(Zone^" "^PlayerRank^" "^PlayersCount);
	}
	log("GLOBAL RANKING NOT DIFFERENT");
	return False;
}

Void Unload() {
	G_PlayerGlobalRankings.clear();
	G_PlayersCountGlobalRanking.clear();
}

Void FlushEvent() {
	declare netread Integer Net_StartRankingSequenceUpdate 		for UI;
	declare  		Integer Pre_StartRankingSequenceUpdate 		for UI;
	Pre_StartRankingSequenceUpdate = Net_StartRankingSequenceUpdate;
}

Void Load(Boolean _IsCampaign) {
	G_GlobalRankingNeedInit = True;
	G_IsCampaign = _IsCampaign;
	if(_IsCampaign) {
		G_MapRankingNeedInit		= True;
	} 

	FlushEvent();
	G_SecondTime 					= False;
	G_SecondTimeMap					= False;
	// log("SET FALSE");
	SendPlayerGlobalRankingsTimer();
	declare Text 	ZonePath 		= LocalUser.ZonePath;
	declare Text[] 	ZoneSplitted 	= TL::Split("|", ZonePath);
	G_PlayerZones 					= ZoneSplitted;
	UIGR::Load();
	declare Integer Net_LaunchNewEchelonAnimation 	for UI;
	// declare netwrite Integer Net_HasNewEchelonUpdate for UI;
	declare			Integer Pre_LaunchNewEchelonAnimation for UI;
	Pre_LaunchNewEchelonAnimation = Net_LaunchNewEchelonAnimation;
	G_PreEchelon = GetEchelonPlayerIndex(ManiaPlanet.LocalUser.Echelon);
}

Boolean PlayerHasNewEchelon() {
	declare Integer CurEchelon = GetEchelonPlayerIndex(ManiaPlanet.LocalUser.Echelon);
	if(G_PreEchelon != CurEchelon) {
		G_PreEchelon = CurEchelon;
		return True;
	}
	return False;
}

Void Loop(Integer _PrePeriod) {
	
	if(Now < G_UpdateGlobalRankingTimer && G_UpdateGlobalRankingTimer != -1 || G_GlobalRankingNeedInit) {
		if(!IsPlayerGlobalRankingsComplete()) {
			GetPlayerGlobalRankings();
		} else {
			if(G_PlayerGlobalRankings.count > 0) {
				SendPlayerGlobalRankings();
				G_GlobalRankingComplete		= True;
			}
			
			G_UpdateGlobalRankingTimer 	= -1;
			if(G_GlobalRankingNeedInit) G_GlobalRankingNeedInit = False;
		}
	}
	
	if(Now < G_UpdateMapRankingTimer && G_UpdateMapRankingTimer != -1 || G_MapRankingNeedInit) {
		if(!IsPlayerMapRankingsComplete()) {
			GetPlayerMapRanking();
		} else {
			if(G_PlayerMapRankings.count > 0) {
				SendPlayerMapRankings();
				G_MapRankingComplete		= True;
			}
			
			G_UpdateMapRankingTimer 	= -1;
			if(G_MapRankingNeedInit) G_MapRankingNeedInit = False;
		}
	}
	
	declare netread Integer Net_StartRankingSequenceUpdate 		for UI;
	declare  		Integer Pre_StartRankingSequenceUpdate 		for UI;
	declare netread Integer Net_StartGetRankingUpdate 			for UI;
	declare netread Integer Net_RankingSequenceType 			for UI;
	declare netwrite Integer Net_StartRankingAnimationUpdate 	for UI;
	
	if(Pre_StartRankingSequenceUpdate != Net_StartRankingSequenceUpdate) {
		if(Net_RankingSequenceType == TMC_GLOBALRANKING) {
			// log("START GLOBAL RANKING");
			declare Boolean ShowGlobalRanking = False;
			if(IsGlobalRankingIsDifferent() && G_IsCampaign) {
				ShowGlobalRanking = True;
			} else if(!IsGlobalRankingIsDifferent() && G_IsCampaign){
				ShowGlobalRanking = False;
			} else {
				ShowGlobalRanking = True;
			}
			
			if(ShowGlobalRanking) {
				G_SecondTime = True;
				G_PlayerGlobalRankings.clear();
				G_PlayersCountGlobalRanking.clear();
				G_UpdateGlobalRankingTimer 			= Now + GLOBALRANKING_WAITINGTIME;
				Net_StartRankingAnimationUpdate 	+= 1;
				
				if(PlayerHasNewEchelon()) {
					declare Integer IndexEchelon = GetEchelonPlayerIndex(ManiaPlanet.LocalUser.Echelon);
					ManiaAppTracking::SendEchelon(IndexEchelon);
				}
			}
		} else if(Net_RankingSequenceType == TMC_MAPRANKING) {
			if(IsMapRankingIsDifferent()) {
				G_SecondTimeMap = True;
				G_PlayerMapRankings.clear();
				G_PlayersCountMapRanking.clear();
				G_UpdateMapRankingTimer				= Now + GLOBALRANKING_WAITINGTIME;
				Net_StartRankingAnimationUpdate += 1;
			}
		}
		
		Pre_StartRankingSequenceUpdate = Net_StartRankingSequenceUpdate;
	}
	declare Integer Net_LaunchNewEchelonAnimation 	for UI;
	// declare netwrite Integer Net_HasNewEchelonUpdate for UI;
	declare			Integer Pre_LaunchNewEchelonAnimation for UI;
	if(Pre_LaunchNewEchelonAnimation != Net_LaunchNewEchelonAnimation) {
		Pre_LaunchNewEchelonAnimation = Net_LaunchNewEchelonAnimation;
		declare Text RewardScreens		= RewardScreens::GetScreenEchelon(GetEchelonPlayerIndex(ManiaPlanet.LocalUser.Echelon));
		declare Integer Net_Reward_TriggerEchelon for UI;
		declare Text	Net_Reward_ImageEchelon for UI;
		Net_Reward_TriggerEchelon += 1;
		Net_Reward_ImageEchelon = RewardScreens;
	}
}
