
#Const C_ExplainationSpacing "         "

#Const C_InfiniteMedals				10000
#Const C_FirstTrackmaster 			10001
#Const C_AllGoldSolo				10002
#Const C_AllTMSolo					10003
#Const C_AllGoldDD					10004
#Const C_AllTMDD 					10005
#Const C_AllGoldSS					10006
#Const C_AllTMSoloSS				10007

#Const C_Echelon0					11000
#Const C_Echelon1					11001
#Const C_Echelon2					11002
#Const C_Echelon3					11003
#Const C_Echelon4					11004
#Const C_Echelon5					11005
#Const C_Echelon6					11006
#Const C_Echelon7					11007
#Const C_Echelon8					11008
#Const C_Echelon9					11009


Integer[] Private_ComputeUnlocked(Integer[] _UnlockValues, Boolean _Cheat) {
	declare Integer[] UnlockedItems;
	
	declare Integer LocEchelon; 				
	declare Integer LocSoloGoldMedals;		
	declare Integer LocSoloTMMedals;			
	declare Integer LocDDGoldMedals	;		
	declare Integer LocDDTMMedals;			
	declare Integer LocSuperSoloGoldMedals;	
	declare Integer LocSuperSoloTMMedals;	
	
	if(_Cheat) {
		LocEchelon 				= 10000;
		LocSoloGoldMedals		= 10000;		
		LocSoloTMMedals			= 10000;		
		LocDDGoldMedals			= 10000;	
		LocDDTMMedals			= 10000;	
		LocSuperSoloGoldMedals	= 10000;
		LocSuperSoloTMMedals	= 10000;
	} else {
		// declare Integer Echelon 			for LocalUser;
		declare Integer Echelon = 0;
		switch(LocalUser.Echelon) {
			case CUser::EEchelon::None		: Echelon = 0;
			case CUser::EEchelon::Bronze1	: Echelon = 1;
			case CUser::EEchelon::Bronze2	: Echelon = 2;
			case CUser::EEchelon::Bronze3	: Echelon = 3;
			case CUser::EEchelon::Silver1	: Echelon = 4;
			case CUser::EEchelon::Silver2	: Echelon = 5;
			case CUser::EEchelon::Silver3	: Echelon = 6;
			case CUser::EEchelon::Gold1		: Echelon = 7;
			case CUser::EEchelon::Gold2		: Echelon = 8;
			case CUser::EEchelon::Gold3		: Echelon = 9;
		}
		
		declare Integer SoloGoldMedals		for LocalUser;
		declare Integer SoloTMMedals		for LocalUser;
		declare Integer DDGoldMedals		for LocalUser;
		declare Integer DDTMMedals			for LocalUser;
		declare Integer SuperSoloGoldMedals	for LocalUser;
		declare Integer SuperSoloTMMedals	for LocalUser;
		
		LocEchelon 				= Echelon; 			
		LocSoloGoldMedals		= SoloGoldMedals;				
		LocSoloTMMedals			= SoloTMMedals;				
		LocDDGoldMedals			= DDGoldMedals;			
		LocDDTMMedals			= DDTMMedals;				
		LocSuperSoloGoldMedals	= SuperSoloGoldMedals;	
		LocSuperSoloTMMedals	= SuperSoloTMMedals;
	}
	
	for(Index, 0, _UnlockValues.count - 1) 
	{
		declare Integer UnlockValue = _UnlockValues[Index];
		if(UnlockValue < C_InfiniteMedals) {
			if((LocSoloGoldMedals >= UnlockValue) || (LocDDGoldMedals >= UnlockValue)) 		UnlockedItems.add(Index);
		} else if(UnlockValue > C_Echelon0) {
			declare Integer EchelonToUnlock = UnlockValue - C_Echelon0;
			if(LocEchelon >= EchelonToUnlock) 												UnlockedItems.add(Index);
		} else {
			switch(UnlockValue) {
				case C_FirstTrackmaster	: if((LocSoloTMMedals >= 1) || (LocDDTMMedals >= 1)) 	UnlockedItems.add(Index);
				case C_AllGoldSolo		: if(LocSoloGoldMedals >= 200) 					UnlockedItems.add(Index);
				case C_AllTMSolo		: if(LocSoloTMMedals >= 200) 						UnlockedItems.add(Index);
				case C_AllGoldDD		: if(LocDDGoldMedals >= 200) 						UnlockedItems.add(Index);
				case C_AllTMDD 			: if(LocDDTMMedals   >= 200) 						UnlockedItems.add(Index);
				case C_AllGoldSS		: if(LocSuperSoloGoldMedals >= 200) 				UnlockedItems.add(Index);
				case C_AllTMSoloSS		: if(LocSuperSoloTMMedals >= 200) 					UnlockedItems.add(Index);
			}
		}
	}
	
	return UnlockedItems;
}

Void Load(Boolean _Cheat) {
	declare Integer[] StickersUnlockValues for LocalUser;
	StickersUnlockValues = [
		200, 1, 30, 140, 15, 25, 50, C_Echelon6,
		C_Echelon1, 50, 10, 5, 00, 5, 30, 60,
		1, 45, 3, 45, 30, 40, 10, 10,
		3, 35, 10, 140, 10, 1, 10, 120,
		60, C_Echelon3, C_FirstTrackmaster, 30, 30, 60, 120, 50,
		160, 25, 180, 80, 100, 5, 15, 10,
		50, C_AllGoldDD, 25, 20, 100, 50, C_Echelon9, 50,
		80, 180, 20, C_Echelon5, C_Echelon8, 35, 120, 35,
		45, C_Echelon7, 50, 100, 30, 30, C_Echelon4, 30,
		80, 40, C_Echelon2, 20, 40, 15, 3, 160
		];
	
	declare Integer[] NumbersUnlockValues for LocalUser;
	NumbersUnlockValues = [
		0, C_AllTMSolo, 5, 10, 5, 15, 100,
		160, 5, 10, 15, 45, 50, 80,
		50, 10, 25, 30, 1, 5, 100,
		1, 40, 3, 40, 3, 25, 30,
		45, 45, 20, 35, 20, 1, 10,
		30, 30, 15, 1, 30, 1, 60,
		50, 100, 25, 45, 30, 3, 40,
		5, 80, 30, 80, 80, C_AllTMDD, 100,
		10, 120, 3, 50, 60, 120, 50,
		10, 80, 180, 50, 200, 140, 120,
		35, 25, 15, 20, 25, 160, 35,
		45, 20, 120, 50, 3, 35, 60,
		40, 140, 35, 15, 40, 60, 180,
		60, 100, 30, 120, 20, C_AllGoldSS, C_AllTMSoloSS
	];
	
	declare Integer[] SkinsUnlockValues for LocalUser;
	SkinsUnlockValues = [
		0, 1, 50, 50, 140, 30, 80,
		60, 20, 120, 1, 10, 25, 120,
		120, 3, 100, 20, 40, 10, 30,
		25, 10, 140, 50, 45, 15, 50,
		40, 200, 15, 45, 3, 30, 100,
		120, 10, 50, 60, 160, 35, 180,
		80, 5, 10, 5, 30, 10, 50,
		160, 35, 30, 30, 50, 180, 120];
	
	declare Integer[] MetalsUnlockValues for LocalUser;
	MetalsUnlockValues = [
	0, 1, 10,
	30, 50, 120, 
	180, 200, C_AllTMSolo
	];
	
	declare Integer[] UnlockedSkins for LocalUser;
	UnlockedSkins = Private_ComputeUnlocked(SkinsUnlockValues, _Cheat);
	
	declare Integer[] UnlockedStickers for LocalUser;
	UnlockedStickers = Private_ComputeUnlocked(StickersUnlockValues, _Cheat);
	
	declare Integer[] UnlockedNumbers for LocalUser;
	UnlockedNumbers = Private_ComputeUnlocked(NumbersUnlockValues, _Cheat);
	
	declare Integer[] UnlockedMetals for LocalUser;
	UnlockedMetals = Private_ComputeUnlocked(MetalsUnlockValues, _Cheat);
}

Void Load() {
	Load(False);
}

Integer GetNbOfMedalsToNextUnlock() {
	// HACK EG : Ã  affiner
	return 10;
	
/*
	declare Integer NbMedals = GetNbMedals();
	declare Integer MinMedalsToUnlock = C_InfiniteMedals;
	
	declare Integer[] SkinsUnlockValues 	for LocalUser;
	declare Integer[] StickersUnlockValues 	for LocalUser;
	declare Integer[] NumbersUnlockValues 	for LocalUser;
	declare Integer[] MetalsUnlockValues 	for LocalUser;
	
	// get nb for all possible unlocks
	for(SkinIndex, 0, SkinsUnlockValues.count-1) {
		declare Integer CurMedalUnlock = SkinsUnlockValues[SkinIndex];
		if(CurMedalUnlock > NbMedals && CurMedalUnlock < MinMedalsToUnlock) MinMedalsToUnlock = CurMedalUnlock;
	}
	if(MinMedalsToUnlock <= NbMedals + 1) return 1;
	for(SkinIndex, 0, StickersUnlockValues.count-1) {
		declare Integer CurMedalUnlock = StickersUnlockValues[SkinIndex];
		if(CurMedalUnlock > NbMedals && CurMedalUnlock < MinMedalsToUnlock) MinMedalsToUnlock = CurMedalUnlock;
	}
	if(MinMedalsToUnlock <= NbMedals + 1) return 1;
	for(SkinIndex, 0, NumbersUnlockValues.count-1) {
		declare Integer CurMedalUnlock = NumbersUnlockValues[SkinIndex];
		if(CurMedalUnlock > NbMedals && CurMedalUnlock < MinMedalsToUnlock) MinMedalsToUnlock = CurMedalUnlock;
	}
	if(MinMedalsToUnlock <= NbMedals + 1) return 1;
	for(SkinIndex, 0, MetalsUnlockValues.count-1) {
		declare Integer CurMedalUnlock = MetalsUnlockValues[SkinIndex];
		if(CurMedalUnlock > NbMedals && CurMedalUnlock < MinMedalsToUnlock) MinMedalsToUnlock = CurMedalUnlock;
	}
	
	if(MinMedalsToUnlock >= C_InfiniteMedals || MinMedalsToUnlock <= NbMedals) {
		Logger::Warn("PimpUnlock::GetNbOfMedalsToNextUnlock() : no min medals found, return -1");
		return -1;
	}
	
	return MinMedalsToUnlock - NbMedals;
*/
}

Text MLPimpUnlockFunctions() {
	declare Text MLText = """
		// <script><!--
		// for syntaxe coloring
		
		
		Boolean IsSkinUnlocked(Integer _SkinIndex) {
			declare Integer[] UnlockedSkins for LocalUser;
			return UnlockedSkins.exists(_SkinIndex);
		}
		
		Boolean IsStickerUnlocked(Integer _StickerIndex) {
			declare Integer[] UnlockedStickers for LocalUser;
			return UnlockedStickers.exists(_StickerIndex);
		}
		
		Boolean IsNumberUnlocked(Integer _NumberIndex) {
			declare Integer[] UnlockedNumbers for LocalUser;
			return UnlockedNumbers.exists(_NumberIndex);
		}
		
		Boolean IsMetalUnlocked(Integer _MetalIndex) {
			declare Integer[] UnlockedMetals for LocalUser;
			return UnlockedMetals.exists(_MetalIndex);
		}
		
		
		
		Text Private_ExplainUnlock(Integer[] _UnlockConditions, Integer _ItemIndex, Boolean _IsUnlocked) {
			if(_UnlockConditions.count <= _ItemIndex) return "";
			
			declare Integer MedalsNeeded = _UnlockConditions[_ItemIndex];
			if(MedalsNeeded <= 0) return "";
			
			if(MedalsNeeded < {{{C_InfiniteMedals}}}) {
				if(_IsUnlocked) {
					if(MedalsNeeded == 1)
					{
						//L16N relative to a customization element (skin, sticker, or number). %1, %2 %3 and %4 are replaced by layout parameters.
						return TL::Compose(_("%1Unlocked with %2%3One Gold Medal%4"), "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
					}
					//L16N relative to a customization element (skin, sticker, or number). %1, %2 and %4 are replaced by layout parameters, %3 by a number (greater than 1).
					return TL::Compose(_("%1Unlocked with %2%3 Gold Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$ff0", ""^MedalsNeeded, "$>");
				} else {
					if(MedalsNeeded == 1)
					{
						//L16N relative to a customization element (skin, sticker, or number). %1, %2 %3 and %4 are replaced by layout parameters.
						return TL::Compose(_("%1%2%3One Gold Medal%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
					}
					//L16N relative to a customization element (skin, sticker, or number). %1, %2 and %4 are replaced by layout parameters, %3 by a number (greater than 1).
					return TL::Compose(_("%1%2%3 Gold Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$ff0", ""^MedalsNeeded, "$>");
				}
			} else if(MedalsNeeded > {{{C_Echelon0}}}) {
				if(_IsUnlocked) {
					//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
					return TL::Compose(_("%1Unlocked with %2%3 Echelon Upgrade%4"), "{{{C_ExplainationSpacing}}}", "$<$0ff", " ", "$>");
				} else {
					//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
					return TL::Compose(_("%1%2%3Echelon Upgrade%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0ff", " ", "$>");
				}
			} else {
				switch(MedalsNeeded) {
					case {{{C_FirstTrackmaster}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster.
							return TL::Compose(_("%1Unlocked with %2%3One Trackmaster Medal%4"), "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster.
							return TL::Compose(_("%1%2%3One Trackmaster Medal%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						}
					}
					case {{{C_AllGoldSolo}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							return TL::Compose(_("%1Unlocked with %2%3All Solo Gold Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							return TL::Compose(_("%1%2%3All Solo Gold Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						}
					}
					case {{{C_AllTMSolo}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster.
							return TL::Compose(_("%1Unlocked with %2%3All Trackmaster Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster.
							return TL::Compose(_("%1%2%3All Trackmaster Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						}
					}
					case {{{C_AllGoldDD}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Double Driver.
							return TL::Compose(_("%1Unlocked with %2%3All Double Driver Gold Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Double Driver.
							return TL::Compose(_("%1%2%3All Double Driver Gold Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
						}
					}
					case {{{C_AllTMDD}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster nor Double Driver.
							return TL::Compose(_("%1Unlocked with %2%3All Double Driver Trackmaster Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster nor Double Driver.
							return TL::Compose(_("%1%2%3All Double Driver Trackmaster Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						}
					}
					case {{{C_AllGoldSS}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Super Solo.
							return TL::Compose(_("%1Unlocked with %2%3All Super Solo Gold Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Super Solo.
							return TL::Compose(_("%1%2%3All Super Solo Gold Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$ff0", " ", "$>");
						}
					}
					case {{{C_AllTMSoloSS}}}: {
						if(_IsUnlocked) {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster nor Super Solo.
							return TL::Compose(_("%1Unlocked with %2%All Trackmaster Super Solo Medals%4"), "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						} else {
							//L16N relative to a customization element (skin, sticker, or number). %1, %2, %3 and %4 are replaced by layout parameters.
							//L16N please do not translate Trackmaster nor Super Solo.
							return TL::Compose(_("%1%2%3All Trackmaster Super Solo Medals%4 to unlock")   , "{{{C_ExplainationSpacing}}}", "$<$0f0", " ", "$>");
						}
					}
				}
			}
			
			return "";
		}
		
		Text ExplainSkinsUnlock(Integer _ItemIndex, Boolean _IsUnlocked) {
			declare Integer[] SkinsUnlockValues for LocalUser;
			return Private_ExplainUnlock(SkinsUnlockValues, _ItemIndex, _IsUnlocked);
		}
		
		Text ExplainStickersUnlock(Integer _ItemIndex, Boolean _IsUnlocked) {
			declare Integer[] StickersUnlockValues for LocalUser;
			return Private_ExplainUnlock(StickersUnlockValues, _ItemIndex, _IsUnlocked);
		}
		
		Text ExplainNumbersUnlock(Integer _ItemIndex, Boolean _IsUnlocked) {
			declare Integer[] NumbersUnlockValues for LocalUser;
			return Private_ExplainUnlock(NumbersUnlockValues, _ItemIndex, _IsUnlocked);
		}
		
		Text ExplainMetalsUnlock(Integer _ItemIndex, Boolean _IsUnlocked) {
			declare Integer[] MetalsUnlockValues for LocalUser;
			return Private_ExplainUnlock(MetalsUnlockValues, _ItemIndex, _IsUnlocked);
		}
		
	""";
	
	return MLText;
}

