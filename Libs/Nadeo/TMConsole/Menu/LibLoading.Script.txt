//Gestion d'un quad indiquant le chargement de données.
#Const C_ImgBase 							"file://Media/Manialinks/Nadeo/TMConsole/Images/"

declare Integer G_TimeBeforeDisplay;
declare Vec2 	G_Size;
declare Vec2 	G_Position;
declare Text 	G_InfoText;

//declare Integer G_LoadingTimeout; //solution pour le chargement qui ne se termine pas ? risque d'induire l'utilisateur en erreur en lui laissant penser que ça a fonctionné !



Void Init(Vec2 _Size, Vec2 _Position, Integer _TimeBeforeDisplay, Text _InformationText)
{
	G_Size = _Size;
	G_Position = _Position;
	G_InfoText = _InformationText;
	G_TimeBeforeDisplay = _TimeBeforeDisplay;
}

Text InjectInManialink()
{
	declare Text Loading = C_ImgBase ^ "Load.tga";
	
	declare Text Manialink = """
		<frame id="Frame_Loading" posn="{{{G_Position.X}}} {{{G_Position.Y}}} 25" hidden="1">
			<quad posn="0 0 0" sizen="{{{G_Size.X}}} {{{G_Size.Y}}}" bgcolor="000" halign="center" opacity="0.5" valign="center" />
			<quad  halign="center" valign="center" sizen="6 6" image="{{{Loading}}}" posn="0 3.6 1" opacity="1.0" id="Quad_Loading" />
			<label id="Label_Loading_Text" halign="center" valign="top" sizen="{{{G_Size.X}}} 10" text="{{{G_InfoText}}}" posn="0 -0.6 1" />
		</frame>
	""";
	
	return Manialink;
}

Text InjectInGlobals()
{
	declare Text Globals = """
		declare Boolean G_Loading_IsLoading;
		declare Integer G_Loading_LoadingTime;
		
		declare Integer G_Debug;
	""";
	
	return Globals;
}

Text InjectInInit()
{
	declare Text Init = """
		G_Loading_IsLoading = False;
		
	G_Debug = 0;
	""";
	
	return Init;
}

Text InjectInFunctions()
{
	declare Text Functions = """
		Void Loading_SetIsLoading(Boolean _IsLoading)
		{
			if (_IsLoading)
				G_Loading_LoadingTime = Now;
			if (_IsLoading && G_Loading_IsLoading || !(_IsLoading || G_Loading_IsLoading))
				return; //on est déjà dans l'état souhaité
				
			declare CMlFrame Frame_Loading <=> (Page.GetFirstChild("Frame_Loading") as CMlFrame);
			if (_IsLoading)
			{
				G_Loading_IsLoading = True;
			} else {
				Frame_Loading.Hide();
				G_Loading_IsLoading = False;
			}
		}
		
		Void Loading_Anim()
		{
			if (Now < G_Loading_LoadingTime + {{{G_TimeBeforeDisplay}}})
				return;
			//Pour l'intant je désactive la lib pour éviter les comportements foireux //01-06-2015 j'aime toujours pas le comportement dans certains cas, je la redésactive
			//return;
			
			declare CMlFrame Frame_Loading <=> (Page.GetFirstChild("Frame_Loading") as CMlFrame);
			Frame_Loading.Show();
		
			declare CMlQuad Quad_Loading <=> (Frame_Loading.GetFirstChild("Quad_Loading") as CMlQuad);
			
			declare Integer Rotation = ML::NearestInteger(Quad_Loading.RelativeRotation)%2;
		 	declare Real ButtonSelectedSinVar  = ML::Sin(Now * 0.03) * 0.5;
		 	if(ButtonSelectedSinVar < 0 && Rotation == 0)
		 	{
				Quad_Loading.RelativeRotation += 45;

		 	}
		 	else if(ButtonSelectedSinVar > 0 && Rotation == 1)
		 	{
				Quad_Loading.RelativeRotation += 45;

		 	}
		 	if(Quad_Loading.RelativeRotation == 360.) Quad_Loading.RelativeRotation = 0.;
		}
		Boolean Loading_GetIsLoading()
		{
			return G_Loading_IsLoading;
		}
		Void Loading_SetText(Text _LoadingText)
		{
			declare CMlLabel Label_Loading_Text <=> (Page.GetFirstChild("Label_Loading_Text") as CMlLabel);
			Label_Loading_Text.Value = _LoadingText;
		}
	""";
	
	return Functions;
}

Text InjectInLoop()
{
	declare Text Loop = """
		if (G_Loading_IsLoading)
			Loading_Anim();
	""";
	
	return Loop;
}