#Include "MathLib" as ML
#Include "TextLib" as TL

#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"	     as Layers
#Include "Libs/Nadeo/TMConsole/FontManager.Script.txt"		     as Font
#Include "Libs/Nadeo/TMConsole/Menu/MenuVersion.Script.txt"      as MenuVersion
#Include "Libs/Nadeo/TMConsole/Menu/LibLoadingScreen.Script.txt" as LibLoadingScreen
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 				 as Colors
#Include "Libs/Nadeo/UIPadButtons.Script.txt"					 as LibUIButtons


#Const C_LoadingLayerName	"LoadingScreen"
#Const C_Type_Ingame 0
#Const C_Type_Editor 1


#Const C_ImgLoading	"file://Media/Manialinks/Nadeo/TMConsole/Images/Load.tga"
#Const C_ImgPath	"file://Media/Manialinks/Nadeo/TMConsole/Images/Loading/"
#Const C_ImgBase	"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgBase2	"file://Media/Images/TMConsole/Ingame/"

#Const C_ImgDefault			0


#Const C_Env_Canyon  		0
#Const C_Env_Valley  		1
#Const C_Env_Lagoon  		2
#Const C_Env_Stadium 		3


#Const C_GC_LoadingScreen2      "TMCE_Loading_Lagoon_Controls_UK.dds"
#Const C_GC_LoadingScreen3      "TMCE_Loading_Stadium_Controls_UK.dds"
#Const C_HandsOn_LoadingScreen2 "TMCE_Loading_Lagoon_Controls_UK.dds"
#Const C_HandsOn_LoadingScreen3 "TMCE_Loading_Stadium_Controls_UK.dds"

#Const C_Tip_Filters  			0
#Const C_Tip_Content 			1
#Const C_Tip_Screen_Canyon 		2
#Const C_Tip_Screen_Valley 		3
#Const C_Tip_Screen_Lagoon 		4
#Const C_Tip_Screen_Stadium		5
	
	
#Const C_RandomValue [
	//0 => Ingame Solo
	[0 => 1, //Enviro Choose
	 1 => 1, //Mode
	 2 => 1, //ProTips (Real)
	 3 => 1, //ProTips (Fun)
	 4 => 2, //Quotes (Real)
	 5 => 1, //Quotes (Fun)
	 6 => 1, //Fast Fact
	 7 => 2, //Tuto Ingame
	 8 => 0, //TrackBuilder
	 9 => 0  //Garage
	],
	//1 => Editor
	[0 => 0, //Enviro Choose
	 1 => 0, //Mode
	 2 => 0, //ProTips (Real)
	 3 => 0, //ProTips (Fun)
	 4 => 0, //Quotes (Real)
	 5 => 0, //Quotes (Fun)
	 6 => 0, //Fast Fact
	 7 => 0, //Tuto Ingame
	 8 => 1, //TrackBuilder
	 9 => 0  //Garage
	],
	//2 => Ingame Online
	[0 => 1, //Enviro Choose
	 1 => 1, //Mode
	 2 => 1, //ProTips (Real)
	 3 => 1, //ProTips (Fun)
	 4 => 1, //Quotes (Real)
	 5 => 1, //Quotes (Fun)
	 6 => 1, //Fast Fact
	 7 => 2, //Tuto Ingame
	 8 => 0, //TrackBuilder
	 9 => 0  //Garage
	],
	//3 => Garage
	[0 => 0, //Enviro Choose
	 1 => 0, //Mode
	 2 => 0, //ProTips (Real)
	 3 => 0, //ProTips (Fun)
	 4 => 0, //Quotes (Real)
	 5 => 0, //Quotes (Fun)
	 6 => 0, //Fast Fact
	 7 => 0, //Tuto Ingame
	 8 => 0, //TrackBuilder
	 9 => 1, //Garage
	 10 => 0  //TitleScreen
	],
	//4 => Start Game TitleScreen
	[0 => 0, //Enviro Choose
	 1 => 0, //Mode
	 2 => 0, //ProTips (Real)
	 3 => 0, //ProTips (Fun)
	 4 => 0, //Quotes (Real)
	 5 => 0, //Quotes (Fun)
	 6 => 0, //Fast Fact
	 7 => 0, //Tuto Ingame
	 8 => 0, //TrackBuilder
	 9 => 0, //Garage
	 10 => 1  //TitleScreen
	]
]

#Const C_TipRandom_Text 	0
#Const C_TipRandom_Screen 	1

declare Integer[][Integer] G_ScreensIndex;
declare Text[][Integer]    G_FamilyImg;
declare Integer[]          G_ScreenFamily;
declare Text[]      	   G_ScreenText;
declare Text[]             G_ScreenImg;


Integer GetScreenType(Integer _Index)
{
	declare Integer[] AllIndex;
	foreach (Index => Value in C_RandomValue[_Index])
	{
		for(I,0,Value-1)
		{
			AllIndex.add(Index);
		}
	}
	declare Integer Rand = ML::Rand(0, AllIndex.count - 1);

	return AllIndex[Rand];

}

Integer GetScreenType2(Integer _Index)
{
	declare Integer NumberMax = 0;
	foreach (Value in C_RandomValue[_Index])
	{
		NumberMax += Value;
	}

	declare Integer Rand = ML::Rand(0, NumberMax - 1);
	declare Integer IndexFocus = 0;
	declare Integer Count = -1;
	foreach(Value in C_RandomValue[_Index])
	{
		IndexFocus += Value;
		Count += 1;
		if(IndexFocus >= Rand)
		{
			break;
		}
	}

	return Count;
}

Integer GetScreenIndex(Integer _Family)
{
	if (G_ScreensIndex.existskey(_Family)) {
		declare Integer Rand = ML::Rand(0, G_ScreensIndex[_Family].count - 1);
		if(G_ScreensIndex[_Family].existskey(Rand))
		{
			return  G_ScreensIndex[_Family][Rand];
		}
	}
	return C_ImgDefault;
}

Text GetFamilyImgByIndex(Integer _Family,Integer _Index)
{
	if(G_FamilyImg[_Family].existskey(_Index))
	{
		return  G_FamilyImg[_Family][_Index];
	}
	return "";
}

Text GetFamilyImg(Integer _Family)
{
	declare Integer Rand = ML::Rand(0, G_FamilyImg[_Family].count - 1);
	if(G_FamilyImg[_Family].existskey(Rand))
	{
		return  G_FamilyImg[_Family][Rand];
	}
	return "";
}

Void SetLoadingType(Integer _LoadingType, Integer _Environment, Integer _Difficulty, Integer _Mode)
{
	declare Integer ScreenType = GetScreenType(_LoadingType);
	if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady)
	{
		declare persistent Integer	Pers_CountFirstLoading for UserMgr.MainUser;
		if(_LoadingType == 0 || _LoadingType == 1)
		{
			Pers_CountFirstLoading += 1;
			//log("Pers_CountFirstLoading["^_LoadingType^"]: " ^ Pers_CountFirstLoading);
			if(Pers_CountFirstLoading <= 3)
			{
				ScreenType = 7;
			}
		}
	}
	// HACK EG : 
	//ScreenType = 7;
	
	declare Integer Family     = 0;
	if(ScreenType == 0) Family = _Environment;
	else Family = ScreenType + 3;

	declare Integer ScreenIndex = GetScreenIndex(Family);

	declare Text ScreenImage;
	declare Text ScreenText;

	if(G_ScreenImg[ScreenIndex] == "")
	{
		if(ScreenType == 8)
		{
			ScreenImage = GetFamilyImgByIndex(Family, _Environment);
		}
		else
		{
			ScreenImage = GetFamilyImg(Family);
		}
	}
	else ScreenImage = G_ScreenImg[ScreenIndex];

	ScreenText = G_ScreenText[ScreenIndex];

	//HACK GC
	declare Integer ActualVersion       = MenuVersion::GetVersion();
	if(ActualVersion == 1)
	{
		switch(_Environment)
		{
			case 2: ScreenImage = C_GC_LoadingScreen2;
			case 3: ScreenImage = C_GC_LoadingScreen3;
		}
		ScreenText = "";
	}
	else if(ActualVersion == 4)
	{
		switch(_Environment)
		{
			case 2: ScreenImage = C_HandsOn_LoadingScreen2;
			case 3: ScreenImage = C_HandsOn_LoadingScreen3;
		}
		ScreenText = "";
	}


	declare TextFont   = Font::GetFontName("MainSmall2");
	declare TextColors = Colors::GetColorXml("White");

	declare MLText = """
	<quad posn="-160 90 0" sizen="320 180" bgcolor="000" image="{{{C_ImgPath ^ ScreenImage}}}" keepratio="Fit" />
	<frame id="throbber" posn="145 -59 2">
		<quad halign="center" valign="center" image="{{{C_ImgLoading}}}" sizen="10 10" posn="0 0 0" opacity="0.7" id="maniaplanet.Throbber_Quad"/>
		<label halign="center" valign="center2" textfont="{{{TextFont}}}" posn="0 0 1" textsize="2" sizen="220" text="100%" textprefix="$s" textcolor="fff" opacity="1."  id="maniaplanet.Throbber_Percent"/>
	</frame>
	<label halign="center" valign="up" textfont="{{{TextFont}}}" posn="0 -72 1" textsize="3" sizen="220" text="{{{ScreenText}}}" textcolor="{{{TextColors}}}" opacity="1." autonewline="1" maxline="3"/>
	""";
	if(ScreenType == 7)
	{
		declare Integer ActiveButtonPlatform for LocalUser;
		//declare Integer Platform = LibUIButtons::GetPlatform();
		declare Integer Platform = ActiveButtonPlatform;
	
		

		declare Text Label_RecordCenter = "Music Booster";
		declare Text Label_L2           = _("Brake");
		declare Text Label_Down         = _("Mirror");
		declare Text Label_LStick       = _("Steering");
		declare Text Label_Option       = _("Pause");
		declare Text Label_R2           = _("Accelerate");
		declare Text Label_Y            = _("Checkpoint Respawn");
		declare Text Label_B            = _("Restart");
		declare Text Label_X            = _("Accelerate");
		declare Text Label_A            = _("Brake");
		//L16N: %1 will be replaced by the button associated to cam cahnge (R3 button/RS)
		declare Text Label_RStick       = TL::Compose(_("(PRESS %1) Change Camera"), LibUIButtons::GetChangeCamButtonName()); //_("Change Camera");

		declare Text TextColorOther = "fff";
		declare Text TextColorGB    = "fff";
		declare Text TextColorRR    = "fff";
		declare Text FontColorGB    = "MainSmall";
		declare Text FontColorRR    = "MainSmall";
		declare Text InfoText       = "";
		declare Real OpacityOther   = 1.;
		declare Real OpacityGB      = 1.;
		declare Real OpacityRR      = 1.;

		declare Integer Rand;
		if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady)
		{
			declare persistent Integer	Pers_CountFirstLoading for UserMgr.MainUser;
			declare Boolean	ShowTutoRespawn for LocalUser;
			if(Pers_CountFirstLoading <= 2)                         Rand = 1;
			else if(Pers_CountFirstLoading <= 3 || ShowTutoRespawn) Rand = 2;
		}
		if(Rand == 0) Rand = ML::Rand(0, 2);

		if(Rand == 1)
		{
			TextColorOther  = "555";
			TextColorGB  = Colors::GetColorHexa("Yellow");
			TextColorRR  = TextColorOther;
			FontColorGB  = "MainSmall";
			FontColorRR  = "MainSmall";
			InfoText     = "";
			OpacityOther = 1.0;
			OpacityGB = 1.0;
			OpacityRR = OpacityOther;
		}
		else if(Rand == 2)
		{
			TextColorOther  = "555";
			TextColorGB  = TextColorOther;
			TextColorRR  = Colors::GetColorHexa("Yellow");
			FontColorGB  = "MainSmall";
			FontColorRR  = "MainSmall";
			InfoText     = _("“Restart” restarts the race and the timer, while “Respawn” takes you to the last checkpoint.");
			OpacityOther = 1.0;
			OpacityGB = OpacityOther;
			OpacityRR = 1.0;
		}
		
		if(Platform == 0)
		{
			ScreenImage = "Manettes/pad_ps.jpg";
		}
		else if(Platform == 1)
		{
			ScreenImage = "Manettes/pad_xbox.tga";
		}
		else
		{
			switch(Rand)
			{
				case 0: ScreenImage = "AdditionalLoadings/default_keyboard_controls1_full.jpg";
				case 1: ScreenImage = "AdditionalLoadings/default_keyboard_controls1_basics_alt.jpg";
				case 2: ScreenImage = "AdditionalLoadings/default_keyboard_controls1_respawn_restart_alt.jpg";
			}
			
		}
		
		MLText = """
			<quad posn="-160 90 0" sizen="320 180" bgcolor="000" image="{{{C_ImgPath ^ ScreenImage}}}" keepratio="Fit" />
			<frame id="throbber" posn="140 -70 2">
				<quad halign="center" valign="center" image="{{{C_ImgLoading}}}" sizen="10 10" posn="0 0 0" opacity="0.7" id="maniaplanet.Throbber_Quad"/>
				<label halign="center" valign="center2" textfont="{{{TextFont}}}" posn="0 0 1" textsize="2" sizen="220" text="100%" textprefix="$s" textcolor="fff" opacity="1."  id="maniaplanet.Throbber_Percent"/>
			</frame>
			""";
		
		
		if(Platform == 0 || Platform == 1)
		{
			MLText ^= """
			<label halign="right" valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}" posn="-63 49 1"    textprefix="$t" textsize="3" sizen="220" text="{{{Label_RecordCenter}}}" opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="right" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}" posn="-63 37.0 1"  textprefix="$t" textsize="3" sizen="220" text="{{{Label_L2}}}"           opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="right" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}" posn="-63 -5.2 1"  textprefix="$t" textsize="3" sizen="220" text="{{{Label_LStick}}}"       opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="right" valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}" posn="-63 -51.3 1" textprefix="$t" textsize="3" sizen="220" text="{{{Label_Down}}}"         opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>

			<label halign="left" valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="63 48.7 1"   textprefix="$t" textsize="3" sizen="220" text="{{{Label_Option}}}"       opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="left" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="63 37.4 1"   textprefix="$t" textsize="3"      sizen="220" text="{{{Label_R2}}}"      opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			
			<label halign="left" valign="center" textfont="{{{Font::GetFontName(FontColorRR)}}}"  posn="63 9.0 1"    textprefix="$t" textsize="3" sizen="120" text="{{{Label_Y}}}"            opacity="{{{OpacityRR}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorRR}}}"/>
			<label halign="left" valign="center" textfont="{{{Font::GetFontName(FontColorRR)}}}"  posn="63 1.9 1"    textprefix="$t" textsize="3" sizen="220" text="{{{Label_B}}}"            opacity="{{{OpacityRR}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorRR}}}"/>
			<label halign="left" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="63 -5.0 1"   textprefix="$t" textsize="3" sizen="220" text="{{{Label_A}}}"            opacity="{{{OpacityGB}}}" autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="left" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="63 -11.6 1"  textprefix="$t" textsize="3" sizen="220" text="{{{Label_X}}}"            opacity="{{{OpacityGB}}}" autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="left" valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="63 -51.5 1"  textprefix="$t" textsize="3" sizen="80"  text="{{{Label_RStick}}}"       opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			
			<quad halign="center" valign="center" posn="0 -75 0" sizen="320 20" bgcolor="000" hidden="1"/>
			<label halign="center" valign="up" textfont="{{{TextFont}}}" posn="0 -72 1" textsize="3" sizen="220" text="{{{InfoText}}}" textcolor="{{{TextColors}}}" opacity="{{{1.}}}" autonewline="1" maxline="3"/>
			""";
		}
		else
		{
			Label_RStick = _("Change Camera");
			MLText ^= """
			<label halign="center" valign="center" textfont="{{{Font::GetFontName("Main")}}}"       posn="0 55.3 1"        textprefix="$t" textsize="10" sizen="330"  text="{{{_("Keyboard default controls")}}}"                       opacity="{{{OpacityRR}}}"    autonewline="1" maxline="3" textcolor="{{{Colors::GetColorHexa("Yellow")}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="-99. -33.0 1"    textprefix="$t" textsize="4" sizen="220" text="{{{Label_L2}}}"                      opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="center" valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="46 -60.7 1"      textprefix="$t" textsize="4" sizen="220" text="{{{Label_LStick}}}"                  opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>

			<label halign="right"  valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="-97.2 18.7 1"    textprefix="$t" textsize="4" sizen="220" text="{{{Label_Option}}}"                  opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="-99.2 -24.4 1"   textprefix="$t" textsize="4" sizen="220" text="{{{Label_R2}}}"                      opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName(FontColorRR)}}}"  posn="4 26.3 1"        textprefix="$t" textsize="4" sizen="80"  text="{{{Label_Y}}}"                       opacity="{{{OpacityRR}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorRR}}}"/>
			<label halign="left"   valign="center" textfont="{{{Font::GetFontName(FontColorRR)}}}"  posn="31 18.6 1"       textprefix="$t" textsize="4" sizen="220" text="{{{Label_B}}}"                       opacity="{{{OpacityRR}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorRR}}}"/>
			<label halign="left"   valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="64 -53.5 1"      textprefix="$t" textsize="4" sizen="220" text="{{{Label_A}}}"                       opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="-47 -48.5 1"     textprefix="$t" textsize="4" sizen="80"  text="{{{Label_RStick}}}"                  opacity="{{{OpacityOther}}}" autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName(FontColorGB)}}}"  posn="35 -52.8 1"      textprefix="$t" textsize="4" sizen="220" text="{{{Label_X}}}"                       opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorGB}}}"/>
			<label halign="center" valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="-32 -61.6 1"     textprefix="$t" textsize="4" sizen="220" text="{{{Label_RecordCenter}}}"            opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="left"   valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="98.2 -14.1 1"    textprefix="$t" textsize="4" sizen="60"  text="Stunts"                              opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			<label halign="right"  valign="center" textfont="{{{Font::GetFontName("MainSmall")}}}"  posn="-100.2 -7.6 1"   textprefix="$t" textsize="4" sizen="60"  text="{{{_("Browse scores table")}}}"      opacity="{{{OpacityGB}}}"    autonewline="1" maxline="3" textcolor="{{{TextColorOther}}}"/>
			
			
			<quad halign="center"  valign="center" posn="0 -75 0" sizen="320 20" bgcolor="000" hidden="1"/>
			<label halign="center" valign="up" textfont="{{{TextFont}}}" posn="0 -72 1" textsize="3" sizen="220" text="{{{InfoText}}}" textcolor="{{{TextColors}}}" opacity="{{{1.}}}" autonewline="1" maxline="3"/>
			""";
			
		}
	}
	else if(ScreenType == 10) //StartDemo/TitleScreen
	{
		ScreenImage = "Trame_XPLOD.tga";
		declare Text IMGInsterCoin1    = C_ImgBase^"StartDemo/insert_coins_3b-0_B.png";
		declare Text IMGInsterCoin2    = C_ImgBase2^"insert-coin-blink.dds";
		MLText = """
			<quad posn="-160 90 0" sizen="320 180" bgcolor="000" image="{{{C_ImgBase ^ ScreenImage}}}" keepratio="Fit" />
			<quad halign="center" valign="center" image="{{{IMGInsterCoin1}}}" sizen="220 51" keepratio="Fit" posn="1 6 7" opacity="1.0" id="Quad_InsertCoin1"/>
			<label halign="center" valign="center" textemboss="1" posn="0 -21.8 8" textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"
			id="Label_InsertCoin" textsize="6." textcolor="{{{Colors::GetColorHexa("Yellow")}}}" sizen="130" opacity="1." text="{{{_("Loading")}}}"/>

			<frame id="throbber" posn="0 -32 7">
				<quad halign="center" valign="center" image="{{{C_ImgLoading}}}" sizen="11 11" posn="0 0 0" opacity="0.7" id="maniaplanet.Throbber_Quad"/>
				<label halign="center" valign="center2" textfont="{{{TextFont}}}" posn="0 0 1" textsize="2" sizen="220" text="100%" textprefix="$s" textcolor="fff" opacity="1."  id="maniaplanet.Throbber_Percent"/>
			</frame>
	""";
	}

	Layers::Update(C_LoadingLayerName, MLText);
}

/*
Text TEST_GetManialinkBase() //A effacer
{
	declare Text ScreenImage = "loading_stad_placeholder.png";
	declare Text ScreenText;
	declare TextFont   = Font::GetFontName("Main");
	declare TextColors = Colors::GetColorXml("Yellow");
	declare Text aaa = "FAST FACT: Nobody has ever been hurt falling off the magnetic tracks in Rollercoaster Lagoon. (Although some people were hurt when they hit the ground)";
	ScreenText = aaa;
	return """
	<quad posn="-160 90 60" sizen="320 180" bgcolor="000" image="{{{C_ImgPath ^ ScreenImage}}}" keepratio="Fit" />
	<label halign="center" valign="up" textfont="{{{TextFont}}}" posn="0 -72 62" textsize="3" sizen="220" text="{{{ScreenText}}}" textcolor="{{{TextColors}}}" opacity="1." autonewline="1" maxline="3"/>
	""";
}
*/

Void Load()
{
	LibLoadingScreen::Load();
	G_ScreenFamily = LibLoadingScreen::GetFamilies();
	G_ScreenText   = LibLoadingScreen::GetTexts();
	G_ScreenImg    = LibLoadingScreen::GetImgs();
	G_ScreensIndex = LibLoadingScreen::GetFamilyIndex();
	G_FamilyImg    = LibLoadingScreen::GetFamilyImg();

	
	Layers::Create(C_LoadingLayerName);
	Layers::Attach(C_LoadingLayerName);
	declare CUILayer LoadingScreenLayer <=> Layers::Get(C_LoadingLayerName);
	if(LoadingScreenLayer != Null) 
	{
		LoadingScreenLayer.Type = CUILayer::EUILayerType::LoadingScreen;
		LoadingScreenLayer.IsVisible = True;
	}
	//SetLoadingType(C_Type_Ingame, 0);
}
