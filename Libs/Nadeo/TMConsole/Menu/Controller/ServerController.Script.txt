#Include "TextLib"			as TextLib
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"								as Layers
#Include "Libs/Nadeo/TMConsole/Live/LiveEvent.Script.txt" 								as LiveEvent
#Include "Libs/Nadeo/TMConsole/Live/LiveHttp.Script.txt" 								as LiveHttp
#Include "Libs/Nadeo/TMConsole/Live/LiveXml.Script.txt" 								as LiveXml
#Include "Libs/Nadeo/TMConsole/Live/LiveAuth.Script.txt"								as LiveAuth
#Include "Libs/Nadeo/TMConsole/Menu/MenuAchievements.Script.txt"						as MenuAchievements
#Include "Libs/Nadeo/TMConsole/Menu/Controller/TaskMessageErrorController.Script.txt"	as TaskMessageErrorController

#Include "Libs/Nadeo/TMConsole/PopUpManager.Script.txt"				as PopUpManager

#Const  C_MAXROOMSCOUNT					11

#Const	C_AUTHOR_NADEO							"Nadeo"

#Const	C_REQUESTSTATUS_NOREQUEST 				"0"
#Const	C_REQUESTSTATUS_WAITING 				"1"
#Const  C_REQUESTSTATUS_TOSEND					"2"
#Const	C_REQUESTSTATUS_WAITFORDISPLAYNAMES 	"3"
#Const	C_REQUESTSTATUS_SUCCEEDED 				"4"
#Const  C_REQUESTSTATUS_FAILED					"5"

#Const C_REQUESTTYPE_NONE				-1
#Const C_REQUESTTYPE_ALLSERVERS			0
#Const C_REQUESTTYPE_BUDDIESSERVERS		1
#Const C_REQUESTTYPE_GETROOM			2
#Const C_REQUESTTYPE_FAVORITES			3
//end WaitForDisplayNames, Garder Favorites en dernier !
#Const C_REQUESTTYPE_GETMYROOM			4 //donc on est le propri√©taire !
#Const C_REQUESTTYPE_MYROOMS			5
#Const C_REQUESTTYPE_CREATEROOM			6
#Const C_REQUESTTYPE_UPDATEROOM			7
#Const C_REQUESTTYPE_DELETEROOM			8
#Const C_REQUESTTYPE_SERVERSTATUS		9
#Const C_REQUESTTYPE_SERVERSTART		10
#Const C_REQUESTTYPE_SERVERSTOP			11
#Const C_REQUESTTYPE_SERVERMAPS			12
#Const C_REQUESTTYPE_CANCREATEROOMS		13
#Const C_REQUESTTYPE_GETMAPSTHUMBNAILS	14

#Const C_REQUESTSCOUNT					15

#Const C_IsFavoriteCooldown				30000


//structure de G_Requests
//G_Requests = Request[]
//Request = Text[Text]
//Champs : "status", "layer", "id", "roomid"

//Requests Data
declare Text[Text][]		G_Requests;

//Additionnal Request Data
declare Integer				G_RequestAllServersOffset;
declare Integer				G_RequestAllServersLength;
declare Text				G_RequestAllServersFilters;

declare Integer				G_RequestFavoritesOffset;
declare Integer				G_RequestFavoritesLength;
declare Text				G_RequestFavoritesFilters;

declare Integer				G_RequestBuddiesServerInfoOffset;
declare Integer				G_RequestBuddiesServerInfoLength;
declare Boolean				G_RequestBuddiesServerInfo_CanyonOnly;
declare Text[Text][]		G_BuddiesServerInfoToGet;

declare Text				G_CreateRoom_DataToSend;
declare Text 				G_UpdateRoom_DataToSend;
declare Text				G_DeleteRoom_Token;

declare Text				G_StartRoom_Password;

declare Text[]				G_MapsThumbnails_Uids;

//External Datas
declare Text[Text][]		G_AllServers;
declare Text[Text][]		G_Favorites;

declare Text[Text][]		G_ServerMaps;

declare Text[Text]			G_RoomByLogin;
declare Text[Text][]		G_RoomByLoginMaps;

declare Text[Text][]		G_MyRooms;
declare Text[Text][][]		G_MyRoomsMaps;

declare Text[Text] 			G_Room;
declare Text[Text][]		G_RoomMaps;

declare Text[Text][]		G_BuddiesServerInfo;

declare Text[Text]			G_MapsThumbnails;

//Internal Data
declare Text				G_DisconnectErrorText;


declare Text G_ServerStatus_RequiredState;
declare Text G_ServerStatus_Status;
declare Text G_ServerStatus_IsOnline;
declare Text G_ServerStatus_Starting;
declare Text G_ServerStatus_Logs;

declare CWebServicesTaskResult[Integer] GetDisplayNamesTasks; //index par requesttype (<=1)


///////////////////
// INIT & RESET
///////////////////
Void ReInitRequest(Integer _RequestType) {
	G_Requests[_RequestType]["status"]  = C_REQUESTSTATUS_NOREQUEST;
	G_Requests[_RequestType]["id"]		= "";
	G_Requests[_RequestType]["layer"]	= "";
	G_Requests[_RequestType]["roomid"] 	= "-1";
}

Void InitRequestsData() {
	G_Requests = Text[Text][];
	
	for (I, 0, C_REQUESTSCOUNT-1)
	{
		G_Requests.add(Text[Text]);
		ReInitRequest(I);
	}
}

Void OnConnexionLost(Text _Message) {
	G_DisconnectErrorText = _Message;
	InitRequestsData();
}

Void Load() {	
	G_DisconnectErrorText = "";
	InitRequestsData();
}

///////////////////
// REQUESTS
///////////////////
Void SetRequestStatus(Integer _RequestType, Text _Status, Text _Id)
{
	if (_Id != "")
		G_Requests[_RequestType]["id"]		= _Id;
	if (_Id == "" && _Status == C_REQUESTSTATUS_WAITING)
		G_Requests[_RequestType]["status"]	= C_REQUESTSTATUS_FAILED;
	else
		G_Requests[_RequestType]["status"]	= _Status;
}

Void DropCurrentRequest(Integer _RequestType)
{
	if (G_Requests[_RequestType]["id"] == "")
		return;
	declare Text RequestId = G_Requests[_RequestType]["id"];
	for (I, 0, Http.Requests.count-1)
	{
		if (Http.Requests[I].Id^"" == RequestId)
		{
			Http.Destroy(Http.Requests[I]);
			return;
		}
	}
}

Void RequestMyRooms() {
	DropCurrentRequest(C_REQUESTTYPE_MYROOMS);
	if( ManiaPlanet.MasterServer_MainMSUser == Null) return;
	
	declare Ident CurId	= LiveHttp::Manialib_Http_GetAsync("/rooms?authors[]="^ManiaPlanet.MasterServer_MainMSUser.Login^"&length=20", LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_MYROOMS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestAllServers() {
	DropCurrentRequest(C_REQUESTTYPE_ALLSERVERS);
	declare Url = "/rooms";
	Url ^= "?offset="^G_RequestAllServersOffset;
	Url ^= "&length="^G_RequestAllServersLength;
	Url ^= G_RequestAllServersFilters;
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_ALLSERVERS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestFavorites() {
	DropCurrentRequest(C_REQUESTTYPE_FAVORITES);
	declare Url = "/rooms";
	Url ^= "?favorite=True";
	Url ^= "&offset="^G_RequestFavoritesOffset;
	Url ^= "&length="^G_RequestFavoritesLength;
	Url ^= G_RequestFavoritesFilters;
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());	
	SetRequestStatus(C_REQUESTTYPE_FAVORITES, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestBuddyServerInfo() {
	DropCurrentRequest(C_REQUESTTYPE_BUDDIESSERVERS);
	declare Url = "/rooms";
	for (I, 0, G_BuddiesServerInfoToGet.count-1)
	{
		if (I == 0)
			Url ^= "?";
		else
			Url ^= "&";
		Url ^= "dedicatedLogins[]="^G_BuddiesServerInfoToGet[I]["dedicated_login"];
	} 
	if (G_RequestBuddiesServerInfo_CanyonOnly)
		Url ^= "&environments[]=Canyon";
	
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_BUDDIESSERVERS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestGetRoom() {
	DropCurrentRequest(C_REQUESTTYPE_GETMYROOM);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_GETMYROOM]["roomid"];
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_GETMYROOM, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestGetRoomByLogin() {
	DropCurrentRequest(C_REQUESTTYPE_GETROOM);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_GETROOM]["roomid"];
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_GETROOM, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestCreateRoom()
{
	DropCurrentRequest(C_REQUESTTYPE_CREATEROOM);
	declare Ident CurId = LiveHttp::Manialib_Http_PostAsync("/rooms", G_CreateRoom_DataToSend, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_CREATEROOM, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestDeleteRoom()
{
	DropCurrentRequest(C_REQUESTTYPE_DELETEROOM);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_DELETEROOM]["roomid"];
	Url ^= "/delete";
	declare Ident CurId = LiveHttp::Manialib_Http_PostAsync(Url, "{\"token\":\""^G_DeleteRoom_Token^"\"}", LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_DELETEROOM, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestUpdateRoom()
{
	DropCurrentRequest(C_REQUESTTYPE_UPDATEROOM);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_UPDATEROOM]["roomid"];
	declare Ident CurId = LiveHttp::Manialib_Http_PostAsync(Url, G_UpdateRoom_DataToSend, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_UPDATEROOM, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestServerStatus()
{
	DropCurrentRequest(C_REQUESTTYPE_SERVERSTATUS);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_SERVERSTATUS]["roomid"];
	declare Ident CurId = LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_SERVERSTATUS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestServerStart()
{
	DropCurrentRequest(C_REQUESTTYPE_SERVERSTART);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_SERVERSTART]["roomid"];
	Url ^= "/start";
	
	declare Text Body;
	if (G_StartRoom_Password != "")
		Body = "{\"password\":\""^G_StartRoom_Password^"\"}";
	declare Ident CurId	= LiveHttp::Manialib_Http_PostAsync(Url, Body, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_SERVERSTART, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestServerStop()
{
	DropCurrentRequest(C_REQUESTTYPE_SERVERSTOP);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_SERVERSTOP]["roomid"];
	Url ^= "/stop";
	declare Ident CurId	= LiveHttp::Manialib_Http_PostAsync(Url, "", LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_SERVERSTOP, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestServerMaps() {
	DropCurrentRequest(C_REQUESTTYPE_SERVERMAPS);
	declare Url = "/rooms/";
	Url ^= G_Requests[C_REQUESTTYPE_SERVERMAPS]["roomid"];
	Url ^= "/maps";
	declare Ident CurId	= LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_SERVERMAPS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestCanCreateRooms() {
	DropCurrentRequest(C_REQUESTTYPE_CANCREATEROOMS);
	declare Ident CurId	= LiveHttp::Manialib_Http_GetAsync("/rooms?authors[]="^ManiaPlanet.MasterServer_MainMSUser.Login, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_CANCREATEROOMS, C_REQUESTSTATUS_WAITING, CurId^"");
}

Void RequestGetMapThumbnails() {
	DropCurrentRequest(C_REQUESTTYPE_GETMAPSTHUMBNAILS);
	declare Text Url = "/maps";
	for (I, 0, G_MapsThumbnails_Uids.count-1)
	{
		if (I == 0)
			Url ^= "?";
		else
			Url ^= "&";
		Url ^= "uids[]="^G_MapsThumbnails_Uids[I];
	}
	declare Ident CurId	= LiveHttp::Manialib_Http_GetAsync(Url, LiveAuth::Auth_GetHttpHeader());
	SetRequestStatus(C_REQUESTTYPE_GETMAPSTHUMBNAILS, C_REQUESTSTATUS_WAITING, CurId^"");
}

///////////////////
// EXTERNAL CALLS
///////////////////
Text[Text][] GetMyRoomsArray() {
	return G_MyRooms;
}

Void GetMyRooms(Text _LayerName) {
	G_Requests[C_REQUESTTYPE_MYROOMS]["layer"] = _LayerName;
	SetRequestStatus(C_REQUESTTYPE_ALLSERVERS, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_FAVORITES, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_MYROOMS, 	C_REQUESTSTATUS_TOSEND, "");
}

Void GetAllServers(Text _LayerName, Integer _Offset, Integer _Length, Text _Filters, Text _LevelClass) {
	G_Requests[C_REQUESTTYPE_ALLSERVERS]["layer"] = _LayerName;
	G_RequestAllServersOffset	= _Offset;
	G_RequestAllServersLength 	= _Length;
	G_RequestAllServersFilters = _Filters;
	G_RequestAllServersFilters ^= "&levelClass="^_LevelClass;
	//RequestAllServers();
	SetRequestStatus(C_REQUESTTYPE_FAVORITES, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_MYROOMS, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_ALLSERVERS, C_REQUESTSTATUS_TOSEND, "");
}

Void GetFavorites(Text _LayerName, Integer _Offset, Integer _Length,  Text _Filters, Text _LevelClass) {
	G_Requests[C_REQUESTTYPE_FAVORITES]["layer"] = _LayerName;
	G_RequestFavoritesOffset	= _Offset;
	G_RequestFavoritesLength	= _Length;
	G_RequestFavoritesFilters 	= _Filters;
	G_RequestFavoritesFilters ^= "&levelClass="^_LevelClass;
	//RequestFavorites();
	SetRequestStatus(C_REQUESTTYPE_ALLSERVERS, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_MYROOMS, 	C_REQUESTSTATUS_NOREQUEST, "");
	SetRequestStatus(C_REQUESTTYPE_FAVORITES, C_REQUESTSTATUS_TOSEND, "");
}

Void GetRoom(Text _LayerName, Integer _RoomId)
{
	G_Requests[C_REQUESTTYPE_GETMYROOM]["layer"] = _LayerName;
	G_Requests[C_REQUESTTYPE_GETMYROOM]["roomid"] = TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_GETMYROOM, C_REQUESTSTATUS_TOSEND, "");
}

Void GetRoom(Text _LayerName, Text _DedicatedLogin)
{
	G_Requests[C_REQUESTTYPE_GETROOM]["layer"] = _LayerName;
	G_Requests[C_REQUESTTYPE_GETROOM]["roomid"] = _DedicatedLogin;
	SetRequestStatus(C_REQUESTTYPE_GETROOM, C_REQUESTSTATUS_TOSEND, "");
}

Void GetBuddiesServerInfo(Text _LayerName, Integer _Offset, Integer _Length, Text _BuddiesInformation, Boolean _CanyonOnly)
{
	DropCurrentRequest(C_REQUESTTYPE_BUDDIESSERVERS);
	G_Requests[C_REQUESTTYPE_BUDDIESSERVERS]["layer"] = _LayerName;
	G_RequestBuddiesServerInfoOffset = _Offset;
	G_RequestBuddiesServerInfoLength = _Length;
	G_RequestBuddiesServerInfo_CanyonOnly = _CanyonOnly;
	
	declare Text[] BuddiesInformationSplit = TextLib::Split(",", _BuddiesInformation);
	G_BuddiesServerInfoToGet.clear();
	if (BuddiesInformationSplit.count == 0)
		return;
	
	for (I, 0, BuddiesInformationSplit.count-1)
	{
		declare Text[] BuddyInfoSplit = TextLib::Split(":", BuddiesInformationSplit[I]);
		if (BuddyInfoSplit.count != 3)
			continue;
		G_BuddiesServerInfoToGet.add(Text[Text]);
		G_BuddiesServerInfoToGet[G_BuddiesServerInfoToGet.count-1]["displayname"]		= BuddyInfoSplit[0];
		G_BuddiesServerInfoToGet[G_BuddiesServerInfoToGet.count-1]["login"] 			= BuddyInfoSplit[1];
		G_BuddiesServerInfoToGet[G_BuddiesServerInfoToGet.count-1]["dedicated_login"] 	= BuddyInfoSplit[2];
	}
	
	SetRequestStatus(C_REQUESTTYPE_BUDDIESSERVERS, C_REQUESTSTATUS_TOSEND, "");
}

Void DeleteRoom(Text _LayerName, Integer _RoomId, Text _Token)
{
	if (G_Requests[C_REQUESTTYPE_DELETEROOM]["status"] != C_REQUESTSTATUS_NOREQUEST)
		return;

	G_DeleteRoom_Token = _Token;
	G_Requests[C_REQUESTTYPE_DELETEROOM]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_DELETEROOM]["roomid"] 	= TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_DELETEROOM, C_REQUESTSTATUS_TOSEND, "");
	//RequestDeleteRoom();
}

Void GetServerOnlineStatus(Text _LayerName, Integer _RoomId)
{
	G_Requests[C_REQUESTTYPE_SERVERSTATUS]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_SERVERSTATUS]["roomid"] 	= TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_SERVERSTATUS, C_REQUESTSTATUS_TOSEND, "");
	//RequestServerStatus();
}

Void CreateRoom(Text _LayerName, Text _RoomData)
{
	if (G_Requests[C_REQUESTTYPE_CREATEROOM]["status"] != C_REQUESTSTATUS_NOREQUEST)
		return;
		
	G_Requests[C_REQUESTTYPE_CREATEROOM]["layer"] = _LayerName;
	G_CreateRoom_DataToSend		= _RoomData;
	SetRequestStatus(C_REQUESTTYPE_CREATEROOM, C_REQUESTSTATUS_TOSEND, "");
	//RequestCreateRoom();
}

Void UpdateRoom(Text _LayerName, Integer _RoomId, Text _RoomData)
{
	if (G_Requests[C_REQUESTTYPE_UPDATEROOM]["status"] != C_REQUESTSTATUS_NOREQUEST)
		return;
		
	G_Requests[C_REQUESTTYPE_UPDATEROOM]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_UPDATEROOM]["roomid"] 	= TextLib::ToText(_RoomId);
	G_UpdateRoom_DataToSend		= _RoomData;
	SetRequestStatus(C_REQUESTTYPE_UPDATEROOM, C_REQUESTSTATUS_TOSEND, "");
	//RequestUpdateRoom();
}

Void ServerStart(Text _LayerName, Integer _RoomId, Text _Password)
{
	if (G_Requests[C_REQUESTTYPE_SERVERSTART]["status"] != C_REQUESTSTATUS_NOREQUEST)
		return;

	G_StartRoom_Password = _Password;
	G_Requests[C_REQUESTTYPE_SERVERSTART]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_SERVERSTART]["roomid"] 	= TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_SERVERSTART, C_REQUESTSTATUS_TOSEND, "");
	//RequestServerStart();
}

Void ServerStop(Text _LayerName, Integer _RoomId)
{
	if (G_Requests[C_REQUESTTYPE_SERVERSTOP]["status"] != C_REQUESTSTATUS_NOREQUEST)
		return;
		
	G_Requests[C_REQUESTTYPE_SERVERSTOP]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_SERVERSTOP]["roomid"] 	= TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_SERVERSTOP, C_REQUESTSTATUS_TOSEND, "");
	//RequestServerStop();
}

Void GetServerMaps(Text _LayerName, Integer _RoomId)
{
	G_Requests[C_REQUESTTYPE_SERVERMAPS]["layer"] 	= _LayerName;
	G_Requests[C_REQUESTTYPE_SERVERMAPS]["roomid"] 	= TextLib::ToText(_RoomId);
	SetRequestStatus(C_REQUESTTYPE_SERVERMAPS, C_REQUESTSTATUS_TOSEND, "");
}

Void GetCanCreateRooms(Text _LayerName)
{
	G_Requests[C_REQUESTTYPE_CANCREATEROOMS]["layer"] 	= _LayerName;
	SetRequestStatus(C_REQUESTTYPE_CANCREATEROOMS, C_REQUESTSTATUS_TOSEND, "");
	//RequestCanCreateRooms();
}

Void GetMapsThumbnails(Text _LayerName, Text[] _MapsUids)
{
	G_MapsThumbnails_Uids = _MapsUids;
	G_Requests[C_REQUESTTYPE_GETMAPSTHUMBNAILS]["layer"] 	= _LayerName;
	SetRequestStatus(C_REQUESTTYPE_GETMAPSTHUMBNAILS, C_REQUESTSTATUS_TOSEND, "");
}

///////////////////
// UI INTERACTION
///////////////////
Text GetFeedbackText(Integer _Request) {												
	declare Text Feedback = "Request_";
	switch(_Request)
	{
		case C_REQUESTTYPE_ALLSERVERS : 		Feedback ^= "AllServers";
		case C_REQUESTTYPE_FAVORITES : 			Feedback ^= "FavoriteServers";
		case C_REQUESTTYPE_BUDDIESSERVERS :		Feedback ^= "GetBuddiesServers";
		case C_REQUESTTYPE_GETROOM :			Feedback ^= "GetRoomByLogin";
		case C_REQUESTTYPE_GETMYROOM :			Feedback ^= "GetRoom";
		case C_REQUESTTYPE_UPDATEROOM : 		Feedback ^= "UpdateRoom";
		case C_REQUESTTYPE_CREATEROOM : 		Feedback ^= "CreateRoom";
		case C_REQUESTTYPE_SERVERSTART : 		Feedback ^= "StartRoom";
		case C_REQUESTTYPE_SERVERSTOP : 		Feedback ^= "StopRoom";
		case C_REQUESTTYPE_DELETEROOM : 		Feedback ^= "DeleteRoom";
		case C_REQUESTTYPE_SERVERMAPS : 		Feedback ^= "ServerMaps";
		case C_REQUESTTYPE_MYROOMS : 			Feedback ^= "MyRooms";
		case C_REQUESTTYPE_GETMAPSTHUMBNAILS :	Feedback ^= "GetMapsThumbnails";
		default : return "";
	}
	
	declare Boolean Success = G_Requests[_Request]["status"] == C_REQUESTSTATUS_SUCCEEDED;
	if (Success)
		Feedback ^= "_Success";
	else
		Feedback ^= "_Failure";
	return Feedback;
}

Void SendFeedbackToUI(Integer _RequestType) {
	declare CUILayer LayerToSend = Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	declare Text FeedbackText = GetFeedbackText(_RequestType);
	LayerCustomEvent(LayerToSend, FeedbackText, Text[]);
}

Void SendMyRoomsListToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	declare Text[Text][] 	RequestedRooms	 		for LayerToSend.LocalPage;
	RequestedRooms									= G_MyRooms;
}

Void SendAllServersListToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	declare Text[Text][] 	RequestedRooms 			for LayerToSend.LocalPage;
	RequestedRooms									= G_AllServers;
}

Void SendFavoritesListToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	declare Text[Text][] 	RequestedRooms 			for LayerToSend.LocalPage;
	RequestedRooms									= G_Favorites;
}

Void SendBuddiesServersListToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	declare Text[Text][] 	RequestedRooms 			for LayerToSend.LocalPage;
	RequestedRooms									= G_BuddiesServerInfo;
}

Void SendServerMapsToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;

	declare Text[Text][]	RequestedRoomMaps	for LayerToSend.LocalPage;
	RequestedRoomMaps = G_ServerMaps;
}

Void SendCanCreateRoomsToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	if (G_MyRooms.count >= C_MAXROOMSCOUNT)
		LayerCustomEvent(LayerToSend, "Request_CanCreateRooms_No", Text[]);
	else
		LayerCustomEvent(LayerToSend, "Request_CanCreateRooms_Yes", Text[]);
}

Void SendRoomDataToUI(Integer _RequestType) {
	declare Text LayerName = G_Requests[_RequestType]["layer"];
	declare CUILayer 		LayerToSend 	= Layers::Get(LayerName);
	if(LayerToSend == Null) return;
	
	if (_RequestType == C_REQUESTTYPE_GETMYROOM)
	{
		declare Text[Text]		RequestedRoomData 			for LayerToSend.LocalPage;
		declare Text[Text][] 	RequestedRoomMaps 			for LayerToSend.LocalPage;
		declare Text[Text]		LastSavedRoomData 			for LayerToSend.LocalPage;
		declare Text[Text][] 	LastSavedRoomMaps 			for LayerToSend.LocalPage;
		
		LastSavedRoomData			= G_Room;
		LastSavedRoomMaps			= G_RoomMaps;
		RequestedRoomData			= G_Room;
		RequestedRoomMaps			= G_RoomMaps;
	} else if (_RequestType == C_REQUESTTYPE_GETROOM) {
		declare Text[Text][]	RequestedRooms				for LayerToSend.LocalPage;
		declare Text[Text][]	RequestedRoomMaps			for LayerToSend.LocalPage;
		RequestedRooms 		= [G_RoomByLogin];
		RequestedRoomMaps 	= G_RoomByLoginMaps;
	}
	
}

Void SendServerStatusToUI(Integer _RequestType) {
	declare CUILayer 		LayerToSend 	= Layers::Get(G_Requests[_RequestType]["layer"]);
	
	if(LayerToSend == Null) 
		return;
		
	declare Text RoomId = G_Requests[_RequestType]["roomid"];
	if(RoomId == "-1")
	{
		LayerCustomEvent(LayerToSend, "ServerStatus", Text[]);
		return;
	}
	
	if (G_Requests[_RequestType]["status"] == C_REQUESTSTATUS_SUCCEEDED)
		LayerCustomEvent(LayerToSend, "Request_ServerStatus_Result", [RoomId, G_ServerStatus_RequiredState, G_ServerStatus_Status, G_ServerStatus_IsOnline, G_ServerStatus_Logs, G_ServerStatus_Starting]);
	else
		LayerCustomEvent(LayerToSend, "Request_ServerStatus_Error", Text[]);
}

Void SendMapsThumbnails(Integer _RequestType) {
	declare CUILayer LayerToSend = Layers::Get(G_Requests[_RequestType]["layer"]);
	if(LayerToSend == Null) return;
	
	declare Text[Text][] RequestedRoomMaps for LayerToSend.LocalPage;
	
	for (I, 0, RequestedRoomMaps.count-1)
	{
		if (G_MapsThumbnails.existskey(RequestedRoomMaps[I]["uid"]))
			RequestedRoomMaps[I]["thumbnail_url"] = G_MapsThumbnails[RequestedRoomMaps[I]["uid"]];
	}
}

///////////////////
// REQUESTS ANSWERS
///////////////////
Void RequestDisplayNames(Integer _RequestType, Text[] _Logins) {
	if (ManiaPlanet.MasterServer_MainMSUser == Null)
	{
		SetRequestStatus(_RequestType, C_REQUESTSTATUS_FAILED, "");
		return;
	}
	
	if (_Logins.count == 0)
	{
		SetRequestStatus(_RequestType, C_REQUESTSTATUS_SUCCEEDED, "");
		return;
	}
	
	declare CWebServicesTaskResult TaskResult = ManiaPlanet.MasterServer_GetDisplayName(ManiaPlanet.MasterServer_MainMSUser.Id);
	
	declare GetDisplayNameTaskResult <=> (TaskResult as CWebServicesTaskResult_GetDisplayNameScriptResult);
	for (I, 0, _Logins.count - 1)
	{
		GetDisplayNameTaskResult.AddLogin(_Logins[I]);
	}
	GetDisplayNameTaskResult.StartTask();

	GetDisplayNamesTasks[_RequestType] = TaskResult;
}

Void SetMyRoomsList(Text _RequestResult) {
	G_MyRooms.clear();
	G_MyRoomsMaps.clear();

	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //rponse invalide !
	
	while(True){
		declare CXmlNode		Result			= Doc.GetFirstChild("result");
		if (Result == Null)
			break; //rponse invalide !
		
		if (Result.Children.count == 0)
			break;
			
		declare Integer I = 0;
				
		foreach(Room in Result.Children)
		{	
			G_MyRooms.add(Text[Text]);
			G_MyRoomsMaps.add(Text[Text][]);
			
			foreach(child in Room.Children)
			{
				if (child.Children.count == 0)
				{
					G_MyRooms[I][child.Name] = LiveXml::Manialib_Xml_NodeToText(child);
				} else if (child.Name == "maps") {	
					G_MyRoomsMaps[I] = LiveXml::Manialib_Xml_NodeToArray2(child);
				}
			}
			if (ManiaPlanet.MasterServer_MainMSUser != Null)
				G_MyRooms[I]["displayname"] = ManiaPlanet.MasterServer_MainMSUser.DisplayName;
			else
				G_MyRooms[I]["displayname"] = "";
			I += 1;
		}
	break;}
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
}

Void SetAllServersList(Text _RequestResult) {
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //rponse invalide !
	
	declare CXmlNode		ResultNode		= Doc.GetFirstChild("result");
	if (ResultNode == Null) {
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	declare Text[Text][]	Result			= LiveXml::Manialib_Xml_NodeToArray2(ResultNode);
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
	
	declare Text[] Logins;
	//concat
	//G_AllServers fait au moins G_RequestAllServersOffset en taille, sinon on n'aurait pas permis de passer  la page suivante
	for (I, 0, G_RequestAllServersLength-1)
	{
		if (Result.existskey(I))
		{
			if (Result[I].existskey("author"))
				if (Result[I]["author"] != C_AUTHOR_NADEO)
				{
					Logins.add(Result[I]["author"]);
				} else
					Result[I]["displayname"] = C_AUTHOR_NADEO;
			if (!G_AllServers.existskey(G_RequestAllServersOffset + I)) // G_AllServers.count == G_RequestAllServersOffset+I-1
			{
				G_AllServers.add(Result[I]);
			} else {
				G_AllServers[G_RequestAllServersOffset+I] = Result[I];
			}
		} else if (G_AllServers.count > G_RequestAllServersOffset+I) {
			declare CountToRemove = G_AllServers.count-(G_RequestAllServersOffset+I);
			for (I, 0, CountToRemove-1)
			{
				G_AllServers.removekey(G_AllServers.count-1);
			}
		}
	}
	
	RequestDisplayNames(C_REQUESTTYPE_ALLSERVERS, Logins);
}

Void SetFavoritesList(Text _RequestResult) {
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //rponse invalide !

	declare CXmlNode		ResultNode		= Doc.GetFirstChild("result");
	
	if (ResultNode == Null) {
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	declare Text[Text][]	Result			= LiveXml::Manialib_Xml_NodeToArray2(ResultNode);
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
	
	declare Text[] Logins;
	//concat
	for (I, 0, G_RequestFavoritesLength-1)
	{
		if (Result.existskey(I))
		{
			if (Result[I].existskey("author"))
				if (Result[I]["author"] != C_AUTHOR_NADEO)
				{
					Logins.add(Result[I]["author"]);
				} else
					Result[I]["displayname"] = C_AUTHOR_NADEO;
			if (!G_Favorites.existskey(G_RequestFavoritesOffset + I)) // G_Favorites.count == G_RequestFavoritesOffset+I-1
			{
				G_Favorites.add(Result[I]);
			} else {
				G_Favorites[G_RequestFavoritesOffset+I] = Result[I];
			}
		} else if (G_Favorites.count > G_RequestFavoritesOffset+I) {
			declare CountToRemove = G_Favorites.count-(G_RequestFavoritesOffset+I);
			for (I, 0, CountToRemove-1)
			{
				G_Favorites.removekey(G_Favorites.count-1);
			}
		}
	}
	
	RequestDisplayNames(C_REQUESTTYPE_FAVORITES, Logins);
}

Void SetBuddyServerInfo(Text _RequestResult) {
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	declare CXmlNode		ResultNode			= Doc.GetFirstChild("result");
	if (ResultNode == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	
	declare Text[Text][]	Result			= LiveXml::Manialib_Xml_NodeToArray2(ResultNode);
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
	
	declare Text[] Logins;
	//concat
	for (I, 0, G_BuddiesServerInfoToGet.count-1)
	{
		declare Text[Text] BuddyServer;
		for(J, 0, Result.count-1)
		{
			if (Result[J]["dedicated_login"] == G_BuddiesServerInfoToGet[I]["dedicated_login"])
			{
				BuddyServer = Result[J];
				break;
			}
		}
		if (BuddyServer.count == 0)
			continue;
		if (BuddyServer.existskey("author"))
			if (BuddyServer["author"] != C_AUTHOR_NADEO)
			{
				Logins.add(BuddyServer["author"]);
			} else
				BuddyServer["displayname"] = C_AUTHOR_NADEO;
		if (!G_BuddiesServerInfo.existskey(G_RequestBuddiesServerInfoOffset + I)) // G_BuddiesServerInfo.count == G_RequestBuddiesServerInfoOffset+I
		{
			G_BuddiesServerInfo.add(BuddyServer);
		} else {
			G_BuddiesServerInfo[G_RequestBuddiesServerInfoOffset+I] = BuddyServer;
		}
		G_BuddiesServerInfo[G_RequestBuddiesServerInfoOffset+I]["buddy_name"] = G_BuddiesServerInfoToGet[I]["displayname"]; 
		G_BuddiesServerInfo[G_RequestBuddiesServerInfoOffset+I]["buddy_login"] = G_BuddiesServerInfoToGet[I]["login"]; 
	}

	RequestDisplayNames(C_REQUESTTYPE_BUDDIESSERVERS, Logins);
}

Void SetRoomData(Text _RequestResult, Text _RoomId) {
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	declare CXmlNode		Result			= Doc.GetFirstChild("result");
	if (Result == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
		
	G_Room.clear();
	G_RoomMaps.clear();
		
	foreach(child in Result.Children)
	{
		if (child.Children.count == 0)
			G_Room[child.Name] = LiveXml::Manialib_Xml_NodeToText(child);
		else if (child.Name == "maps")
			G_RoomMaps = LiveXml::Manialib_Xml_NodeToArray2(child);
	}
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
}

Void SetRoomByLoginData(Text _RequestResult) {
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
	declare CXmlNode		Result			= Doc.GetFirstChild("result");
	if (Result == Null)
	{
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //rponse invalide !
	}
		
	G_RoomByLogin.clear();
	G_RoomByLoginMaps.clear();
		
	foreach(child in Result.Children)
	{
		if (child.Children.count == 0)
			G_RoomByLogin[child.Name] = LiveXml::Manialib_Xml_NodeToText(child);
		else if (child.Name == "maps")
			G_RoomByLoginMaps = LiveXml::Manialib_Xml_NodeToArray2(child);
	}
	
	if (G_RoomByLogin.existskey("author"))
		RequestDisplayNames(C_REQUESTTYPE_GETROOM, [G_RoomByLogin["author"]]);
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
}

Void SetServerMaps(Text _RequestResult) {
	G_ServerMaps.clear();

	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //rponse invalide !
	
	while(True){ 
		declare CXmlNode		Result			= Doc.GetFirstChild("result");
		if (Result == Null)
			break; //rponse invalide !

		G_ServerMaps = LiveXml::Manialib_Xml_NodeToArray2(Result);
	break;}
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
}

Void SetServerStatus(Text _RequestResult) {
	G_ServerStatus_RequiredState = "";
	G_ServerStatus_Status = "";
	G_ServerStatus_IsOnline = "";
	G_ServerStatus_Starting = "";
	G_ServerStatus_Logs = "";
	
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //rponse invalide !
	
	while(True){
		declare CXmlNode		Result			= Doc.GetFirstChild("result");
		if (Result == Null)
			break; //rponse invalide !
		
		if (Result.Children.count == 0)
			break;
		
		foreach(child in Result.Children)
		{
			switch (child.Name)
			{
				case "required_state" 	: G_ServerStatus_RequiredState 	= LiveXml::Manialib_Xml_NodeToText(child);
				case "status"			: G_ServerStatus_Status			= LiveXml::Manialib_Xml_NodeToText(child);
				case "is_online"		: G_ServerStatus_IsOnline		= LiveXml::Manialib_Xml_NodeToText(child);
				case "debug_logs"		: G_ServerStatus_Logs			= LiveXml::Manialib_Xml_NodeToText(child);
				case "starting_since"	: G_ServerStatus_Starting		= LiveXml::Manialib_Xml_NodeToText(child);
			}
		}
	break;}
	LiveXml::Manialib_Xml_DestroyDocument(Doc);		
}

Void SetMapsThumbnails(Text _RequestResult) {
	G_MapsThumbnails.clear();
	declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
	if (Doc == Null)
		return; //r√©ponse invalide !
	
	declare CXmlNode		Result			= Doc.GetFirstChild("result");
	if (Result == Null) {
		LiveXml::Manialib_Xml_DestroyDocument(Doc);
		return; //r√©ponse invalide !
	}
	
	foreach(MapNode in Result.Children)
	{
		declare CXmlNode ThumbnailUrlNode <=> MapNode.GetFirstChild("thumbnail_url");
		declare CXmlNode UidNode <=> MapNode.GetFirstChild("uid");
		if (ThumbnailUrlNode != Null && UidNode != Null)
			G_MapsThumbnails[UidNode.TextContents] = ThumbnailUrlNode.TextContents;
	}
	
	LiveXml::Manialib_Xml_DestroyDocument(Doc);
}

Void SetError(Integer _RequestType, Integer _StatusCode, Text _RequestResult) {
	declare Text Message;
	if (_StatusCode / 100 == 4 || _StatusCode / 100 == 5)
	{   //erreurs client ou serveur
		switch(_RequestType)
		{
			case C_REQUESTTYPE_ALLSERVERS 			: Message = TextLib::GetTranslatedText(_("Error: the rooms could not be retrieved."));
			case C_REQUESTTYPE_FAVORITES 			: Message = TextLib::GetTranslatedText(_("Error: the rooms could not be retrieved."));
			case C_REQUESTTYPE_BUDDIESSERVERS 		: Message = TextLib::GetTranslatedText(_("Error: the rooms could not be retrieved."));
			case C_REQUESTTYPE_MYROOMS 				: Message = TextLib::GetTranslatedText(_("Error: the rooms could not be retrieved."));
			case C_REQUESTTYPE_GETMYROOM			: Message = TextLib::GetTranslatedText(_("Error: the room could not be retrieved."));
			case C_REQUESTTYPE_CREATEROOM 			: Message = TextLib::GetTranslatedText(_("Error: the room could not be created."));
			case C_REQUESTTYPE_UPDATEROOM 			: Message = TextLib::GetTranslatedText(_("Error: the room could not be updated."));
			case C_REQUESTTYPE_DELETEROOM 			: Message = TextLib::GetTranslatedText(_("Error: the room could not be deleted."));
			case C_REQUESTTYPE_SERVERSTART 			: 
			{	
				Message = TextLib::GetTranslatedText(_("Error: the room could not be started."));
				declare CXmlDocument	Doc 			= LiveXml::Manialib_Xml_CreateDocument(_RequestResult);
				if (Doc != Null)
				{
					declare CXmlNode		Error			= Doc.GetFirstChild("error");
					if (Error != Null)
					{
						declare CXmlNode AppCodeNode = Error.GetFirstChild("app_code");
						if (AppCodeNode != Null)
						{
							declare Integer AppCode = TextLib::ToInteger(AppCodeNode.TextContents);
							if (AppCode == 1)
								Message ^= " "^TextLib::GetTranslatedText(_("There a too many rooms started so far. Please try again later or join a started room."));
							else if (AppCode == 9)
								Message ^= " "^TextLib::GetTranslatedText(_("The specified password is invalid."));
							else
								Message ^= " "^TextLib::GetTranslatedText(_("Please try again later or visit support.ubi.com"));
						}
					}
				}
				LiveXml::Manialib_Xml_DestroyDocument(Doc);
			}
			case C_REQUESTTYPE_SERVERSTOP 			: Message = TextLib::GetTranslatedText(_("Error: the room could not be stopped."));
			case C_REQUESTTYPE_SERVERMAPS 			: Message = TextLib::GetTranslatedText(_("Error: the maps of the room could not be retrieved."));
			case C_REQUESTTYPE_GETROOM				: Message = TextLib::GetTranslatedText(_("Error: the room could not be retrieved."));
			case C_REQUESTTYPE_SERVERSTATUS			: if (_StatusCode == 404) Message = TextLib::GetTranslatedText(_("Error: the room does not exist anymore."));
		}
		if (_RequestType != C_REQUESTTYPE_SERVERSTART && (_RequestType != C_REQUESTTYPE_SERVERSTATUS || _StatusCode != 404))
			Message ^= " "^TextLib::GetTranslatedText(_("The connection to the Trackmania Servers has been lost."))^" "^TextLib::GetTranslatedText(_("Please try again later or visit support.ubi.com"));
		
	} else {
		if (G_DisconnectErrorText != "")
			Message = G_DisconnectErrorText;
		else
			Message = _("The connection to the Trackmania Servers has been lost. Online features will become available once the connection has been re-established.");
	}
	
	if (Message != "")
		PopUpManager::AddPopUp2(0, Message, "", False);
}

///////////////////
// UPDATE
///////////////////
Void SendCompletedRequestData(Integer _RequestType)
{
	switch(_RequestType)
	{
		case C_REQUESTTYPE_MYROOMS 			: SendMyRoomsListToUI(C_REQUESTTYPE_MYROOMS);
		case C_REQUESTTYPE_ALLSERVERS 		: SendAllServersListToUI(C_REQUESTTYPE_ALLSERVERS);
		case C_REQUESTTYPE_BUDDIESSERVERS	: SendBuddiesServersListToUI(C_REQUESTTYPE_BUDDIESSERVERS);
		case C_REQUESTTYPE_GETMYROOM		: SendRoomDataToUI(C_REQUESTTYPE_GETMYROOM);
		case C_REQUESTTYPE_GETROOM			: SendRoomDataToUI(C_REQUESTTYPE_GETROOM);
		case C_REQUESTTYPE_FAVORITES 		: SendFavoritesListToUI(C_REQUESTTYPE_FAVORITES);
		case C_REQUESTTYPE_SERVERSTATUS 	: SendServerStatusToUI(C_REQUESTTYPE_SERVERSTATUS);
		case C_REQUESTTYPE_SERVERSTART		: SendServerStatusToUI(C_REQUESTTYPE_SERVERSTART);
		case C_REQUESTTYPE_SERVERMAPS 		: SendServerMapsToUI(C_REQUESTTYPE_SERVERMAPS);
		case C_REQUESTTYPE_CANCREATEROOMS 	: SendCanCreateRoomsToUI(C_REQUESTTYPE_CANCREATEROOMS);
		case C_REQUESTTYPE_GETMAPSTHUMBNAILS: SendMapsThumbnails(C_REQUESTTYPE_GETMAPSTHUMBNAILS);
		case C_REQUESTTYPE_CREATEROOM :
		{
			if (G_Requests[C_REQUESTTYPE_CREATEROOM]["status"] == C_REQUESTSTATUS_SUCCEEDED)
			{
				SendRoomDataToUI(C_REQUESTTYPE_CREATEROOM);
				MenuAchievements::RoomCreated();
			}
		}
		case C_REQUESTTYPE_UPDATEROOM :
		{
			if (G_Requests[C_REQUESTTYPE_UPDATEROOM]["status"] == C_REQUESTSTATUS_SUCCEEDED)
				SendRoomDataToUI(C_REQUESTTYPE_UPDATEROOM);
		}
	}
	
	if (_RequestType != C_REQUESTTYPE_CANCREATEROOMS && _RequestType != C_REQUESTTYPE_SERVERSTATUS)
		SendFeedbackToUI(_RequestType);
		
	ReInitRequest(_RequestType);
}

Void RequestRetry(Integer _RequestType)
{
	if	(ManiaPlanet.MasterServer_MainMSUser == Null || ManiaPlanet.MasterServer_MainMSUser.ConnectionStatus != CNetMasterServerUserInfo::EMasterServerConnectionStatus::Connected)
	{
		SetRequestStatus(_RequestType, C_REQUESTSTATUS_FAILED, "");
		return;
	}
	
	if (LiveAuth::Auth_IsWaitingForToken())
		return;
	
	switch(_RequestType)
	{
		case C_REQUESTTYPE_MYROOMS 				: RequestMyRooms();
		case C_REQUESTTYPE_ALLSERVERS 			: RequestAllServers();
		case C_REQUESTTYPE_BUDDIESSERVERS		: RequestBuddyServerInfo();
		case C_REQUESTTYPE_FAVORITES 			: RequestFavorites();
		case C_REQUESTTYPE_GETMYROOM			: RequestGetRoom();
		case C_REQUESTTYPE_CREATEROOM 			: RequestCreateRoom();
		case C_REQUESTTYPE_UPDATEROOM 			: RequestUpdateRoom();
		case C_REQUESTTYPE_DELETEROOM 			: RequestDeleteRoom();
		case C_REQUESTTYPE_SERVERSTART 			: RequestServerStart();
		case C_REQUESTTYPE_SERVERSTOP 			: RequestServerStop();
		case C_REQUESTTYPE_SERVERSTATUS 		: RequestServerStatus();
		case C_REQUESTTYPE_SERVERMAPS 			: RequestServerMaps();
		case C_REQUESTTYPE_CANCREATEROOMS 		: RequestCanCreateRooms();
		case C_REQUESTTYPE_GETROOM				: RequestGetRoomByLogin();
		case C_REQUESTTYPE_GETMAPSTHUMBNAILS	: RequestGetMapThumbnails();
	}
}

Void SendDatasToUILoop() {
	for (I, 0, C_REQUESTSCOUNT-1)
	{
		declare Text Status = G_Requests[I]["status"];
		if ( Status == C_REQUESTSTATUS_SUCCEEDED || Status == C_REQUESTSTATUS_FAILED)
			SendCompletedRequestData(I);
		else if (Status == C_REQUESTSTATUS_TOSEND)
			RequestRetry(I);
	}
}

Integer GetRequestTypeFromRequestId(Text _RequestId)
{
	for(I, 0, C_REQUESTSCOUNT-1)
	{
		if (G_Requests[I]["id"] == _RequestId)
			return I;
	}
	return -1;
}

Void SetRoomByLoginDisplayName(CWebServicesTaskResult_GetDisplayNameScriptResult _TaskResult)
{
	if (G_RoomByLogin["author"] != C_AUTHOR_NADEO)
		G_RoomByLogin["displayname"] = _TaskResult.GetDisplayName(G_RoomByLogin["author"]);
}

Void SetAllServersDisplayNames(CWebServicesTaskResult_GetDisplayNameScriptResult _TaskResult)
{
	for (I, 0, G_AllServers.count - 1)
		if (G_AllServers[I]["author"] != C_AUTHOR_NADEO)
			G_AllServers[I]["displayname"] = _TaskResult.GetDisplayName(G_AllServers[I]["author"]);
}

Void SetFavoriteServersDisplayNames(CWebServicesTaskResult_GetDisplayNameScriptResult _TaskResult)
{
	for (I, 0, G_Favorites.count - 1)
		if (G_Favorites[I]["author"] != C_AUTHOR_NADEO)
			G_Favorites[I]["displayname"] = _TaskResult.GetDisplayName(G_Favorites[I]["author"]);
}

Void SetBuddiesServersDisplayNames(CWebServicesTaskResult_GetDisplayNameScriptResult _TaskResult)
{
	for (I, 0, G_BuddiesServerInfo.count - 1)
		if (G_BuddiesServerInfo[I]["author"] != C_AUTHOR_NADEO)
			G_BuddiesServerInfo[I]["displayname"] = _TaskResult.GetDisplayName(G_BuddiesServerInfo[I]["author"]);
}

Void GetDisplayNamesLoop() {
	for (I, 0, C_REQUESTTYPE_FAVORITES)
	{
		if (GetDisplayNamesTasks.existskey(I) && GetDisplayNamesTasks[I] != Null && !GetDisplayNamesTasks[I].IsProcessing)
		{
			declare GetDisplayNameTaskResult <=> (GetDisplayNamesTasks[I] as CWebServicesTaskResult_GetDisplayNameScriptResult);
			if (G_Requests[I]["status"] == C_REQUESTSTATUS_WAITFORDISPLAYNAMES)
			{
				if (GetDisplayNameTaskResult.HasSucceeded)
				{
					G_Requests[I]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					switch (I)
					{
						case C_REQUESTTYPE_ALLSERVERS : SetAllServersDisplayNames(GetDisplayNameTaskResult);
						case C_REQUESTTYPE_FAVORITES : SetFavoriteServersDisplayNames(GetDisplayNameTaskResult);
						case C_REQUESTTYPE_BUDDIESSERVERS : SetBuddiesServersDisplayNames(GetDisplayNameTaskResult);
						case C_REQUESTTYPE_GETROOM : SetRoomByLoginDisplayName(GetDisplayNameTaskResult);
					}
				} else {
					TaskMessageErrorController::TaskErrorMessage(GetDisplayNameTaskResult.ErrorType, GetDisplayNameTaskResult.ErrorCode);
					switch (I)
					{
						case C_REQUESTTYPE_ALLSERVERS 		: G_AllServers.clear();
						case C_REQUESTTYPE_FAVORITES 		: G_Favorites.clear();
						case C_REQUESTTYPE_BUDDIESSERVERS	: G_BuddiesServerInfo.clear();
						case C_REQUESTTYPE_GETROOM : {	G_RoomByLogin.clear();	G_RoomByLoginMaps.clear(); }
					}
					G_Requests[I]["status"] = C_REQUESTSTATUS_FAILED;
				}
			}
			GetDisplayNamesTasks[I] = Null;
		}
	}
}

Void LiveLoop() {
	foreach(LiveEvent in LiveEvent::Manialib_Event_PendingEvents()) {
		declare Text RequestId = LiveEvent[1][0];
		declare Integer RequestType = GetRequestTypeFromRequestId(RequestId);
		if (RequestType == -1 || G_Requests[RequestType]["status"] == C_REQUESTSTATUS_NOREQUEST)
			continue;
	
		switch(LiveEvent[0][0]) {
			case "Manialib.Http.Success": {
				switch(RequestType)
				{
					case C_REQUESTTYPE_MYROOMS :
					{
						if(LiveEvent[1].count < 1)
							continue;
						SetMyRoomsList(LiveEvent[1][1]);
						G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					}
					case C_REQUESTTYPE_ALLSERVERS :
					{
						if(LiveEvent[1].count < 1)
							continue;
						SetAllServersList(LiveEvent[1][1]);
						if(GetDisplayNamesTasks.existskey(RequestType) && GetDisplayNamesTasks[RequestType] != Null)
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_WAITFORDISPLAYNAMES;
						else
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					}
					case C_REQUESTTYPE_FAVORITES : {
						if(LiveEvent[1].count < 1)
							continue;
						SetFavoritesList(LiveEvent[1][1]);
						if(GetDisplayNamesTasks.existskey(RequestType) && GetDisplayNamesTasks[RequestType] != Null)
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_WAITFORDISPLAYNAMES;
						else
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					}
					case C_REQUESTTYPE_BUDDIESSERVERS : {
						SetBuddyServerInfo(LiveEvent[1][1]);
						if(GetDisplayNamesTasks.existskey(RequestType) && GetDisplayNamesTasks[RequestType] != Null)
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_WAITFORDISPLAYNAMES;
						else
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					}
					case C_REQUESTTYPE_GETROOM : {
						SetRoomByLoginData(LiveEvent[1][1]);
						if(GetDisplayNamesTasks.existskey(RequestType) && GetDisplayNamesTasks[RequestType] != Null)
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_WAITFORDISPLAYNAMES;
						else
							G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
					}
					case C_REQUESTTYPE_GETMYROOM : {
						if(LiveEvent[1].count < 1)
							continue;
						SetRoomData(LiveEvent[1][1], G_Requests[C_REQUESTTYPE_GETMYROOM]["roomid"]);
					}
					case C_REQUESTTYPE_CREATEROOM : {
						if(LiveEvent[1].count < 1)
							continue;
						SetRoomData(LiveEvent[1][1], "-1");
					}
					case C_REQUESTTYPE_UPDATEROOM : {
						if(LiveEvent[1].count < 1)
							continue;
						SetRoomData(LiveEvent[1][1], G_Requests[C_REQUESTTYPE_UPDATEROOM]["roomid"]);
					}
					case C_REQUESTTYPE_SERVERSTATUS : {
						if(LiveEvent[1].count < 1)
							continue;
						SetServerStatus(LiveEvent[1][1]);
					}
					case C_REQUESTTYPE_SERVERSTART : {
						if(LiveEvent[1].count < 1)
							continue;
						SetServerStatus(LiveEvent[1][1]);
					}
					case C_REQUESTTYPE_SERVERMAPS : {
						if(LiveEvent[1].count < 1)
							continue;
						SetServerMaps(LiveEvent[1][1]);
					}
					case C_REQUESTTYPE_CANCREATEROOMS : {
						if(LiveEvent[1].count < 1)
							continue;
						SetMyRoomsList(LiveEvent[1][1]);
					}
					case C_REQUESTTYPE_GETMAPSTHUMBNAILS : SetMapsThumbnails(LiveEvent[1][1]);
				}
				if (RequestType > C_REQUESTTYPE_FAVORITES)
					G_Requests[RequestType]["status"] = C_REQUESTSTATUS_SUCCEEDED;
			}
			
			case "Manialib.Http.Error": {	
				G_Requests[RequestType]["status"] = C_REQUESTSTATUS_FAILED;
				switch(RequestType) {
					case C_REQUESTTYPE_ALLSERVERS 		: G_AllServers.clear();
					case C_REQUESTTYPE_FAVORITES 		: G_Favorites.clear();
					case C_REQUESTTYPE_SERVERMAPS		: G_ServerMaps.clear();
					case C_REQUESTTYPE_BUDDIESSERVERS	: G_BuddiesServerInfo.clear();
					case C_REQUESTTYPE_GETMAPSTHUMBNAILS: G_MapsThumbnails.clear();
					case C_REQUESTTYPE_SERVERSTATUS : 
					{
						G_ServerStatus_RequiredState = "";
						G_ServerStatus_Status = "";
						G_ServerStatus_IsOnline = "";
						G_ServerStatus_Starting = "";
						G_ServerStatus_Logs = "";
					}
					case C_REQUESTTYPE_GETROOM : {	G_RoomByLogin.clear();	G_RoomByLoginMaps.clear(); }
				}
				
				declare Integer StatusCode = TextLib::ToInteger(LiveEvent[1][3]);		
				if (RequestType != C_REQUESTTYPE_GETMAPSTHUMBNAILS)
					SetError(RequestType, StatusCode, LiveEvent[1][1]);
				
				G_Room.clear();
				G_RoomMaps.clear();
				G_MyRooms.clear(); 
				G_MyRoomsMaps.clear();
			}
			case "Manialib.Http.Retry": {
				G_Requests[RequestType]["status"] = C_REQUESTSTATUS_TOSEND;
			}
		}
	}
	SendDatasToUILoop();
	GetDisplayNamesLoop();
}