#Include "TextLib"																		as TextLib
#Include "Libs/Nadeo/TMConsole/Logger.Script.txt"										as Logger
#Include "Libs/Nadeo/TMConsole/Menu/IngameAccessController.Script.txt"					as IngameAccessController
#Include "Libs/Nadeo/TMConsole/Menu/ModeName.Script.txt"								as ModeName
#Include "Libs/Nadeo/TMConsole/Menu/LoadingScreen.Script.txt"							as LoadingScreen
#Include "Libs/Nadeo/TMConsole/Menu/Controller/WorkshopController.Script.txt" 			as WorkshopController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/ModeController.Script.txt" 				as ModeController
#Include "Libs/Nadeo/TMConsole/TMTEnvironments.Script.txt"		   						as TMTEnvironments

Void WarnNotEnoughParams(CMlAppEvent _Event) {
	Logger::Warn("[Menucontroller] event "^_Event.CustomEventType^": not enough params ["^_Event.CustomEventData^"]");
}

Void AfterEditor(Text _EditorPluginScript)
{
	declare Text CustomResultType = TitleFlow.CustomResultType;
	while(CustomResultType == "PlayNow") {
		declare MapPath = TitleFlow.CustomResultData[0];
		declare Text ModeSelect     = TitleFlow.CustomResultData[1];
		declare Text ScriptModeName = ModeName::GetModeScript(ModeSelect);
		LoadingScreen::SetLoadingType(0);
		
		//UIManager.HoldLoadingScreen = True;
		wait(TitleFlow.IsReady);
		TitleFlow.PlayMap(MapPath, ScriptModeName, "");

		wait(TitleFlow.IsReady);
		// HACK EG : à remettre
		// TitleFlow.EditMap(MapPath, _EditorPluginScript);
		
		wait(TitleFlow.IsReady);
		CustomResultType = TitleFlow.CustomResultType;
	}
	

	WorkshopController::ReloadLayer();
	/* -- No: Faire un controller spécifique pour cette fonctionnalité -- */
	/* Sert à changer l'environnement de fond en recréant le(s) layer(s) */
	//Pages::ReshowCurrentPage();
	//SceneryManager::ChooseNewScenery();
	//LayersFactory::Rebuild("MainSelector");
}

Void EditNewTrack(Text _Environment, Text _Decoration, Text _ModUrl, Text _PlayerModel, Text _MapType, Text _EditorPluginScript){
	
	declare Integer Enviro = TextLib::ToInteger(_Environment);
	LoadingScreen::SetLoadingType(1, Enviro);
	
	wait(TitleFlow.IsReady);
	// HACK EG : à remettre
	// TitleFlow.EditNewMap(_Environment, _Decoration, _ModUrl, _PlayerModel, _MapType, _EditorPluginScript);
	TitleFlow.EditNewMap(_Environment, _Decoration, _ModUrl, _PlayerModel, _MapType, _EditorPluginScript, "");
	
	wait(TitleFlow.IsReady);
	AfterEditor(_EditorPluginScript);
}


Void EditTrack(Text _MapPath, Text _EditorPluginScript)
{
	// HACK EG : à remettre
	LoadingScreen::SetLoadingType(1);
	TitleFlow.EditMap(_MapPath, _EditorPluginScript,"");
	wait(TitleFlow.IsReady);
	AfterEditor(_EditorPluginScript);
}


Void DeleteTrack(Text _MapPath) {
	DataMgr.DeleteFile(_MapPath);
	//Pages::ReshowCurrentPage();
}

Void RequestTracksList() {
	WorkshopController::SendAllInfos("Workshop");
}

Void Loop() {

	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;

		switch(Event.CustomEventType) {
			case "EditNewTrack" : {
				if(Event.CustomEventData.count < 6) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text Environment        = Event.CustomEventData[0];
				declare Text Decoration         = Event.CustomEventData[1];
				declare Text ModUrl             = Event.CustomEventData[2];
				declare Text PlayerModel        = Event.CustomEventData[3];
				declare Text MapType            = Event.CustomEventData[4];
				declare Text EditorPluginScript = Event.CustomEventData[5];
				EditNewTrack(Environment, Decoration, ModUrl, PlayerModel, MapType, EditorPluginScript);
			}
			case "EditTrack" : {
				if(Event.CustomEventData.count < 2) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text MapPath      = Event.CustomEventData[0];
				declare Text EditorPlugin = Event.CustomEventData[1];
				EditTrack(MapPath, EditorPlugin);
			}
			case "DeleteMap" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text MapPath      = Event.CustomEventData[0];
				DeleteTrack(MapPath);
				WorkshopController::ReloadLayer();
			}
			case "PlayMap" : {
				if(Event.CustomEventData.count < 2) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text MapPath       = Event.CustomEventData[0];
				declare Text MapEnviroText = Event.CustomEventData[1];
				
				declare Integer MapEnviro   = TMTEnvironments::GetEnviroIndex(MapEnviroText);								// TODO EG : donner l'enviro dans l'evenement.
				
				declare Text Mode        = ModeController::GetModeName();
				declare Text SettingsXml = "";
				declare Text MultiMode   = ModeController::GetModeMultiScreen();

				// Uniquement sur des maps customs (d'ou le True à la fin)
				IngameAccessController::PlayTrack(MapPath, Mode, SettingsXml, MultiMode, False, MapEnviro, True); //TODO - Mettre le bon enviro en param
			}
			case "RequestTracksList" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Integer Enviro = TextLib::ToInteger(Event.CustomEventData[0]);

				WorkshopController::SendRequestInfos("Workshop", Enviro);
			}
			case "PushTrack" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Integer IdTrack = TextLib::ToInteger(Event.CustomEventData[0]);
				log("TODO - Push: " ^ IdTrack);
				//WorkshopController::PushTrack(IdTrack);
			}

		}
	}
}
