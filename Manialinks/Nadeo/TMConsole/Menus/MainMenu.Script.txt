#RequireContext CManiaAppTitle

// file://Media/Manialinks/Nadeo/TMConsole/Menus/MainMenu.Script.txt

#Include "Libs/Nadeo/TMConsole/Menu/Pages.Script.txt"											as Pages
#Include "Libs/Nadeo/TMConsole/Menu/MenuLayers.Script.txt"										as Layers
#Include "Libs/Nadeo/TMConsole/Logger.Script.txt"												as Logger
#Include "Libs/Nadeo/TMConsole/Menu/LayersFactory.Script.txt"									as LayersFactory
#Include "Libs/Nadeo/TMConsole/Menu/LoadingScreen.Script.txt"									as LoadingScreen
#Include "Libs/Nadeo/UIPadButtons.Script.txt"													as LibUIButtons
#Include "Libs/Nadeo/TMConsole/Menu/SceneryManager.Script.txt"									as SceneryManager
#Include "Libs/Nadeo/TMConsole/Menu/MenuController.Script.txt" 									as MenuController
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/ConnectionHandler.Script.txt" 					as ConnectionHandler
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/BrowseTracksHandler.Script.txt" 				as BrowseTracksHandler
#Include "Libs/Nadeo/TMConsole/Menu/MenuMusicController.Script.txt" 							as MenuMusicController
#Include "Libs/Nadeo/TMConsole/Menu/PlaylistController.Script.txt" 								as PlaylistController
#Include "Libs/Nadeo/TMConsole/Menu/InstanceController.Script.txt" 								as InstanceController
//#Include "Libs/Nadeo/TMConsole/Menu/Controller/CampaignController.Script.txt" 				as CampaignController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/Solo_CampaignController.Script.txt" 				as Solo_CampaignController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/Duo_CampaignController.Script.txt"				as CampaignDuoController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/SuperSolo_CampaignController.Script.txt" 		as SuperSolo_CampaignController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/ServerController.Script.txt" 					as ServerController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/ChallengeController.Script.txt" 					as ChallengeController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/TrackController.Script.txt"	 					as TracksController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/MusicsController.Script.txt"	 					as MusicsController
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/MusicsHandler.Script.txt"	 					as MusicsHandler
#Include "Libs/Nadeo/TMConsole/Menu/Controller/UserController.Script.txt"						as UserController
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/StartDemoHandler.Script.txt" 					as StartDemoHandler
#Include "Libs/Nadeo/TMConsole/Menu/Controller/OnlineController.Script.txt"	 					as OnlineController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/BadgeController.Script.txt"	 					as BadgeController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/RecordCenterController.Script.txt"				as RecordCenterController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/BuddiesOnlinePresenceController.Script.txt"		as BuddiesOnlinePresenceController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/OnlinePrivilegeController.Script.txt"			as OnlinePrivilegeController
#Include "Libs/Nadeo/TMConsole/Menu/Controller/TaskMessageErrorController.Script.txt"			as TaskMessageErrorController
#Include "Libs/Nadeo/TMConsole/Live/LiveEvent.Script.txt" 										as LiveEvent
#Include "Libs/Nadeo/TMConsole/Live/LiveHttp.Script.txt" 										as LiveHttp
#Include "Libs/Nadeo/TMConsole/Live/LiveHelpers.Script.txt" 									as LiveHelpers
#Include "Libs/Nadeo/TMConsole/Live/LiveAuth.Script.txt" 										as LiveAuth
#Include "Libs/Nadeo/TMConsole/Live/LiveRequestLogger.Script.txt" 								as LiveRequestLogger
#Include "Libs/Nadeo/TMConsole/Menu/MenuVersion.Script.txt"										as MenuVersion
// #Include "Libs/Nadeo/TMConsole/Ingame/UI/UIOnlineGlobalRanking.Script.txt"					as UIOnlineGlobalRanking
#Include "Libs/Nadeo/TMConsole/Menu/Controller/SmartStartController.Script.txt" 				as SmartStart
#Include "Libs/Nadeo/TMConsole/Menu/MenuAchievements.Script.txt" 								as MenuAchievements
#Include "Libs/Nadeo/TMConsole/Menu/MenuContext.Script.txt" 									as MenuContext
#Include "Libs/Nadeo/TMConsole/Menu/Controller/ModeController.Script.txt" 						as ModeController
#Include "Libs/Nadeo/SystemText.Script.txt" 													as SystemText
#Include "Libs/Nadeo/TMConsole/Menu/Controller/DevCustomStartupController.Script.txt" 			as DevCustomStartupController
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/SettingsHandler.Script.txt"					as SettingsHandler
#Include "Libs/Nadeo/TMConsole/Menu/PageHandlers/RankingModuleHandler.Script.txt"				as RankingModuleHandler
#Include "Libs/Nadeo/TMConsole/Menu/LibCheats.Script.txt"										as LibCheats

#Const C_FirstPage			 "Intro"
#Const C_FirstPage_GC_Lounge "Intro"

#Const C_TimeDecalage		4000

// {{{Volumes::GetVolumedB("MenuNext")}}}

Boolean LoadAll() {
	Logger::Log("[Start Main]");
	
	ManiaPlanet.IsLiveStreamingEnabled = True;
	ManiaPlanet.IsRemotePlayEnabled = True;
	
	declare Text PadModelName;
	declare CInputPad::EPadType PadType;
	
	foreach(Pad in Input.Pads)
	{
		if(Pad.Type != CInputPad::EPadType::Keyboard)
		{
			PadType = Pad.Type;
			break;
		}
	}

	declare Integer ActiveButtonPlatform for LocalUser;
	ActiveButtonPlatform = 2;
	LibUIButtons::Load(PadType);
	SystemText::Load();
	StartDemoHandler::PreLoad();
	MenuMusicController::Load();
	//MenuMusicController::Load();
	DevCustomStartupController::Load();

	LayersFactory::Build("SuperPopUp", True);
	LayersFactory::Build("PopUp", True);
	LayersFactory::Build("LoadingPopUp", True);
	LayersFactory::Build("Intro");
	LayersFactory::Build("StartDemo");
	LayersFactory::Build("RankingModule");
	LayersFactory::Build("TransitionPages");
	
	Pages::Compose("Intro",                          ["Intro"]);
	Pages::Compose("StartDemo",                      ["StartDemo", "TransitionPages", "RankingModule"]);
	
	declare Integer ActualVersion = MenuVersion::GetVersion();
	//MenuMusicController::PlayPageAmbiance(C_FirstPage);
	
	declare Boolean IsDevCustomStartupEnabled = DevCustomStartupController::IsDevCustomStartupEnabled();

	// Go to first page
	if(ActualVersion == 1)		Pages::GotoNext(C_FirstPage);
	else if(ActualVersion == 2)	Pages::GotoNext(C_FirstPage);
	else if(ActualVersion == 4)	Pages::GotoNext(C_FirstPage_GC_Lounge);
	else 						Pages::GotoNext(C_FirstPage);
	
	if(ActualVersion == 0)
	{
		while(UserMgr == Null)
		{
			yield;
		}
		if(IsDevCustomStartupEnabled)
			UserMgr.DevSetSkipIntro();

		UserMgr.CanSkipIntro = False;
		declare CUILayer LayerIntro         = Layers::Get("Intro");
		declare Boolean	 Net_SkipIntro		for LayerIntro.LocalPage;
		declare Boolean	 Net_CanSkipIntro	for LayerIntro.LocalPage;
		
		while(UserMgr.Intro)
		{
			if(Net_CanSkipIntro) UserMgr.CanSkipIntro = True;
			if(Net_SkipIntro) UserMgr.SetSkipIntro();
			yield;
		}
		
		LoadingScreen::Load();
		LoadingScreen::SetLoadingType(4); //Set l'écran de chargement
		ManiaPlanet.TmTurbo_LoadingOpportunity();	// après boutton skip video
		
		declare Text PrevPage = "Intro";
		declare Text NextPage = "StartDemo";
		Pages::DetachPage(PrevPage);
		Pages::GotoNext(NextPage);
		//MenuMusicController::PlayPageAmbiance(NextPage);
		
		declare Integer TimeDecalage    = Now + 150;
		declare Integer TimeShowRanking = Now + 100;

		declare Boolean UpdateIsMainNull = True;
		declare Text MainUserName = "";
		while(!UserMgr.MainUserLogged || TimeDecalage > Now)
		{
			if(UserMgr.MainUser == Null && !UpdateIsMainNull)
			{
				declare CUILayer NextLayer <=> Layers::Get("RankingModule");
				LayerCustomEvent(NextLayer, "HideRanking", [""]);
				UpdateIsMainNull = True;
			}

			if (UserMgr.MainUser != Null && MainUserName != UserMgr.MainUser.DisplayName && Now > TimeShowRanking)
			{
				//log("here");
				UpdateIsMainNull = False;
				MainUserName = UserMgr.MainUser.DisplayName;
				declare CUILayer NextLayer <=> Layers::Get("RankingModule");
				LayerCustomEvent(NextLayer, "ShowRanking", [MainUserName]);
			}
			yield;
		}
	}
	declare CUILayer NextLayer2 <=> Layers::Get("StartDemo");
	LayerCustomEvent(NextLayer2, "CheckEtatConnection", ["aa::bb::Connecting"]);
	declare Integer HackWaitTime = Now + 50;
	wait(HackWaitTime < Now);

	PresenceMgr.SetPresence(DataMgr.MenuUserId, CPresenceMgr::ERichPresence::MainMenu);

	StartDemoHandler::Load();
	ConnectionHandler::Load();
	ConnectionHandler::ConnectionToMasterServer();
	StartDemoHandler::TryToConnect(True);
	
	ManiaPlanet.TmTurbo_LoadingOpportunity();		// après boutton pour login
	// LoadingScreen::SetLoadingType(0);  -> Non! il ne faut pas le faire ici. (il y a un cas ou l'ecran de loading est affiché et le changer à chaud fait crasher.)
	//										si besoin: à faire au plus tôt dans le menu principal.
	
	//declare persistent Integer	Pers_CountFirstLoading for UserMgr.MainUser;
	//Pers_CountFirstLoading = 0;
	
	MusicsHandler::Load();
	SmartStart::Load();
	
	MenuVersion::Load();
	ServerController::Load();
	ChallengeController::Load();
	TracksController::Load();
	MusicsController::Load();
	UserController::Load();
	BrowseTracksHandler::Load();
	BuddiesOnlinePresenceController::Load();
	OnlinePrivilegeController::Load();
	ModeController::Load();
	LibCheats::Load();
	
	MenuAchievements::Load();
	MenuContext::Load();
	
	//UIOnlineGlobalRanking::Load();
	//UIOnlineGlobalRanking::ShowGlobalRanking(True);

	SceneryManager::Load();
	SceneryManager::ChooseNewScenery();
	
	MenuController::LoadNews();
	
	LayersFactory::Build("StartMain");
	LayersFactory::Build("IntroAdvise");
	LayersFactory::Build("MainSelector");
	LayersFactory::Build("BrowseTracks");
	LayersFactory::Build("MapsOverview");
	LayersFactory::Build("WorkInProgress");

	LayersFactory::Build("BackgroundMenu");
	//LayersFactory::Build("HeaderInfo");
	LayersFactory::Build("Location");
	LayersFactory::Build("Settings");
	LayersFactory::Build("Board");

	LayersFactory::Build("Musics");
	LayersFactory::Build("MyRooms");
	LayersFactory::Build("Workshop");
	LayersFactory::Build("MapFamily");
	LayersFactory::Build("RoomManager");
	LayersFactory::Build("KindOfTracks");
	LayersFactory::Build("MyPrivateRoom");
	LayersFactory::Build("CommunityTracks");
	LayersFactory::Build("GlobalLeaderBoard");
	LayersFactory::Build("BrowseOnlineRooms");

	//Online Falg
	//LayersFactory::Build("ServerBrowserFilters");
	LayersFactory::Build("ServerBrowser");
	LayersFactory::Build("RoomPlaylist");
	LayersFactory::Build("RoomManager");
	LayersFactory::Build("MyTracks");
	LayersFactory::Build("Dbg_RequestLogger");
	LayersFactory::Build("ChallengeManager");
	LayersFactory::Build("ChallengeBrowser");
	LayersFactory::Build("ChallengeTracks");
	LayersFactory::Build("ChallengeBuddies");
	LayersFactory::Build("TrackbuilderWorkshop");
	LayersFactory::Build("BuddiesChallengeBrowser");
	LayersFactory::Build("JoinAFriend");
	LayersFactory::Build("PopUp_JoinAFriend");
	
	//Settings
	LayersFactory::Build("Credits");
	
		
	if(ActualVersion == 0)
	{
		Pages::Compose("Main",                           ["MainSelector", "TransitionPages", "StartMain", "BackgroundMenu", "RankingModule"]);
		Pages::Compose("MapsOverview",                   ["MapsOverview", "BackgroundMenu", "Board", "TransitionPages", "RankingModule"]);
		Pages::Compose("BrowseTracks",                   ["BrowseTracks", "BackgroundMenu", "Board", "TransitionPages", "RankingModule"]);
	}
	else
	{
		Pages::Compose("Main",                           ["MainSelector", "TransitionPages", "StartMain", "BackgroundMenu"]);
		Pages::Compose("MapsOverview",                   ["MapsOverview", "BackgroundMenu", "Board", "TransitionPages"]);
		Pages::Compose("BrowseTracks",                   ["BrowseTracks", "BackgroundMenu", "Board", "TransitionPages"]);
	}
	Pages::Compose("Settings",                       ["Settings", "TransitionPages"]);
	Pages::Compose("Musics",                    	 ["Musics", "BackgroundMenu", "TransitionPages"]);
	Pages::Compose("KindOfTracks",                   ["KindOfTracks", "BackgroundMenu", "Board"]);
	Pages::Compose("MyRooms",                     	 ["ServerBrowser", "RankingModule"]);
	Pages::Compose("BrowseOnlineRooms",              ["BrowseOnlineRooms"]);
	Pages::Compose("CommunityTracks",                ["CommunityTracks"]);
	Pages::Compose("MyPrivateRoom",                  ["MyPrivateRoom"]);
	Pages::Compose("IntroAdvise",                    ["IntroAdvise"]);
	
	Pages::Compose("Credits",                        ["Credits", "BackgroundMenu", "TransitionPages"]);
	Pages::Compose("Location",                       ["Location", "TransitionPages"]);
	
	//Online
	Pages::Compose("ServerBrowser",                	["ServerBrowser", "BackgroundMenu", "TransitionPages", "RankingModule"]);
	Pages::Compose("MyTracks",                     	["MyTracks", "BackgroundMenu", "TransitionPages", "RankingModule"]);
	Pages::Compose("TrackbuilderWorkshop",			["TrackbuilderWorkshop", "BackgroundMenu"]);
	//Pages::Compose("ServerBrowserFilters",       	["ServerBrowserFilters", "BackgroundMenu", "RankingModule"]);
	Pages::Compose("RoomManager",                  	["RoomManager", "BackgroundMenu", "RankingModule"]);
	Pages::Compose("RoomPlaylist",                 	["RoomPlaylist", "BackgroundMenu", "RankingModule"]);
	Pages::Compose("ChallengeManager", 				["ChallengeManager", "BackgroundMenu"]);
	Pages::Compose("ChallengeBuddies",				["ChallengeBuddies", "BackgroundMenu"]);
	Pages::Compose("ChallengeBrowser", 				["ChallengeBrowser", "BackgroundMenu"]);
	Pages::Compose("ChallengeTracks", 				["ChallengeTracks", "Board", "BackgroundMenu"]);
	Pages::Compose("Dbg_RequestLogger",				["Dbg_RequestLogger", "BackgroundMenu"]);
	Pages::Compose("BuddiesChallengeBrowser",		["BuddiesChallengeBrowser", "BackgroundMenu"]);
	Pages::Compose("JoinAFriend",					["JoinAFriend", "BackgroundMenu"]);
	Pages::Compose("PopUp_JoinAFriend",				["PopUp_JoinAFriend", "BackgroundMenu"]);

	//declare Timer = Now + 10000;
	//wait(Now > Timer);
	PlaylistController::Load();
	InstanceController::Load();
	
	OnlineController::Load();
	LiveAuth::Auth_Load();
	RecordCenterController::Load();
	
	// SendCustomEvent("GetRecordsResume", ["1", "True"]);
	MenuMusicController::PlayPageAmbiance("Main");
	MenuMusicController::SetupNoFilters();
	
	//MenuMusicController::SetupMainMenuFilter(-1);

	yield;
	dump(Null); // HACK flush mem pool

	if(IsDevCustomStartupEnabled)
		DevCustomStartupController::DoDevCustomStartup();
	

	while(True) {
		MenuController::Loop();
		
		yield;
		ConnectionHandler::ConnectionLoop();
		
		//if(Solo_CampaignController::IsCampaignLoad()) log("IsCampaignLoad : True");
		//if(Solo_CampaignController::IsLoaded())       log("IsLoaded       : True");
		//if(Solo_CampaignController::SynchFinished())  log("SynchFinished  : True");

		if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady && !Solo_CampaignController::IsCampaignLoad() && Solo_CampaignController::SynchFinished())
		{
			Solo_CampaignController::Load();
			CampaignDuoController::Load();
			declare NumberOfSoloTM = Solo_CampaignController::GetMedalByType(0);
			if(NumberOfSoloTM >= 200) SuperSolo_CampaignController::Load();
			SettingsHandler::Load();
			RankingModuleHandler::SendInfoMedals();
		}
		
		BadgeController::Loop();
		PlaylistController::LiveLoop();
		InstanceController::LiveLoop();
		LiveAuth::Auth_Loop();
		LiveHelpers::LiveLoop();
		LiveHttp::Manialib_Http_Loop();
		LiveEvent::Manialib_Event_Yield();
		LiveRequestLogger::LiveLoop();
		UserController::Loop();
		BuddiesOnlinePresenceController::Loop();
		OnlinePrivilegeController::Loop();
		ServerController::LiveLoop();
		ChallengeController::LiveLoop();
		TracksController::LiveLoop();
		TaskMessageErrorController::Loop();
		LibCheats::Loop();
	}
	
	return False;
}

main() {
	declare Load = LoadAll();
	/*
	while(!Load) {
		Logger::Log("Reboot");
		Load = LoadAll();
	}
	*/
}