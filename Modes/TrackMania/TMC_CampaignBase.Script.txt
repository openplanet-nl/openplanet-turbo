/**
 *	Time Attack mode
 */

#Extends "Modes/TrackMania/TMC_ModeBase.Script.txt"

#Const	CompatibleMapTypes	["RaceCE", "Race"]
#Const	Version				"2015-03-02"
#Const	ScriptName			"TMC_CampaignSolo.Script.txt"

#Include "Libs/Nadeo/TMConsole/Ingame/Game.Script.txt" 					as Game
#Include "Libs/Nadeo/TMConsole/Ingame/Ghosts.Script.txt" 				as Ghosts
#Include "Libs/Nadeo/TMConsole/Ingame/Medals.Script.txt" 				as Medals
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UISequences.Script.txt" 		as UISequence
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UICampaign.Script.txt" 		as UICampaign
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 						as Colors
#Include "Libs/Nadeo/TMConsole/Ingame/IngameGlobalRanking.Script.txt" 	as IngameGlobalRanking
#Include "Libs/Nadeo/TMConsole/Ingame/FlavourText.Script.txt" 			as FlavourText
#Include "Libs/Nadeo/TMConsole/Ingame/RewardScreens.Script.txt" 		as RewardScreens
#Include "Libs/Nadeo/TMConsole/Ingame/IngameAchievements.Script.txt" 	as IngameAchievements
#Include "Libs/Nadeo/TMConsole/Ingame/IngameTracking.Script.txt" 		as InGameTracking

#Include "TextLib" as TL

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit 	10800	as _("Time limit :")
#Setting S_Enviro				        ""
#Setting S_Difficulty			        ""
#Setting S_SameEnv				        ""
#Setting S_SameDif				        ""
#Setting S_LastMedalWin			        ""
#Setting S_MedalsNumber			        ""
#Setting S_NextUnlock			        ""
#Setting S_Opponent				        ""
#Setting S_NumberOfBronze		        ""
#Setting S_NumberOfSilver		        ""
#Setting S_NumberOfGold			        ""
#Setting S_NumberOfAuthor		        ""
#Setting S_NbMedalsToUnlockPimp	        ""
#Setting S_MedalTypeNeededForNextUnlock	""
#Setting S_Musics	                    ""
#Setting S_MedalsByTypeByEnviroDiff	    "[0,0,0,0]"
#Setting S_MedalsByTypeByDiff	        "[0,0,0,0]"

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_BotsNb 					0
#Const C_GAMEPHASE_CHALLENGE		3
#Const C_GAMEPHASE_PREPARATION		0
#Const C_GAMEPHASE_GAME				1
#Const C_GAMEPHASE_POSTGAME			2

#Const TMC_MEDAL_SUPERMEDALI		-5
#Const TMC_MEDAL_SUPERMEDALII		-4
#Const TMC_MEDAL_SUPERMEDALIII		-3
#Const TMC_MEDAL_SUPERMEDALIV		-2
#Const TMC_MEDAL_SUPERMEDALV		-1 

#Const TMC_MEDAL_AUTHOR				0
#Const TMC_MEDAL_GOLD				1
#Const TMC_MEDAL_SILVER				2
#Const TMC_MEDAL_BRONZE				3
#Const TMC_MEDAL_PLAYER				4
#Const TMC_MEDAL_NONE				5
#Const TMC_MEDAL_ANOTHERPLAYER		6

#Const TMC_INGAME_RECORDCENTER		11
#Const TMC_MEDAL_RECORDCENTER		12

#Const TMC_FRIENDSRECORDCHOICE_DEFY		0
#Const TMC_FRIENDSRECORDCHOICE_RETURN	1

#Const TMC_PLAYERCHOICE_CHOOSEGHOST 	1
#Const TMC_PLAYERCHOICE_QUIT	 		2
#Const TMC_PLAYERCHOICE_NEXTTRACK 		3
#Const TMC_PLAYERCHOICE_IMPROVE			4
#Const TMC_PLAYERCHOICE_JOKER	 		5

#Const TMC_RACEMODE_MEDAL			0
#Const TMC_RACEMODE_ONLINE			1

#Const C_GAMECONTEXT_LOCAL			1				
#Const C_GAMECONTEXT_ONLINE			0

#Const C_STORERESULT_PROCESSING		0
#Const C_STORERESULT_SUCCEEDED		1
#Const C_STORERESULT_FAILED			2

#Const TMC_RACEMODE_SOLO				1
#Const TMC_RACEMODE_DOUBLEDRIVER		2
#Const TMC_RACEMODE_SUPERSOLO			3

#Const C_JOKER_TRIESNEEDED			3

#Const C_RECORDCENTER_CAR			3

#Const TMC_IDLESTEP_REPLAY			0
#Const TMC_IDLESTEP_STANDBY			1
#Const TMC_IDLESTEP_NONE			-1

#Const C_IdleTimeMax 				10		

#Const TMC_WINDOWFRAMESTEP_OPPONENT	0
#Const TMC_WINDOWFRAMESTEP_FRIENDS	1
#Const TMC_WINDOWFRAMESTEP_RESTARTRECORD	2
#Const TMC_WINDOWFRAMESTEP_FINAL	3

// ---------------------------------- //
// Global Variables
// ---------------------------------- //
declare Integer				G_GamePhase;
declare Integer[Integer]	G_TimesOnMap;
declare Integer				G_BestTimePlayer;
declare Integer				G_BestMedal;
declare Integer				G_OldMedal;
declare Integer				G_NbMedalWon;
declare CGhost				G_PlayerGhost;
declare CGhost				G_OpponentPlayerGhost;
declare Ident				G_ThePlayerId;
declare Boolean				G_IsSaveGhost;
declare Boolean				G_HasFinishRace;
declare Boolean				G_HasNewScore;
declare Boolean				G_HasNewMedal;
declare Boolean				G_HasBeatenPlayerOpponent;
declare Text				G_EnviroName;
declare Integer				G_RaceMode;
declare Integer				G_OpponentChosen;
declare Ident[] 			G_CarModels;
declare Text[Integer]		G_OpponentsNames;
declare Integer				G_StartTimerGhostReplay;
declare CGhost[Ident]		G_ReplayGhosts;
declare Boolean				G_HasEndSequencePlayed;
declare Boolean				G_PlayerWantsToQuit;
declare Boolean				G_RecordCenterMode;
declare Integer[]			G_MedalsByTypeByEnviroDiff;
declare Integer[]			G_MedalsByTypeByDiff;
declare Boolean 			G_HasNewScoreAtLeastOnce;
declare Boolean				G_HasPreviousScoreOnTrack;
declare Boolean				G_IsSuperSolo;
declare Integer				G_NbHighestMedalHad;
declare Integer				G_LastMedalPlayer;
declare Integer				G_LastTimePlayer;
declare Integer				G_CurrentJoker;
declare Integer[Integer]	G_MedalTypeToMedalChoice;
declare Integer				G_Enviro;
declare Integer				G_Difficulty;
declare Text				G_FriendsOpponentUrl;
declare Boolean				G_AskRecordCenterRestart;
declare Boolean 			G_DidUseJoker;
declare Integer				G_IdleStep;
declare Integer				G_TimerStandBy;
declare Integer				G_CurrentFrameDisplay;
declare Boolean				G_FrameHasBeenRedisplayed;
declare Integer				G_TimerBeforePadIdle;
declare Boolean				G_FirstTime;
declare CGhost				G_LastGhost;
declare Integer				G_OpponentFinalTime;
declare Integer				G_PlayerReplayGhostTime; 
declare Ident				G_ReplayGhostId;


// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
declare Integer PrevTimeLimit = S_TimeLimit;
declare Integer StartTime;
***

***StartServer***
***
//Init Global Variables
G_GamePhase					= C_GAMEPHASE_PREPARATION;
G_PlayerGhost				= Null;
G_LastGhost					= Null;
G_OpponentChosen			= -1;
G_HasNewScoreAtLeastOnce	= False;
G_OpponentFinalTime 		= -1;

G_MedalTypeToMedalChoice[TMC_MEDAL_GOLD]	= 0;
G_MedalTypeToMedalChoice[TMC_MEDAL_SILVER]	= 1;
G_MedalTypeToMedalChoice[TMC_MEDAL_BRONZE]	= 2;
G_MedalTypeToMedalChoice[TMC_MEDAL_PLAYER]	= 3;
G_MedalTypeToMedalChoice[TMC_MEDAL_NONE]	= 3;

G_OpponentsNames[TMC_MEDAL_AUTHOR] 		= Medals::GetMedalName(TMC_MEDAL_AUTHOR);
G_OpponentsNames[TMC_MEDAL_GOLD] 		= Medals::GetMedalName(TMC_MEDAL_GOLD);
G_OpponentsNames[TMC_MEDAL_SILVER] 		= Medals::GetMedalName(TMC_MEDAL_SILVER);
G_OpponentsNames[TMC_MEDAL_BRONZE] 		= Medals::GetMedalName(TMC_MEDAL_BRONZE);
G_OpponentsNames[TMC_MEDAL_PLAYER] 		= Medals::GetMedalName(TMC_MEDAL_PLAYER);

// ---------------------------------- //
// Initialize mode
PrevTimeLimit = S_TimeLimit;
StartTime = -1;
IndependantLaps = False;
MB_SetDefaultRespawnMode(CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint);
***

***BeforeLoadMap***
***
G_EnviroName 	= MapList[NextMapIndex].CollectionName;
G_Enviro		= TL::ToInteger(S_Enviro);
G_Difficulty	= TL::ToInteger(S_Difficulty);
+++LoadCarModel+++
***

***InitMap***
***
declare FakeVariable = 3;
G_DidUseJoker = False;
***

***MapIntro***
***

declare FakeVariable = 3;
***

***StartMap***
***
G_RaceMode = TMC_RACEMODE_MEDAL;

while(Players.count == 0) yield;
G_IsSaveGhost 			= False;
G_HasFinishRace 		= False;
G_HasNewScore 			= False;
G_HasNewMedal 			= False;
G_BestTimePlayer 		= -1;
G_BestMedal 			= TMC_MEDAL_PLAYER;
G_ThePlayerId 			= Players[0].Id;
G_NbHighestMedalHad		= 0;

// CampaignSpawnPlayer();
Game::SetPlayerId(G_ThePlayerId);

foreach(Player in Players) {
	declare UI <=> UIManager.GetUI(Player);
	IngameGlobalRanking::LoadGlobalRanking(Player, C_GAMECONTEXT_LOCAL);
	declare netwrite Text Net_ZonePath for UI;
	Net_ZonePath = Player.User.ZonePath;
}

// ---------------------------------- //
// Initialize race
StartTime = Now + 3000;
CutOffTimeLimit = -1;
Ghosts::Load();

// log(S_Musics);
// log("Setting: "^S_SettingsXml);
// log("S_Enviro: "^S_Enviro);
// log("S_Difficulty: "^S_Difficulty);
// log("S_SameEnv: "^S_SameEnv);
// log("S_SameDif: "^S_SameDif);
// log("S_LastMedalWin: "^S_LastMedalWin);
// log("S_MedalsNumber: "^S_MedalsNumber);
// log("S_NextUnlock: "^S_NextUnlock);
// log("S_Opponent: "^S_Opponent);
// log("S_NumberOfBronze: "^S_NumberOfBronze);
// log("S_NumberOfSilver: "^S_NumberOfSilver);
// log("S_NumberOfGold: "^S_NumberOfGold);
// log("S_NumberOfAuthor: "^S_NumberOfAuthor);
// log("S_NbMedalsToUnlockPimp: "^S_NbMedalsToUnlockPimp);
// log("S_NextUnlock: "^S_NextUnlock);
// log("S_MedalTypeNeededForNextUnlock: "^S_MedalTypeNeededForNextUnlock);
// log("S_Musics: " ^S_Musics);
// log("S_MedalsByTypeByEnviroDiff: " ^S_MedalsByTypeByEnviroDiff);
// log("S_MedalsByTypeByDiff: " ^S_MedalsByTypeByDiff);

sleep(500);
declare Boolean NoGhostOnMap = False;
if(IsSuperSolo()) {
	G_IsSuperSolo 	= True;
	G_TimesOnMap 	= GetSuperSoloTime();
	if(G_TimesOnMap.count == 0) {
		G_TimesOnMap 					= Medals::GetTimesOnMap();
	}
} else {
	for(Medal, TMC_MEDAL_GOLD, TMC_MEDAL_BRONZE) {
		declare Integer GhostRaceTime = Ghosts::GetMedalGhostTime(Medal);
		if(GhostRaceTime == -1) {
			NoGhostOnMap = True;
			break;	
		}
		G_TimesOnMap[Medal] = GhostRaceTime;
	}
}

+++SetRaceMode+++

G_MedalsByTypeByEnviroDiff 	= ParseIntArray(S_MedalsByTypeByEnviroDiff);
G_MedalsByTypeByDiff 		= ParseIntArray(S_MedalsByTypeByDiff);

// ---------------------------------- //
// We check if we have a ghost from the record center
if(S_Opponent != "") {
	// log("S OPPONENT: "^S_Opponent);
	G_RecordCenterMode 		= True;
	G_FriendsOpponentUrl 	= S_Opponent;
}

InitMedalsNb();

if(!G_IsSuperSolo) {
	if(NoGhostOnMap) {
		G_TimesOnMap 					= Medals::GetTimesOnMap();
	} else {
		G_TimesOnMap[TMC_MEDAL_AUTHOR]	= Medals::GetMedalTime(TMC_MEDAL_AUTHOR);
	}
}

if(Map.TMObjective_IsLapRace) {
	NbLaps = Map.TMObjective_NbLaps;
	Game::SetNbLaps(NbLaps);
}

// ---------------------------------- //
// Layers
+++LoadGameLib+++
Game::WaitTime(100);
// Game::SetNbPadsNeeded(1);
Game::SetDespawnTimeOut(False);

+++GetPlayerBestGhost+++
// G_TimesOnMap[TMC_MEDAL_PLAYER] 	= -1;
// UISequence::ComposeVideoTransitionLayer();
Medals::SetTimesOnMap(G_TimesOnMap);

G_BestTimePlayer 			= G_TimesOnMap[TMC_MEDAL_PLAYER];
G_BestMedal 				= GetMedalPlayer();
G_OldMedal					= G_BestMedal;
// log(G_BestMedal);
+++InitCampaign+++
G_CurrentJoker	= GetCurrentJoker();

UICampaign::InitPlayer(G_BestMedal, G_BestTimePlayer);
Game::WaitTime(250);

if(G_TimesOnMap[TMC_MEDAL_PLAYER] == -1) {
	declare Text AloneMedal = Medals::GetMedalName(TMC_MEDAL_NONE);
	UICampaign::SetPersonalButtonContent(AloneMedal);
} else {
	declare Text AgainstHimself = Medals::GetMedalName(TMC_MEDAL_PLAYER);
	UICampaign::SetPersonalButtonContent(AgainstHimself);
	UICampaign::SetBestTime(G_BestTimePlayer);
}

UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
Ghosts::RemoveAllGhosts();
Game::WaitTime(250);
UISequence::InputIdleManialink();
+++BeforeStart+++
UIManager.HoldLoadingScreen = False;
// IngameGlobalRanking::ShowGlobalRanking(Players[G_ThePlayerId]);

// UICampaign::SetMedalFocusButton(2);
GetDefaultMedalChoice();
G_NbMedalWon = 0;
IngameAchievements::Load();



G_IdleStep = TMC_IDLESTEP_STANDBY;
G_TimerStandBy = Now + 10000;
Ghosts::RemoveAllGhosts();
CampaignSpawnPlayer();
UISequence::SetStandByView();
Game::SetStandbyMusic();

G_FrameHasBeenRedisplayed 	= True;
G_FirstTime 				= True;
G_TimerBeforePadIdle 		= Now + 10000;

if(!G_RecordCenterMode) {
	SetGamePhase(C_GAMEPHASE_CHALLENGE);
} else {
	G_OpponentChosen = TMC_MEDAL_RECORDCENTER;
	LoadOpponentPlayerGhost();
	SetGamePhase(C_GAMEPHASE_CHALLENGE);
	G_AskRecordCenterRestart 	= True;
	RecordCenterSequence();
}
***
  
***PlayLoop***
***
// Game::Loop();

if(G_GamePhase != C_GAMEPHASE_PREPARATION && G_GamePhase != C_GAMEPHASE_GAME) {
	SoloYield();
} else {
	Game::Loop();
}

if(G_GamePhase == C_GAMEPHASE_CHALLENGE)
{
	// CampaignSpawnPlayer();
	// UISequence::SetStandByView();
	// Game::WaitTime(500);
	// Game::SetStandbyMusic();

	declare Integer RecordCenterChoice = 0;
	
	if(!G_RecordCenterMode) {
		UICampaign::SetStartMenuVisibility(True);

		G_CurrentFrameDisplay = TMC_WINDOWFRAMESTEP_OPPONENT;
		// UICampaign::SetFriendsRecordsVisibility(True);
		Game::WaitTime(1000);
		WaitForChallengeChoice();
		
		if(G_OpponentChosen == TMC_MEDAL_RECORDCENTER) {
			G_RecordCenterMode 			= True;
			G_AskRecordCenterRestart 	= False;
			UICampaign::SetStartMenuVisibility(False);
			Game::WaitTime(500);
			UICampaign::SetFriendsRecordsVisibility(True);
			G_CurrentFrameDisplay = TMC_WINDOWFRAMESTEP_FRIENDS;
			Game::WaitTime(500);
			G_FriendsOpponentUrl = "";
		}
	}
	
	if(G_RecordCenterMode) {
		if(!G_AskRecordCenterRestart) {
			declare Integer Choice = WaitForFriendsOpponentChoice();
			if(Choice == TMC_FRIENDSRECORDCHOICE_DEFY) {
				WaitForFriendsOpponentUrl();
				UICampaign::SetFriendsRecordsVisibility(False);
				Game::WaitTime(1000);
				G_AskRecordCenterRestart 	= False;
			} else if(Choice == TMC_FRIENDSRECORDCHOICE_RETURN) {
				UICampaign::SetFriendsRecordsVisibility(False);
				G_RecordCenterMode 			= False;
			}
		}
	}

	//Si on a un adversaire ou si c'est une médaille
	if((G_OpponentChosen == TMC_MEDAL_RECORDCENTER && G_FriendsOpponentUrl != "") || G_OpponentChosen <= TMC_MEDAL_PLAYER) {
		SetGamePhase(C_GAMEPHASE_PREPARATION);
	}
} else if(G_GamePhase == C_GAMEPHASE_PREPARATION)
{
	G_IdleStep = TMC_IDLESTEP_NONE;
	UISequence::LaunchPlayingSequence();
	Game::SetStopMusic();
	// UISequence::StopTransitionVideo();
	UICampaign::SetStartMenuVisibility(False);
	+++StartSymbiose+++
	// +++SetCarsModels+++
	
	Ghosts::RemoveAllGhosts();
	ShowOpponents(False);
	CampaignSpawnPlayer();
	SetDefaultMedalChoice();
	
	G_HasEndSequencePlayed 	= False;
	G_HasNewMedal 			= False;
	G_HasNewScore 			= False;
	G_HasFinishRace 		= False;
	Game::SetMultiPairing(True);
	
	SetGamePhase(C_GAMEPHASE_GAME);
} 
else 
if(G_GamePhase == C_GAMEPHASE_GAME) 
{
	// ---------------------------------- //
	// Start Race
	if (Game::IsWaiting(Players[G_ThePlayerId])) 
	{
		IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
		Game::StartRace(Players[G_ThePlayerId]);
	}
	
	if(UICampaign::PlayerHasGiveUp()) 
	{
		Game::HideUI();
		if(G_RecordCenterMode) {
			G_RecordCenterMode = False;
		}
		Game::SetVisiblityCampaignHelper(True);
		Game::WaitTime(500);

		SetGamePhase(C_GAMEPHASE_CHALLENGE);
		Game::WaitTime(250);
		RaceTransition();
		// Ghosts::RemoveAllGhosts();
		+++StopSymbiose+++
		Ghosts::RemoveAllGhosts();
		CampaignSpawnPlayer();
		Game::SetVisiblityCampaignHelper(False);
		UISequence::SetStandByView();
		Game::SetStandbyMusic();
		G_TimerStandBy = Now + 10000;
		G_IdleStep = TMC_IDLESTEP_STANDBY;
		
		
	}
	
	// log(Now^">CHECKING EVENT");
	// ---------------------------------- //
	// Manage events
	foreach (Event in PendingEvents) 
	{
		
		// ---------------------------------- //
		// Waypoint
		if (Event.Type == CTmModeEvent::EType::WayPoint) 
		{
			PassOn(Event);
			+++EventWayPoint+++
			if (Event.IsEndRace) 
			{
				Event.Player.Score.PrevRace = Event.Player.CurRace;
				G_HasFinishRace 			= True;
				G_LastTimePlayer			= Event.Player.CurRace.Time;
				G_LastMedalPlayer 			= Medals::GetMedalFromTime(Event.Player.CurRace.Time);
				
				if(G_LastGhost != Null) {
					DataMgr.GhostDestroy(G_LastGhost);
					G_LastGhost = Null;
				}
				
				//NEW RECORD
				if(Event.Player.CurRace.Time < G_BestTimePlayer || G_BestTimePlayer == -1) 
				{
					G_HasNewScoreAtLeastOnce = True;
					SetNewRecord();
					
					UICampaign::UpdateEndRaceTime();
					UICampaign::UpdateRace(Event.Player);
					G_IsSaveGhost = True;
					G_HasNewScore = True;
				} else {
					G_LastGhost = Ghosts::GetGhostFromPlayer(Players[G_ThePlayerId]);
				}
				
				// RemoveJoker();
				SetMedalPlayer(Event.Player);
				UpdateJoker();
				
				Game::EndRace(Event.Player);
				+++EventWayPointEndRace+++
				Game::SetMultiPairing(False);
				SetGamePhase(C_GAMEPHASE_POSTGAME);
			}
			
			// HACK EG : décommenter pour tester les Uplay Actions
			// IngameAchievements::HackTestUplayAction();
		}
		// ---------------------------------- //
		// GiveUp
		else if (Event.Type == CTmModeEvent::EType::GiveUp) 
		{	
			if(Game::IsRacing(Event.Player)) {
				+++EventGiveUp+++
				Game::WaitRace(Event.Player);
				SetGamePhase(C_GAMEPHASE_PREPARATION);
				PassOn(Event);
			} else {
				Discard(Event);
			}
		}
		
		else if (Event.Type == CTmModeEvent::EType::StartLine) 
		{
			+++EventStartLine+++
			PassOn(Event);
		}
		else if(Event.Type == CTmModeEvent::EType::Respawn) {
			// log(Now^">EVENT RESPAWN");
		}
		else if(Event.Type == CTmModeEvent::EType::Unknown) {
			// log(Now^"EVENT UNKNOWN");
		}
		else {
			
			PassOn(Event);
		}
		
	}
} 
else 
if(G_GamePhase == C_GAMEPHASE_POSTGAME) 
{
	if(!G_HasEndSequencePlayed) {
		+++StopSymbiose+++
		SetOpponentForUI(Null);
		+++SavePlayerBestGhost+++
		
		MedalAndUnlockSequence();
		
		// if(G_HasNewScore) {
			// +++RankingSequence+++
		// }
		
		G_HasEndSequencePlayed = True;
		Game::HideUI();
		G_IdleStep = TMC_IDLESTEP_REPLAY;
		StartReplay(True);
		
		
		if(!G_RecordCenterMode) {
			if(!UICampaign::GetFinalMenuVisibility()) {
				Game::WaitTime(1000);
				UICampaign::SetFinalMenuVisibility(True);
				G_CurrentFrameDisplay = TMC_WINDOWFRAMESTEP_FINAL;
				Game::WaitTime(1000);
				IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
			}
		} else {
			RecordCenterSequence();
		}
	}
	
	Game::ShowPressRestart(False);
	if(UICampaign::GetFinalMenuVisibility()) {
		if(G_RaceMode == TMC_RACEMODE_MEDAL) {
			declare Integer PlayerChoiceEndRace = UICampaign::GetPlayerEndRaceChoice();
			
			if(PlayerChoiceEndRace == TMC_PLAYERCHOICE_CHOOSEGHOST) {
				SetGamePhase(C_GAMEPHASE_CHALLENGE);
				RaceTransition();
			}
			else if(PlayerChoiceEndRace == TMC_PLAYERCHOICE_QUIT) {
				G_PlayerWantsToQuit = True;
			} else if(PlayerChoiceEndRace == TMC_PLAYERCHOICE_IMPROVE) {
				if(G_HasNewMedal) {
					if(G_BestMedal > TMC_MEDAL_GOLD && G_BestMedal <= TMC_MEDAL_BRONZE) {
						G_OpponentChosen = G_BestMedal-1;
					} else if(G_BestMedal == TMC_MEDAL_GOLD) {
						G_OpponentChosen = TMC_MEDAL_PLAYER;
					}
				}
				UICampaign::SetFinalMenuVisibility(False);
				SetGamePhase(C_GAMEPHASE_PREPARATION);
				RaceTransition();
			} else if(PlayerChoiceEndRace == TMC_PLAYERCHOICE_JOKER) {
				UseJoker(G_BestMedal-1);
				
				UICampaign::SetFinalMenuVisibility(False);
				Game::WaitTime(1000);
				G_PlayerWantsToQuit = True;
			} else if(PlayerChoiceEndRace == TMC_PLAYERCHOICE_NEXTTRACK) {
				DoNextTrack(True);
				Game::WaitTime(200);
				G_PlayerWantsToQuit = True;
			}
		}
	}
}

if(UICampaign::PlayerWantsToQuit()) G_PlayerWantsToQuit = True;
// if(UICampaign::PlayerWantsToNextTrack()) {
	// DoNextTrack(True);
	// Game::WaitTime(1000);
	// G_PlayerWantsToQuit = True;
// }


if(G_PlayerWantsToQuit) {
	UICampaign::SetStartMenuVisibility(False);
	// Game::ShowTransition(Players[G_ThePlayerId]);
	// Game::WaitTime(1000);
	MB_StopServer = True;
}

***

***EndMap***
***
Game::WaitRaceAll();
if(!G_HasNewScoreAtLeastOnce && G_HasPreviousScoreOnTrack) {
	ReleasePlayerGhost();
}
***

***EndServer***
***
declare FakeVariable = 3;
***

Void DoNextTrack(Boolean _Do) {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Boolean Net_DoNextTrack for UI;
	Net_DoNextTrack = _Do;
}

Integer[Integer] GetSuperSoloTime() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Integer[Integer] 	Net_SuperSoloOpponentTime	for UI;
	// declare Integer[Integer] SuperSoloTime;
	// foreach(I => Time in Net_SuperSoloOpponentTime) {
		// SuperSoloTime[I] = Time;
	// }
	// return SuperSoloTime;
	return Net_SuperSoloOpponentTime;
}

Boolean IsSuperSolo() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Boolean Net_IsSuperSolo for UI;
	return Net_IsSuperSolo;
}

Void SetFocusButtonMedal(Integer _Medal) {
	if(G_MedalTypeToMedalChoice.existskey(_Medal)) {
		declare Integer MedalFocus = G_MedalTypeToMedalChoice[_Medal];
		// log("SET FOCUS CHOICE: "^MedalFocus);
		UICampaign::SetMedalFocusButton(MedalFocus);
	}
}

Void GetDefaultMedalChoice() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Integer	Net_LastDefaultMedalChoice				for UI;
	SetFocusButtonMedal(Net_LastDefaultMedalChoice);
}

Void SetDefaultMedalChoice() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer 	Net_NewDefaultMedalChoiceUpdate 		for UI;
	declare netwrite Integer 	Net_NewDefaultMedalChoice				for UI;
	
	if(G_OpponentChosen <= TMC_MEDAL_BRONZE && G_OpponentChosen > TMC_MEDAL_AUTHOR) {
		Net_NewDefaultMedalChoice 				= G_OpponentChosen;
		Net_NewDefaultMedalChoiceUpdate 		+= 1;
		SetFocusButtonMedal(Net_NewDefaultMedalChoice);
	}
	
	/*
	if(G_HasNewMedal) {
		if(G_BestMedal == G_OpponentChosen) {
			Net_NewDefaultMedalChoice 				= G_BestMedal;
			Net_NewDefaultMedalChoiceUpdate 		+= 1;
			SetFocusButtonMedal(Net_NewDefaultMedalChoice);
		} else {
			if(G_BestMedal < G_OpponentChosen) {
				Net_NewDefaultMedalChoice 				= G_OpponentChosen;
				Net_NewDefaultMedalChoiceUpdate 		+= 1;
				SetFocusButtonMedal(Net_NewDefaultMedalChoice);
			} else if(G_BestMedal > G_OpponentChosen) {
				//We keep the last choice
				Net_NewDefaultMedalChoice 				= G_BestMedal;
				Net_NewDefaultMedalChoiceUpdate 		+= 1;
				SetFocusButtonMedal(Net_NewDefaultMedalChoice);
			}
		}
	} else {
		//We keep the last choice
	}
	*/
}

Integer GetCurrentJoker() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Integer	Net_CurrentTrackJoker	for UI;
	if(Net_CurrentTrackJoker > TMC_MEDAL_AUTHOR) {
		return Net_CurrentTrackJoker;
	}
	return TMC_MEDAL_NONE;
}

Void UpdateJoker() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare Text JokerText = "";
	declare netwrite Boolean Net_JokerAvailable for UI;
	
	if(G_IsSuperSolo) {
		JokerText = _("Use Joker");
		Net_JokerAvailable = False;
	} else {
		if(G_CurrentJoker == TMC_MEDAL_NONE) {
			if(G_BestMedal > TMC_MEDAL_GOLD) {
				if(G_NbHighestMedalHad >= C_JOKER_TRIESNEEDED) {
					//L16N. 25 charac max. %1 is the medal name. for example use gold medal joker
					JokerText 				= TL::Compose(_("Use %1 joker"), Medals::GetMedalName(G_BestMedal-1));
					
					Net_JokerAvailable 		= True;
				} else {
					declare Text JokerTextBis = "";
					if(G_BestMedal <= TMC_MEDAL_BRONZE) {
						//L16N. 25 charac max. %1 is the medal name or try, %2 the number needed to get it. ex: Use joker (Silver x2)
						JokerTextBis 			= TL::Compose(_("Use joker (%1 x%2)"), Medals::GetMedalName(G_BestMedal), ""^C_JOKER_TRIESNEEDED-G_NbHighestMedalHad);
					} else {
						declare Try = _("try");
						JokerTextBis 			= TL::Compose(_("Use joker (%1 x%2)"), Try, ""^C_JOKER_TRIESNEEDED-G_NbHighestMedalHad);
					}
					JokerText 				= JokerTextBis;
					Net_JokerAvailable 		= False;
				}
			} else {
				JokerText = _("Use Joker");
				Net_JokerAvailable = False;
			}
		} else {
			JokerText = _("Use Joker");
			Net_JokerAvailable = False;
		}
	}
	UICampaign::SetJokerButtonContent(JokerText);
}

Void UseJoker(Integer _Medal) {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_AddJokerUpdate		for UI;
	declare netwrite Integer Net_MedalJoker			for UI;
	Net_AddJokerUpdate += 1;
	Net_MedalJoker		= _Medal;
	
	G_DidUseJoker = True;
}

Void RemoveJoker() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_RemoveJokerUpdate for UI;
	Net_RemoveJokerUpdate += 1;
}

Void ReleasePlayerGhost() {
	+++ReleasePlayerGhost+++
}

Integer[] ParseIntArray(Text _IntArrayAsText) {
	// we assume the array is shown as "[x, y, z, t]"
	declare Text[] TextArray = TL::Split("," , TL::SubText(_IntArrayAsText, 1, TL::Length(_IntArrayAsText) - 2));
	// log("TextArray "^TextArray);
	declare Integer[] Result;
	foreach(TextInt in TextArray) {
		Result.add(TL::ToInteger(TextInt));
		// log("TextInt "^TextInt^" = "^TL::ToInteger(TextInt));
	}
	return Result;
}

/*
Text GetBestPlayerGhostName() {
	declare Text GhostName = "Solo_BestGhost";
	---GetGhostName---
	return GhostName;
}
*/

Void LoadOpponentPlayerGhost() {
	switch(G_OpponentChosen) {
		case TMC_MEDAL_RECORDCENTER : {
			if(G_FriendsOpponentUrl != "") {
				if(G_OpponentPlayerGhost != Null) DataMgr.GhostDestroy(G_OpponentPlayerGhost);
			
				// log("LOAD OPPONENT PLAYER GHOST: "^G_FriendsOpponentUrl);
				G_OpponentPlayerGhost = Ghosts::GetGhostFromUrl(G_FriendsOpponentUrl);
				
				if(Ghosts::IsGhostReady(G_OpponentPlayerGhost)) {
					// log("LOAD GHOST IS READY: "^G_OpponentPlayerGhost);
					//L16N. %1 is the name of the friend who is challenged
					declare Text RecordCenterMessage = TL::Compose(_("Race against %1 ghost?"), G_OpponentPlayerGhost.Nickname);
					UICampaign::SetRecordCenterPopupMessage(RecordCenterMessage);
				}
			}
		}
	}
}

Boolean IsAnotherPlayerOpponentBeaten() {
	if(!Ghosts::IsGhostReady(G_OpponentPlayerGhost)) return False;
	declare Integer OpponentTime = G_OpponentPlayerGhost.RaceResult.Time;
	if(G_LastTimePlayer < OpponentTime) {
		return True;
	}
	return False;
}

Void InitMedalsNb() {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_BronzeMedalNb 	for UI;
	declare netwrite Integer Net_SilverMedalNb 	for UI;
	declare netwrite Integer Net_GoldMedalNb 	for UI;
	declare netwrite Integer Net_AuthorMedalNb 	for UI;
	Net_BronzeMedalNb 	= TL::ToInteger(S_NumberOfBronze);
	Net_SilverMedalNb 	= TL::ToInteger(S_NumberOfSilver);
	Net_GoldMedalNb 	= TL::ToInteger(S_NumberOfGold);
	Net_AuthorMedalNb 	= TL::ToInteger(S_NumberOfAuthor);
	
	// TRACKING	
	// on va déduire la difficulté max du type de médaille necéssaire à l'unlock des probaines maps
	declare Integer MedalTypeforNextUnlock 	= TL::ToInteger(S_MedalTypeNeededForNextUnlock);
	// 0 -> on a tout
	// 1 -> on est en black
	// 2 -> on est en blue ou red
	
	declare Integer PlayedMapCount;
	if(MedalTypeforNextUnlock > 3) {
		// pas normal... on envoie 0 dans le doute
		PlayedMapCount = 0;
	}
	else if(MedalTypeforNextUnlock == 3) {
		// 3 -> on est en white ou green
		PlayedMapCount = 10 * (1 + (Net_BronzeMedalNb / 10));
	} 
	else if(MedalTypeforNextUnlock == 2) {
		// 2 -> on est en blue ou red
		PlayedMapCount = 10 * (1 + (Net_SilverMedalNb / 10));
	} 
	else if(MedalTypeforNextUnlock == 1) {
		// 1 -> on est en black
		PlayedMapCount = 10 * (1 + (Net_GoldMedalNb / 10));
	} 
	else {
		// on a tout
		PlayedMapCount = 200;
	}
	
	declare Integer MaxDiffLevel = PlayedMapCount / 40; 
	
	InGameTracking::StartCampaign(
		PlayedMapCount, 
		Net_BronzeMedalNb, 
		Net_SilverMedalNb, 
		Net_GoldMedalNb, 
		Net_AuthorMedalNb, 
		MaxDiffLevel );
}



/*
Void SequenceTransitionHelico() {
	Game::WaitTime(250);
	UISequence::StartTransitionVideo();
	Game::WaitTime(100);
	if(!Game::IsWaiting(Players[G_ThePlayerId])) {
		Game::WaitRace(Players[G_ThePlayerId]);
	}
	Game::WaitTime(2400);
	
	UISequence::StopTransitionVideo();
}
*/

Boolean HasPlayerUnlockSkins() {
	declare CTmPlayer ThePlayer <=> Players[G_ThePlayerId];
	declare Integer NbMedalsWon = G_NbMedalWon;
	if(G_HasNewMedal) {
		+++UnlockAccordingCampaign+++
	}
	return False;
}

Boolean HasPlayerUnlockNewTracks() {
	
	declare Integer MedalType 	= TL::ToInteger(S_MedalTypeNeededForNextUnlock);
	declare Integer NextUnlock 	= TL::ToInteger(S_NextUnlock);
	
	if(G_HasNewMedal) {
		if(G_BestMedal <= MedalType && MedalType < G_OldMedal) {
			if(NextUnlock == 1) {
				return True;
			}
		}
	}
	
	return False;
}



Void WaitOnlineRecordTaskFinished() {
	while(Ghosts::GetOnlineGetRecordTaskStatus() == C_STORERESULT_PROCESSING) {
		yield;
		Game::Loop();
	}
}


/*
Void MapRankingSequence() {
	// if(!G_HasFinishRace || !G_HasNewMedal) return;
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Boolean Net_IsPlayerConnectedMasterServer for UI;
	if(!Net_IsPlayerConnectedMasterServer) return;
	
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "+";
	//TEST WITH MAP RANKING
	IngameGlobalRanking::SetRankingSequence(Players[G_ThePlayerId], 1);
	IngameGlobalRanking::ForceDisplayLastRanking(Players[G_ThePlayerId]);
	Game::WaitTime(250);
	IngameGlobalRanking::StartRankingSequence(Players[G_ThePlayerId]);
	
	//L16N. The title where the ranking of the player on this map is displayed
	Title 		= _("Map Ranking");
	// Subtitle 	= "";
	// Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
	TextColor 	= Colors::GetColor("White");
	RewardUrl	= RewardScreens::GetScreenOnline();
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "RANKING", True);
	WaitRewardRankingAnswer();
	// IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
}

Void RankingSequence() {
	// if(!G_HasFinishRace || !G_HasNewMedal) return;
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Boolean Net_IsPlayerConnectedMasterServer for UI;
	if(!Net_IsPlayerConnectedMasterServer) return;
	
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "+";
	//TEST WITH MAP RANKING
	IngameGlobalRanking::SetRankingSequence(Players[G_ThePlayerId], 0);
	IngameGlobalRanking::ForceDisplayLastRanking(Players[G_ThePlayerId]);
	Game::WaitTime(250);
	// Game::WaitTime(500);
	
	IngameGlobalRanking::StartRankingSequence(Players[G_ThePlayerId]);
	
	Title 		= FlavourText::GetGlobalRankingTitle();
	// Subtitle 	= "";
	// Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
	TextColor 	= Colors::GetColor("White");
	RewardUrl	= RewardScreens::GetScreenOnline();
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "RANKING", True);
	WaitRewardRankingAnswer();
	IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
}
*/

Void SetModelCar(Boolean _Random) {
	//+++SetCarsModels+++
}

Void SetCarModelE3() {
	Players[G_ThePlayerId].ForceModelId = G_CarModels[3];
}

Void RaceTransition() {
	UICampaign::SetFinalMenuVisibility(False);
	Game::WaitTime(1000);
	Game::WaitRace(Players[G_ThePlayerId]);
}

Void SetFinalRaceMessage(Text _Message, Text _Message2) {
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Text	Net_GameFinalRacePopupResult 	for UI;
	declare netwrite Text	Net_GamePopupTitle				for UI;
	Net_GameFinalRacePopupResult = _Message;
	Net_GamePopupTitle = _Message2;
}

Void GetPlayerFinalMessage() 
{
	declare Integer ButtonFocused = 1;
	if(G_HasFinishRace)
	{
		declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
		declare netwrite Text Net_StatusMessage for UI;
		//L16N status message displayed at the end of a race. The player hasn't beaten his score
		Net_StatusMessage = _("Not so bad... But you can do better.");
		
		if(G_HasNewScore)
		{
			//L16N status message displayed at the end of a race. The player has a new best time
			Net_StatusMessage = _("Well done ! You have a new best time.");
			//L16N Imperative. Menu option to ask the player if he wants to "improve his time"
			UICampaign::SetImproveButtonContent(_("Improve"));
		}
		
		if(G_HasNewMedal)
		{
			declare NewMedal = Medals::GetMedalName(G_BestMedal);
			//L16N The player won a new medal. %1 will be replaced by "Gold Medal" or "Silver Medal" etc.
			Net_StatusMessage = TL::Compose(_("Crazy ! You've got a new medal. Here is the %1."), NewMedal);
			
			if(G_BestMedal > TMC_MEDAL_GOLD && G_BestMedal <= TMC_MEDAL_BRONZE) {
		
				//L16N Imperative. Menu option to ask the player if she wants to "challenge a specific opponent". %1 will be replaced by "Gold Medal" or "Silver Medal", etc.
				declare Text NextChallenge = TL::Compose(_("Challenge %1"), G_OpponentsNames[G_BestMedal-1]);
				
				UICampaign::SetImproveButtonContent(NextChallenge);
			} else if(G_BestMedal <= TMC_MEDAL_GOLD) {
				ButtonFocused = 3;
			}
		}
	}
	UICampaign::SetFinalFocusButton(ButtonFocused);
}

Void SetGamePhase(Integer _Phase) {
	G_GamePhase = _Phase;
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_GamePhase for UI;
	Net_GamePhase = G_GamePhase;
	if(_Phase == C_GAMEPHASE_POSTGAME) GetPlayerFinalMessage();	
}

Void SetNewRecord() {
	if(G_BestTimePlayer != -1) 		UICampaign::NewRecord(G_BestTimePlayer);
	
	// We always destroy the player ghost we don't need. If the ghost comes from an online task, we release it
	if(G_PlayerGhost != Null) {
		ReleasePlayerGhost();
	}

	G_PlayerGhost 				= Ghosts::GetGhostFromPlayer(Players[G_ThePlayerId]);
	// log("NEW BEST PLAYER GHOST: "^G_PlayerGhost);
	// log("SO LAST GHOST: "^(G_LastGhost != Null));
	
	G_BestTimePlayer 			= Players[G_ThePlayerId].CurRace.Time;
	
	UICampaign::SetBestTime(G_BestTimePlayer);
	declare Text MedalPlayer = Medals::GetMedalName(TMC_MEDAL_PLAYER);
	UICampaign::SetPersonalButtonContent(MedalPlayer);
}

Void CampaignSpawnPlayer() {
	if(!Players[G_ThePlayerId].IsSpawned) {
		Players[G_ThePlayerId].IsSpawned = True;
	}
}

Void InitGhost() {	
	G_PlayerGhost = Null;
}

Void SetOpponentForUI(CGhost _Ghost) {
	declare Integer[] GhostCpTime;
	if(_Ghost != Null) {
		foreach(Cp in _Ghost.RaceResult.Checkpoints) GhostCpTime.add(Cp);
		Game::SetOpponent(G_OpponentChosen, GhostCpTime);
		G_OpponentFinalTime = _Ghost.RaceResult.Time;
		if((G_OpponentChosen >= TMC_MEDAL_SUPERMEDALI && G_OpponentChosen <= TMC_MEDAL_SUPERMEDALV) 
		|| G_OpponentChosen == TMC_MEDAL_RECORDCENTER) {
			Game::SetOpponentName(_Ghost.Nickname);
		}
	} else {
		// G_OpponentFinalTime = -1;
		Game::SetOpponent(TMC_MEDAL_NONE, Integer[]);
	}
}

Void LoadGhostOnTrack(CGhost _Ghost, Integer _CarIndex, Boolean _IsTransparent) {
	declare Ident CarModel;
	declare Ident ReplayIdent;
	if(G_CarModels.existskey(_CarIndex)) {
		CarModel = G_CarModels[_CarIndex];
		ReplayIdent = Ghosts::LoadGhostOnMapWithSkin(_Ghost, _IsTransparent, CarModel);
	} else {
		ReplayIdent = Ghosts::LoadGhostOnMap(_Ghost, _IsTransparent);
	}
	if(ReplayIdent != NullId) {
		G_ReplayGhosts[ReplayIdent]	= _Ghost;
	}
}

CGhost GetReplayGhost() {
	if((G_GamePhase == C_GAMEPHASE_POSTGAME && G_HasNewScore) || G_GamePhase == C_GAMEPHASE_CHALLENGE) 	return G_PlayerGhost;
	else 																								return G_LastGhost;
	return Null;
}

Integer GetReplayGhostIndex() {
	if((G_GamePhase == C_GAMEPHASE_POSTGAME && G_HasNewScore) || G_GamePhase == C_GAMEPHASE_CHALLENGE) 	return 0;
	else 																								return 1;
	return -1;
}

Void LoadPlayerGhostOnTrack(Boolean _IsOpponent, Boolean _IsTransparent, Boolean _IsEndReplay) {
	if(!_IsEndReplay) {
		if(G_PlayerGhost != Null) {
			LoadGhostOnTrack(G_PlayerGhost, -1, _IsTransparent);
			if(_IsOpponent && Ghosts::IsGhostReady(G_PlayerGhost)) {
				SetOpponentForUI(G_PlayerGhost);
			}
		}
	} else {
		declare CGhost ReplayGhost = GetReplayGhost();
		if(ReplayGhost != Null) {
			log("LOAD LAST GHOST");
			LoadGhostOnTrack(ReplayGhost, -1, _IsTransparent);
		}
	}
}

Void ShowOpponents(Boolean _IsReplay) {
	declare CGhost GhostToLoad = Null;
	declare Boolean IsPlayerGhostOpponent = False;
	if(G_OpponentChosen >= TMC_MEDAL_GOLD && G_OpponentChosen <= TMC_MEDAL_BRONZE) {
		if(!G_IsSuperSolo) {
			GhostToLoad = Ghosts::GetMedalGhosts(G_OpponentChosen);
			LoadGhostOnTrack(GhostToLoad, G_OpponentChosen, False);
			if(Ghosts::IsGhostReady(GhostToLoad)) {
				SetOpponentForUI(GhostToLoad);
			}
		}
		IsPlayerGhostOpponent = False;
	} else if(G_OpponentChosen == TMC_MEDAL_PLAYER) {
		IsPlayerGhostOpponent = True;
	} else if((G_OpponentChosen >= TMC_MEDAL_SUPERMEDALI && G_OpponentChosen <= TMC_MEDAL_SUPERMEDALV) || G_OpponentChosen == TMC_MEDAL_RECORDCENTER) {
		LoadOpponentPlayerGhost();
		if(G_OpponentPlayerGhost == Null) return;
		LoadGhostOnTrack(G_OpponentPlayerGhost, C_RECORDCENTER_CAR, False);
		if(Ghosts::IsGhostReady(G_OpponentPlayerGhost)) {
			SetOpponentForUI(G_OpponentPlayerGhost);
		}
		IsPlayerGhostOpponent = False;
	}
	
	if(!_IsReplay) {
		LoadPlayerGhostOnTrack(IsPlayerGhostOpponent, True, False);
	}
}


Integer GetMedalPlayer() {
	declare Integer PlayerTimeOnMap = G_TimesOnMap[TMC_MEDAL_PLAYER];
	if(PlayerTimeOnMap <= 0){
		return  TMC_MEDAL_PLAYER;
	} else if(PlayerTimeOnMap <= G_TimesOnMap[TMC_MEDAL_AUTHOR]) {
		return  TMC_MEDAL_AUTHOR;
	} else if(PlayerTimeOnMap <= G_TimesOnMap[TMC_MEDAL_GOLD]) {
		return  TMC_MEDAL_GOLD;
	} else if(PlayerTimeOnMap <= G_TimesOnMap[TMC_MEDAL_SILVER]) {
		return TMC_MEDAL_SILVER;
	} else if(PlayerTimeOnMap <= G_TimesOnMap[TMC_MEDAL_BRONZE]) {
		return  TMC_MEDAL_BRONZE;
	} else {
		return  TMC_MEDAL_PLAYER;
	}
	return -1;
}

Void SetMedalPlayer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	declare netwrite Integer Net_PlayerRank for UI;
	declare netwrite Integer Net_BestMedal for UI;
	// declare Integer PlayerTime = Game::RoundHundredthTime(_Player.CurRace.Time);
	
	if(_Player.CurRace.Time <= G_TimesOnMap[TMC_MEDAL_AUTHOR]) {
		if(G_BestMedal > TMC_MEDAL_AUTHOR) {
			Net_BestMedal 	= TMC_MEDAL_AUTHOR;
			Net_PlayerRank 	= TMC_MEDAL_AUTHOR;
			
			G_HasNewMedal 	= True;
			G_OldMedal 		= G_BestMedal;
			G_BestMedal 	= TMC_MEDAL_AUTHOR;
			G_CurrentJoker	= TMC_MEDAL_NONE;
			RemoveJoker();
		} else {
		
			Net_PlayerRank = TMC_MEDAL_NONE;
		}
	} else if(_Player.CurRace.Time <= G_TimesOnMap[TMC_MEDAL_GOLD]) {
		if(G_BestMedal > TMC_MEDAL_GOLD) {
			Net_BestMedal 	= TMC_MEDAL_GOLD;
			Net_PlayerRank 	= TMC_MEDAL_GOLD;
			
			G_HasNewMedal 	= True;
			G_OldMedal 		= G_BestMedal;
			G_BestMedal 	= TMC_MEDAL_GOLD;
			G_CurrentJoker	= TMC_MEDAL_NONE;
			RemoveJoker();
		} else {
			Net_PlayerRank = TMC_MEDAL_NONE;
		}
	} else if(_Player.CurRace.Time <= G_TimesOnMap[TMC_MEDAL_SILVER]) {
		if(G_BestMedal > TMC_MEDAL_SILVER) {
			Net_BestMedal 	= TMC_MEDAL_SILVER;
			Net_PlayerRank 	= TMC_MEDAL_SILVER;
			
			G_HasNewMedal 			= True;
			G_OldMedal 				= G_BestMedal;
			G_BestMedal 			= TMC_MEDAL_SILVER;
			G_CurrentJoker			= TMC_MEDAL_NONE;
			G_NbHighestMedalHad 	= 1;
			RemoveJoker();
		} else {
			if(G_BestMedal == TMC_MEDAL_SILVER) {
				G_NbHighestMedalHad 	+= 1;
			}
			Net_PlayerRank = TMC_MEDAL_NONE;
		}
	} else if(_Player.CurRace.Time <= G_TimesOnMap[TMC_MEDAL_BRONZE]) {
		if(G_BestMedal > TMC_MEDAL_BRONZE) {
			Net_BestMedal 	= TMC_MEDAL_BRONZE;
			Net_PlayerRank 	= TMC_MEDAL_BRONZE;
			
			G_HasNewMedal 	= True;
			G_OldMedal 		= G_BestMedal;
			G_BestMedal 	= TMC_MEDAL_BRONZE;
			G_CurrentJoker	= TMC_MEDAL_NONE;
			G_NbHighestMedalHad 	= 1;			
			RemoveJoker();
		} else {
			if(G_BestMedal == TMC_MEDAL_BRONZE) {
				G_NbHighestMedalHad 	+= 1;
			}
			Net_PlayerRank = TMC_MEDAL_NONE;
		}
	} else {
		if(G_BestMedal == TMC_MEDAL_PLAYER) {
			G_NbHighestMedalHad 	+= 1;
		}
		Net_PlayerRank = TMC_MEDAL_NONE;
	}
	
	if(G_HasNewMedal) {
		G_NbMedalWon	+= G_OldMedal - G_BestMedal;
		Game::PlayerHasNewMedal(G_BestMedal);
	}
	
	+++MedalAchievementsCheck+++
	

	// log("Best player medal: "^G_BestMedal);
	// log("====== "^Now^" ======");
	// log("PlayerTime: "^PlayerTime);
	// log("_Player.CurRace.Time: "^_Player.CurRace.Time);
	// log("G_TimesOnMap: "^G_TimesOnMap);
	// log("G_HasNewMedal: "^G_HasNewMedal);
	// log("Net_BestMedal: "^Net_BestMedal);
	// log("G_BestMedal: "^G_BestMedal);
	// log("G_OldMedal: "^G_OldMedal);
	// log("Net_PlayerRank: "^Net_PlayerRank);	
}

Void UnspawnSoloPlayer() {
	Players[G_ThePlayerId].IsSpawned = False;
}

Void SequenceTransition() {
	// Game::ShowTransition(Players[G_ThePlayerId]);
	Game::WaitTime(250);
	if(!Game::IsWaiting(Players[G_ThePlayerId])) {
		Game::WaitRace(Players[G_ThePlayerId]);
	}
	// Game::HideTransition(Players[G_ThePlayerId]);
}

/*
Boolean CheckGhostsReplayEnded() {
	if(Now < G_StartTimerGhostReplay) return False;

	declare Integer NbGhostReplayOver = 0;
	foreach(IdentIndex => Ghost in G_ReplayGhosts) {
		if(RaceGhost_IsReplayOver(IdentIndex)) {
			NbGhostReplayOver += 1;
		}
	}
	
	if(NbGhostReplayOver == 1) {
		return True;
	}
	return False;
}
*/

Boolean CheckGhostsReplayEnded() {
	if(Now < G_StartTimerGhostReplay) return False;
	// if(G_PlayerReplayGhostTime ==-1) log("-1");
	foreach(IdentIndex => Ghost in G_ReplayGhosts) {
		// log(Now^" "^RaceGhost_IsReplayOver(IdentIndex)^" "^Ghost.RaceResult.Time^" "^G_PlayerReplayGhostTime);
		if(RaceGhost_IsReplayOver(IdentIndex) && Ghost.Id == G_ReplayGhostId) return True;
	}
	return False;
}

Void StartReplay(Boolean _IsJustAfterRace) {
	SequenceTransition();
	UnspawnSoloPlayer();
	G_StartTimerGhostReplay = Now + 2000;
	
	Ghosts::RemoveAllGhosts();
	G_ReplayGhosts.clear();
	
	if(G_GamePhase == C_GAMEPHASE_POSTGAME) {
		ShowOpponents(True);
	}

	if(G_GamePhase == C_GAMEPHASE_POSTGAME) {
		LoadPlayerGhostOnTrack(False, False, True);
	} else {
		LoadPlayerGhostOnTrack(False, False, False);
	}
	
	declare Ident ReplayIdent 		= NullId;
	declare CGhost ReplayGhost 		<=> GetReplayGhost();
	if(G_ReplayGhosts.exists(ReplayGhost)) {
		ReplayIdent = G_ReplayGhosts.keyof(ReplayGhost);
		if(ReplayIdent != NullId) {
			UISequence::SetReplayGhostFocus(ReplayIdent);
		}
		G_PlayerReplayGhostTime = ReplayGhost.RaceResult.Time;
		G_ReplayGhostId = ReplayGhost.Id;
	}
	
	log("---------LAUNCH REPLAY---------");
	log("GAMEPHASE			: "^G_GamePhase);
	log("GHOST REPLAY TIME	: "^G_PlayerReplayGhostTime);
	log("GHOST REPLAY INDEX	: "^GetReplayGhostIndex());
	
	Game::SetReplayMusic();
	UISequence::LaunchReplaySequence();
}

// Boolean CheckGhostsReplayEnded() {	
	// if(Now < G_StartTimerGhostReplay) return False;
	// log("Start timer ghost: "^G_StartTimerGhostReplay);
	// foreach(IdentIndex => Ghost in G_ReplayGhosts) {
		// if(RaceGhost_IsReplayOver(IdentIndex)) return True;
	// }
	// return False;
// }

Boolean IsOneGhostExist() {
	return G_PlayerGhost != Null;
}

Void ReplayAndStandByLoop() {
	if(G_IdleStep == TMC_IDLESTEP_REPLAY) {
		if(CheckGhostsReplayEnded()) {
			Ghosts::RemoveAllGhosts();
			CampaignSpawnPlayer();
			UISequence::SetStandByView();
			Game::SetStandbyMusic();
			G_TimerStandBy = Now + 10000;
			G_IdleStep = TMC_IDLESTEP_STANDBY;
		}
	} else if(G_IdleStep == TMC_IDLESTEP_STANDBY) {
		if(Now > G_TimerStandBy) {
			if(IsOneGhostExist()) {
				G_IdleStep = TMC_IDLESTEP_REPLAY;
				StartReplay(False);
				Game::WaitTime(500);
			} else {
				G_IdleStep = TMC_IDLESTEP_STANDBY;
			}
			// UISequence::SetIdleFocus();
			// while(!UISequence::IsIdleFocus()) {
				// yield;
			// }
		}
	}
}

Void SetCurrentFrameVisibility(Boolean _Show) {
	if(G_CurrentFrameDisplay == TMC_WINDOWFRAMESTEP_OPPONENT) {
		UICampaign::SetStartMenuVisibility(_Show);
	} else if(G_CurrentFrameDisplay == TMC_WINDOWFRAMESTEP_FRIENDS) {
		UICampaign::SetFriendsRecordsVisibility(_Show);
	} else if(G_CurrentFrameDisplay == TMC_WINDOWFRAMESTEP_FINAL) {
		UICampaign::SetFinalMenuVisibility(_Show);
	} else if(G_CurrentFrameDisplay == TMC_WINDOWFRAMESTEP_RESTARTRECORD) {
		UICampaign::SetVisibilityRecordCenterPopup(_Show);
	}
}

Boolean GetIsIdleForTooLong() 
{
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	if(UI == Null) return False;	
	declare Integer NbPadsTooLong = 0;
	foreach(I => Pad in Input.Pads) {
		if(Pad.IdleDuration >= C_IdleTimeMax*1000) {
		// if(Pad.IdleDuration >= 50) {
			NbPadsTooLong += 1;
		}
	}
	
	return NbPadsTooLong == Input.Pads.count;
}

Void SoloYield() {
	yield;
	Game::Loop();
	
	ReplayAndStandByLoop();	
	
	if(GetIsIdleForTooLong() && Now > G_TimerBeforePadIdle) {
		UISequence::SetIdleFocus();
		if(G_FrameHasBeenRedisplayed) {
			SetCurrentFrameVisibility(False);
		}
		G_FrameHasBeenRedisplayed = False;
		while(!UISequence::IsIdleFocus()) {
			yield;
		}
	}
	
	if(!UISequence::IsIdleFocus()) {
		if(!G_FrameHasBeenRedisplayed) {
			Game::WaitTime(250);
			UISequence::IdleFocusOutML();
			SetCurrentFrameVisibility(True);
			G_FrameHasBeenRedisplayed = True;
		}
	}
	
	if(UICampaign::PlayerWantsToQuit()) {
		G_PlayerWantsToQuit = True;
	}
	
	// if(UICampaign::PlayerWantsToNextTrack()) {
		// DoNextTrack(True);
		// Game::WaitTime(1000);
		// G_PlayerWantsToQuit = True;
	// }
}

Integer WaitForFriendsOpponentChoice() {
	declare Integer FriendsChoice = UICampaign::GetFriendsRecordsChoice();
	while(FriendsChoice == -1) {
		SoloYield();
		FriendsChoice = UICampaign::GetFriendsRecordsChoice();
	}
	return FriendsChoice;
}

Void WaitForFriendsOpponentUrl() {
	declare Text OpponentUrl = UICampaign::GetFriendsOpponentUrl();
	while(OpponentUrl == "") {
		SoloYield();
		OpponentUrl = UICampaign::GetFriendsOpponentUrl();
	}
	G_FriendsOpponentUrl = OpponentUrl;
}

Void WaitRewardAnswer() {
	while(!Game::GetRewardAnswer(Players[G_ThePlayerId])) {
		// SoloYield();
		yield;
		// if(UICampaign::PlayerWantsToNextTrack()) {
			// DoNextTrack(True);
			// Game::WaitTime(1000);
			// G_PlayerWantsToQuit = True;
		// }
	}
}

Void WaitOnlineSetRecordTaskStatusFinished() {
	while(Ghosts::GetOnlineSetRecordTaskStatus() == C_STORERESULT_PROCESSING) {
		foreach (Event in PendingEvents) {
			if (Event.Type == CTmModeEvent::EType::GiveUp) {
				Discard(Event);
			}
		}
		SoloYield();
	}
}

Void WaitRecordCenterChoice() {
	while(UICampaign::GetRecordCenterChoice() == -1) {
		SoloYield();
	}
}

Void WaitForChallengeChoice() {	
	declare Integer GhostChosen = UICampaign::GetGhostChosen();

	while(GhostChosen == -1 && !G_PlayerWantsToQuit) {
		SoloYield();
		GhostChosen			= UICampaign::GetGhostChosen();
	}
	G_OpponentChosen = GhostChosen;
	
	+++FunctionWaitForChallengeChoice+++
}

Text GetVersusTimeText(Boolean _OpponentOrMedal) {
	declare Text VersusText = "";
	
	if(_OpponentOrMedal) {
		if(G_OpponentPlayerGhost != Null) {
			VersusText = TL::Compose("%1: %2 - %3: %4", Players[G_ThePlayerId].User.Name, TL::TimeToText(G_LastTimePlayer, True), G_OpponentPlayerGhost.Nickname, TL::TimeToText(G_OpponentFinalTime, True));
		}
	} else {
		VersusText = TL::Compose("%1: %2 - %3: %4", Players[G_ThePlayerId].User.Name, TL::TimeToText(G_LastTimePlayer, True), Medals::GetMedalName(G_OpponentChosen), TL::TimeToText(G_OpponentFinalTime, True));
	}
	return VersusText;
}

Void MedalAndUnlockSequence() {
	if(!G_HasFinishRace) return;
	
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "+";

	if(G_RecordCenterMode) {
		if(G_OpponentPlayerGhost != Null) {
			G_HasBeatenPlayerOpponent = IsAnotherPlayerOpponentBeaten();
		}
		
		if(G_HasBeatenPlayerOpponent) {
			Title 		= FlavourText::GetCampaignNewRecordTitle();
			//L16N. Player has beaten his friend record. %1 is the name of the friend
			Subtitle 	= TL::Compose(_("You beat %1's record!"), G_OpponentPlayerGhost.Nickname);
			Subtitle2	= FlavourText::GetLastRecordOfThePlayer(G_BestTimePlayer);
			RewardUrl 	= RewardScreens::GetScreenOnline();
			TextColor	= <0.852, 0.423, 1.0>;
			Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "+", True);
			WaitRewardAnswer();
		} else {
			Title 		= FlavourText::GetOnlineBadTitle();
			//L16N. Player didn't beat his friend record. %1 is the name of the friend
			Subtitle 	= TL::Compose(_("You didn't beat %1's record!"), G_OpponentPlayerGhost.Nickname);
			Subtitle2	= FlavourText::GetLastRecordOfThePlayer(G_BestTimePlayer);
			declare VersusText = GetVersusTimeText(True);
			
			if(VersusText != "") {
				Subtitle2 = VersusText;
			}
			RewardUrl 	= RewardScreens::GetScreenOnline();
			TextColor	= Colors::GetColor("PinkRed");
			Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "-", True);
			WaitRewardAnswer();
		}
	}
	
	if(G_HasNewMedal) {
		IngameAchievements::RestartTryHarderAchievement();
		UICampaign::SetMedalCountVisible(True);
		
		if(G_BestMedal == TMC_MEDAL_GOLD) {
			Title 		= FlavourText::GetCampaignGoldTitle();
			Subtitle 	= FlavourText::GetCampaignGoldSubTitle();
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Gold");
		} else if(G_BestMedal == TMC_MEDAL_SILVER){
			Title 		= FlavourText::GetCampaignSilverTitle();
			Subtitle 	= FlavourText::GetCampaignSilverSubTitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Silver");
		} else if(G_BestMedal == TMC_MEDAL_BRONZE){
			Title 		= FlavourText::GetCampaignBronzeTitle();
			Subtitle 	= FlavourText::GetCampaignBronzeSubTitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Bronze");
		} else if(G_BestMedal == TMC_MEDAL_AUTHOR) {
			Title 		= FlavourText::GetCampaignTrackmasterTitle();
			Subtitle 	= FlavourText::GetCampaignTrackmasterSubTitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("GreenMaster");
		}
		
		Sign = "LOCALRANKING";
		RewardUrl = RewardScreens::GetScreenMedalWon();
		
		//Only for Solo mode
		+++GlobalRankingSequence+++
	
		Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
		WaitRewardAnswer();
		IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
		// log(Now^"AFTER REWARD SCREEN");
	} 
	
	UICampaign::SetMedalCountVisible(False);
	
	if(G_HasNewScore) {
		IngameAchievements::RestartTryHarderAchievement();
		
		Title 		= FlavourText::GetCampaignNewRecordTitle();
		Subtitle 	= FlavourText::GetCampaignNewRecordSubtitle();
		declare Text Subt = "";
		if(G_LastMedalPlayer >= TMC_MEDAL_AUTHOR && G_LastMedalPlayer <= TMC_MEDAL_BRONZE) {
			Subt = TL::Compose(_("Your new best record: %1, %2"), TL::TimeToText(G_BestTimePlayer, True), Medals::GetMedalName(G_LastMedalPlayer));
		} else {
			Subt = TL::Compose(_("Your new best record: %1"), TL::TimeToText(G_BestTimePlayer, True));
		}
		Subtitle2	= Subt;
		RewardUrl 	= RewardScreens::GetScreenBravo();
		TextColor	= <0.852, 0.423, 1.0>;
		Sign = "LOCALRANKING";
		
		//Only for solo mode
		+++MapRankingSequence+++
		
		
		Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
		WaitRewardAnswer();
		IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
	} 

	if(!G_HasNewMedal && !G_HasNewScore && !G_RecordCenterMode) {
		IngameAchievements::AddOneTryTryHarderAchievements();
		Title 		= FlavourText::GetCampaignTryAgainTitle();
		Subtitle 	= FlavourText::GetCampaignTryAgainSubTitle();
		// Subtitle2	= FlavourText::GetLastRecordOfThePlayer(G_LastTimePlayer)^TL::Compose(" Last Medal: %1", Medals::GetMedalName(G_LastMedalPlayer));
		declare Text Subt = "";
		if(G_LastMedalPlayer >= TMC_MEDAL_AUTHOR && G_LastMedalPlayer <= TMC_MEDAL_BRONZE) {
			Subt = TL::Compose(_("Your last record: %1, %2"), TL::TimeToText(G_LastTimePlayer, True), Medals::GetMedalName(G_LastMedalPlayer));
		} else {
			Subt = TL::Compose(_("Your last record: %1"), TL::TimeToText(G_LastTimePlayer, True));
		}
		declare VersusText = GetVersusTimeText(False);
		if(VersusText != "") {
			Subt = VersusText;
		}
		
		Subtitle2	= Subt;
		RewardUrl 	= RewardScreens:: GetScreenGameOver();
		TextColor	= Colors::GetColor("PinkRed");
		Sign		= "-";
		
		Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
		WaitRewardAnswer();
	}
	
	if(G_HasNewMedal) {
		if(HasPlayerUnlockNewTracks()) {	
		// if(True) {	
			//L16N Title of the screen where the player has unlocked new customisable
			Title 		= _("Good news!");
			//L16N The player has unlocked new content: tracks in his official campaign
			Subtitle 	= _("You unlocked new tracks");
			Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
			TextColor 	= Colors::GetColor("YellowIntense");
			RewardUrl	= RewardScreens::GetScreenUnlock();
			Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "UNLOCK", True);
			WaitRewardAnswer();
		}
		
		if(HasPlayerUnlockSkins()) {
		// if(False) {
			//L16N Title of the screen where the player has unlocked new customisable
			Title 		= _("Good news!");
			//L16N The player has unlocked new things to customize his car 
			Subtitle 	= _("You unlocked new stuff in your garage");
			Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
			TextColor 	= Colors::GetColor("YellowIntense");
			RewardUrl	= RewardScreens::GetScreenUnlock();
			Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "UNLOCK", True);
			WaitRewardAnswer();
		}
	}
	Game::HideTransition(Players[G_ThePlayerId]);
}

Void WaitRewardRankingAnswer() {
	while(!Game::GetRewardAnswer(Players[G_ThePlayerId])) {
		SoloYield();
		if(IngameGlobalRanking::HasNewEchelon(Players[G_ThePlayerId])) {
			declare Integer PlayerEchelon = IngameGlobalRanking::GetPlayerEchelon(Players[G_ThePlayerId]);
			declare Text RewardScreens	= RewardScreens::GetScreenEchelon(PlayerEchelon);
			Game::ShowReward(Players[G_ThePlayerId], "", "", "", "to continue", RewardScreens, Colors::GetColor("White"), "ECHELON", True);
		}
	}
}

Void RecordCenterSequence() {
	G_CurrentFrameDisplay = TMC_WINDOWFRAMESTEP_RESTARTRECORD;
	UICampaign::SetVisibilityRecordCenterPopup(True);
	WaitRecordCenterChoice();
	declare RecordCenterChoice = UICampaign::GetRecordCenterChoice();
	UICampaign::SetVisibilityRecordCenterPopup(False);
	Game::WaitTime(1000);
	
	if(RecordCenterChoice == 1) {
		G_RecordCenterMode = False;
		G_FriendsOpponentUrl = "";	
		SetGamePhase(C_GAMEPHASE_CHALLENGE);
	} else {
		SetGamePhase(C_GAMEPHASE_PREPARATION);
	}
}