/**
 *	Time Attack mode
 */

#Extends "Modes/TrackMania/TMC_ModeBase.Script.txt"

#Const	CompatibleMapTypes	["RaceCE", "Race"]
#Const	Version				"2015-11-05"
#Const	ScriptName			"TMC_Championship.Script.txt"

#Include "Libs/Nadeo/TMConsole/Ingame/Game.Script.txt" 					as Game
#Include "Libs/Nadeo/TMConsole/Ingame/UI/UIChampionship.Script.txt" 	as UIChampionship
#Include "Libs/Nadeo/TMConsole/Ingame/RewardScreens.Script.txt" 		as RewardScreens
#Include "Libs/Nadeo/TMConsole/Ingame/FlavourText.Script.txt" 			as FlavourText
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 						as Colors
#Include "Libs/Nadeo/TMConsole/Ingame/Ghosts.Script.txt" 				as Ghosts
#Include "Libs/Nadeo/TMConsole/Ingame/IngameTracking.Script.txt" 		as IngameTracking
#Include "Libs/Nadeo/TMConsole/Ingame/IngameAchievements.Script.txt"	as IngameAchievement
#Include "Libs/Nadeo/TMConsole/Ingame/IngameGlobalRanking.Script.txt" 	as IngameGlobalRanking
#Include "Libs/Nadeo/TMConsole/Ingame/Medals.Script.txt" 				as Medals
#Include "Libs/Nadeo/TMConsole/Ingame/IngameTempQuestion.Script.txt" 	as IngameTempQuestion
// #Include "Libs/Nadeo/TMConsole/Live/LiveHelpers.Script.txt" 			as LiveHelpers

#Include "TextLib" as TL

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit 	10800	as _("Time limit :")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_BotsNb 					0
#Const C_GAMEPHASE_CHALLENGE		3
#Const C_GAMEPHASE_PREPARATION		0
#Const C_GAMEPHASE_GAME				1
#Const C_GAMEPHASE_POSTGAME			2

#Const TMC_MEDAL_AUTHOR				0
#Const TMC_MEDAL_GOLD				1
#Const TMC_MEDAL_SILVER				2
#Const TMC_MEDAL_BRONZE				3
#Const TMC_MEDAL_PLAYER				4
#Const TMC_MEDAL_NONE				5
#Const TMC_MEDAL_ANOTHERPLAYER		6

#Const TMC_RACEMODE_MEDAL			0
#Const TMC_RACEMODE_ONLINE			1

#Const TMC_NBCREDIT					3

#Const TMC_TRAIN_UNPUBLISHED		0
#Const TMC_TRAIN_PUBLISHED			1
#Const TMC_RACE						2
#Const TMC_VALIDATION				3

#Const C_CHALLENGE_YES				1
#Const C_CHALLENGE_NO				0

#Const C_GAMECONTEXT_LOCAL			1				
#Const C_GAMECONTEXT_ONLINE			0

#Const TMC_TEMPQUESTION_LIKEMAP			0
#Const TMC_TEMPQUESTION_ADDMAP			1
#Const TMC_TEMPQUESTION_ADDROOM			2
#Const TMC_TEMPQUESTION_LIKECHALLENGE	3

#Const TMC_TEMPQUESTION_OFF 			0
#Const TMC_TEMPQUESTION_VOTING 			1
#Const TMC_TEMPQUESTION_RESULT 			2

#Setting S_Musics	        		""
#Setting S_ChallengeId				-1
#Setting S_RaceId					-1
#Setting S_GameContext				0
#Setting S_IsPublish				0

#Setting S_TrackIndex				-1

/*
#Setting S_AuthorTimes				""
#Setting S_GoldTimes				""
#Setting S_SilverTimes				""
#Setting S_BronzeTimes				""
*/

#Setting S_AuthorTime				""
#Setting S_GoldTime					""
#Setting S_SilverTime				""
#Setting S_BronzeTime				""
#Setting S_IsLastTrack				False

#Setting S_AuthorMedals				-1
#Setting S_GoldMedals				-1
#Setting S_SilverMedals				-1
#Setting S_BronzeMedals				-1
#Setting S_IsStuntMode				False	as _("Stunt mode")
#Setting S_GhostsUrls				""

// ---------------------------------- //
// Global Variables
// ---------------------------------- //
declare Integer				G_GamePhase;
declare Ident				G_ThePlayerId;
declare Integer[Integer]	G_TimesOnMap;
declare Integer				G_BestMedal;
declare Integer[]			G_BestMedalByTrack;
declare Boolean				G_HasNewMedal;
declare Boolean				G_HasNewScore;
declare Boolean				G_HasFinishRace;
declare Integer				G_PlayerNbCredit;
declare Boolean				G_FirstTrack;
declare Integer				G_BestTimePlayer;
declare Boolean				G_EndSequenceLaunched;
declare Boolean				G_IsSaveGhost;
declare CGhost				G_PlayerGhost;
declare Boolean				G_PlayerWantsToQuit;
declare Boolean				G_PlayerHasStartedTrack;
declare Boolean				G_PlayerHasFinishedChallenge;
declare Text				G_PlayerGhostUrl;
declare CGhost[Integer]		G_FriendsGhost;

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
declare Integer PrevTimeLimit = S_TimeLimit;
declare Integer StartTime;
***

***StartServer***
***

G_PlayerGhost				= Null;
//Init Global Variables
// G_GamePhase	= C_GAMEPHASE_GAME;
// SetGamePhase(C_GAMEPHASE_GAME);
G_BestMedalByTrack.clear();

// ---------------------------------- //
// Initialize mode
PrevTimeLimit = S_TimeLimit;
NbLaps = 3;
StartTime = -1;
IndependantLaps = False;
// MB_SetDefaultRespawnMode(CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint);
MB_SetDefaultRespawnMode(CTmMode::ETMRespawnBehaviour::Normal);
G_FirstTrack = True;

***

***BeforeLoadMap***
***
ClientManiaAppUrl = "file://Media/Manialinks/Nadeo/TMConsole/Ingame/UILocalManiaApp.Script.txt";
***

***InitMap***
***
declare FakeVariable = 3;
***

***MapIntro***
***

declare FakeVariable = 3;
***

***StartMap***
***
Layers::DestroyAll();

G_PlayerWantsToQuit 			= False;
G_PlayerHasStartedTrack 		= False;

if(G_PlayerGhost != Null) {
	DataMgr.GhostDestroy(G_PlayerGhost);
	G_PlayerGhost = Null;
}
G_IsSaveGhost = False;
GetTimeOnMap();

while(Players.count == 0) yield;

log("GHOST URLS: "^S_GhostsUrls);
GetFriendGhost();

G_ThePlayerId = Players[0].Id;
SetPlayerHasFinishedChallenge(False);
GiveSettingToLocalApp(S_ChallengeId, S_RaceId, S_TrackIndex);
Game::SetIsUgcTrack(True);
Game::Load(This, "Championship", S_Musics);
Ghosts::Load();
NbLaps = Map.TMObjective_NbLaps;
Game::SetNbLaps(NbLaps);

foreach(Player in Players) {
	declare UI <=> UIManager.GetUI(Player);
	IngameGlobalRanking::LoadGlobalRanking(Player, C_GAMECONTEXT_LOCAL);
	declare netwrite Text Net_ZonePath for UI;
	Net_ZonePath = Player.User.ZonePath;
}

foreach(Player in Players) {
	Game::WaitRace(Player);
}

G_BestTimePlayer = -1;
Game::WaitTime(2000);
G_HasNewMedal 	= False;
G_BestMedal		= TMC_MEDAL_NONE;
Game::SetNbLaps(NbLaps);

if(S_IsStuntMode && !Players[0].EnableStuntMode) {
// if(True && !Players[0].EnableStuntMode) {
	SetPlayerStuntMode(Players[0]);
}

UIChampionship::Load(S_GameContext);
UIChampionship::SetVisibilityCredit(True);

if(S_GameContext == TMC_TRAIN_UNPUBLISHED || S_GameContext == TMC_TRAIN_PUBLISHED) {
	SetPlayerCredits(-1);
	IngameTracking::StartMode("ChallengeTrain");
} else if(S_GameContext == TMC_RACE) {
	SetPlayerCredits(TMC_NBCREDIT);
	IngameTracking::StartMode("ChallengeRace");
} else if(S_GameContext == TMC_VALIDATION) {
	SetPlayerCredits(TMC_NBCREDIT);
	IngameTracking::StartMode("ChallengeValidate");
}

IngameTracking::StartMap(MapName, Map.CollectionName);

declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
declare netwrite  Text Net_CurrentTrackUid for UI;
Net_CurrentTrackUid = Map.MapInfo.MapUid;

SetGamePhase(C_GAMEPHASE_GAME);
UIManager.HoldLoadingScreen = False;
Players[0].IsSpawned = True;
Game::WaitTime(1500);
UIChampionship::SetVisibilityReady(True);
WaitPlayerStartPopup();

Game::WaitTime(250);

if(!G_PlayerWantsToQuit) {
	if(UIChampionship::PlayerWantsToQuit()) {
		G_PlayerWantsToQuit = True;
	}
}

if(!G_PlayerWantsToQuit) {
	if(S_GameContext == TMC_RACE || S_GameContext == TMC_VALIDATION) {
		BeginTrackLive();
		G_PlayerHasStartedTrack = True;
	}
}
// SumUpRewardScreen();
***
  
***PlayLoop***
***
Game::Loop();

if(G_GamePhase == C_GAMEPHASE_GAME) {
	if (Game::IsWaiting(Players[G_ThePlayerId])) {
		Ghosts::RemoveAllGhosts();
		LoadPlayerGhostOnTrack(True, True);
		LoadFriendsGhostOnTrack();
		G_HasFinishRace 		= False;
		G_HasNewScore 			= False;
		G_HasNewMedal			= False;
		G_EndSequenceLaunched 	= False;
		if(S_GameContext == TMC_RACE || S_GameContext == TMC_VALIDATION) {
			UsePlayerCredits();
		}
		Game::StartRace(Players[G_ThePlayerId]);
	}
		
	// ---------------------------------- //
	// Manage events
	foreach (Event in PendingEvents)
	{
		// log(Event.Type)
		PassOn(Event);
		// ---------------------------------- //
		// Waypoint
		if (Event.Type == CTmModeEvent::EType::WayPoint)
		{
			+++EventWayPoint+++
			if (Event.IsEndRace) 
			{
				Event.Player.Score.PrevRace = Event.Player.CurRace;
				Game::EndRace(Event.Player);
				
				G_HasFinishRace = True;
				if(Event.Player.CurRace.Time < G_BestTimePlayer || G_BestTimePlayer == -1) 
				{
					G_HasNewScore 					= True;
					G_IsSaveGhost					= True;
					G_BestTimePlayer  				= Event.Player.CurRace.Time;
					if(G_PlayerGhost != Null) 		DataMgr.GhostDestroy(G_PlayerGhost);
					G_PlayerGhost 					= Ghosts::GetGhostFromPlayer(Players[G_ThePlayerId]);
					SetBestTimePlayerLive(Event.Player);
					SetMedalPlayer(Event.Player);
					
					declare Text GhostName 			= GetPlayerGhostName();
					Ghosts::SaveGhostRecord(G_PlayerGhost, GhostName);
					G_PlayerGhostUrl 				= Ghosts::GetGhostUrlFromName(GhostName);
					if(S_GameContext == TMC_RACE || S_GameContext == TMC_VALIDATION) {
						SetPlayerGhostUrl();
					}
					
					// if(S_GameContext == ) {
						// SetPlayerGhostUrl();
					// }
				}
				// G_GamePhase = C_GAMEPHASE_POSTGAME;
				SetGamePhase(C_GAMEPHASE_POSTGAME);
			}
		}
		// ---------------------------------- //
		// GiveUp
		else if (Event.Type == CTmModeEvent::EType::GiveUp) 
		{
			+++EventGiveUp+++
			if(CreditsNoMore()) {
				// G_GamePhase = C_GAMEPHASE_POSTGAME;
				SetGamePhase(C_GAMEPHASE_POSTGAME);
			} else {
				Game::WaitRace(Event.Player);
			}
		}
		else if (Event.Type == CTmModeEvent::EType::StartLine) 
		{
			+++EventStartLine+++
		}
	}
	
} else if(G_GamePhase == C_GAMEPHASE_POSTGAME) {
	Ghosts::RemoveAllGhosts();
	if(G_HasFinishRace) {
		if(S_GameContext == TMC_RACE || S_GameContext == TMC_TRAIN_PUBLISHED) {
			PublishedScreen();
		} else {
			UnpublishedScreen();
		}
	}
	
	declare Boolean IsMapEnd = False;
	if(CreditsNoMore()) {
		IsMapEnd = True;
		if(G_BestTimePlayer == -1) {
			FailScreens();
		}
	} else {
		if(G_BestMedal == TMC_MEDAL_AUTHOR) {
			Game::HideReward(Players[G_ThePlayerId]);
			Game::WaitTime(1000);
			UIChampionship::SetVisibilityPlayersTrackChoice(True);
			Game::WaitTime(500);
			WaitPlayerTrackChoice();
			UIChampionship::SetVisibilityPlayersTrackChoice(False);
			if(UIChampionship::GetTrackChoice() == 0) {
				IsMapEnd = True;
			} else {
				IsMapEnd = False;
			}
		} else {
			Game::HideReward(Players[G_ThePlayerId]);
		}
	}
	
	if(IsMapEnd) {
		G_BestMedalByTrack.add(G_BestMedal);
		MB_StopMap = True;
		
		if(S_IsLastTrack) {
			if(S_GameContext == TMC_RACE) {
				SetPlayerHasFinishedChallenge(True);
			}
			MB_StopServer = True;
		}
	} else {
		Game::WaitRace(Players[G_ThePlayerId]);
		SetGamePhase(C_GAMEPHASE_GAME);
		// G_GamePhase = C_GAMEPHASE_GAME;
	}
}

if(!G_PlayerWantsToQuit) {
	if(UIChampionship::PlayerWantsToQuit()) {
		G_PlayerWantsToQuit = True;
	}
}

if(G_PlayerWantsToQuit) {
	MB_StopMap 		= True;
	MB_StopServer 	= True;
}

if(MB_StopMap && (S_GameContext == TMC_RACE || S_GameContext == TMC_VALIDATION) && G_PlayerHasStartedTrack) {
	// SetPlayerGhostUrl();
	EndTrackLive();

	while(!WaitForEndTrackUpdate()) {
		yield;
	}
}

if(G_PlayerHasFinishedChallenge && G_BestTimePlayer != -1) {

	SumUpRewardScreen();
	IngameAchievement::SendChallengeDoneEvent();
	RankingSequence();
	// Game::ShowReward(Players[G_ThePlayerId]);
	// declare Text RewardUrl = RewardScreens::GetScreenOnline();
	// declare Vec3 TextColor = <0.0, 0.0, 0.0>;
	// Game::ShowReward(Players[G_ThePlayerId], "", "", "", "to continue", RewardUrl, TextColor, "", False);
	Game::HideReward(Players[G_ThePlayerId]);
	Game::WaitTime(500);
	declare Text RewardUrl = RewardScreens::GetScreenOnline();
	declare Vec3 TextColor = <0.0, 0.0, 0.0>;
	Game::ShowReward(Players[G_ThePlayerId], "", "", "", "to continue", RewardUrl, TextColor, "", False);
	
	/*
	declare Boolean SeeEndSequence for Players[0] = True;
	IngameTempQuestion::StartTempQuestion(TMC_TEMPQUESTION_LIKECHALLENGE);
	while(IngameTempQuestion::GetTempQuestionState() != TMC_TEMPQUESTION_OFF) {
		yield;
		// log(Now^">YOUYOU");
		Game::Loop();
		IngameTempQuestion::TempQuestionLoop();
	}
	*/
	
	Game::WaitTime(500);
	UIChampionship::SetVoteFocusButton(1);
	UIChampionship::SetVisibilityPlayersVote(True);
	Game::WaitTime(150);
	WaitPlayerVote();
	UpdatePlayerVote();
	UIChampionship::SetVisibilityPlayersVote(False);
	Game::WaitTime(1000);
	MB_StopServer 	= True;
}
***

***EndMap***
***
IngameTracking::StopMap();
// log("END MAP");
***

***EndServer***
***
IngameTracking::StopMode();
// log("END SERVER");
***

Void SetPlayerStuntMode(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	declare netwrite Boolean Net_IsStuntMode for UI;
	Net_IsStuntMode = True;
	_Player.EnableStuntMode = True;
}

Void SetGamePhase(Integer _Phase) {
	G_GamePhase = _Phase;
	declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_GamePhase for UI;
	Net_GamePhase = G_GamePhase;
}

Void SetPlayerHasFinishedChallenge(Boolean _HasFinished) {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Boolean Net_PlayerHasFinishedChallenge for UI;
	G_PlayerHasFinishedChallenge 		= _HasFinished;
	Net_PlayerHasFinishedChallenge 		= _HasFinished;
}

Boolean WaitForEndTrackUpdate() {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netread Integer Net_EndTrackUpdateInApp 		for UI;
	declare Integer Pre_EndTrackUpdate 						for UI;
	if(Net_EndTrackUpdateInApp != Pre_EndTrackUpdate) {
		Pre_EndTrackUpdate = Net_EndTrackUpdateInApp;
		return True;
	}
	return False;
}

Void UpdatePlayerVote() {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_PlayerVoteUpdate for UI;
	Net_PlayerVoteUpdate += 1;
}

Void ChampionshipYield() {
	yield;
	Game::Loop();
	if(UIChampionship::PlayerWantsToQuit()) {
		G_PlayerWantsToQuit = True;
	}
}

Void WaitPlayerVote() {
	while(UIChampionship::GetVoteChoice() == -2 && !G_PlayerWantsToQuit) {
		ChampionshipYield();
	}
}

Void WaitPlayerTrackChoice() {
	while(UIChampionship::GetTrackChoice() == -1 && !G_PlayerWantsToQuit) {
		ChampionshipYield();
	}
}

Void WaitPlayerStartPopup() {
	while(!UIChampionship::GetPopUpAnswer() && !G_PlayerWantsToQuit) {
		ChampionshipYield();
	}
	UIChampionship::SetVisibilityReady(False);
}
Text GetPlayerGhostName() {
	if(S_GameContext == TMC_RACE) {
		return "Championship_"^TL::ToText(S_ChallengeId)^"_"^TL::ToText(S_RaceId);
	} else if(S_GameContext == TMC_TRAIN_PUBLISHED || S_GameContext == TMC_TRAIN_UNPUBLISHED) {
		return "Championship_"^TL::ToText(S_ChallengeId)^"_train";
	} else if(S_GameContext == TMC_VALIDATION) {
		return "Championship_"^TL::ToText(S_ChallengeId)^"_validation";
	}
	return "";
}

Void SetOpponentForUI(CGhost _Ghost) {
	declare Integer[] GhostCpTime;
	if(_Ghost != Null) {
		foreach(Cp in _Ghost.RaceResult.Checkpoints) GhostCpTime.add(Cp);
		Game::SetOpponent(TMC_MEDAL_PLAYER, GhostCpTime);
	} else {
		Game::SetOpponent(TMC_MEDAL_NONE, Integer[]);
	}
}

Void LoadGhostOnTrack(CGhost _Ghost, Boolean _IsTransparent) {
	declare Ident ReplayIdent;
	ReplayIdent = Ghosts::LoadGhostOnMap(_Ghost, _IsTransparent);
}

Void LoadPlayerGhostOnTrack(Boolean _IsOpponent, Boolean _IsTransparent) {
	if(G_PlayerGhost == Null) {
		G_PlayerGhost = Ghosts::GetPlayerGhost(GetPlayerGhostName());
	}

	if(G_PlayerGhost != Null && Ghosts::IsGhostReady(G_PlayerGhost)) {
		LoadGhostOnTrack(G_PlayerGhost, _IsTransparent);
		if(_IsOpponent) {
			SetOpponentForUI(G_PlayerGhost);
		}
	}
}

Void LoadFriendsGhostOnTrack() {
	
	foreach(Ghost in G_FriendsGhost) {
		if(Ghosts::IsGhostReady(Ghost)) {
			log("GHOST ADD TO TRACK: "^Ghost.Nickname);
			LoadGhostOnTrack(Ghost, False);
		}
	}
}

Integer GetCurrentTrackIndex() {
	foreach(IndexMap => MapInfo in MapList) {
		if(MapInfo.MapUid == Map.MapInfo.MapUid) return IndexMap;
	}
	return -1;
}


Void GetTimeOnMap() {
	// declare Text[] AuthorTimeParsed 	= TL::Split("," , S_AuthorTimes);
	// declare Text[] GoldTimeParsed 		= TL::Split("," , S_GoldTimes);
	// declare Text[] SilverTimeParsed 	= TL::Split("," , S_SilverTimes);
	// declare Text[] BronzeTimeParsed 	= TL::Split("," , S_BronzeTimes);
	// declare Integer	CurrentTrackIndex 	= GetCurrentTrackIndex();
	
	G_TimesOnMap[TMC_MEDAL_AUTHOR] 	= TL::ToInteger(S_AuthorTime);
	G_TimesOnMap[TMC_MEDAL_GOLD] 	= TL::ToInteger(S_GoldTime);
	G_TimesOnMap[TMC_MEDAL_SILVER] 	= TL::ToInteger(S_SilverTime);
	G_TimesOnMap[TMC_MEDAL_BRONZE] 	= TL::ToInteger(S_BronzeTime);
	
	// log(GoldTimeParsed);
	/*
	if(CurrentTrackIndex != -1) {
		if(AuthorTimeParsed.existskey(CurrentTrackIndex)) {
			
		} else {
			G_TimesOnMap[TMC_MEDAL_AUTHOR] = Medals::GetMedalTime(TMC_MEDAL_AUTHOR);
		}

		if(GoldTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_GOLD] = TL::ToInteger(GoldTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_GOLD] = Medals::GetMedalTime(TMC_MEDAL_GOLD);
		}

		if(SilverTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_SILVER] = TL::ToInteger(SilverTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_SILVER] = Medals::GetMedalTime(TMC_MEDAL_SILVER);
		}

		if(BronzeTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_BRONZE] = TL::ToInteger(BronzeTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_BRONZE] = Medals::GetMedalTime(TMC_MEDAL_BRONZE);
		}
	} else {
		G_TimesOnMap = Medals::GetTimesOnMap();
	}
	*/
}

Void GetFriendGhost() {
	declare Text[] GhostsUrlParsed 	= TL::Split(";;" , S_GhostsUrls);
	declare Text NextNickname 		= "";
	declare IndexGhost 				= 0;
	declare Text GhostInfo 			= "";
	while(IndexGhost <= GhostsUrlParsed.count-1) {
		GhostInfo = GhostsUrlParsed[IndexGhost];
		if(IndexGhost%2 == 0) {
			NextNickname = GhostInfo;
		} else {
			G_FriendsGhost[IndexGhost] 				= Ghosts::GetGhostFromUrl(":Url:"^GhostInfo);
			while(!Ghosts::IsGhostReady(G_FriendsGhost[IndexGhost])) yield;
			G_FriendsGhost[IndexGhost].Nickname 	= NextNickname;
		}
		IndexGhost += 1;
	}
}

/*
Void GetTimesOnMap() {
	declare Text[] AuthorTimeParsed 	= TL::Split("," , S_AuthorTimes);
	declare Text[] GoldTimeParsed 		= TL::Split("," , S_GoldTimes);
	declare Text[] SilverTimeParsed 	= TL::Split("," , S_SilverTimes);
	declare Text[] BronzeTimeParsed 	= TL::Split("," , S_BronzeTimes);
	declare Integer	CurrentTrackIndex 	= GetCurrentTrackIndex();
	
	// log(GoldTimeParsed);
	
	if(CurrentTrackIndex != -1) {
		if(AuthorTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_AUTHOR] = TL::ToInteger(AuthorTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_AUTHOR] = Medals::GetMedalTime(TMC_MEDAL_AUTHOR);
		}

		if(GoldTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_GOLD] = TL::ToInteger(GoldTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_GOLD] = Medals::GetMedalTime(TMC_MEDAL_GOLD);
		}

		if(SilverTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_SILVER] = TL::ToInteger(SilverTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_SILVER] = Medals::GetMedalTime(TMC_MEDAL_SILVER);
		}

		if(BronzeTimeParsed.existskey(CurrentTrackIndex)) {
			G_TimesOnMap[TMC_MEDAL_BRONZE] = TL::ToInteger(BronzeTimeParsed[CurrentTrackIndex]);
		} else {
			G_TimesOnMap[TMC_MEDAL_BRONZE] = Medals::GetMedalTime(TMC_MEDAL_BRONZE);
		}
	} else {
		G_TimesOnMap = Medals::GetTimesOnMap();
	}				
}
*/

Void GiveSettingToLocalApp(Integer _ChallengeId, Integer _RaceId, Integer _TrackIndex) {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_ChallengeId 				for UI;
	declare netwrite Integer Net_RaceId						for UI;
	declare netwrite Integer Net_ChampionshipTrackIndex		for UI;
	Net_ChallengeId 				= _ChallengeId;
	Net_RaceId						= _RaceId;
	Net_ChampionshipTrackIndex		= _TrackIndex;
}

Void BeginTrackLive() {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer Net_BeginTrackUpdate for UI;
	Net_BeginTrackUpdate += 1;
}

Void SetPlayerGhostUrl() {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Text		Net_PlayerGhostUrl		for UI;
	
	Net_PlayerGhostUrl = G_PlayerGhostUrl;
}

Void EndTrackLive() {
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	declare netwrite Integer 	Net_EndTrackUpdate 		for UI;
	declare netwrite Text		Net_PlayerGhostUrl		for UI;
	Net_EndTrackUpdate += 1;
}

Boolean IsLastTrack() {
	return NextMapIndex == 0;
}

Boolean CreditsNoMore() {
	return G_PlayerNbCredit == 0;
}

Void SetPlayerCredits(Integer _NewCredit) {
	G_PlayerNbCredit = _NewCredit;
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	if(UI == Null) return;
	declare netwrite Integer Net_Credits_Count for UI;
	Net_Credits_Count = G_PlayerNbCredit;
}

Void UsePlayerCredits() {
	G_PlayerNbCredit -= 1;
	declare CUIConfig UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
	if(UI == Null) return;
	declare netwrite Integer Net_Credits_Count for UI;
	Net_Credits_Count = G_PlayerNbCredit;
}

Void SetBestTimePlayerLive(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	declare netwrite Integer Net_BestTimePlayer for UI;
	Net_BestTimePlayer = G_BestTimePlayer;
}

Void SetMedalPlayer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	
	if(G_BestTimePlayer <= G_TimesOnMap[TMC_MEDAL_AUTHOR]) {
		if(G_BestMedal > TMC_MEDAL_AUTHOR) {
			G_HasNewMedal 	= True;
			G_BestMedal 	= TMC_MEDAL_AUTHOR;
		}
	} else if(G_BestTimePlayer <= G_TimesOnMap[TMC_MEDAL_GOLD]) {
		if(G_BestMedal > TMC_MEDAL_GOLD) {
			G_HasNewMedal 	= True;
			G_BestMedal 	= TMC_MEDAL_GOLD;			
		}
	} else if(G_BestTimePlayer <= G_TimesOnMap[TMC_MEDAL_SILVER]) {
		if(G_BestMedal > TMC_MEDAL_SILVER) {
			G_HasNewMedal 	= True;
			G_BestMedal 	= TMC_MEDAL_SILVER;
		}
	} else if(G_BestTimePlayer <= G_TimesOnMap[TMC_MEDAL_BRONZE]) {
		if(G_BestMedal > TMC_MEDAL_BRONZE) {
			G_HasNewMedal 	= True;
			G_BestMedal 	= TMC_MEDAL_BRONZE;			
		}
	}
}
Void WaitRewardAnswer() {
	while(!Game::GetRewardAnswer(Players[G_ThePlayerId]) && !G_PlayerWantsToQuit) {
		ChampionshipYield();
	}
}

Integer GetNbMedal(Integer _MedalToFind) {
	// declare Integer NbMedals = 0;
	// foreach(Medal in G_BestMedalByTrack) {
		// if(Medal == _MedalToFind) {
			// NbMedals += 1;
		// }
	// }
	// return NbMedals;
	
	if(_MedalToFind == TMC_MEDAL_AUTHOR) {
		if(G_BestMedal == TMC_MEDAL_AUTHOR) {
			return S_AuthorMedals + 1;
		} else {
			return S_AuthorMedals;
		}
	} else if(_MedalToFind == TMC_MEDAL_GOLD) {
		if(G_BestMedal == TMC_MEDAL_GOLD) {
			return S_GoldMedals + 1;
		} else {
			return S_GoldMedals;
		}
	} else if(_MedalToFind == TMC_MEDAL_SILVER) {
		if(G_BestMedal == TMC_MEDAL_SILVER) {
			return S_SilverMedals + 1;
		} else {
			return S_SilverMedals;
		}
	} else if(_MedalToFind == TMC_MEDAL_BRONZE) {
		if(G_BestMedal == TMC_MEDAL_BRONZE) {
			return S_BronzeMedals + 1;
		} else {
			return S_BronzeMedals;
		}
	}
	return -1;
}

/*
Void ValidationFailedRewardScreen() {
	//L16N Title of the final screen where we resume the progression in the current challenge
	declare Text Title 		= FlavourText::GetCampaignTryAgainTitle();
	
	//L16N. The player has failed his challenge validation. Challenge is the name of the mode
	declare Text Subtitle 	= _("You failed your challenge validation");
	
	//L16N Number of Trackmaster medals
	declare Text Subtitle2	= FlavourText::GetChampionshipDefaultSubtitle();
	declare Vec3 TextColor 	= Colors::GetColor("Red");
	declare Text RewardUrl	= RewardScreens::GetScreenValidation();
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "", True);
	WaitRewardAnswer();
}
*/

Void SumUpRewardScreen() {
	//L16N Title of the final screen where we resume the progression in the current challenge
	declare Text Title 		= _("Your progression");
	// declare Text Subtitle 	= "ChallengeMaster: "^GetNbMedal(TMC_MEDAL_AUTHOR);
	//L16N This is meant to set the correct typographic space before and after the ":" (e.g. as far as I know, we will use %1 : %2 in French and %1: %2 in English)
	declare Text Subtitle 	= TL::Compose(_("%1: %2"), "ChallengeMaster", ""^GetNbMedal(TMC_MEDAL_AUTHOR));
	
	//L16N Number of Trackmaster medals
	// declare Text Subtitle2	= "GOLD: "^GetNbMedal(TMC_MEDAL_GOLD)^" - SILVER: "^GetNbMedal(TMC_MEDAL_SILVER)^" - Bronze: "^GetNbMedal(TMC_MEDAL_BRONZE);
	
	//L16N. Summary of player's medals. eg: Gold: 3. Other: 4
	declare Text Subtitle2	= TL::Compose(_("%1: %2 - Other: %3"), Medals::GetMedalName(TMC_MEDAL_GOLD), ""^GetNbMedal(TMC_MEDAL_GOLD), ""^(GetNbMedal(TMC_MEDAL_GOLD)+GetNbMedal(TMC_MEDAL_SILVER)));
	
	declare Vec3 TextColor 	= Colors::GetColor("BlueLight");
	declare Text RewardUrl	= RewardScreens::GetScreenValidation();
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "", True);
	WaitRewardAnswer();
}

Text GetMedalText(Integer _Medal) {
	if(G_BestMedal == TMC_MEDAL_AUTHOR) {
		return "Trackmaster";
	} else if(G_BestMedal == TMC_MEDAL_GOLD) {
		return _("Gold");
	} else if(G_BestMedal == TMC_MEDAL_SILVER) {
		return _("Silver");
	} else if(G_BestMedal == TMC_MEDAL_BRONZE) {
		return _("Bronze");
	} else if(G_BestMedal == TMC_MEDAL_PLAYER) {
		return _("None");
	}
	return "";
}

Void FailScreens() {
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "-";
	if(S_GameContext == TMC_VALIDATION) {
		//L16N Title of the final screen where we resume the progression in the current challenge
		Title 		= FlavourText::GetCampaignTryAgainTitle();
		
		//L16N. The player has failed his challenge validation. Challenge is the name of the mode
		Subtitle 	= _("You failed your challenge validation");
		
		Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
		TextColor 	= Colors::GetColor("Red");
		RewardUrl	= RewardScreens::GetScreenValidation();
	} else if(S_GameContext == TMC_RACE){
		//L16N Title of the final screen where we resume the progression in the current challenge
		Title 		= FlavourText::GetCampaignTryAgainTitle();
		
		//L16N. The player has failed his challenge race. Challenge is the name of the mode
		Subtitle 	= _("You failed your race");
		
		Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
		RewardUrl 	= RewardScreens::GetScreenGameOver();
		TextColor	= Colors::GetColor("PinkRed");
	}
	
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
	WaitRewardAnswer();
}

Void UnpublishedScreen() {
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "+";
	
	if(G_HasNewScore) {
		Title 		= FlavourText::GetCampaignNewRecordTitle();
		Subtitle 	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
		//L16N. best player's medal on this track. %1 is the medal like "Trackmaster" or "gold"
		// Subtitle2	= TL::Compose("Track best medal: %1", GetMedalText(G_BestMedal));
		Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
		TextColor 	= Colors::GetColor("BlueLight");
		RewardUrl	= RewardScreens::GetScreenValidation();
	} else {
		if(G_BestTimePlayer != -1) {
			Title 		= FlavourText::GetCampaignTryAgainTitle();
			Subtitle 	= FlavourText::GetCampaignTryAgainSubTitle();
			// Subtitle2	= FlavourText::GetLastRecordOfThePlayer(Players[0].BestRace.Time);
			Subtitle2	= FlavourText::GetRecordOfThePlayer(G_BestTimePlayer);
			RewardUrl 	= RewardScreens::GetScreenGameOver();
			TextColor	= Colors::GetColor("PinkRed");
			Sign		= "-";
		} else {
			Title 		= FlavourText::GetCampaignTryAgainTitle();
			Subtitle 	= FlavourText::GetCampaignTryAgainSubTitle();
			Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
			RewardUrl 	= RewardScreens::GetScreenGameOver();
			TextColor	= Colors::GetColor("PinkRed");
			Sign		= "-";
		}
	}
	
	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
	WaitRewardAnswer();
}
 
Void PublishedScreen() {
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	declare Text Sign		= "+";
	
	if(G_HasNewMedal) {
		if(G_BestMedal == TMC_MEDAL_GOLD) {
			Title 		= FlavourText::GetCampaignGoldTitle();
			Subtitle 	= FlavourText::GetGoldChallengeMedalSubtitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Gold");
			RewardUrl 	= RewardScreens::GetScreenSM(2);
		} else if(G_BestMedal == TMC_MEDAL_SILVER){
			Title 		= FlavourText::GetCampaignSilverTitle();
			Subtitle 	= FlavourText::GetSilverChallengeMedalSubtitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Silver");
			RewardUrl 	= RewardScreens::GetScreenSM(3);
		} else if(G_BestMedal == TMC_MEDAL_BRONZE){
			Title 		= FlavourText::GetCampaignBronzeTitle();
			Subtitle 	= FlavourText::GetBronzeChallengeMedalSubtitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("Bronze");
			RewardUrl 	= RewardScreens::GetScreenSM(4);
		} else if(G_BestMedal == TMC_MEDAL_AUTHOR) {
			Title 		= FlavourText::GetCampaignGoldTitle();
			Subtitle 	= FlavourText::GetMasterChallengeMedalSubtitle(); 
			Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
			TextColor 	= Colors::GetColor("GreenMaster");
			RewardUrl 	= RewardScreens::GetScreenSM(1);
		}
		// RewardUrl = RewardScreens::GetScreenMedalWon();
	} else if(G_HasNewScore) {		
		Title 		= FlavourText::GetCampaignNewRecordTitle();
		Subtitle 	= FlavourText::GetCampaignNewRecordSubtitle();
		Subtitle2	= FlavourText::GetNewRecordOfThePlayer(G_BestTimePlayer);
		RewardUrl 	= RewardScreens::GetScreenBravo();
		TextColor	= <0.852, 0.423, 1.0>;
	} else {
		if(G_BestTimePlayer != -1) {
			Title 		= FlavourText::GetCampaignTryAgainTitle();
			Subtitle 	= FlavourText::GetCampaignTryAgainSubTitle();
			// Subtitle2	= FlavourText::GetLastRecordOfThePlayer(Players[0].BestRace.Time);
			Subtitle2	= FlavourText::GetRecordOfThePlayer(G_BestTimePlayer);
			RewardUrl 	= RewardScreens::GetScreenGameOver();
			TextColor	= Colors::GetColor("PinkRed");
			Sign		= "-";
		} else {
			Title 		= FlavourText::GetCampaignTryAgainTitle();
			Subtitle 	= FlavourText::GetCampaignTryAgainSubTitle();
			Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
			RewardUrl 	= RewardScreens::GetScreenGameOver();
			TextColor	= Colors::GetColor("PinkRed");
			Sign		= "-";
		}
	}

	Game::ShowReward(Players[G_ThePlayerId], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, Sign, True);
	WaitRewardAnswer();
}

Void WaitRewardRankingAnswer() {
	while(!Game::GetRewardAnswer(Players[0])) {
		ChampionshipYield();
		if(IngameGlobalRanking::HasNewEchelon(Players[0])) {
			declare Integer PlayerEchelon = IngameGlobalRanking::GetPlayerEchelon(Players[0]);
			declare Text RewardScreens	= RewardScreens::GetScreenEchelon(PlayerEchelon);
			Game::ShowReward(Players[0], "", "", "", "to continue", RewardScreens, Colors::GetColor("White"), "ECHELON", True);
		}
	}
}

Void RankingSequence() {
	declare UI <=> UIManager.GetUI(Players[0]);
	declare netread Boolean Net_IsPlayerConnectedMasterServer for UI;
	if(!Net_IsPlayerConnectedMasterServer) return;
	
	declare Text Title 		= "";
	declare Text Subtitle 	= "";
	declare Text Subtitle2	= "";
	declare Vec3 TextColor 	= <1.0, 1.0, 1.0>;
	declare Text RewardUrl	= "";
	
	//TEST WITH MAP RANKING
	IngameGlobalRanking::SetRankingSequence(Players[0], 0);
	IngameGlobalRanking::StartRankingSequence(Players[0]);
	
	// Title 		= FlavourText::GetGlobalRankingTitle();
	// Subtitle 	= "";
	// Subtitle2	= FlavourText::GetCampaignDefaultSubtitle();
	TextColor 	= Colors::GetColor("White");
	RewardUrl	= RewardScreens::GetScreenOnline();
	Game::ShowReward(Players[0], Title, Subtitle, Subtitle2, "to continue", RewardUrl, TextColor, "RANKING", True);
	WaitRewardRankingAnswer();
	IngameGlobalRanking::StopRankingSequence(Players[G_ThePlayerId]);
}