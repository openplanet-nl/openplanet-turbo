 
 /**
 *	Time Attack mode
 */

#Extends "Modes/TrackMania/TMC_ModeBase.Script.txt"

#Const	CompatibleMapTypes	"RaceCE,Race"
#Const	Version				"2016-02-01"
#Const	ScriptName			"TMC_OnlineTimeAttack.Script.txt"

#Include "Libs/Nadeo/TMConsole/Ingame/Game_Online.Script.txt" 					as Game
// #Include "Libs/Nadeo/TMConsole/Ingame/IngameTempQuestion.Script.txt" 			as IngameTempQuestion
#Include "Libs/Nadeo/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Nadeo/TMConsole/Ingame/FlavourText.Script.txt" 					as FlavourText
#Include "Libs/Nadeo/TMConsole/Ingame/CheatCodeHmdCam.Script.txt" 				as CheatCodeHmdCam
#Include "Libs/Nadeo/TMConsole/Ingame/RewardScreens.Script.txt" 				as RewardScreens
#Include "Libs/Nadeo/TMConsole/Ingame/CarsModels.Script.txt" 					as CarsModels
#Include "Libs/Nadeo/TMConsole/Ingame/Medals.Script.txt" 						as Medals

#Include "TextLib" as TL
#Include "MathLib" as ML

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_TimeLimit 	300		as _("Time limit :")
#Setting S_IsShowcase	False 	as _("Showcase mode :")  // Is mode launched for a showcase / kiosk mode")
#Setting S_IsStuntMode	False	as _("Stunt mode")
#Setting S_ApiKey		""		as "<hidden>" ///< Live api key

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_BotsNb 0
#Const Description """$fffIn $f00Time Attack$fff mode, the goal is to set the $f00best time$fff.
You have as many tries as you want, and you can $ff0retry$fff when you want by pressing the $ff0'Backspace'$fff key.
When the time is up, the $f00winner$fff is the player with the $f00best time$fff."""

#Const C_MAXCOUNT_SCORESTABLE			10
#Const C_MAXCOUNT_GAME					16

#Const C_GAMEPHASE_CHALLENGE			3
#Const C_GAMEPHASE_PREPARATION			0
#Const C_GAMEPHASE_GAME					1
#Const C_GAMEPHASE_POSTGAME				2
#Const C_GAMEPHASE_OUTRO				4

#Const C_SpawnStatus_Racing				1	///< The player is currently racing
#Const C_SpawnStatus_Waiting			2	///< The player is winting to be spawned
#Const C_SpawnStatus_Outro				3	///< The player is watching the outro sequence
#Const C_SpawnStatus_Browsing			4   ///< The player is browsing the score table

#Const TMC_MEDAL_AUTHOR					0
#Const TMC_MEDAL_GOLD					1
#Const TMC_MEDAL_SILVER					2
#Const TMC_MEDAL_BRONZE					3
#Const TMC_MEDAL_PLAYER					4
#Const TMC_MEDAL_NONE					5
#Const TMC_MEDAL_ANOTHERPLAYER			6

#Const TMC_TEMPQUESTION_LIKEMAP			0
#Const TMC_TEMPQUESTION_ADDMAP			1
#Const TMC_TEMPQUESTION_ADDROOM			2
#Const TMC_TEMPQUESTION_LIKECHALLENGE	3

#Const TMC_TEMPQUESTION_OFF 			0
#Const TMC_TEMPQUESTION_VOTING 			1
#Const TMC_TEMPQUESTION_RESULT 			2

#Const C_MinimumPlayTime				8000 ///< Minimum remaining time toi spawn a player

declare Integer 					G_PrevNbPlayer;
declare Boolean 					G_EndGameSent;
declare Ident[]						G_CarModels;
declare Integer						G_CarModelIndex;


// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
declare Integer PrevTimeLimit = S_TimeLimit;
declare Integer StartTime;
declare Text PrevMapUid;
***

***StartServer***
***
// ---------------------------------- //
// Initialize mode
PrevTimeLimit = S_TimeLimit;
StartTime = -1;
IndependantLaps = True;
MB_SetDefaultRespawnMode(CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint);
Game::SetIsShowcase(S_IsShowcase);
***

***BeforeLoadMap***
***
declare Integer FakeVariable = 3;
ClientManiaAppUrl = "file://Media/Manialinks/Nadeo/TMConsole/Ingame/UIOnlineManiaApp.Script.txt";

declare Text EnviroName 		= MapList[NextMapIndex].CollectionName;

CarsModels::StartItemList();
G_CarModels 		= CarsModels::LoadCarsModels(EnviroName, "Arcade", False);
CarsModels::EndItemList();
***

***InitMap***
***
// ---------------------------------- //
// Initialize scores
Scores_Clear();
***

***StartMap***
***


G_PrevNbPlayer = 0;

// ---------------------------------- //
// Initialize map
MB_Ladder_OpenMatch_All();
Users_SetNbFakeUsers(C_BotsNb, 0);

// ---------------------------------- //
// Layers
Game::Load(This, "OnlineTimeAttack");
Game::SetNbPadsNeeded(1);

Layers::Create("CheatCodeHmdCam", CheatCodeHmdCam::Private_HmdCam());
Layers::Attach("CheatCodeHmdCam");

// ---------------------------------- //
// Initialize race
StartTime = Now + 3000;

UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

UIManager.HoldLoadingScreen = False;
Game::WaitTime(2000);

if (PrevMapUid != Map.MapInfo.MapUid) PrevMapUid = Map.MapInfo.MapUid;
else Game::ForceLikeDislikeUpdate();

declare netwrite Text	Net_ModeName			for Teams[0];
Net_ModeName = "OnlineTimeAttack";

// ---------------------------------- //
// Spawn players for the race
// foreach(Player in Players) {
	// IngameGlobalRanking::UpdateGlobalRanking(Player);
	
// }

// foreach (Player in Players) {
	
// }

/*
if(S_IsStuntMode) {
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
}
*/

Game::SendGameJustStart();
G_EndGameSent 		= False;

// declare Integer GameStartTimer = 10000;
// foreach(Player in Players) {
	// Player.IsSpawned = True;
	// Game::SetGamePhase(Player, C_GAMEPHASE_INTRO);	
// }

// while(GameStartTimer > 0) {
	// yield;
	
	// Game::Loop();
	// Game::Loop();
	// foreach (Event in PendingEvents) {
		// PassOn(Event);
		// if(Event.Type == CTmModeEvent::EType::OnPlayerAdded) {
			// Game::SetInputAvailableScoresTable(Event.Player, False);
			// IngameGlobalRanking::UpdateGlobalRanking(Event.Player);
			// Game::SetGamePhase(Event.Player, C_GAMEPHASE_GAME);	
		// }
	// } 
	
	// GameStartTimer -= Game::GetCustomPeriod();
// }

/*
foreach(Player in Players) {
	Player.ForceModelId 	= G_CarModels[G_CarModelIndex];
	IncrementCarModelIndex();
	// Player.IsSpawned 		= True;	
}
*/
foreach (Player in AllPlayers) {
	declare UI <=> UIManager.GetUI(Player);
	if (UI != Null) UI.UISequence = CUIConfig::EUISequence::Playing;
}

foreach(Player in AllPlayers) {
	declare ModeOTA_HasTimeToSpawn for Player = True;
	ModeOTA_HasTimeToSpawn = True;

	Game::SetGamePhase(Player, C_GAMEPHASE_GAME);
	Player.Score.BestRace = Null;
	Game::FlushPlayerEvent(Player);
	Game::SetInputAvailableScoresTable(Player, False);
	declare netwrite Boolean Net_HasPlayedOnce for Player = False;
	Net_HasPlayedOnce = False;
	
	if(S_IsStuntMode && !Player.EnableStuntMode) {
		SetPlayerStuntMode(Player);
	}
}


SetTimeLimit(StartTime, S_TimeLimit);
// log("GET RANK MESSAGE: "^Game::GetRankMessage(7));
***

***PlayLoop***
***
Game::Loop();

/*
foreach (Player in AllPlayers) {
	declare UI <=> UIManager.GetUI(Player);
	log(UI.UISequence);
}
*/

// log(Now^">YOUYOU");
// CallVote::CallVoteLoop();

// ---------------------------------- //
// Give the remaining time to new players
// if(G_PrevNbPlayer < Players.count) {
	// G_PrevNbPlayer = Players.count;
// }

// ---------------------------------- //
// Update the map duration setting
if (PrevTimeLimit != S_TimeLimit) {
	PrevTimeLimit = S_TimeLimit;
	SetTimeLimit(StartTime, S_TimeLimit);
}

// ---------------------------------- //
// Spawn players
foreach (Player in Players) {
	if (Game::IsWaiting(Player)) {
		declare ModeOTA_HasTimeToSpawn for Player = True;
		if (ModeOTA_HasTimeToSpawn) {
			declare netwrite Boolean Net_HasPlayedOnce for Player = False;
			Net_HasPlayedOnce = True;
			if(Game::IsPlayerBrowseScoresTable(Player)) {
				Game::HideScoresTable(Player);
				Game::SetInputAvailableScoresTable(Player, False);
			}
			if(S_IsStuntMode && !Player.EnableStuntMode) {
				SetPlayerStuntMode(Player);
			}
			SetOpponentForUI(Player, TMC_MEDAL_PLAYER);
			// Game::SendOnPlayerAdded(Player.User.Name);
			Game::StartRace(Player);
		}
	}
}


// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	PassOn(Event);
	
	// ---------------------------------- //
	// Waypoint
	if (Event.Type == CTmModeEvent::EType::WayPoint) {
		if (Event.IsEndRace) {
			declare Boolean IsNewBestRace = False;
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestRace.Compare(Event.Player.CurRace, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestRace = Event.Player.CurRace;
					Event.Player.Score.BestLap = Event.Player.CurRace;
					IsNewBestRace = True;
				}
			}
			
			Event.Player.Score.PrevRace = Event.Player.CurRace;
			Game::EndRace(Event.Player);
			Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
		} else if (Event.IsEndLap) {
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestLap.Compare(Event.Player.CurLap, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestLap = Event.Player.CurLap;
					Event.Player.Score.BestRace = Event.Player.CurLap;
				}
			}
			
			Event.Player.Score.PrevRace = Event.Player.CurLap;
			Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
			SetOpponentForUI(Event.Player, TMC_MEDAL_PLAYER);
		}
	}
	// ---------------------------------- //
	// GiveUp
	else if (Event.Type == CTmModeEvent::EType::GiveUp) {
		if(Now < CutOffTimeLimit) {
			Game::WaitRace(Event.Player);
		}
	}
	
	// ---------------------------------- //
	// On player added
	else if(Event.Type == CTmModeEvent::EType::OnPlayerAdded) {
		Game::SetInputAvailableScoresTable(Event.Player, False);
		Game::SetSpawnStatus(Event.Player, C_SpawnStatus_Waiting);
		Game::FlushPlayerEvent(Event.Player);
		Game::SetGamePhase(Event.Player, C_GAMEPHASE_GAME);	
		Game::SendOnPlayerAdded(Event.Player.User.Name);

		if(S_IsStuntMode && !Event.Player.EnableStuntMode) {
			SetPlayerStuntMode(Event.Player);
		}
		
		if (Event.Player != Null) {
			declare ModeOTA_HasTimeToSpawn for Event.Player = True;
			ModeOTA_HasTimeToSpawn = (CutOffTimeLimit - Now > C_MinimumPlayTime);
		}
	}
	else if(Event.Type == CTmModeEvent::EType::OnPlayerRemoved) {
		// Game::SendOnPlayerRemoved(Event.Player.User.Name);
	}
}

if(Now >= CutOffTimeLimit - 10000) {
	if(!G_EndGameSent) {
		Game::SendGameAboutToEnd();
		
		G_EndGameSent = True;
		// foreach(Player in Players) {
			// Game::SetGamePhase(Player, C_GAMEPHASE_OUTRO);
			
		// }
	}
}

// ---------------------------------- //
// End the map when time limit is reached
if (CutOffTimeLimit > 0 && Now >= CutOffTimeLimit) {
	MB_StopMap = True;
	
	// ---------------------------------- //
	// Close ladder
	// Do not grant LP if the map was skipped
	if (CutOffTimeLimit < 0 || Now >= CutOffTimeLimit) {
		Ladder_ComputeRank(CTmMode::ETmScoreSortOrder::BestRace_Time);
		MB_Ladder_CloseMatch();
	} else {
		MB_Ladder_CancelMatch();	
	}
	
	// ---------------------------------- //
	// END SEQUENCE
	foreach(Player in AllPlayers) {
		Game::SetGamePhase(Player, C_GAMEPHASE_POSTGAME);
		SetOpponentForUI(Player, TMC_MEDAL_NONE);
	}

	//Hide previous score table
	foreach(Player in AllPlayers) {
		declare Integer Status = Game::GetPlayerStatus(Player);
		if(Game::IsPlayerBrowseScoresTable(Player)) {
			Game::HideScoresTable(Player);
		}
	}
	
	Game::WaitTime(250);
	
	//See which player will see end sequence
	foreach(Player in AllPlayers) {
		declare Boolean SeeEndSequence for Player = False;
		declare netwrite Boolean Net_HasPlayedOnce for Player = False;
		if(Net_HasPlayedOnce) {
			SeeEndSequence = True;
		} else {
			SeeEndSequence = False;		
		}
	}

	// ---------------------------------- //
	// Score table
	declare Text RewardUrl = RewardScreens::GetScreenOnline();
	declare Vec3 TextColor = <0.0, 0.0, 0.0>;
	
	//If players does not see end sequence, display scores table leaderboard
	foreach(Player in AllPlayers) {
		declare Boolean SeeEndSequence for Player = False;
		if(!SeeEndSequence) {
			Game::SetInputAvailableScoresTable(Player, False);
			Game::DisplayScoresTable(Player);
		}
	}
	
	foreach (Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if (UI != Null) UI.UISequence = CUIConfig::EUISequence::None;
		Game::WaitRace(Player);
		// Game::SetReplayMusic(Player);

		declare Boolean SeeEndSequence for Player = False;
		if(SeeEndSequence) {
			Game::SetInputAvailableScoresTable(Player, False);
			Game::DisplayScoresTable(Player);
		}
	}
			
	Game::WaitTime(3000);
	
	foreach(Player in AllPlayers) {
		declare Boolean SeeEndSequence for Player = False;
		if(SeeEndSequence) {
			Game::HideScoresTable(Player);
		}
	}
	
	Game::WaitTime(500);
	
	RewardScreenEndMap();
	
	if(!S_IsShowcase) {
		CutOffTimeLimit = -1;
		Game::RankingSequence();
	}
	foreach(Player in AllPlayers) {
		Game::HideReward(Player);
	}
	Game::WaitTime(100);
	Game::PodiumSequence();
	
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	foreach (Player in AllPlayers) {
		Game::SetStopMusic(Player);
	}
	
	Game::SendTrackIncrementPlayerCount(S_ApiKey);
}

//If the race continue we look at the player in outro mode
else {
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare Integer LibTA_RewardTimer for Player;
		declare Integer LibTA_ScoreTable for Player = 0;
		
		declare Integer Status = Game::GetPlayerStatus(Player);
		if(Status == C_SpawnStatus_Outro) {
			if(!Game::IsPlayerBrowseScoresTable(Player)) {
				Game::SetInputAvailableScoresTable(Player, True);
				Game::DisplayScoresTable(Player);
			}
			
			/*
			if(LibTA_RewardTimer <= 0) {
				if(LibTA_ScoreTable <= 0) {
					log("SET TABLE SCORE");
					declare Text RewardUrl = RewardScreens::GetScreenOnline();
					declare Vec3 TextColor = <0.0, 0.0, 0.0>;
					// Game::S howReward(Player, "", "", "", "to continue", RewardUrl, TextColor, "", False);
					
				}
			} else {
				LibTA_RewardTimer -= Game::GetCustomPeriod();
			}
			Game::SetInputAvailableScoresTable(Player, True);
			Game::DisplayScoresTable(Player);
			LibTA_ScoreTable = 5000;
			*/
			
			// if(LibTA_RewardTimer <= 0) {
				
			// } else {
				// LibTA_RewardTimer -= Game::GetCustomPeriod();
			// }
		}
		
		/*
		if(LibTA_ScoreTable > 0) {
			LibTA_ScoreTable -= Game::GetCustomPeriod();
			if(LibTA_ScoreTable <= 0) {
				Game::HideScoresTable(Player);
				Game::HideReward(Player);
				Game::WaitRace(Player);
			}
		}
		*/
	}
}
***

***EndMap***
***
Game::WaitRaceAll();

Scores_Sort(CTmMode::ETmScoreSortOrder::BestRace_Time);
if (Scores.existskey(0) &&  Scores[0].BestRace.Time > 0) {
	MB_VictoryMessage = TL::Compose(_("$<%1$> wins the map!"), Scores[0].User.Name);
}
***
// ---------------------------------- //
// Functions
// ---------------------------------- //
Void SetPlayerStuntMode(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	declare netwrite Boolean Net_IsStuntMode for UI;
	Net_IsStuntMode = True;
	_Player.EnableStuntMode = True;
	_Player.EnableOnlineMode = True;
}

Void IncrementCarModelIndex() {
	G_CarModelIndex += 1;
	if(G_CarModelIndex >= G_CarModels.count) G_CarModelIndex = 0;
}

Void SetOpponentForUI(CTmPlayer _Player, Integer _OpponentType) {
	declare Integer[] PlayerCpTime;
	if(_Player.Score.BestRace.Checkpoints.count != 0 && _OpponentType != TMC_MEDAL_NONE) {
		foreach(Cp in _Player.Score.BestRace.Checkpoints) PlayerCpTime.add(Cp);
		Game::SetOpponent(_Player, _OpponentType, PlayerCpTime);
		declare Text OpponentName = Medals::GetMedalName(TMC_MEDAL_PLAYER);
		Game::SetOpponentName(OpponentName);
	} else {
		Game::SetOpponent(_Player, TMC_MEDAL_NONE, Integer[]);
	}
}

Void SetTimeLimit(Integer _StartTime, Integer _NewTimeLimit) {
	if (_NewTimeLimit <= 0) {
		CutOffTimeLimit = -1;
	} else {
		CutOffTimeLimit = _StartTime + (S_TimeLimit * 1000);
	}
}

Void RewardScreenEndMap() {
	// ---------------------------------- //
	// Game Reward
	foreach(Player in AllPlayers) {
		declare Boolean SeeEndSequence for Player = False;
		if(SeeEndSequence) {
			declare Integer PlayerPosition 	= Game::GetPlayerPosition(Player);
			declare Text	Title			= FlavourText::GetCampaignBronzeTitle();
			
			declare Real 	GoodPart 		= Players.count*1.0/2.0;
			declare Integer GoodPartInt 	= ML::FloorInteger(GoodPart);
			
			if(PlayerPosition == 0) {
				Title = FlavourText::GetOnlineWinnerTitle();
			} else if(PlayerPosition <= GoodPartInt){
				Title = FlavourText::GetOnlineGoodTitle();
			} else {
				Title = FlavourText::GetOnlineBadTitle();
			}
			
			declare Text 	RankMessage 	= Game::GetRankMessage(PlayerPosition);
			// declare Text 	Subtitle2		= FlavourText::GetOnlineTimeAttackDefaultSubtitle();
			declare Text 	Subtitle2		= FlavourText::GetGlobalRankingTitle();
			// declare Text 	Subtitle2		= "";
			declare Text 	RewardUrl		= RewardScreens::GetScreenOnline();
			declare Vec3 	TextColor 		= Colors::GetColor("White");
			Game::ShowReward(Player, Title, RankMessage, "", "", RewardUrl, TextColor, "ONLINERANKING", False);
		}
	}
}

Void RewardScreenEndRace(CTmPlayer _Player, Boolean _NewBestRace) {
	declare Text Title				= "";
	declare Text Subtitle1			= "";
	declare Text Subtitle2			= "";
	declare Text RewardUrl			= RewardScreens::GetScreenOnline();
	declare Vec3 TextColor 			= Colors::GetColor("White");
	
	if(_NewBestRace) {
		
		Title 		= FlavourText::GetCampaignNewRecordTitle();
		Subtitle1 	= FlavourText::GetCampaignNewRecordSubtitle();
	} else {
		Title = FlavourText::GetCampaignTryAgainTitle();
		Subtitle1 = FlavourText::GetCampaignTryAgainSubTitle();
	}
	
	// Subtitle2 = TL::Compose(_("Your record: %1"), TL::TimeToText(_Player.Score.PrevRace.Time, True));
	Subtitle2 = FlavourText::GetNewRecordOfThePlayer(_Player.Score.PrevRace.Time);
	Game::ShowReward(_Player, Title, Subtitle1, Subtitle2, "", RewardUrl, TextColor, "+", False);
	declare Integer LibTA_RewardTimer for _Player;
	LibTA_RewardTimer = 2000;
}