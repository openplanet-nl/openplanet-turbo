#Extends "Modes/TrackMania/TMC_CampaignBase.Script.txt"
#Include "Libs/Nadeo/TMConsole/Ingame/IGPimpUnlock.Script.txt"		as IGPimpUnlock
#Include "Libs/Nadeo/TMConsole/Ingame/CarsModels.Script.txt"		as CarsModels

***UnlockAccordingCampaign***
***
declare Integer IndexCampaign = 0;
if(G_IsSuperSolo) IndexCampaign = 1;
return IGPimpUnlock::NewStuffWithMedal(ThePlayer.User, G_OldMedal, G_BestMedal, IndexCampaign);
***

***BeforeLoadMap***
***
ClientManiaAppUrl = "file://Media/Manialinks/Nadeo/TMConsole/Ingame/UILocalManiaApp.Script.txt";
***

***LoadCarModel***
***
CarsModels::StartItemList();
G_CarModels	= CarsModels::LoadCarsModels(G_EnviroName, "Medals", False);
CarsModels::EndItemList();
***

***SetRaceMode***
***
declare UI <=> UIManager.GetUI(Players[G_ThePlayerId]);
declare netwrite Integer	Net_RaceMode	for UI;
if(!G_IsSuperSolo) {
	Net_RaceMode = TMC_RACEMODE_SOLO;
} else {
	Net_RaceMode = TMC_RACEMODE_SUPERSOLO;
}
***

***StartSymbiose***
***
// Game::SetNbPlayers(1);
declare Integer FakeVariable = 3;
***

***LoadGameLib***
***
Game::Load(This, "Campaign_Solo", S_Musics);
***

***InitCampaign***
***
UICampaign::Load(G_ThePlayerId, G_TimesOnMap, False);
***

***BeforeStart***
***
GetAsyncRecord(True);
***

***EventWayPointEndRace***
***
GetAsyncRecord(False);
***


***FunctionWaitForChallengeChoice***
***
if(G_RaceMode == TMC_RACEMODE_MEDAL) 
{
	// ---------------------------------- //
	// Set recording of player's time off
	// EG : always official :)
	// OnlineRecordEnabled = True;
} 
else if(G_RaceMode == TMC_RACEMODE_ONLINE) 
{
	// ---------------------------------- //
	// Set recording of player's time on
	// OnlineRecordEnabled = True;
}
***

***MedalAchievementsCheck***
***
	declare netwrite Integer Net_AuthorMedalNb 	for UI;
	declare netwrite Integer Net_GoldMedalNb 	for UI;
	declare netwrite Integer Net_SilverMedalNb 	for UI;
	declare netwrite Integer Net_BronzeMedalNb 	for UI;
	
	declare Integer LoaclAuthorMedalNb = Net_AuthorMedalNb;
	declare Integer LoaclGoldMedalNb = Net_GoldMedalNb;
	declare Integer LoaclSilverMedalNb = Net_SilverMedalNb;
	declare Integer LoaclBronzeMedalNb = Net_BronzeMedalNb;
	
	/*
	if(G_DidUseJoker) {
		declare netwrite Integer Net_MedalJoker		for UI;
		
		if(Net_MedalJoker == TMC_MEDAL_GOLD)	{
			G_BestMedal = TMC_MEDAL_GOLD;
			// LoaclGoldMedalNb += 1;
		}
		if(Net_MedalJoker == TMC_MEDAL_SILVER)	{
			G_BestMedal = TMC_MEDAL_SILVER;
			// LoaclSilverMedalNb += 1;
		}
		if(Net_MedalJoker == TMC_MEDAL_BRONZE)	{
			G_BestMedal = TMC_MEDAL_BRONZE;
			// LoaclBronzeMedalNb += 1;
		}
	}
	*/
	
	// Logger::Log("Medal   : old was "^PrevMedal^", new is "^G_BestMedal);
	// Logger::Log("Silvers : "^Net_SilverMedalNb);
	// Logger::Log("Golds   : "^Net_GoldMedalNb);
	
	IngameAchievements::CheckMedalAchievements(
		G_Enviro, G_Difficulty, G_OldMedal, G_BestMedal, LoaclAuthorMedalNb, LoaclGoldMedalNb, LoaclSilverMedalNb, LoaclBronzeMedalNb, G_MedalsByTypeByEnviroDiff, G_MedalsByTypeByDiff);
		
***

***GetPlayerBestGhost***
***
// if(G_IsSuperSolo)
Ghosts::RequestOnlineGetRecord();
WaitOnlineRecordTaskFinished();
declare Integer GetProcessStatus = Ghosts::GetOnlineGetRecordTaskStatus();
if(GetProcessStatus == C_STORERESULT_SUCCEEDED) {
	G_HasPreviousScoreOnTrack		= True;
	G_PlayerGhost 					= Ghosts::GetOnlineRecordGhost();
	G_TimesOnMap[TMC_MEDAL_PLAYER] 	= Ghosts::GetOnlineRecordGhostTime();
} else {
	G_TimesOnMap[TMC_MEDAL_PLAYER] 	= -1;
}
***

***SavePlayerBestGhost***
***
if(G_PlayerGhost != Null && G_HasNewScore) {
	// log(Now^"> Save player ghost: "^G_PlayerGhost.RaceResult.Time);
	Ghosts::RequestOnlineSetRecord(G_PlayerGhost);
	WaitOnlineSetRecordTaskStatusFinished();
	Ghosts::ReleaseOnlineSetRecordTask();
	// log(Now^"> Finish save player ghost");
}
***

***GlobalRankingSequence***
***
IngameGlobalRanking::SetRankingSequence(Players[G_ThePlayerId], 0);
IngameGlobalRanking::ForceDisplayLastRanking(Players[G_ThePlayerId]);
Game::WaitTime(50);
IngameGlobalRanking::StartRankingSequence(Players[G_ThePlayerId]);
***

***MapRankingSequence***
***
Game::WaitTime(50);
IngameGlobalRanking::SetRankingSequence(Players[G_ThePlayerId], 1);
IngameGlobalRanking::ForceDisplayLastRanking(Players[G_ThePlayerId]);
Game::WaitTime(50);
IngameGlobalRanking::StartRankingSequence(Players[G_ThePlayerId]);
***

***RankingSequence***
***
MapRankingSequence();
Game::WaitTime(500);
RankingSequence();
***

***ReleasePlayerGhost***
***
if(Ghosts::GetOnlineGetRecordTaskStatus() != -1) {
	Ghosts::ReleaseOnlineGetRecordTask();
} else {
	DataMgr.GhostDestroy(G_PlayerGhost);
	G_PlayerGhost = Null;
}
***

Void SendOnlineTableToMl(CGameHighScoreList _HighScoreList, Text _Table, Boolean _TopRecord) {
	
	declare Integer[] 	RankNumbers;
	declare Text[]		NameRanking;
	declare Integer[] 	TimeRanking;
	declare Integer		PlayerIndex;
	
	foreach(Index => Record in _HighScoreList.HighScores) {
		if(_TopRecord) {
			RankNumbers.add(Record.Rank+1);
		} else {
			RankNumbers.add(Record.Rank);
		}
		NameRanking.add(Record.Name);
		TimeRanking.add(Record.Time);
		if(Record.Name == Players[G_ThePlayerId].User.Name) {
			PlayerIndex = Index;
		}
	}
	
	for(I, _HighScoreList.HighScores.count, 9) {
		if(_TopRecord) {
			RankNumbers.add(I+1);
		} else {
			RankNumbers.add(I);
		}
		NameRanking.add("-");
		TimeRanking.add(0);
	}
}

Void GetAsyncRecord(Boolean _StartTable) {
	//A terme quand a marchera
	/*
	declare CGameHighScoreList TopHighScoreList;
	declare CGameHighScoreList NearHighScoreList;

	TopHighScoreList 	= DataMgr.OnlineRecordsTopRetrieve(Map.MapUid, DataMgr.MenuUserId, 0, 10, False);
	MB_Sleep(500);
	NearHighScoreList 	= DataMgr.OnlineRecordsNearRetrieve(Map.MapUid, DataMgr.MenuUserId, 10, False);

	declare Integer WaitingTime = 1000;
	while(!TopHighScoreList.IsReady && !NearHighScoreList.IsReady || WaitingTime > 0) {
		yield;
		WaitingTime -= Period;
		// log(Now^">here");
	}
	log("Is the score table ready : "^TopHighScoreList.IsReady);
	log("High Score list : "^TopHighScoreList.HighScores.count);
	
	if(TopHighScoreList.HighScores.existskey(0)) {
		log("NAME : "^TopHighScoreList.HighScores[0].Name);
	}
	
	if(_StartTable) {
		SendOnlineTableToMl(TopHighScoreList, "Start1", True);
		SendOnlineTableToMl(NearHighScoreList, "Start2", True);
	} else {
		SendOnlineTableToMl(NearHighScoreList, "Finish1", True);
		// SendOnlineTableToMl(NearHighScoreList, "Finish2", True);
	}
	*/
}