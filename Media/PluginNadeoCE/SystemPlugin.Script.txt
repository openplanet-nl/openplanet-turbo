#RequireContext CManiaplanetPlugin

#Include "MathLib" as ML
#Include "TextLib" as TL

#Const C_IMGStartBg	"file://Media/PluginNadeoCE/Images/SystemStartBg2.dds"

declare CUILayer G_Layer;
declare CMlFrame G_FrameEpilepsy;
declare CMlFrame G_FrameMessage;
declare CMlLabel G_LabelButton;
declare CMlLabel G_MessageLabel;
declare Boolean  G_HasShowEpilepsy;

CUILayer SystemPopup_CreateLayer()
{
	declare Text TitleEpilepsy  = _("WARNING: Read Before Playing");
	declare Text TextEpilepsy   = _("[Epilepsy]");

	declare Layer = UILayerCreate();
	Layer.Type			= CUILayer::EUILayerType::Normal;
	Layer.IsVisible		= False;
	Layer.ManialinkPage	= 
	"""
	<frame posn="0 0 -10">
		
		<quad posn="0 0 0" sizen="320 180" halign="center" valign="center" image="{{{C_IMGStartBg}}}"/>
		
		<frame id="Frame_Epilepsy" posn="0 25 31" hidden="1">
			<label id="Title_Epilepsy"  posn="0 4.0 0" textfont="TMAG-super-italic-01" textsize="5" textcolor="E6D900" halign="center" valign="bottom"
			autonewline="1" maxline="2" text="{{{TitleEpilepsy}}}"  sizen="243" textprefix="$t"/>
			<label posn="-110 2.0 0" sizen="225" textfont="TMAG-super-italic-01" textsize="2" textcolor="fff" halign="left" valign="up"
			autonewline="1" maxline="50" text="{{{TextEpilepsy}}}" linespacing="1.25"/>
		</frame>

		<frame id="Frame_Message" posn="0 0 30" hidden="1">
			<label 
			posn="0 4.0 0" 
			sizen="120 9" 
			textfont="TMAG-super-italic-01" 
			textsize="11" 
			textcolor="E6D900" 
			halign="center" 
			valign="bottom"
			autonewline="1" 
			maxline="4"
			textprefix="$t"
			text="Trackmania"
			/>

			<label id="Message" 
			posn="0 6.0 0" 
			sizen="175" 
			textfont="TMAG-super-italic-01" 
			textsize="10.0" 
			halign="center" 
			valign="top"
			autonewline="1" 
			maxline="3"
			textprefix="$t"
			linespacing="0.85"
			translate="1"
			text=""
			/>
		
			<label id="Label_Button" 
			posn="0 -70.0 0" 
			sizen="175" 
			textfont="TMAG-super-italic-01" 
			textsize="3.0" 
			halign="center" 
			valign="top"
			autonewline="1" 
			maxline="3"
			textprefix="$t"
			linespacing="0.85"
			text=""
			/>
		</frame>
	</frame>
	""";
	
	return Layer;
}

Boolean HasSelectOrCancelBeenPressed()
{
	foreach(Event in PendingEvents)
	{
		switch(Event.Type) {
			case CManiaAppEvent::EType::MenuNavigation: {
				switch(Event.MenuNavAction) {
					case CManiaAppEvent::EMenuNavAction::Select : {
						return True;
					}
					case CManiaAppEvent::EMenuNavAction::Cancel : {
						return True;
					}
					case CManiaAppEvent::EMenuNavAction::AppMenu : {
						return True;
					}
				}
			}
		}
	}
	return False;
}

Void ShowLoading()
{
	G_FrameMessage.Visible	= False;
	if(!G_HasShowEpilepsy) G_FrameEpilepsy.Visible	= True;
	else                   G_FrameEpilepsy.Visible	= False;
	G_HasShowEpilepsy = True;
	
	G_LabelButton.Hide();
	
	G_Layer.IsVisible = True;
	EnableMenuNavigationInputs = True;

	while(True) {
		yield;
		if (ManiaPlanet.ActiveContext != CManiaPlanet::EContext::Unknown && SystemDialogs.Dialog != CGameDialogs::EDialog::WaitMessage) {
			break;
		}
	}
	
	EnableMenuNavigationInputs = False;
	G_Layer.IsVisible = False;
}

Void ShowMessage()
{
	G_FrameMessage.Visible	= True;
	G_FrameEpilepsy.Visible	= False;
	G_MessageLabel.Value		= SystemDialogs.Message_LabelText;
	
	declare Text ButtonName = "";
	switch(SystemPlatform)
	{
		case ::ESystemPlatform::PS4     : ButtonName ^= _("|PS4|Press the Cross button");
		case ::ESystemPlatform::XBoxOne : ButtonName ^= _("|Xbox|Press A");
		default                         : ButtonName ^= "Press A";
	}
	G_LabelButton.Value = ButtonName;
	G_LabelButton.Hide();
	
	
	G_Layer.IsVisible = True;
	EnableMenuNavigationInputs = True;
	
	while(SystemDialogs.Dialog == CGameDialogs::EDialog::Message) {
		yield;
		
		G_MessageLabel.Value	= SystemDialogs.Message_LabelText;		// (dans la boucle si le texte change.)
		G_MessageLabel.Opacity 	= 0.8 + (0.2 * ML::Sin(Now * 0.005));

		declare CanBeClosed = (SystemDialogs.Message_ButtonText == "");
		if (!CanBeClosed) {
			G_LabelButton.Show();
			if (HasSelectOrCancelBeenPressed())
			{
				SystemDialogs.Message_Ok();  // (changes SystemDialogs.Dialog and exists the loop)
			}
		}
	}

	EnableMenuNavigationInputs = False;
	G_Layer.IsVisible = False;
}


Void ShowWaitMessage()
{
	G_FrameMessage.Visible	= True;
	G_FrameEpilepsy.Visible	= False;
	G_MessageLabel.Value		= SystemDialogs.WaitMessage_LabelText;
	G_LabelButton.Hide();

	G_Layer.IsVisible = True;
	EnableMenuNavigationInputs = True;
	
	while(SystemDialogs.Dialog == CGameDialogs::EDialog::WaitMessage) {
		yield;
		
		G_MessageLabel.Value	= SystemDialogs.WaitMessage_LabelText;		// (dans la boucle si le texte change.)
		G_MessageLabel.Opacity 	= 0.8 + (0.2 * ML::Sin(Now * 0.005));

		declare CanBeClosed = (!SystemDialogs.WaitMessage_ShowAbortButton || SystemDialogs.WaitMessage_ButtonText == "");
		if (!CanBeClosed) {
			if (HasSelectOrCancelBeenPressed())
				SystemDialogs.Message_Ok();  // (changes SystemDialogs.Dialog and exists the loop)
		}
	}

	EnableMenuNavigationInputs = False;
	G_Layer.IsVisible = False;
}


main() {
	SystemDialogs.EnableCustomSystemDialogs = True;
	
	G_Layer = SystemPopup_CreateLayer();

	yield;	// pour que le manialink soit parsé et les controles créés.
	G_FrameEpilepsy	= (G_Layer.LocalPage.GetFirstChild("Frame_Epilepsy") as CMlFrame);
	G_FrameMessage	= (G_Layer.LocalPage.GetFirstChild("Frame_Message") as CMlFrame);
	G_MessageLabel	= (G_FrameMessage.GetFirstChild("Message") as CMlLabel);
	G_LabelButton	= (G_FrameMessage.GetFirstChild("Label_Button") as CMlLabel);

	ManiaPlanet.HideSystemLoadingScreen();
	
	declare Integer WaitTimerMessage = Now + 2000;
	declare LoadingDone = False;
	while(True) {
		yield;
		if (!LoadingDone && LoadedTitle == Null) {
			ShowLoading();
			LoadingDone = True;
		} else if (SystemDialogs.Dialog == CGameDialogs::EDialog::WaitMessage) {
			log("=============SYSTEM WAIT MESSAGE==========");
			log("MESSAGE SYSTEM: "^SystemDialogs.WaitMessage_LabelText);
			ShowWaitMessage();
		} else if (SystemDialogs.Dialog == CGameDialogs::EDialog::Message) {
			log("============= SYSTEM MESSAGE==========");
			log("MESSAGE : "^SystemDialogs.Message_LabelText);
			ShowMessage();
		}
		
		if(Now > WaitTimerMessage) {
			//log("=========IN SYSTEM PLUGIN===========");
			WaitTimerMessage = Now + 2000;
		}
	}
}


