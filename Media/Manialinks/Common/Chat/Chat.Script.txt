#RequireContext CManiaplanetPlugin

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Const PresenceShowSystemText_Available 	"a"
#Const PresenceShowSystemText_Busy 			"b"
#Const PresenceShowSystemText_Away 			"c"
#Const PresenceShowSystemText_Offline 		"d"

#Const BuddiesAdd_Type_TitleCard 			0
#Const BuddiesAdd_Type_Incoming 			1
#Const BuddiesAdd_Type_Outgoing 			2
#Const BuddiesAdd_Type_Suggestion 			3

#Const AlignC2c  							""" valign="center2" halign="center" """
#Const AlignC2l  							""" valign="center2" halign="left" """
#Const AlignC2r  							""" valign="center2" halign="right" """
#Const AlignCc  							""" valign="center" halign="center" """
#Const AlignCl  							""" valign="center" halign="left" """
#Const AlignCr  							""" valign="center" halign="right" """
#Const AlignTc  							""" valign="top" halign="center" """
#Const AlignTl 	 							""" valign="top" halign="left" """
#Const AlignTr 								""" valign="top" halign="right" """
#Const AlignBc 								""" valign="bottom" halign="center" """
#Const AlignBl  							""" valign="bottom" halign="left" """
#Const AlignBr  							""" valign="bottom" halign="right" """
#Const TextBig								""" style="TextRaceMessageBig" """

#Const IconSizeS  							""" sizen="7 7" """
#Const IconSizeM  							""" sizen="5. 5." """
#Const IconSizeL  							""" sizen="8 8" """
#Const IconSizeXL  							""" sizen="9.5 9.5" """
#Const IconSizeXXL  						""" sizen="16 16" """
#Const ButtonsOpacity 						0.9
#Const IconOpacity 							0.66

#Const YGlobalOffset 						5.85
#Const XGlobalOffset 						2
#Const XScaleOffset 						-14
#Const XConversationOffset 					-2.1
#Const XConversationPos 					35.5
#Const YConversationPos 					79.33
#Const YSizeChat 							147.
#Const ScaleChat 							0.815
#Const ScaleChat2 							0.8782
#Const ScaleHeader 							0.88
#Const LayerPosZ_Buddies 					5
#Const LayerPosZ_OffsetOthers 				-8
#Const GlobalTextRatio 						1.


#Const MainWindowBgStyle 					""" style="Bgs1InRace" substyle="BgWindow2" """
#Const MyHeaderBgBlackStyle 				""" style="Bgs1InRace" substyle="BgWindow2" """
#Const ConversationHeaderBgStyle 			""" colorize="333" opacity="0.3" style="Bgs1InRace" substyle="BgWindow4" """
#Const LocalUserHeaderBgStyle 				""" colorize="333" opacity="0.3" style="Bgs1InRace" substyle="BgWindow4" """
#Const BuddyMessagesBgStyle 				""" colorize="444" opacity="0.5" style="Bgs1InRace" substyle="BgWindow4" """
#Const MyMessagesBgStyle 					""" colorize="000" opacity="0.33" style="Bgs1InRace" substyle="BgWindow4" """
#Const BuddiesListBgStyle 					""" style="Bgs1InRace" substyle="BgWindow2" """
#Const ChatEntryBgStyle 					""" colorize="fff" opacity="0.01" style="Bgs1InRace" substyle="BgWindow4" """
#Const CardBuddyBgStyle  					""" colorize="000" opacity="0.33" style="Bgs1InRace" substyle="BgCard2" """
#Const CardServerBgStyle  					""" opacity="0.33" style="Bgs1InRace" substyle="BgCard2" """
#Const CardBuddyBgStyleOffline  			""" colorize="000" opacity="0.33" style="Bgs1InRace" substyle="BgWindow4" """
#Const CardBgColorAvailable					<0., 0.9375, 0.>
#Const CardBgColorBusy						<1., 0.1, 0.1>
#Const CardBgColorAway						<1., 0.875, 0.0625>
#Const CardBgColorOffline					<0.5, 0.5, 0.5>
#Const CardBgColorOfflineOff				<0.1, 0.1, 0.1>
#Const CardBgColorTitle						<0.25, 0.59, 0.83>
#Const CardBgMessageColorAvailable			<0., 0.33, 0.125>
#Const CardBgMessageColorBusy				<0.5, 0.1, 0.1>
#Const CardBgMessageColorAway				<0.5, 0.33, 0.1>
#Const CardBgMessageColorOffline			<0.5, 0.5, 0.5>
#Const CardBuddyBgSizeY 					11.75
#Const CardBuddySpace  						11.7
#Const CardNoticeSpace  					10.3
#Const CardMessages 						11.43
#Const DialogBoxSizeY 						28
#Const DialogBoxSizeX 						138
#Const C_TooltipSizeX 						38

#Const ImgSrc  								"""file://Media/Manialinks/Common/Chat"""

// Chat Settings
#Const C_DisplayedMessageCount 				9
#Const C_DisplayedBuddiesCount 				8
#Const C_DisplayedNoticeCount 				3
#Const C_MaxDisplayedNoticeCount 			16
#Const C_HistoryPersistentCount 			32
#Const C_SubMessageMaxLength 				90
#Const C_SubMessageMaxTolerance 			10
#Const C_StatusMaxLength 					90
#Const C_NotificationMaxDisplayableLength 	55
#Const C_CardStatusMaxDisplayableLength 	35
#Const C_CardNameMaxDisplayableLength 		70

// Animated Display Settings
#Const C_BlinkingTimePendingMessage 		1.5
#Const C_SelectedBuddyCardOffsetX 			0.8

#Const C_ShowAnimDurationY 					240.
#Const C_ShowAnimDurationX 					190.
#Const C_ShowAnimDurationRatioBounce 		0.5825
#Const C_ShowAnimOffsetStartY 				80.
#Const C_ShowAnimOffsetStartX 				45.
#Const C_ShowAnimOffsetBounce 				-1.66
#Const C_ShowAnimOffsetEnd 					0.

#Const C_HideAnimDuration 					200.
#Const C_HideAnimOffsetStart 				0.
#Const C_HideAnimOffsetEnd 					130.

Text GetBuddySubscriptionStatusText(CBuddy::ESubscriptionStatus _SubscriptionStatus) {
	switch (_SubscriptionStatus) {
		case CBuddy::ESubscriptionStatus::RequestFrom 			: return "RequestFrom" ;
		case CBuddy::ESubscriptionStatus::RequestTo 			: return "RequestTo" ;
		case CBuddy::ESubscriptionStatus::Both 					: return "Both" ;
	}
	return "";
}

Text GetBuddyPresenceSystemText(CBuddy::EPresenceShow _PresenceShow) {
	switch (_PresenceShow) {
		case CBuddy::EPresenceShow::Available 					: return PresenceShowSystemText_Available ;
		case CBuddy::EPresenceShow::WantToChat 					: return PresenceShowSystemText_Available ;
		case CBuddy::EPresenceShow::DoNotDisturb 				: return PresenceShowSystemText_Busy;
		case CBuddy::EPresenceShow::Away 						: return PresenceShowSystemText_Away;
		case CBuddy::EPresenceShow::ExtendedAway 				: return PresenceShowSystemText_Away;
	}
	return PresenceShowSystemText_Offline;
}

 CBuddiesManager::EPresenceShow GetMyPresenceEnumFromSystemText(Text _PresenceShowText) {
	switch (_PresenceShowText) {
		case PresenceShowSystemText_Available					: return CBuddiesManager::EPresenceShow::Available;
		case PresenceShowSystemText_Busy						: return CBuddiesManager::EPresenceShow::DoNotDisturb;
		case PresenceShowSystemText_Away						: return CBuddiesManager::EPresenceShow::Away;
	}
	return CBuddiesManager::EPresenceShow::Available;
}

Text GetMyPresenceSystemText(CBuddiesManager::EPresenceShow _PresenceShow) {
	switch (_PresenceShow) {
		case CBuddiesManager::EPresenceShow::Available 			: return PresenceShowSystemText_Available;
		case CBuddiesManager::EPresenceShow::WantToChat 		: return PresenceShowSystemText_Available;
		case CBuddiesManager::EPresenceShow::DoNotDisturb 		: return PresenceShowSystemText_Busy;
		case CBuddiesManager::EPresenceShow::Away 				: return PresenceShowSystemText_Away;
		case CBuddiesManager::EPresenceShow::ExtendedAway 		: return PresenceShowSystemText_Away;
	}
	return PresenceShowSystemText_Offline;
}

Text GetMyPresenceDisplayableText(CBuddiesManager::EPresenceShow _PresenceShow) {
	switch (_PresenceShow) {
		case CBuddiesManager::EPresenceShow::Available 			: return "Available";
		case CBuddiesManager::EPresenceShow::WantToChat 		: return "Available";
		case CBuddiesManager::EPresenceShow::DoNotDisturb 		: return "Busy" ;
		case CBuddiesManager::EPresenceShow::Away 				: return "Away";
		case CBuddiesManager::EPresenceShow::ExtendedAway 		: return "Away";
	}
	return "Offline";
}

Boolean SearchValueInText(Text _Value, Text _ComparedText) {
	return TextLib::Find(_Value, _ComparedText,  False,  False);
}

main()
{	
	declare MLLayer_Function = 
	"""		
		Text GetPresenceDisplayableText(Text _PresenceShow) {
			switch (_PresenceShow) {
				case "{{{PresenceShowSystemText_Available}}}"	: return _("Available") ;
				case "{{{PresenceShowSystemText_Busy}}}" 		: return _("Busy") ;
				case "{{{PresenceShowSystemText_Away}}}" 		: return _("Away") ;
			}
			return "Offline";
		}		
		
	""";
	// Ui init
	declare Layer_Widget_DesiredVisible 	= True;
	declare Layer_Widget_PreviousVisible 	= False;
	declare Layer_Widget_ForceUpdate 		= True;
	declare Layer_Widget 					= UILayerCreate();
	Layer_Widget.Type 						= CUILayer::EUILayerType::ManiaplanetPlugin;
	Layer_Widget.ManialinkPage = 
	"""
	<frame posn="{{{XGlobalOffset-22}}} 90 0">
		
		<quad id="Quad_Icon" sizen="5.5 5.5" 	posn="8.5 -3 0.6" style="Icons128x128_1" substyle="Buddies" {{{AlignC2c}}} />
		<quad 									posn="12 0 0.1" sizen="15 6" scriptevents="1" id="Quad_Widget_Bg" bgcolor="0006" bgcolorfocus="09f" {{{AlignTr}}} />
		
		<frame id="Frame_Online" 		hidden="1">	
			<label id="Label_BuddiesCount" 		posn="4.5 -2.75 0.1" 	sizen="{{{9/GlobalTextRatio}}} 6" 	textsize="2" textcolor="fff" text="123" 										{{{AlignCr}}} scriptevent="1"/>
		</frame>
		
		<frame id="Frame_Connecting" 	hidden="1">	
			<label   							posn="6 -2 0.3" 		sizen="{{{15/GlobalTextRatio}}} 6"	textsize="5" textcolor="fff" text="" 		scale="{{{GlobalTextRatio}}}" 		{{{AlignC2c}}} />
		</frame>	
		
		<frame id="Frame_Offline" 		hidden="1">
			<label  							posn="6.5 -3 0.3" 		sizen="{{{15/GlobalTextRatio}}} 6"  textsize="1" textcolor="fff" text="OFFLINE" scale="{{{0.75*GlobalTextRatio}}}" 	{{{AlignC2c}}}/>
		</frame>	
		
	</frame>
	<script><!--
		#Include "TextLib" as TextLib		
		#Include "MathLib" as MathLib		
		{{{MLLayer_Function}}}
		
		
		main() {
			declare Label_BuddiesCount 		<=> (Page.MainFrame.GetFirstChild("Label_BuddiesCount") 	as CMlLabel);
			declare Frame_Online 			<=> (Page.MainFrame.GetFirstChild("Frame_Online") 			as CMlFrame);
			declare Frame_Connecting 		<=> (Page.MainFrame.GetFirstChild("Frame_Connecting") 		as CMlFrame);
			declare Frame_Offline 			<=> (Page.MainFrame.GetFirstChild("Frame_Offline") 			as CMlFrame);
			declare Quad_Icon 				<=> (Page.MainFrame.GetFirstChild("Quad_Icon") 				as CMlQuad);
			declare Quad_Widget_Bg 			<=> (Page.MainFrame.GetFirstChild("Quad_Widget_Bg") 		as CMlQuad);
			
			declare Boolean IsOffline 				for Page = False;
			declare Boolean IsConnecting 			for Page = False;			
			declare Boolean IsOnline 				for Page = False;		
			declare Integer BuddiesCount 			for Page = 0;
			declare Integer PendingMessagesCount 	for Page = 0;
			
			declare Boolean UnreadMessagesAlertAnim;
				
			while(True) {
				yield;
				
				if (PendingEvents.count == 0) { continue; }
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							if (Event.Control == Quad_Widget_Bg) SendCustomEvent("Widget_Click", Text[]);
						}
						case CMlEvent::Type::PluginCustomEvent: {	
							if (Event.PluginCustomEventType == "UnreadMessagesAlert") {
								UnreadMessagesAlertAnim = True;
							} else if (Event.PluginCustomEventType == "UnreadMessagesAlertStop") {
								UnreadMessagesAlertAnim = False;
							}
						}
					}
				}
				
				if (!PageIsVisible) continue;
				
				Quad_Icon					.Opacity 	= 1.;
				Frame_Online				.Visible 	= IsOnline 		&& !IsConnecting;
				Frame_Connecting			.Visible 	= IsConnecting 	&& !IsOnline;	
				Frame_Offline				.Visible 	= !IsConnecting && !IsOnline;					
				Quad_Icon					.Style		= "Icons128x128_1";	
				
				if (IsOnline && !IsConnecting) {
					Label_BuddiesCount		.Value 		= TextLib::ToText(BuddiesCount);
					if(UnreadMessagesAlertAnim) {
						Label_BuddiesCount	.Value 		= "$06d" ^ TextLib::ToText(PendingMessagesCount);
						Quad_Icon			.Style 		= "Icons128x128_Blink";
					} 
				} else if (IsConnecting && !IsOnline) {				
					Quad_Icon				.Style 		= "Icons128x128_Blink";
				} else {
					Quad_Icon				.Opacity 	= 0.25; 
				}				
			}			
		}
	--></script>
	""";
	
	declare Boolean Layer_Notices_DesiredVisible;
	declare Layer_Notices 		= UILayerCreate();
	Layer_Notices.Type 			= CUILayer::EUILayerType::ManiaplanetPlugin;
	Layer_Notices.ManialinkPage = 
	"""
		<frame id="Frame_Notices" posn="-160 84">
	""";
	
	for(I, 1, C_MaxDisplayedNoticeCount) {
		Layer_Notices.ManialinkPage ^= """	
			<frame id="Frame_Notice{{{I}}}" posn="0 {{{-CardNoticeSpace*(I-1)}}} 50" scale="{{{ScaleChat/0.78}}}" hidden="1">
				<quad id="Button_Bg" posn="0 0 0" sizen="70 10.5" style="Bgs1" substyle="BgButton" scriptevents="1" opacity="0.8" {{{AlignTl}}} />
				<quad id="Quad_Bg" posn="0.1 -0.1 1" sizen="69.8 10.3" bgcolor="000" opacity="0.33" {{{AlignTl}}} />
				<quad id="Quad_Icon" posn="2 -5.25 2" sizen="9 9" style="Icons128x128_1" substyle="Buddies" {{{AlignCl}}} />
				<quad id="Button_CloseNotice" posn="69.75 -0.25 0.2" sizen="5 5" style="Icons64x64_1" substyle="Close" scriptevents="1" {{{AlignTr}}} />
				<label id="Label_Title" posn="14 -2 3" sizen="58 0" textsize="1" textcolor="666" text="NAME" {{{AlignTl}}} scale="0.875" maxline="1" appendellipsis="1" />
				<label id="Label_Message" posn="14 -6.5 3" sizen="58 0" textsize="2" textcolor="FFF" text="NAME" {{{AlignC2l}}} scale="0.875" maxline="1" appendellipsis="1" />
			</frame>
		""";
	}		
	
	Layer_Notices.ManialinkPage ^= 
	"""
		</frame>
	<script><!--
	
		#Include "TextLib" as TextLib
		
		#Const NoticeDurationForceToolbar 	{{{2750}}}
		#Const NoticeDurationMessage 		{{{5500}}}
		#Const NoticeAgeOut 				{{{0.97}}}
		
		{{{MLLayer_Function}}}
		
		main() {
			
			declare Boolean 	NoticeShown 				for Page;
			declare Real 		Settings_NoticeScale 		for Page;
			declare Real 		Settings_NoticeDuration 	for Page;
			declare Integer 	Settings_NoticeCount 		for Page;
			
			declare Integer 	Previous_Settings_NoticeCount;

			declare Frame_Notices <=> (Page.MainFrame.GetFirstChild("Frame_Notices") as CMlFrame);
			
			declare CMlFrame[] 	Frame_Notice;
			declare CMlLabel[] 	Label_Title;
			declare CMlLabel[] 	Label_Message;
			declare CMlQuad[] 	Quad_Icon;
			declare CMlQuad[] 	Button_CloseNotice;
			declare CMlQuad[] 	Button_Bg;
			
			declare Text[] 		Notices_Type;
			declare Text[] 		Notices_IconSubstyle;
			declare Text[] 		Notices_Login;
			declare Text[] 		Notices_Title;
			declare Text[] 		Notices_Message;
			declare Text[] 		Notices_JoinLink;
			declare Integer[] 	Notices_Date;
		
			for(I, 1, {{{C_MaxDisplayedNoticeCount}}}) {
				Frame_Notice				.add( (Page.MainFrame.GetFirstChild("Frame_Notice"^I) as CMlFrame) );
				Label_Title					.add( (Frame_Notice[I-1].GetFirstChild("Label_Title") as CMlLabel) );
				Label_Message				.add( (Frame_Notice[I-1].GetFirstChild("Label_Message") as CMlLabel) );
				Quad_Icon					.add( (Frame_Notice[I-1].GetFirstChild("Quad_Icon") as CMlQuad) );
				Button_CloseNotice			.add( (Frame_Notice[I-1].GetFirstChild("Button_CloseNotice") as CMlQuad) );
				Button_Bg					.add( (Frame_Notice[I-1].GetFirstChild("Button_Bg") as CMlQuad) );
			}	
			
			declare Text Notice_Login_ToRemove;
			declare Integer Latest_Notice_Date;
			
			while(True) {
				yield;		
				
				if (!PageIsVisible || !NoticeShown && PendingEvents.count == 0) continue;
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
					
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							if (Event.Control.ControlId == "Button_CloseNotice") {	
								for (I, 0, Settings_NoticeCount-1) {	
									if (Event.Control == Button_CloseNotice[I]) {
										Notice_Login_ToRemove = Notices_Login[I];
									}
								}
							}
							if (Event.Control.ControlId == "Button_Bg") {	
								for (I, 0, Settings_NoticeCount-1) {	
									if (Event.Control == Button_Bg[I]) {				
										Notice_Login_ToRemove = Notices_Login[I];
										if (Notices_Type[I] == "Message" || Notices_Type[I] == "Connection") {
											SendCustomEvent("Notices_Buddy_Click", [Notices_Login[I]]);
											SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [Notices_Login[I]]);
										} else if (Notices_Type[I] == "ServerJoin") {
											SendCustomEvent("Buddies_ServerJoin_Click", [Notices_JoinLink[I]]);
										} else if (Notices_Type[I] == "AddBuddyOk" || Notices_Type[I] == "AddBuddyError" || Notices_Type[I] == "RemoveBuddyOk" || Notices_Type[I] == "RemoveBuddyError") {
											SendCustomEvent("DialogBox_Needed", ["NoticeExplain", Notices_Message[I], ""]);	
										} else if (Notices_Type[I] == "BuddyRequest") {
											SendCustomEvent("OpenChat_Click", [""]);
											SendCustomEvent("Buddies_ModeAddBuddy_Click", ["1"]); 
											SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["1"]);
											SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["1"]);
										}
									}
								}
							}
						}		
						
						case CMlEvent::Type::PluginCustomEvent: {								
							if (Event.PluginCustomEventType == "Notice_Needed") {
								if	(Notices_Message.count == 0 
								|| 	(Notices_Message.count  > 0 && Notices_Message[Notices_Message.count-1] != Event.PluginCustomEventData[4]) )
								{
									Notices_Type.add(Event.PluginCustomEventData[0]);
									Notices_IconSubstyle.add(Event.PluginCustomEventData[1]);
									Notices_Login.add(Event.PluginCustomEventData[2]);
									Notices_Title.add(Event.PluginCustomEventData[3]);
									Notices_Message.add(Event.PluginCustomEventData[4]);
									if (Event.PluginCustomEventData.count > 5) 
										Notices_JoinLink.add(Event.PluginCustomEventData[5]);
									else 
										Notices_JoinLink.add("");
									Notices_Date.add(Now);
									Latest_Notice_Date = Now;
								}
							} 
						}
					}
				}
				
				Frame_Notices.RelativeScale = Settings_NoticeScale;
				
				if(Previous_Settings_NoticeCount != Settings_NoticeCount) {
					if(Settings_NoticeCount < Previous_Settings_NoticeCount) {
						for(I, Settings_NoticeCount, Previous_Settings_NoticeCount)
							Frame_Notice[I].Visible = False;
					}
					Previous_Settings_NoticeCount = Settings_NoticeCount;
				}
				
				if (Notices_Type.count == 0) { 
					if (NoticeShown){
						for (I, 0, Settings_NoticeCount-1) { 
							Frame_Notice[I].Visible = False;
							Frame_Notice[I].RelativeScale = 1.;
						}
						NoticeShown = False; 
					}
					continue; 
				} else {
					NoticeShown = True;
					while(Notices_Type.count > Settings_NoticeCount) {
						Notices_Type.removekey(0);
						Notices_IconSubstyle.removekey(0);
						Notices_Login.removekey(0);
						Notices_Title.removekey(0);
						Notices_Message.removekey(0);
						Notices_JoinLink.removekey(0);
						Notices_Date.removekey(0);
					}
					
					if (Notice_Login_ToRemove != "") {
						declare KeyToTest = 0;
						while (KeyToTest <= Notices_Login.count-1) {	
							if (Notices_Login[KeyToTest] == Notice_Login_ToRemove) {
								Notices_Type.removekey(KeyToTest);
								Notices_IconSubstyle.removekey(KeyToTest);
								Notices_Login.removekey(KeyToTest);
								Notices_Title.removekey(KeyToTest);
								Notices_Message.removekey(KeyToTest);
								Notices_JoinLink.removekey(KeyToTest);
								Notices_Date.removekey(KeyToTest);
							} else {
								KeyToTest += 1;
							}
						}
					}
					
					Notice_Login_ToRemove = "";
					
					for (I, 0, Settings_NoticeCount-1) {
						if (Now - Latest_Notice_Date > Settings_NoticeDuration) {
							Notices_Type.removekey(0);
							Notices_IconSubstyle.removekey(0);
							Notices_Login.removekey(0);
							Notices_Title.removekey(0);
							Notices_Message.removekey(0);
							Notices_JoinLink.removekey(0);
							Notices_Date.removekey(0);
						} else {
							if (I > Notices_Type.count - 1)
								Frame_Notice[I].Visible = False;
							else {
								Frame_Notice[I].Visible = True;
								Quad_Icon[I].Substyle = Notices_IconSubstyle[I];
								Label_Title[I].Value = Notices_Title[I];
								Label_Message[I].Value = Notices_Message[I];
								if (NoticeAgeOut != 1 && Now - Notices_Date[I] > Settings_NoticeDuration*NoticeAgeOut) {
									Frame_Notice[I].RelativeScale = ((Settings_NoticeDuration-Settings_NoticeDuration*NoticeAgeOut) - ((Now - Notices_Date[I]) - Settings_NoticeDuration*NoticeAgeOut))*1. / (Settings_NoticeDuration-Settings_NoticeDuration*NoticeAgeOut)*1.;
								} else {
									Frame_Notice[I].RelativeScale = 1.;
								}
							}
						} 
					}
				}
			}
		}
	--></script>
	""";
	
	declare Layer_Tooltip 					= UILayerCreate();
	declare Layer_Tooltip_DesiredVisible 	= True;
	Layer_Tooltip.IsVisible 				= Layer_Tooltip_DesiredVisible;
	Layer_Tooltip.Type 						= CUILayer::EUILayerType::Normal;
	Layer_Tooltip.ManialinkPage = 
	"""
	<frame id="Frame_Tooltip" posn="0 0 50" hidden="1">
		<label id="Label_Tooltip" 				posn="{{{C_TooltipSizeX/2}}} -2 3" 	sizen="{{{C_TooltipSizeX-4}}} 0" textsize="1" textcolor="ddd" text="SUPER LONG TOOL TIP DE LA MORT POUR TESTER ET VOILA" {{{AlignTc}}} scale="1.07" />
		<quad id="Quad_TooltipBg" 				posn="0 0 0" 	sizen="{{{C_TooltipSizeX}}} 6.6" style="Bgs1" substyle="BgWindow4" colorize="068" opacity="0.95" {{{AlignTl}}} />
	</frame>
	
	<frame id="Frame_ServerInfos" posn="0 0 50" hidden="1">
		<label id="Label_ServerPlayersCount" 	posn="{{{C_TooltipSizeX/2}}} -2 3" 	sizen="{{{C_TooltipSizeX-4}}} 0" textsize="1" textcolor="ddd" text="Players : 0/128" {{{AlignTc}}} />
		<label id="Label_ServerModeName" 		posn="{{{C_TooltipSizeX/2}}} -6 3" 	sizen="{{{C_TooltipSizeX-4}}} 0" textsize="1" textcolor="ddd" text="Mode : Blabla" {{{AlignTc}}} />
		<quad id="Quad_ServerInfosBg" 			posn="0 0 0" 	sizen="{{{C_TooltipSizeX}}} 10.6" style="Bgs1" substyle="BgWindow4" colorize="068" opacity="0.95" {{{AlignTl}}} />
	</frame>
	
	<script><!--
		
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib	
		
		#Const TooltipDuration 	{{{1000}}}
		#Const TooltipDelay 	{{{260}}}
		
		{{{MLLayer_Function}}}
		
		main() {
			
			declare Frame_Tooltip 				<=> (Page.MainFrame.GetFirstChild("Frame_Tooltip") 				as CMlFrame);
			declare Label_Tooltip 				<=> (Page.MainFrame.GetFirstChild("Label_Tooltip") 				as CMlLabel);
			declare Quad_TooltipBg 				<=> (Page.MainFrame.GetFirstChild("Quad_TooltipBg") 			as CMlQuad);
			
			declare Frame_ServerInfos 			<=> (Page.MainFrame.GetFirstChild("Frame_ServerInfos") 			as CMlFrame);
			declare Label_ServerPlayersCount 	<=> (Page.MainFrame.GetFirstChild("Label_ServerPlayersCount") 	as CMlLabel);
			declare Label_ServerModeName 		<=> (Page.MainFrame.GetFirstChild("Label_ServerModeName") 		as CMlLabel);
			declare Quad_ServerInfosBg 			<=> (Page.MainFrame.GetFirstChild("Quad_ServerInfosBg") 		as CMlQuad);
			
			declare Real 	TooltipSizeX for Page;
			
			declare Integer TooltipShowCurrentTime;
			declare Integer LatestShowStart;
			declare Integer LatestDelayStart;
			declare Boolean TooltipNeeded;
			declare Boolean ServerInfosNeeded;
			declare Boolean ToolTipLastUpdate;
			
			TooltipSizeX = {{{C_TooltipSizeX*1.}}};
			
			while(True) {
				yield;				
				
				declare Integer TooltipDelayCurrentTime = Now - LatestDelayStart;
				if (TooltipNeeded && TooltipDelayCurrentTime > TooltipDelay) {
					if (ServerInfosNeeded) 
						Frame_ServerInfos.Visible = True;
					else 
						Frame_Tooltip.Visible = True;
				} else if (PendingEvents.count != 0 || ToolTipLastUpdate) {
					Frame_ServerInfos.Visible = False;
					Frame_Tooltip.Visible = False;
					ToolTipLastUpdate = False;
				} 
				
				if (PendingEvents.count == 0) continue;
				
				foreach(Event in PendingEvents) {			
					switch(Event.Type) {	
						case CMlEvent::Type::PluginCustomEvent: {	
							if (Event.PluginCustomEventType == "Layer_Tooltip_Needed") {
								TooltipNeeded = True;
								LatestDelayStart = Now;
								if (Label_Tooltip.Value != Event.PluginCustomEventData[0]) {
									TooltipSizeX = Label_Tooltip.ComputeWidth(Event.PluginCustomEventData[0]) + 4.;
									Quad_TooltipBg.Size.X = TooltipSizeX;
									if(TooltipSizeX > 90.) TooltipSizeX = 90.;
									Label_Tooltip.Size.X = TooltipSizeX-4;
									Label_Tooltip.RelativePosition.X = TooltipSizeX*0.5;
									ServerInfosNeeded = False;
									Label_Tooltip.Value = Event.PluginCustomEventData[0];
									Frame_Tooltip.RelativePosition.X = TextLib::ToReal(Event.PluginCustomEventData[1])-TooltipSizeX*0.96;
									Frame_Tooltip.RelativePosition.Y = TextLib::ToReal(Event.PluginCustomEventData[2]);
								}
							} else if (Event.PluginCustomEventType == "Layer_Tooltip_ServerInfosNeeded") {
								TooltipSizeX = {{{C_TooltipSizeX*1.}}};
								Quad_ServerInfosBg.Size.X = TooltipSizeX;
								TooltipNeeded = True;
								LatestDelayStart = Now;
								ServerInfosNeeded = True;
								Label_ServerPlayersCount.Value = Event.PluginCustomEventData[0];
								Label_ServerModeName.Value = Event.PluginCustomEventData[1];
								Frame_ServerInfos.RelativePosition.X = TextLib::ToReal(Event.PluginCustomEventData[2]);
								Frame_ServerInfos.RelativePosition.Y = TextLib::ToReal(Event.PluginCustomEventData[3]);
							} else if (Event.PluginCustomEventType == "Layer_Tooltip_Hide") {
								TooltipNeeded = False;
								Label_Tooltip.Value = "";
								ToolTipLastUpdate = True;
							} 						
						}
					}
				}
			}
		}
	--></script>
	""";
	
	declare Layer_DialogBox 				= UILayerCreate();
	declare Layer_DialogBox_DesiredVisible 	= True;
	Layer_DialogBox.IsVisible 				= Layer_DialogBox_DesiredVisible;
	Layer_DialogBox.Type 					= CUILayer::EUILayerType::Normal;
	Layer_DialogBox.ManialinkPage = 
	"""	
	<frame id="Frame_DialogBox" 				posn="0 14 75" hidden="1">
		
		<label id="Label_DialogBox" 			posn="0 -4 3" sizen="{{{(DialogBoxSizeX-6)}}} 0" style="TextInfoSmall" text="Maxi longue question pour la super boite de dialogue qui tue yes yes yo OOOOPPPPLLLL____" autonewline="1" appendellipsis="1" maxline="2"  {{{AlignTc}}} />
		<label id="Label_ChoiceOk" 				posn="0 -{{{(DialogBoxSizeY-4)}}} 4"  hidden="1" style="CardButtonMediumSelector" text="Ok" scriptevents="1"  {{{AlignBc}}}  />
		
		<frame id="Frame_DialogBoxChoice" 		posn="0 -{{{DialogBoxSizeY-4}}} 4" >
			<label id="Label_ChoiceTrue" 		posn="-30 0"  	style="CardButtonMediumSelector" 	text="Yes" 		scriptevents="1"  	{{{AlignBc}}} />
			<label id="Label_ChoiceFalse" 		posn="30 0"  	style="CardButtonMediumSelector" 	text="No" 		scriptevents="1" 	{{{AlignBc}}} />
		</frame>
		
		<quad id="Quad_DialogBoxBgGlow" 		posn="0 4.25 1" 					sizen="{{{DialogBoxSizeX+6.5}}} 8" 					style="Bgs1InRace" substyle="BgGlow2" {{{AlignTc}}} scriptevents="1" />
		<quad id="Quad_DialogBoxBg" 			posn="0 0 0" 						sizen="{{{DialogBoxSizeX}}} {{{DialogBoxSizeY}}}" 	style="Bgs1InRace" substyle="BgWindow2" {{{AlignTc}}} scriptevents="1" />
		<quad id="Quad_DialogBoxBgMetalBar" 	posn="0 -{{{DialogBoxSizeY}}} 1"	sizen="{{{DialogBoxSizeX}}} 2" 						style="Bgs1InRace" substyle="BgMetalBar" {{{AlignTc}}} scriptevents="1" />
		
		<quad id="Quad_ModalBg" 				posn="0 -14 -0.1" sizen="320 180" {{{AlignCc}}} scriptevents="1" bgcolor="000" opacity="0.9" />
		
	</frame>
	
	<script><!--
		
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib	
		
		{{{MLLayer_Function}}}
		
		main() {
			
			declare Boolean DialogBoxNeeded for Page;
			
			declare Frame_DialogBox 	<=> (Page.MainFrame.GetFirstChild("Frame_DialogBox") 	as CMlFrame);
			declare Label_DialogBox 	<=> (Page.MainFrame.GetFirstChild("Label_DialogBox") 	as CMlLabel);
			declare Label_ChoiceOk 		<=> (Page.MainFrame.GetFirstChild("Label_ChoiceOk") 	as CMlLabel);
			declare Label_ChoiceTrue 	<=> (Page.MainFrame.GetFirstChild("Label_ChoiceTrue") 	as CMlLabel);
			declare Label_ChoiceFalse 	<=> (Page.MainFrame.GetFirstChild("Label_ChoiceFalse") 	as CMlLabel);

			declare Text DialogBoxType;
			
			while(True) {
				yield;				
		
				if (PendingEvents.count == 0) continue;
				foreach(Event in PendingEvents) {			
					switch(Event.Type) {	
					
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							if(DialogBoxNeeded) {
								if (Event.Control == Label_ChoiceTrue) {
									SendCustomEvent("DialogBox_Choice", [DialogBoxType, "True"]);
									DialogBoxNeeded = False;
								} else if (Event.Control == Label_ChoiceFalse) {
									SendCustomEvent("DialogBox_Choice", [DialogBoxType, "False"]);
									DialogBoxNeeded = False;
								} else if (Event.Control == Label_ChoiceOk) {
									DialogBoxNeeded = False;
								}
							}
						}
						
						case CMlEvent::Type::KeyPress: {
							if(DialogBoxNeeded) {
								if (Event.KeyName == "Return") { 	
									SendCustomEvent("DialogBox_Choice", [DialogBoxType, "True"]);
									DialogBoxNeeded = False;
								} else if (Event.KeyName == "Escape") { 	
									SendCustomEvent("DialogBox_Choice", [DialogBoxType, "False"]);
									DialogBoxNeeded = False;
								}
							}
						}
						
						case CMlEvent::Type::PluginCustomEvent: {	
							if (Event.PluginCustomEventType == "Layer_DialogBox_Needed") {
								DialogBoxNeeded = True;
								DialogBoxType = Event.PluginCustomEventData[0];
								Label_DialogBox.Value = Event.PluginCustomEventData[1];
								Label_ChoiceOk.Visible = Event.PluginCustomEventData.count == 3;
								Label_ChoiceTrue.Visible = Event.PluginCustomEventData.count != 3;
								Label_ChoiceFalse.Visible = Event.PluginCustomEventData.count != 3;
								if (Event.PluginCustomEventData.count == 3) {
									if (Event.PluginCustomEventData[2] == "") 	Label_ChoiceOk.Value = _("Ok");
									else 										Label_ChoiceOk.Value = Event.PluginCustomEventData[2];
								} else if (Event.PluginCustomEventData.count > 3) {
									Label_ChoiceTrue.Focus();
									if (Event.PluginCustomEventData[2] == "") 	Label_ChoiceFalse.Value = _("Ok");
									else  										Label_ChoiceTrue.Value = Event.PluginCustomEventData[2];
									if (Event.PluginCustomEventData[3] == "") 	Label_ChoiceFalse.Value = _("Cancel");
									else			 							Label_ChoiceFalse.Value = Event.PluginCustomEventData[3];
								} else {
									Label_ChoiceTrue.Value = _("Ok");
									Label_ChoiceFalse.Value = _("Cancel");
								}
							}
						}
					}
				}

				Frame_DialogBox.Visible = DialogBoxNeeded;
					
			}
		}
	--></script>
	""";
	
	declare Text 	AvatarsUrl 						= """file://Avatars/""";
	declare Boolean Layer_LocalUser_DesiredVisible 	= False;
	declare Boolean Layer_LocalUser_ForceUpdate 	= False;
	declare Layer_LocalUser 						= UILayerCreate();
	Layer_LocalUser.Type 							= CUILayer::EUILayerType::Normal;
	Layer_LocalUser.IsVisible 						= False;
	Layer_LocalUser.ManialinkPage = 
	"""
	<frame id="Frame_LocalUserHeader" hidden="1" posn="{{{(22+XGlobalOffset)*ScaleChat/0.78}}} 82.25 {{{LayerPosZ_Buddies + LayerPosZ_OffsetOthers}}}" scale="{{{ScaleHeader*ScaleChat}}}">
		
		<quad id="Quad_MyHeaderBgImg"			posn="-2.93 3.25 2" sizen="{{{168/ScaleHeader+0.4}}} 27" image="{{{ImgSrc}}}/bg-header-chat.dds" {{{AlignTl}}} hidden="1" />
		<quad id="Quad_MyHeaderBg" 				posn="-3.1 3.25 1" 	sizen="{{{170.25/ScaleHeader}}} 29.5" {{{LocalUserHeaderBgStyle}}} {{{AlignTl}}} hidden="1" />
		<quad id="Quad_MyHeaderBgBlack" 		posn="-3.1 3.25 0" 	sizen="{{{170/ScaleHeader}}} 29" {{{MyHeaderBgBlackStyle}}} {{{AlignTl}}} />
		<quad id="Quad_LocalUserListBgTitle" 	posn="-7 1.8 2" 	sizen="195 {{{1./ScaleChat}}}" bgcolor="5cf" {{{AlignTl}}} scriptevents="1" hidden="0" />	
		
		<frame posn="0 -2">
			<quad id="Quad_MyPicture" 				posn="0.5 .25 3" sizen="21 21" image="{{{AvatarsUrl}}}{{{LocalUser.Login}}}/Default" {{{AlignTl}}} opacity="0.9" />
			<frame id="Frame_LocalUserInfos" posn="24.5 0.75">
				<label id="Label_MyName" posn="8. -3.15 3" sizen="{{{128/GlobalTextRatio}}} 6" scriptevents="1" text="LOCAL USER NAME" {{{TextBig}}} textsize="4" {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" />
				<label id="Label_MyServerName" posn="8. -17 3" sizen="{{{111/GlobalTextRatio}}} 0" scriptevents="1" text="LOCAL USER SERVER NAME" textsize="2"  {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" />	
				<entry id="Entry_MyStatus"  posn="8. -10.33 3" sizen="111 7.25"  default="MY STATUS" {{{AlignCl}}} scriptevents="1" />
				<label id="Label_MyConnection" hidden="1" posn="8.5 -11 3" text="LOCAL USER CONNEXION (?)" textcolor="c90" textsize="2"  {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" />
				<quad id="Quad_MyStatus" posn="0.5 -10.5 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeM}}} {{{AlignCl}}} image="{{{ImgSrc}}}/buddy-info.dds" imagefocus="{{{ImgSrc}}}/buddy-info-on.dds" />
				<quad id="Button_MyCopyServerLink" scriptevents="1" posn="0.5 -17.25 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeM}}} {{{AlignCl}}} image="{{{ImgSrc}}}/buddy-copy-serverlink.dds" imagefocus="{{{ImgSrc}}}/buddy-copy-serverlink-on.dds" />
				<quad id="Button_ModeServerList" scriptevents="1" posn="0.5 -17.25 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeM}}} {{{AlignCl}}} image="{{{ImgSrc}}}/buddy-mode-serverlist.dds" imagefocus="{{{ImgSrc}}}/buddy-mode-serverlist-on.dds" />
				<quad id="Quad_MyShow" posn="0 -3.66 3" substyle="GenericButton" opacity="{{{IconOpacity}}}" style="Icons64x64_1" {{{IconSizeS}}} {{{AlignCl}}} />
			</frame>
		</frame>
		
	</frame>
		
	<script><!--
		
		#Include "TextLib" as TextLib
		
		{{{MLLayer_Function}}}
		main() {
			
			declare Text LocalUserCurrentServerName 	for Page;
			declare Text LocalUserCurrentServerLogin 	for Page;
			declare Text LocalUserDisplayedStatus 		for Page;
			declare Text LocalUserCurrentPresence 		for Page;
			
			declare Frame_LocalUserHeader 		<=> (Page.MainFrame.GetFirstChild("Frame_LocalUserHeader") 		as CMlFrame);
			declare Label_MyName 				<=> (Page.MainFrame.GetFirstChild("Label_MyName") 				as CMlLabel);
			declare Label_MyServerName 			<=> (Page.MainFrame.GetFirstChild("Label_MyServerName") 		as CMlLabel);
			declare Button_MyCopyServerLink 	<=> (Page.MainFrame.GetFirstChild("Button_MyCopyServerLink") 	as CMlQuad);
			declare Button_ModeServerList 		<=> (Page.MainFrame.GetFirstChild("Button_ModeServerList") 		as CMlQuad);
			declare Quad_MyShow 				<=> (Page.MainFrame.GetFirstChild("Quad_MyShow") 				as CMlQuad);
			declare Quad_MyHeaderBg 			<=> (Page.MainFrame.GetFirstChild("Quad_MyHeaderBg") 			as CMlQuad);
			declare Entry_MyStatus 				<=> (Page.MainFrame.GetFirstChild("Entry_MyStatus") 			as CMlEntry);
			
			declare Boolean InitStatus 			= True;
			declare Boolean StatusHasChanged 	= False;
			
			declare Integer LatestAnimStart;
			declare Integer AnimCurrentTime;
			declare Boolean AnimIsShowing 		= True;	
			declare Real AnimDuration 			= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
			declare Real AnimDurationBounce 	= {{{C_ShowAnimDurationY*C_ShowAnimDurationRatioBounce*ScaleChat/0.78}}};
			declare Real AnimOffset 			= {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}};
			
			while(True){
				yield;
				
				if (!PageIsVisible) continue;		
				
				AnimCurrentTime = Now - LatestAnimStart;
				if (AnimCurrentTime < AnimDuration) {
					if (AnimIsShowing) {
						Frame_LocalUserHeader.Visible = True;
						if (AnimCurrentTime < AnimDurationBounce) {
							AnimOffset = {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
						} else { 
							AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
						}
						Frame_LocalUserHeader.RelativePosition.X = {{{(22+XGlobalOffset)*ScaleChat/0.78}}} - AnimOffset; 
					} else {
						AnimOffset = {{{C_HideAnimOffsetStart}}} + ({{{C_HideAnimOffsetEnd*ScaleChat/0.78}}} - {{{C_HideAnimOffsetStart}}}) * AnimCurrentTime/AnimDuration;
						Frame_LocalUserHeader.RelativePosition.Y = 82.25 + AnimOffset; 
						Frame_LocalUserHeader.RelativePosition.X = {{{(22+XGlobalOffset)*ScaleChat/0.78}}} - AnimOffset; 
					}
				} else {
					if (AnimIsShowing) Frame_LocalUserHeader.RelativePosition.X = {{{(22+XGlobalOffset)*ScaleChat/0.78-C_ShowAnimOffsetEnd}}};
					else 
					{
						Frame_LocalUserHeader.Visible = False;
						Frame_LocalUserHeader.RelativePosition.Y = 82.25;
						Frame_LocalUserHeader.RelativePosition.X = {{{(22+XGlobalOffset)*ScaleChat/0.78}}}*1.; 
					}
				}
				
				if (PendingEvents.count == 0 && AnimCurrentTime > AnimDuration) continue;
				foreach(Event in PendingEvents) {			
					switch(Event.Type) {
				
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							SendCustomEvent("Tooltip_Needed", [""]);
							if (Event.Control == Button_MyCopyServerLink) {
								SendCustomEvent("ServerCopyLink_Click", [""]);
							} else if (Event.Control == Button_ModeServerList || Event.Control == Label_MyServerName) {
								SendCustomEvent("Buddies_ModeServerList_Click", ["1"]);
							}
						}
						
						case CMlEvent::Type::EntrySubmit: {								
							if (Event.Control == Entry_MyStatus) {
								declare Text TrimedStatus = TextLib::Trim(Entry_MyStatus.Value);
								declare Text CheckedStatus = TextLib::SubString(TrimedStatus, 0, {{{C_StatusMaxLength}}});
								SendCustomEvent("LocalUser_EnteredNewStatus", [CheckedStatus]);
							}
						}
						
						case CMlEvent::Type::PluginCustomEvent: {								
							if (Event.PluginCustomEventType == "StatusChange") {
								StatusHasChanged = True;
							} else if (Event.PluginCustomEventType == "LocalUser_AnimStart") {
								if (Event.PluginCustomEventData[0] == "Show") {
									AnimDuration = {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing = True;
									AnimOffset = {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart = Now;
								} else if (Event.PluginCustomEventData[0] == "Hide") {
									AnimDuration = {{{C_HideAnimDuration}}};
									AnimIsShowing = False;
									AnimOffset = 0.;
									LatestAnimStart = Now;
								}
							}				
						}
						
						case CMlEvent::Type::MouseOver: {	
							if (Event.Control == Button_MyCopyServerLink)
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose(" %1 ", _("Copy your server link to clipboard"))]);
						}
						
						case CMlEvent::Type::MouseOut: 	
							SendCustomEvent("Tooltip_Needed", [""]);
					}
				}
				
				Label_MyName.Value = LocalUser.Name;
				
				if (InitStatus || StatusHasChanged) {
					Entry_MyStatus.Value = LocalUserDisplayedStatus;
					InitStatus = False;
					StatusHasChanged = False;
				}
				
			
				if (LocalUserCurrentPresence == "{{{PresenceShowSystemText_Available}}}") { 
					Quad_MyHeaderBg.Colorize = {{{CardBgColorAvailable}}}; // 0e2 
					Quad_MyShow.Substyle = "LvlGreen";
				} 
				else if (LocalUserCurrentPresence == "{{{PresenceShowSystemText_Busy}}}") { 
					Quad_MyHeaderBg.Colorize = {{{CardBgColorBusy}}}; // e11 
					Quad_MyShow.Substyle = "LvlRed";
				}  
				else if (LocalUserCurrentPresence == "{{{PresenceShowSystemText_Away}}}") { 
					Quad_MyHeaderBg.Colorize = {{{CardBgColorAway}}}; // fd1	 
					Quad_MyShow.Substyle = "LvlYellow";
				} else {
					Quad_MyHeaderBg.Colorize = {{{CardBgColorOfflineOff}}}; // 333	 
					Quad_MyShow.Substyle = "GenericButton";
				}
				
				if (LocalUserCurrentServerLogin == "") {
					Label_MyServerName.Value = _("Not currently playing. Click to see the Friends Server List."); 
					Button_MyCopyServerLink.Visible = False;
					Button_ModeServerList.Visible = True;
				} else {
					Label_MyServerName.Value = LocalUserCurrentServerName;
					Button_MyCopyServerLink.Visible = True;
					Button_ModeServerList.Visible = False;
				}		
			}
		}
	--></script>
	""";	
	
	declare Boolean Layer_Conversation_DesiredVisible 	= True;
	declare Boolean Layer_Conversation_PreviousVisible 	= Layer_Conversation_DesiredVisible;
	declare Layer_Conversation 							= UILayerCreate();
	Layer_Conversation.Type 							= CUILayer::EUILayerType::Normal;
	Layer_Conversation.IsVisible						= False;
	Layer_Conversation.ManialinkPage = 
	"""
	<framemodel id="Framemodel_MessageFromMe">
		<label id="Label_SenderName" 		posn="3 -1.33 1" 		text="MyName + Time" 	sizen="{{{123/(GlobalTextRatio*0.8)}}} 7" 	{{{AlignTl}}} textsize="2" textcolor="fff" opacity="0.66" scale="{{{GlobalTextRatio*0.8}}}"  />
		<label id="Label_SenderDate" 		posn="146.5 -1.33 1" 	text="XXXX/XX/XX" 		sizen="{{{20/(GlobalTextRatio*0.8)}}} 7" 	{{{AlignTr}}} textsize="2" textcolor="000" opacity="1." scale="{{{GlobalTextRatio*0.8}}}"  />
		<label id="Label_SenderMessage" 	posn="3 -10 1" 			text="Message" 			sizen="{{{143/GlobalTextRatio}}} 0" 		{{{AlignBl}}} textsize="2" textcolor="fff"	 			  scale="{{{GlobalTextRatio}}}" />
		<quad id="Button_CopyMessage"  		posn="147 -9 1" 								sizen="3.25 3.25" 							{{{AlignBr}}} style="Icons64x64_1" 		   opacity="0.66" image="{{{ImgSrc}}}/buddy-copy-serverlink.dds" imagefocus="{{{ImgSrc}}}/buddy-copy-serverlink-on.dds" scriptevents="1"  hidden="1" />
		<quad id="Quad_MessageBgFromMe"  	posn="1 0 0" 									sizen="147 11.25"  							{{{AlignTl}}} {{{MyMessagesBgStyle}}}  scriptevents="1" />
	</framemodel>
	
	<framemodel id="Framemodel_MessageFromBuddy">
		<label id="Label_SenderName" 		posn="20 -1.33 1" 		text="BuddyName + time"	sizen="{{{123/(GlobalTextRatio*0.8)}}} 7" 	{{{AlignTl}}} textsize="2" textcolor="fff" opacity="0.66" scale="{{{GlobalTextRatio*0.8}}}" />
		<label id="Label_SenderDate" 		posn="164 -1.33 1" 		text="MyName + Time" 	sizen="{{{20/(GlobalTextRatio*0.8)}}} 7" 	{{{AlignTr}}} textsize="2" textcolor="000" opacity="1." scale="{{{GlobalTextRatio*0.8}}}" />
		<label id="Label_SenderMessage" 	posn="20 -10 1" 		text="Message" 			sizen="{{{143/GlobalTextRatio}}} 0"			{{{AlignBl}}} textsize="2" textcolor="fff"  			  scale="{{{GlobalTextRatio}}}" />
		<quad id="Button_CopyMessage"  		posn="163.5 -9 1"  								sizen="3.25 3.25" 							{{{AlignBr}}} style="Icons64x64_1" 		   opacity="0.66" image="{{{ImgSrc}}}/buddy-copy-serverlink.dds" imagefocus="{{{ImgSrc}}}/buddy-copy-serverlink-on.dds" scriptevents="1" hidden="1" />
		<quad id="Quad_MessageBgFromBuddy" 	posn="165 0 0" 									sizen="147 11.25"   						{{{AlignTr}}} {{{BuddyMessagesBgStyle}}} scriptevents="1" />
	</framemodel>
	
	<frame clip="True" clipposn="92.5 20" clipsizen="136.4 140">
		<frame id="Frame_Conversation" hidden="1" posn="{{{(XConversationPos+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}} {{{YConversationPos+YGlobalOffset}}} {{{LayerPosZ_Buddies + LayerPosZ_OffsetOthers}}}" scale="{{{ScaleChat}}}">
			
			<frame posn="7 0 0">
				<quad id="Quad_MainWindowBg" 					posn="-7 3.5 0" 					sizen="195 {{{YSizeChat}}}" {{{MainWindowBgStyle}}} {{{AlignTl}}} scriptevents="1" />	
				<quad id="Quad_BuddiesListBgMetalBar" 			posn="-7 -{{{YSizeChat-3.75}}} 2" 	sizen="195 {{{1./ScaleChat}}}" style="Bgs1InRace" substyle="BgMetalBar" {{{AlignTl}}} scriptevents="1" />	
				<quad id="Quad_BuddiesListBgTitle" 				posn="-7 -1.8 2" 					sizen="195 {{{1./ScaleChat}}}" bgcolor="5cf" {{{AlignTl}}} scriptevents="1" hidden="0" />	
				<quad id="Quad_FakeBar" 						posn="80 8 6" 						sizen="195 10" bgcolor="000" {{{AlignTc}}} />
			</frame>
			
			<frame id="Frame_ConversationHeader" 		posn="3.91 -5.5 2" 	scale="{{{ScaleHeader}}}">
				<quad id="Quad_BuddyPicture" 			posn="0.5 0 4" 			sizen="21 21" 							{{{AlignTl}}} opacity="0.8" image="{{{AvatarsUrl}}}{{{LocalUser.Login}}}/Default" />
				<quad id="Quad_BuddyHeaderBgImg" 		posn="-2.93 3.25 2" 	sizen="{{{167/ScaleHeader+0.4}}} 27" 	{{{AlignTl}}} image="{{{ImgSrc}}}/bg-header-chat.dds" hidden="1" />
				<quad id="Quad_BuddyHeaderBg"			posn="-2.93 3.25 1" 	sizen="{{{167/ScaleHeader+0.4}}} 27"	{{{AlignTl}}} {{{ConversationHeaderBgStyle}}} hidden="1" />
				<frame id="Frame_BuddyInfos" 			posn="24.5 0.75">
					<quad 	id="Button_SetAsAlly" 		posn="143.75 -22.02 3"  sizen="5.6 	5.2" 						{{{AlignBr}}} opacity="{{{ButtonsOpacity}}}"   	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-ally-off.dds" imagefocus="{{{ImgSrc}}}/buddy-ally-focus.dds" scriptevents="1" />
					<quad 	id="Button_SendMail" 		posn="152.45 -22.9 3"	sizen="7 	7"   						{{{AlignBr}}} opacity="{{{ButtonsOpacity}}}" 	style="Icons64x64_1" substyle="NewMessage" scriptevents="1" />
					<quad 	id="Button_BuddyDelete" 	posn="160 -22.5 3" 		sizen="6.25 6.25"  						{{{AlignBr}}} opacity="{{{ButtonsOpacity}}}"  	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-delete-off.dds" imagefocus="{{{ImgSrc}}}/buddy-delete-focus.dds" scriptevents="1" />
					<frame id="Frame_BuddyInfosLabels" 		posn="19 0">
						<label 	id="Label_BuddyName" 		posn="0. -3.15 3" 		sizen="{{{113/GlobalTextRatio}}} 6" 	{{{AlignCl}}} text="PLAYER NAME" 				textsize="4" 	textcolor="fff"		scale="{{{GlobalTextRatio}}}" {{{TextBig}}} scriptevents="1" />
						<label 	id="Label_BuddyStatus" 		posn="0. -10.33 3" 		sizen="{{{113/GlobalTextRatio}}} 0" 	{{{AlignCl}}} text="BUDDY STATUS" 				textsize="2" 	textcolor="c90" 	scale="{{{GlobalTextRatio}}}" />
						<label 	id="Label_BuddyServerName" 	posn="0. -17 3" 		sizen="{{{113/GlobalTextRatio}}} 0" 	{{{AlignCl}}} text="BUDDY SERVER NAME" 			textsize="2"  						scale="{{{GlobalTextRatio}}}" scriptevents="1" />	
					</frame>
					<quad 	id="Quad_BuddyShow" 		posn="0 -3.66 3"   		{{{IconSizeS}}} 					{{{AlignCl}}} opacity="{{{IconOpacity}}}" 		style="Icons64x64_1" substyle="GenericButton"  scriptevents="1" hidden="1" />
					<quad 	id="Quad_BuddyInfos" 		posn="0.5 -10.5 3"  	{{{IconSizeM}}} 					{{{AlignCl}}} opacity="{{{ButtonsOpacity}}}"  	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-info.dds" 		hidden="1"  />
					<quad 	id="Button_BuddyServerJoin"	posn="0.5 -10.5 3" 		{{{IconSizeXXL}}} 					{{{AlignCl}}} opacity="{{{ButtonsOpacity}}}"  	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-join.dds" imagefocus="{{{ImgSrc}}}/buddy-join-on.dds" scriptevents="1" />
				</frame>
			</frame>
		
			<frame id="Frame_ConversationLines" posn="0 -15 1"> """;
				// MESSAGES FRAME : Generating the From Me & From My Buddy Messages
				for(I, 1, C_DisplayedMessageCount) {
					Layer_Conversation.ManialinkPage ^= """<frameinstance modelid="Framemodel_MessageFromMe" id="Frame_MessageFromMe{{{I}}}" posn="2 -{{{0.66 + CardMessages*I}}}"/>""";
				}								
				for(I, 1, C_DisplayedMessageCount) {
					Layer_Conversation.ManialinkPage ^= """<frameinstance modelid="Framemodel_MessageFromBuddy" id="Frame_MessageFromBuddy{{{I}}}" posn="3 -{{{0.66 + CardMessages*I}}}"/>""";
				}			
				Layer_Conversation.ManialinkPage ^= """
			</frame>
			
			<frame posn="{{{(171.5+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}} -{{{YSizeChat-8.5-YGlobalOffset}}} 11">
				<quad id="Button_Previous" hidden="0" posn="-2.75 -5 0.1" sizen="8 8" {{{AlignCc}}} style="Icons64x64_1" substyle="ArrowDown" scriptevents="1"/>
				<quad id="Button_Next" hidden="0" posn="2.75 -5 0.1" sizen="8 8" {{{AlignCc}}} style="Icons64x64_1" substyle="ArrowUp" scriptevents="1"/>
			</frame>
			
			<frame id="Frame_Composer" posn="0 -{{{YSizeChat-2}}} 2">
				<label id="Label_ComposerInfos" posn="3 6.4 3" sizen="{{{152/GlobalTextRatio}}} 7" textsize="2" textcolor="666" {{{AlignCl}}} scriptevents="1" scale="{{{GlobalTextRatio}}}" />	
				<entry id="Entry_Composer" posn="3 7.1 3" sizen="152 7" textsize="2" {{{AlignCl}}} scriptevents="1" autonewline="0" />	
				<quad id="Quad_ComposerBg" posn="1.3 1.45 2" sizen="167.2 11" {{{ChatEntryBgStyle}}} {{{AlignBl}}} />
				<label hidden="1" id="Button_Submit" posn="118 -5 0.2" sizen="{{{35/(GlobalTextRatio*0.8)}}} 7" {{{AlignCr}}} style="CardButtonMedium" scriptevents="1" text="Send" scale="{{{GlobalTextRatio*0.8}}}" />
			</frame>
		
		</frame>
	</frame>
	
	<script><!-- 
		
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		{{{MLLayer_Function}}}
		
		main() {
			
			declare Text 		LocalUserCurrentServerLogin 			for Page;
			declare CBuddy 		SelectedBuddy 							for Page;
			declare Text 		SelectedBuddyLogin 						for Page;
			declare Text 		SelectedBuddyShow 						for Page;
			declare Text 		SelectedBuddyName 						for Page;
			declare Text 		SelectedBuddyStatus 					for Page;
			declare Text 		SelectedBuddyServerLogin 				for Page;
			declare Text 		SelectedBuddyServerName 				for Page;
			declare Text 		SelectedBuddyServerModeName 			for Page;
			declare Text 		SelectedBuddyServerModeStatus 			for Page;
			declare Text 		SelectedBuddyServerJoinLink 			for Page;
			declare Text 		SelectedBuddyServerModePlayerCountInfo 	for Page;
			declare Boolean 	SelectedBuddyServer_IsFull 				for Page;
			declare Boolean 	SelectedBuddyIsPlaying 					for Page;
			declare Boolean 	SelectedBuddyIsAlly 					for Page;
			declare Text[] 		SelectedBuddyHistory_Message 			for Page;
			declare Boolean[] 	SelectedBuddyHistory_IsFromMe 			for Page;
			declare Text[] 		SelectedBuddyHistory_Date 				for Page;
			
			declare Frame_Conversation 		<=> (Page.MainFrame.GetFirstChild("Frame_Conversation") 	as CMlFrame);
			declare Button_SetAsAlly 		<=> (Page.MainFrame.GetFirstChild("Button_SetAsAlly") 		as CMlQuad);
			declare Label_BuddyName 		<=> (Page.MainFrame.GetFirstChild("Label_BuddyName") 		as CMlLabel);
			declare Label_BuddyStatus 		<=> (Page.MainFrame.GetFirstChild("Label_BuddyStatus") 		as CMlLabel);
			declare Label_BuddyServerName 	<=> (Page.MainFrame.GetFirstChild("Label_BuddyServerName") 	as CMlLabel);
			declare Button_BuddyServerJoin 	<=> (Page.MainFrame.GetFirstChild("Button_BuddyServerJoin") as CMlQuad);
			declare Quad_MainWindowBg 		<=> (Page.MainFrame.GetFirstChild("Quad_MainWindowBg") 		as CMlQuad);
			declare Quad_BuddyShow 			<=> (Page.MainFrame.GetFirstChild("Quad_BuddyShow") 		as CMlQuad);
			declare Quad_BuddyPicture 		<=> (Page.MainFrame.GetFirstChild("Quad_BuddyPicture")	 	as CMlQuad);
			declare Quad_BuddyHeaderBg 		<=> (Page.MainFrame.GetFirstChild("Quad_BuddyHeaderBg") 	as CMlQuad);
			declare Button_Previous 		<=> (Page.MainFrame.GetFirstChild("Button_Previous") 		as CMlQuad);
			declare Button_Next 			<=> (Page.MainFrame.GetFirstChild("Button_Next") 			as CMlQuad);
			declare Label_ComposerInfos 	<=> (Page.MainFrame.GetFirstChild("Label_ComposerInfos") 	as CMlLabel);
			declare Entry_Composer 			<=> (Page.MainFrame.GetFirstChild("Entry_Composer") 		as CMlEntry);
			
			declare CMlFrame[] 	Frame_MessageFromMe;
			declare CMlFrame[] 	Frame_MessageFromBuddy;	
			declare CMlLabel[] 	Label_SenderNameFromMe;
			declare CMlLabel[] 	Label_SenderDateFromMe;
			declare CMlLabel[] 	Label_SenderMessageFromMe;
			declare CMlQuad[] 	Button_CopyMessageFromMe;
			declare CMlQuad[] 	Quad_MessageBgFromMe;
			declare CMlLabel[]	Label_SenderNameFromBuddy;
			declare CMlLabel[] 	Label_SenderDateFromBuddy;
			declare CMlLabel[] 	Label_SenderMessageFromBuddy;
			declare CMlQuad[] 	Button_CopyMessageFromBuddy;
			declare CMlQuad[] 	Quad_MessageBgFromBuddy;
			
			for(I, 1, {{{C_DisplayedMessageCount}}}) {
				Frame_MessageFromMe				.add( (Page.MainFrame.GetFirstChild("Frame_MessageFromMe"^I) 				as CMlFrame) );
				Label_SenderNameFromMe			.add( (Frame_MessageFromMe[I-1].GetFirstChild("Label_SenderName") 			as CMlLabel) );
				Label_SenderDateFromMe			.add( (Frame_MessageFromMe[I-1].GetFirstChild("Label_SenderDate") 			as CMlLabel) );
				Label_SenderMessageFromMe		.add( (Frame_MessageFromMe[I-1].GetFirstChild("Label_SenderMessage") 		as CMlLabel) );
				Button_CopyMessageFromMe		.add( (Frame_MessageFromMe[I-1].GetFirstChild("Button_CopyMessage") 		as CMlQuad) );
				Quad_MessageBgFromMe			.add( (Frame_MessageFromMe[I-1].GetFirstChild("Quad_MessageBgFromMe") 		as CMlQuad) );
				
				Frame_MessageFromBuddy			.add( (Page.MainFrame.GetFirstChild("Frame_MessageFromBuddy"^I) 			as CMlFrame) );
				Label_SenderNameFromBuddy		.add( (Frame_MessageFromBuddy[I-1].GetFirstChild("Label_SenderName") 		as CMlLabel) );
				Label_SenderDateFromBuddy		.add( (Frame_MessageFromBuddy[I-1].GetFirstChild("Label_SenderDate") 		as CMlLabel) );
				Label_SenderMessageFromBuddy	.add( (Frame_MessageFromBuddy[I-1].GetFirstChild("Label_SenderMessage") 	as CMlLabel) );
				Button_CopyMessageFromBuddy		.add( (Frame_MessageFromBuddy[I-1].GetFirstChild("Button_CopyMessage") 		as CMlQuad) );
				Quad_MessageBgFromBuddy			.add( (Frame_MessageFromBuddy[I-1].GetFirstChild("Quad_MessageBgFromBuddy") as CMlQuad) );
			}	
			
			declare Integer PageIndex;
			declare Integer PreviousPageIndex;
			declare Integer CopyMessageToShow_Id;
			declare Vec3	BuddyMessagesBgColor;
				
			declare Integer LatestAnimStart;
			declare Integer AnimCurrentTime;
			declare Boolean AnimIsShowing 		= True;	
			declare Boolean AnimIsShowingAll	= True;
			declare Real 	AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
			declare Real 	AnimDurationBounce 	= {{{C_ShowAnimDurationY*C_ShowAnimDurationRatioBounce*ScaleChat/0.78}}};
			declare Real 	AnimOffset 			= {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}};	
			
			while(True) {
				yield;

				if (!PageIsVisible) continue;
				
				AnimCurrentTime = Now - LatestAnimStart;
				if (AnimCurrentTime < AnimDuration) {
					if (AnimIsShowing) {
						Frame_Conversation.Visible = True;
						if (AnimIsShowingAll) {
							AnimDuration = {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
							if (AnimCurrentTime < AnimDurationBounce) {
								AnimOffset = {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
							} else { 
								AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
							}
							Frame_Conversation.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}} + AnimOffset; 
							Frame_Conversation.RelativePosition.X = {{{(XConversationPos+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}}; 
						} else {
							AnimDuration = {{{C_ShowAnimDurationX*ScaleChat/0.78}}};
							if (AnimCurrentTime < AnimDurationBounce) {
								AnimOffset = {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
							} else { 
								AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
							}
							Frame_Conversation.RelativePosition.X = {{{(XConversationPos+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}} - AnimOffset; 
						}
					} else {
						AnimOffset = {{{C_HideAnimOffsetStart}}} + ({{{C_HideAnimOffsetEnd*ScaleChat/0.78}}} - {{{C_HideAnimOffsetStart}}}) * AnimCurrentTime/AnimDuration;
						Frame_Conversation.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}} + AnimOffset; 
					}
				} else {
					if (AnimIsShowing) {
						Frame_Conversation.RelativePosition.X = {{{(XConversationPos+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78 - C_ShowAnimOffsetEnd}}};
						AnimIsShowingAll = False;
					}
					else { 
						Frame_Conversation.RelativePosition.X = {{{(XConversationPos+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78 - C_HideAnimOffsetEnd*ScaleChat/0.78}}};
						Frame_Conversation.Visible = False;
					}
						Frame_Conversation.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}}; 
				} 
				
				if (PendingEvents.count == 0 && AnimCurrentTime > AnimDuration) continue;
				declare Boolean HistoryHasChanged;
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
					
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							SendCustomEvent("Tooltip_Needed", [""]);
							if (Event.Control == Button_Next) {
								PageIndex += 1;
							} else if (Event.Control == Button_Previous) {
								PageIndex -= 1;
							} else if (Event.Control == Button_BuddyServerJoin && SelectedBuddyIsPlaying) {
								SendCustomEvent("Buddies_ServerJoin_Click", [SelectedBuddyServerJoinLink]);
								// SendCustomEvent("CloseChat_Click", [""]);
							} else if (Event.Control == Label_BuddyServerName && SelectedBuddyIsPlaying) {
								SendCustomEvent("Buddies_ModeServerList_Click", ["1"]);
							} else if (Event.Control == Button_SetAsAlly) {
								SendCustomEvent("SelectedBuddy_SetAsAllyToggle_Click", Text[]);
							} else if (Event.Control.ControlId == "Button_BuddyDelete") {
								SendCustomEvent("RemoveBuddy", [SelectedBuddyLogin]);
							} else if (Event.Control.ControlId == "Button_SendMail") {
								SendCustomEvent("SendMailToBuddy", [SelectedBuddyLogin]);
							} else if (Event.Control == Entry_Composer || Event.Control == Quad_MainWindowBg || Event.Control == Label_ComposerInfos) {
								Label_ComposerInfos	.Visible = False;
								Entry_Composer		.Visible = True;
								Entry_Composer		.StartEdition();
							} else if (Event.Control.ControlId == "Button_CopyMessage") {
								declare IndexInHistory = SelectedBuddyHistory_IsFromMe.count - ({{{C_DisplayedMessageCount}}} * (PageIndex+1)) + CopyMessageToShow_Id;
								if (SelectedBuddyHistory_IsFromMe.count < {{{C_DisplayedMessageCount}}}) 	
									IndexInHistory += {{{C_DisplayedMessageCount}}} - SelectedBuddyHistory_IsFromMe.count;		
								SendCustomEvent("CopyText_Click", [SelectedBuddyHistory_Message[IndexInHistory]]);
							}
						}	
						
						case CMlEvent::Type::EntrySubmit : {
							if (Event.Control == Entry_Composer) {
								if (TextLib::Length(Entry_Composer.Value) > 0) {
									declare Text CheckedMessage = TextLib::Trim(Entry_Composer.Value);
									if (CheckedMessage != "" && CheckedMessage != "$")
										SendCustomEvent("SendMessage", [CheckedMessage]);
									Entry_Composer.Value = "";
								}
								Entry_Composer.StartEdition();
							}
						}
						
						case CMlEvent::Type::PluginCustomEvent: {								
							if (Event.PluginCustomEventType == "HistoryChanged" || Event.PluginCustomEventType == "UpdateHistory" ) {
								HistoryHasChanged = True;
							} else if (Event.PluginCustomEventType == "Conversation_UpdateEntry") {
								if (Event.PluginCustomEventData[0] == "") {
									Label_ComposerInfos.Visible 	= False;
									Entry_Composer.Visible 			= True;
								} else {
									Label_ComposerInfos.Visible 	= True;
									Entry_Composer.Visible 			= False;
									Label_ComposerInfos.Value 		= Event.PluginCustomEventData[0];
								}
							} else if (Event.PluginCustomEventType == "StartEdition") {
								Entry_Composer.StartEdition();
							} else if (Event.PluginCustomEventType == "Conversation_AnimStart") {
								if (Event.PluginCustomEventData[0] == "Show") {
									AnimIsShowingAll 	= False;
									AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing 		= True;
									AnimOffset 			= {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart 	= Now;
									PageIndex 			= 0;
								} else if (Event.PluginCustomEventData[0] == "ShowAll") {
									AnimIsShowingAll 	= True;
									AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing 		= True;
									AnimOffset 			= {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart 	= Now;
									PageIndex 			= 0;
								} else if (Event.PluginCustomEventData[0] == "Hide") {
									AnimDuration 		= {{{C_HideAnimDuration}}};
									AnimIsShowing 		= False;
									AnimOffset 			= 0.;
									LatestAnimStart 	= Now;
								}
							}								
						}

						case CMlEvent::Type::KeyPress: {
							if (Event.KeyName == "Return") {							
								Label_ComposerInfos	.Visible = False;
								Entry_Composer		.Visible = True;
								Entry_Composer		.StartEdition();
							}
						}
						
						case CMlEvent::Type::MouseOver: {	
							if (Event.Control == Button_BuddyServerJoin && SelectedBuddyIsPlaying) 
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Join %1 to play"), SelectedBuddyLogin )]);
							else if (Event.Control.ControlId == "Button_BuddyDelete")
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Delete %1 from your buddies"), SelectedBuddyLogin )]);
							else if (Event.Control == Label_BuddyName)
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Login : %1"), SelectedBuddyLogin )]);
							else if (Event.Control == Quad_BuddyShow)
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("%1 is %2"), SelectedBuddyLogin, GetPresenceDisplayableText(SelectedBuddyShow) )]);
							else if (Event.Control.ControlId == "Button_SendMail")
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Send a mail to %1"), SelectedBuddyLogin )]);
							else if (Event.Control == Button_SetAsAlly) {
								if (SelectedBuddyIsAlly) 
									SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Unset %1 as ally"), SelectedBuddyLogin )]);
								else 
									SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Set %1 as ally"), SelectedBuddyLogin )]);
							} else if (Event.Control.ControlId == "Quad_MessageBgFromBuddy") {
								for(I, 0, {{{C_DisplayedMessageCount}}}-1) {
									if (Event.Control == Quad_MessageBgFromBuddy[I]) {
										Button_CopyMessageFromBuddy[CopyMessageToShow_Id]	.Visible = False;
										Button_CopyMessageFromMe[CopyMessageToShow_Id]		.Visible = False;
										CopyMessageToShow_Id = I;
										Button_CopyMessageFromBuddy[CopyMessageToShow_Id]	.Visible = True;
										break;
									} 
								}
							} else if (Event.Control.ControlId == "Quad_MessageBgFromMe") {
								for(I, 0, {{{C_DisplayedMessageCount}}}-1) {
									if (Event.Control == Quad_MessageBgFromMe[I]) {
										Button_CopyMessageFromMe[CopyMessageToShow_Id]		.Visible = False;
										Button_CopyMessageFromBuddy[CopyMessageToShow_Id]	.Visible = False;
										CopyMessageToShow_Id = I;
										Button_CopyMessageFromMe[CopyMessageToShow_Id]		.Visible = True;
										break;
									} 
								}
							} else if (Event.Control.ControlId == "Button_CopyMessage") {
								SendCustomEvent("Tooltip_Needed", [ _("Copy this message to clipboard") ]);
								if (Event.Control == Button_CopyMessageFromMe[CopyMessageToShow_Id]) {
									Button_CopyMessageFromMe[CopyMessageToShow_Id]			.Visible = True;
									Button_CopyMessageFromBuddy[CopyMessageToShow_Id]		.Visible = False;
								} else if (Event.Control == Button_CopyMessageFromBuddy[CopyMessageToShow_Id]) {
									Button_CopyMessageFromMe[CopyMessageToShow_Id]			.Visible = False;
									Button_CopyMessageFromBuddy[CopyMessageToShow_Id]		.Visible = True;
								}
							} else if (Event.Control == Label_BuddyServerName && SelectedBuddyIsPlaying) {
								SendCustomEvent("Tooltip_ServerInfosNeeded", ["Players : "^SelectedBuddyServerModePlayerCountInfo, "Mode : "^SelectedBuddyServerModeName]);
							}
						}
						
						case CMlEvent::Type::MouseOut: {	
							SendCustomEvent("Tooltip_Needed", [""]);
							if (Event.Control.ControlId == "Quad_MessageBgFromBuddy" || Event.Control.ControlId == "Quad_MessageBgFromMe") {
								Button_CopyMessageFromBuddy[CopyMessageToShow_Id]			.Visible = False;
								Button_CopyMessageFromMe[CopyMessageToShow_Id]				.Visible = False;
							}
						}
					}
				}
				
				declare PageIndexMax = SelectedBuddyHistory_IsFromMe.count / {{{C_DisplayedMessageCount}}};
				declare PageIndexMin = 0;
				if (PageIndex < 0)
					PageIndex = 0;
				else if ( PageIndex > PageIndexMax )
					PageIndex = PageIndexMax;
				if (PageIndex < PageIndexMax) Button_Next		.Substyle = "ArrowUp";
				else Button_Next								.Substyle = "ArrowDisabled";
				if (PageIndex > PageIndexMin) Button_Previous	.Substyle = "ArrowDown";
				else Button_Previous							.Substyle = "ArrowDisabled";
				
				
				// BUDDY NAME
				Label_BuddyName.Value = SelectedBuddyName;
				
				// STATUS : PROTECTION -> PREVENT EMPTY STATUS FROM BUDDIES (OTHER DEVICES)
				if (SelectedBuddyStatus == "")
					Label_BuddyStatus		.Value 			= GetPresenceDisplayableText(SelectedBuddyShow);
				else 
					Label_BuddyStatus		.Value 			= SelectedBuddyStatus;
										
				// SERVER NAME & JOIN BUTTON
				if (SelectedBuddyIsPlaying) {
					Label_BuddyServerName	.Value 			= SelectedBuddyServerName;
					Button_BuddyServerJoin	.ImageUrl 		= "{{{ImgSrc}}}/buddy-join.dds";
					Button_BuddyServerJoin	.ImageUrlFocus	= "{{{ImgSrc}}}/buddy-join-on.dds";
				} else {
					Label_BuddyServerName	.Value 			= "Not currently playing on a server.";
					Button_BuddyServerJoin	.ImageUrl 		= "{{{ImgSrc}}}/buddy-join-off.dds";
					Button_BuddyServerJoin	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-join-off.dds";
				}
					
				// ALLY BUTTON
				if (SelectedBuddyServerLogin != "" && SelectedBuddyServerLogin == LocalUserCurrentServerLogin) {
					Button_SetAsAlly.Visible 					= True;
					if (SelectedBuddyIsAlly) {
						Button_SetAsAlly		.ImageUrl 		= "{{{ImgSrc}}}/buddy-ally-on.dds";
						Button_SetAsAlly		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-ally-on-focus.dds";
					} else {
						Button_SetAsAlly		.ImageUrl 		= "{{{ImgSrc}}}/buddy-ally-off.dds";
						Button_SetAsAlly		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-ally-focus.dds";
					}
				} else Button_SetAsAlly.Visible 				= False;
				
				
				// QUAD BUDDY SHOW
				if (SelectedBuddyShow == "{{{PresenceShowSystemText_Available}}}") { 
					Quad_BuddyShow.Substyle 		= "LvlGreen";
					Quad_BuddyHeaderBg.Colorize 	= {{{CardBgColorAvailable}}}; 
					BuddyMessagesBgColor			= {{{CardBgMessageColorAvailable}}};
				} else if (SelectedBuddyShow == "{{{PresenceShowSystemText_Busy}}}") { 
					Quad_BuddyShow.Substyle 		= "LvlRed"; 
					Quad_BuddyHeaderBg.Colorize 	= {{{CardBgColorBusy}}};
					BuddyMessagesBgColor			= {{{CardBgMessageColorBusy}}};
				} else if (SelectedBuddyShow == "{{{PresenceShowSystemText_Away}}}") { 
					Quad_BuddyShow.Substyle 		= "LvlYellow"; 
					Quad_BuddyHeaderBg.Colorize 	= {{{CardBgColorAway}}};
					BuddyMessagesBgColor			= {{{CardBgMessageColorAway}}};
				} else if (SelectedBuddyShow == "{{{PresenceShowSystemText_Offline}}}") { 
					Quad_BuddyShow.Substyle 		= "GenericButton"; 
					Quad_BuddyHeaderBg.Colorize	 	= <0., 0., 0.>;
					BuddyMessagesBgColor			= {{{CardBgMessageColorOffline}}};
				} 	
				
				// QUAD BUDDY AVATAR PICTURE
				if (SelectedBuddy != Null && SelectedBuddy.CurrentServerLogin == LocalUserCurrentServerLogin) 
					Quad_BuddyPicture.ImageUrl = "{{{AvatarsUrl}}}"^SelectedBuddyLogin^"/Default";
				else
					Quad_BuddyPicture.ImageUrl = "{{{ImgSrc}}}/buddy-defaultavatar.dds";
				
				if (HistoryHasChanged || PageIndex != PreviousPageIndex) {
					PreviousPageIndex = PageIndex;
					
					for (I, 0, {{{C_DisplayedMessageCount}}} -1 ) {		
						declare IndexInHistory = SelectedBuddyHistory_IsFromMe.count - ({{{C_DisplayedMessageCount}}} * (PageIndex+1)) + I;
						if (SelectedBuddyHistory_IsFromMe.count < {{{C_DisplayedMessageCount}}}) 	
							IndexInHistory += {{{C_DisplayedMessageCount}}} - SelectedBuddyHistory_IsFromMe.count;
						if (IndexInHistory < 0 || IndexInHistory >= SelectedBuddyHistory_IsFromMe.count) {
							Frame_MessageFromMe[I]			.Visible 	= False;
							Frame_MessageFromBuddy[I]		.Visible 	= False;									
						} else if (SelectedBuddyHistory_IsFromMe[IndexInHistory]) {
							Frame_MessageFromMe[I]			.Visible 	= True;
							Frame_MessageFromBuddy[I]		.Visible 	= False;								
							Label_SenderNameFromMe[I]		.Value 		= LocalUser.Name^" $z- " ^ TextLib::SubString(SelectedBuddyHistory_Date[IndexInHistory], 11, 8);
							Label_SenderDateFromMe[I]		.Value 		= TextLib::SubString(SelectedBuddyHistory_Date[IndexInHistory], 0, 11);
							Label_SenderMessageFromMe[I]	.Value 		= SelectedBuddyHistory_Message[IndexInHistory];
						} else {
							Frame_MessageFromMe[I]			.Visible 	= False;
							Frame_MessageFromBuddy[I]		.Visible 	= True;
							Label_SenderNameFromBuddy[I]	.Value 		= SelectedBuddyName ^ " $z- " ^ TextLib::SubString(SelectedBuddyHistory_Date[IndexInHistory], 11, 8);
							Label_SenderDateFromBuddy[I]	.Value 		= TextLib::SubString(SelectedBuddyHistory_Date[IndexInHistory], 0, 11);
							Label_SenderMessageFromBuddy[I]	.Value 		= SelectedBuddyHistory_Message[IndexInHistory];
							Quad_MessageBgFromBuddy[I]		.Colorize 	= BuddyMessagesBgColor;
						}
					}
				}
				// END WHILE
			}
		}
	--></script>
	""";	
	
	declare Layer_ServerList_ForceUpdate 		= False;
	declare Layer_ServerList_DesiredVisible 	= False;
	declare Layer_ServerList 					= UILayerCreate();
	Layer_ServerList.Type 						= CUILayer::EUILayerType::Normal;
	Layer_ServerList.IsVisible					= False;
	Layer_ServerList.ManialinkPage = 
	"""
	
	<framemodel id="Framemodel_CardServer" {{{AlignCc}}}>
		<frame posn="-72 0 1">
			<label id="Label_ServerName" 			posn="0 	-2.75 2" 	text="SERVER NAME" 			sizen="{{{133/GlobalTextRatio}}} 7"  	textsize="2" textcolor="fff" {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" />
			<label id="Label_ServerModeInfos" 		posn="4.25 	-7.45 2" 	text="MODENAME:MODESTATUS" 	sizen="{{{128/GlobalTextRatio}}} 7" 	textsize="1" textcolor="666" {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" maxline="1" />
			<quad id="Button_ServerCopyLink" 		posn="3.75 	-7.25 1" 	hidden="1" scriptevents="1" sizen="3.5 3.5" opacity="{{{ButtonsOpacity}}}" {{{AlignCr}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-copy-serverlink.dds" 	imagefocus="{{{ImgSrc}}}/buddy-copy-serverlink-on.dds" />
		</frame>
		<label id="Label_ServerPlayersCount" 	posn="79.5 		-2.5 1" 	text="XXX/120" 				sizen="{{{15/GlobalTextRatio}}} 4" 		textsize="2" textcolor="fff" {{{AlignCr}}} scale="{{{GlobalTextRatio*0.86}}}" />
		<quad id="Button_ServerJoin" 			posn="-76.5		-5 1" 		hidden="1" scriptevents="1" {{{IconSizeL}}} opacity="{{{ButtonsOpacity}}}" {{{AlignCc}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-join.dds" 			imagefocus="{{{ImgSrc}}}/buddy-join-on.dds" />
		<quad id="Button_ServerPrivate" 		posn="80 		-7.1 1" 	hidden="1" scriptevents="1" sizen="4.5 4.5" opacity="{{{ButtonsOpacity}}}" {{{AlignCr}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-private.dds" 			imagefocus="{{{ImgSrc}}}/buddy-private-focus.dds" />
		<quad id="Button_ServerLobby" 			posn="75		-7.1 1" 	hidden="1" scriptevents="1" sizen="4.5 4.5" opacity="{{{ButtonsOpacity}}}" {{{AlignCr}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-lobby.dds" 			imagefocus="{{{ImgSrc}}}/buddy-lobby-focus.dds" />
		<quad id="Button_CardServerBg" 			posn="0 		-5 0" 				   scriptevents="1" sizen="164 {{{CardBuddyBgSizeY}}}" colorize="fff" {{{CardServerBgStyle}}} {{{AlignCc}}} />
	</framemodel>
	
	<frame id="Frame_ServerList" hidden="0" posn="{{{(35+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}} {{{YConversationPos+YGlobalOffset}}} {{{LayerPosZ_Buddies + LayerPosZ_OffsetOthers}}}" scale="{{{ScaleChat}}}">
		
		<frame posn="7 0 0">
			<quad id="Quad_MainWindowBg" 					posn="-7 3.5 0" 					sizen="195 {{{YSizeChat}}}" {{{MainWindowBgStyle}}} {{{AlignTl}}} scriptevents="1" />	
			<quad id="Quad_BuddiesListBgMetalBar" 			posn="-7 -{{{YSizeChat-3.75}}} 2" 	sizen="195 {{{1./ScaleChat}}}" style="Bgs1InRace" substyle="BgMetalBar" {{{AlignTl}}} scriptevents="1" />	
			<quad id="Quad_BuddiesListBgTitle" 				posn="-7 -1.8 2" 					sizen="195 {{{1./ScaleChat}}}" bgcolor="5cf" {{{AlignTl}}} scriptevents="1" hidden="0" />	
		</frame>
		
		<frame id="Frame_ServerListCards" posn="56 -27. 1"> 
			<frameinstance modelid="Framemodel_CardServer" id="Frame_LocalUser_Server" posn="30 -1.6"/>
			<label id="Label_NoBuddyCurrentlyPlaying" posn="29 -50 2" sizen="{{{160/GlobalTextRatio}}}" text="No buddy found." {{{AlignCc}}} textsize="2" textcolor="fff" opacity="0.66" scale="{{{GlobalTextRatio}}}" scriptevents="1" translate="1"/>
			""";

			// BUDDYLIST : Generating the online & offline buddylist
			for(I, 1, C_DisplayedBuddiesCount) {
				Layer_ServerList.ManialinkPage ^= """<frameinstance modelid="Framemodel_CardServer" id="Frame_ServerBuddy{{{I}}}" posn="30 -{{{1.6 + CardBuddySpace*I}}}"/>""";
			}										
			Layer_ServerList.ManialinkPage ^= """
		</frame>
	
	</frame>
	
	<script><!-- 
		
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		{{{MLLayer_Function}}}
		
		main() {
			declare Text[] 		Buddies_Login 						for Page;
			declare Text[] 		Buddies_Presence 					for Page;
			declare Text[] 		Buddies_ServerLogin 				for Page;
			declare Text[] 		Buddies_ServerName 					for Page;
			declare Text[] 		Buddies_ServerModeInfos 			for Page;
			declare Text[] 		Buddies_ServerJoinLink 				for Page;
			declare Text[]		Buddies_ServerPlayersCountInfos 	for Page;
			declare Real[] 		Buddies_ServerPlayersCountRatio 	for Page;
			declare Boolean[]	Buddies_Server_IsPrivate 			for Page;
			declare Boolean[] 	Buddies_Server_IsLobby 				for Page;
			declare Boolean[] 	Buddies_Server_IsFull 				for Page;
			declare Text 		LocalUser_ServerName 				for Page;
			declare Text 		LocalUser_ServerLogin 				for Page;
			declare Text 		LocalUser_ServerPlayersCountInfos 	for Page;
			declare Text 		LocalUser_ServerModeInfos 			for Page;
			declare Text 		LocalUser_ServerJoinLink 			for Page;
			declare Text 		LocalUser_CurrentPresenceShow 		for Page;
			declare Text 		SelectedBuddyLogin 					for Page;
			declare Boolean 	HasSelectedLocalUser 				for Page;
			
			declare Label_NoBuddyCurrentlyPlaying 		<=> (Page.MainFrame.GetFirstChild("Label_NoBuddyCurrentlyPlaying")		as CMlLabel);
			declare Frame_ServerList 					<=> (Page.MainFrame.GetFirstChild("Frame_ServerList") 					as CMlFrame);
			declare Frame_LocalUser_Server 				<=> (Page.MainFrame.GetFirstChild("Frame_LocalUser_Server") 			as CMlFrame);
			declare Label_LocalUser_ServerName 			<=> (Frame_LocalUser_Server.GetFirstChild("Label_ServerName") 			as CMlLabel);
			declare Label_LocalUser_ServerModeInfos 	<=> (Frame_LocalUser_Server.GetFirstChild("Label_ServerModeInfos") 		as CMlLabel);
			declare Label_LocalUser_ServerPlayersCount  <=> (Frame_LocalUser_Server.GetFirstChild("Label_ServerPlayersCount") 	as CMlLabel);
			declare Button_LocalUser_ServerPrivate 		<=> (Frame_LocalUser_Server.GetFirstChild("Button_ServerPrivate")		as CMlQuad);
			declare Button_LocalUser_ServerLobby 		<=> (Frame_LocalUser_Server.GetFirstChild("Button_ServerLobby") 		as CMlQuad);
			declare Button_LocalUser_ServerCopyLink 	<=> (Frame_LocalUser_Server.GetFirstChild("Button_ServerCopyLink") 		as CMlQuad);
			declare Button_LocalUser_CardServerBg 		<=> (Frame_LocalUser_Server.GetFirstChild("Button_CardServerBg") 		as CMlQuad);
			
			declare CMlFrame[] 	Frame_ServerBuddy;
			declare CMlLabel[] 	Label_ServerName;
			declare CMlLabel[] 	Label_ServerModeInfos;
			declare CMlLabel[] 	Label_ServerPlayersCount;
			declare CMlQuad[] 	Button_ServerCopyLink;
			declare CMlQuad[] 	Button_ServerJoin;
			declare CMlQuad[] 	Button_ServerPrivate;
			declare CMlQuad[] 	Button_ServerLobby;
			declare CMlQuad[] 	Button_CardServerBg;			
			
			for(I, 1, {{{C_DisplayedBuddiesCount}}}) {
				Frame_ServerBuddy			.add( (Page.MainFrame.GetFirstChild("Frame_ServerBuddy"^I) 				as CMlFrame) );
				Label_ServerName			.add( (Frame_ServerBuddy[I-1].GetFirstChild("Label_ServerName") 		as CMlLabel) );
				Label_ServerModeInfos		.add( (Frame_ServerBuddy[I-1].GetFirstChild("Label_ServerModeInfos") 	as CMlLabel) );
				Label_ServerPlayersCount	.add( (Frame_ServerBuddy[I-1].GetFirstChild("Label_ServerPlayersCount") as CMlLabel) );
				Button_ServerCopyLink		.add( (Frame_ServerBuddy[I-1].GetFirstChild("Button_ServerCopyLink") 	as CMlQuad) );
				Button_ServerJoin			.add( (Frame_ServerBuddy[I-1].GetFirstChild("Button_ServerJoin") 		as CMlQuad) );
				Button_ServerPrivate		.add( (Frame_ServerBuddy[I-1].GetFirstChild("Button_ServerPrivate") 	as CMlQuad) );
				Button_ServerLobby			.add( (Frame_ServerBuddy[I-1].GetFirstChild("Button_ServerLobby") 		as CMlQuad) );
				Button_CardServerBg			.add( (Frame_ServerBuddy[I-1].GetFirstChild("Button_CardServerBg") 		as CMlQuad) );
			}	
			
			declare Integer LatestAnimStart;
			declare Integer AnimCurrentTime;
			declare Boolean AnimIsShowing 		= True;	
			declare Boolean AnimIsShowingAll	= True;	
			declare Real 	AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
			declare Real 	AnimDurationBounce 	= {{{C_ShowAnimDurationY*C_ShowAnimDurationRatioBounce*ScaleChat/0.78}}};
			declare Real 	AnimOffset 			= {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}};	
			
			while(True) {
				yield;

				// SMALL UPDATE
				if (!PageIsVisible) continue;
				
				AnimCurrentTime = Now - LatestAnimStart;
				if (AnimCurrentTime < AnimDuration) {
					if (AnimIsShowing) {
						Frame_ServerList.Visible = True;
						if (AnimIsShowingAll) {
							AnimDuration = {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
							if (AnimCurrentTime < AnimDurationBounce) {
								AnimOffset = {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
							} else { 
								AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
							}
							Frame_ServerList.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}} + AnimOffset; 
							Frame_ServerList.RelativePosition.X = {{{(35+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}}; 
						} else {
							AnimDuration = {{{C_ShowAnimDurationX*ScaleChat/0.78}}};
							if (AnimCurrentTime < AnimDurationBounce) {
								AnimOffset = {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartX*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
							} else { 
								AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
							}
							Frame_ServerList.RelativePosition.X = {{{(35+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78}}} - AnimOffset; 
						}
					} else {
						AnimOffset = {{{C_HideAnimOffsetStart}}} + ({{{C_HideAnimOffsetEnd*ScaleChat/0.78}}} - {{{C_HideAnimOffsetStart}}}) * AnimCurrentTime/AnimDuration;
						Frame_ServerList.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}} + AnimOffset; 
					}
				} else {
					if (AnimIsShowing) {
						Frame_ServerList.RelativePosition.X = {{{(35+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78 - C_ShowAnimOffsetEnd}}};
						AnimIsShowingAll = False;
					}
					else { 
						Frame_ServerList.RelativePosition.X = {{{(35+XGlobalOffset+XScaleOffset+XConversationOffset)*ScaleChat/0.78 - C_HideAnimOffsetEnd*ScaleChat/0.78}}};
						Frame_ServerList.Visible = False;
					}
						Frame_ServerList.RelativePosition.Y = {{{YConversationPos+YGlobalOffset}}}; 
				} 
				
				if (PendingEvents.count == 0 && AnimCurrentTime > AnimDuration) continue;
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
					
						case CMlEvent::Type::MouseClick: {
							SendCustomEvent("Click", Text[]);
							SendCustomEvent("Tooltip_Needed", [""]);
							if (Event.Control.ControlId == "Button_CardServerBg") {	
								if (Event.Control == Button_LocalUser_CardServerBg) {
									if (HasSelectedLocalUser)
										SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]);
									else 
										SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["1"]);	
								} else {															
									for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
										if (Event.Control == Button_CardServerBg[I]) {
											if (SelectedBuddyLogin == Buddies_Login[I]) {
												SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [""]);
											} else {
												SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [Buddies_Login[I]]);
											}										
											break;
										} 
									}
								}
							} else if (Event.Control.ControlId == "Button_ServerJoin") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_ServerJoin[I]) {
										SendCustomEvent("Buddies_ServerJoin_Click", [Buddies_ServerJoinLink[I]]);
										// SendCustomEvent("CloseChat_Click", [""]);
										break;
									}
								}
							} else if (Event.Control.ControlId == "Label_NoBuddyCurrentlyPlaying") {
								// SendCustomEvent("SearchBuddy", [""]);
							} else if (Event.Control.ControlId == "Button_ServerCopyLink") {
								if (Event.Control == Button_LocalUser_ServerCopyLink) {
									SendCustomEvent("ServerCopyLink_Click", [""]);
								} else {
									for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
										if (Event.Control == Button_ServerCopyLink[I]) {
											SendCustomEvent("ServerCopyLink_Click", [Buddies_ServerJoinLink[I]]);
											break;
										}
									}
								}
							} 
						}

						case CMlEvent::Type::PluginCustomEvent: {								
							if (Event.PluginCustomEventType == "ServerList_AnimStart") {
								if (Event.PluginCustomEventData[0] == "Show") {
									AnimIsShowingAll 	= False;
									AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing 		= True;
									AnimOffset 			= {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart 	= Now;
								} else if (Event.PluginCustomEventData[0] == "ShowAll") {
									AnimIsShowingAll 	= True;
									AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing 		= True;
									AnimOffset 			= {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart 	= Now;
								} else if (Event.PluginCustomEventData[0] == "Hide") {
									AnimDuration 		= {{{C_HideAnimDuration}}};
									AnimIsShowing 		= False;
									AnimOffset 			= 0.;
									LatestAnimStart 	= Now;
								}
							}								
						}
						
						case CMlEvent::Type::MouseOver: {	
							if (Event.Control == Button_LocalUser_ServerCopyLink)
								SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("%1Copy your server link to clipboard")^"%1", "  " )]);
							else if (Event.Control.ControlId == "Button_ServerJoin") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_ServerJoin[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Join %1 to play"), Buddies_Login[I] )]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_ServerCopyLink") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_ServerCopyLink[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Copy %1 server link to clipboard"), Buddies_Login[I] )]);
										break;
									}
								}
							} 
							else if (Event.Control.ControlId == "Button_ServerLobby") 
								SendCustomEvent("Tooltip_Needed", [ _("This server is a Lobby server") ]);
							else if (Event.Control.ControlId == "Button_ServerPrivate") 
								SendCustomEvent("Tooltip_Needed", [ _("This server is private") ]);
						}
						
						case CMlEvent::Type::MouseOut: 	
							SendCustomEvent("Tooltip_Needed", [""]);
					}
				}
				
				// LOCAL USER MANAGEMENT
				{
					if (LocalUser_CurrentPresenceShow == "{{{PresenceShowSystemText_Available}}}") Button_LocalUser_CardServerBg.Colorize = {{{CardBgColorAvailable}}}; // 0e2
					else if (LocalUser_CurrentPresenceShow == "{{{PresenceShowSystemText_Busy}}}") Button_LocalUser_CardServerBg.Colorize = {{{CardBgColorBusy}}}; // e11
					else if (LocalUser_CurrentPresenceShow == "{{{PresenceShowSystemText_Away}}}") Button_LocalUser_CardServerBg.Colorize = {{{CardBgColorAway}}}; // fd1
					Button_LocalUser_CardServerBg			.Opacity 			= 0.1;
					if(HasSelectedLocalUser)
						Button_LocalUser_CardServerBg		.Opacity 			= 0.25;
					if (LocalUser_ServerLogin == "") {
						Frame_LocalUser_Server				.Visible 			= False;
					} else {
						Frame_LocalUser_Server.Visible 							= True;
						Button_LocalUser_ServerCopyLink		.Visible 			= True;
						Button_LocalUser_ServerPrivate		.Visible 			= False;
						Button_LocalUser_ServerLobby		.Visible 			= False;
						Label_LocalUser_ServerModeInfos		.Value 				= LocalUser_ServerModeInfos;
						Label_LocalUser_ServerPlayersCount	.Value  			= LocalUser_ServerPlayersCountInfos;
						Label_LocalUser_ServerModeInfos		.RelativePosition 	= <0., -7.33, 2.>;
						Button_LocalUser_ServerCopyLink		.RelativePosition 	= <-1., -5., 1.>;
						Button_LocalUser_ServerCopyLink		.Size 				= <7., 7.>;
						if (LocalUser_ServerName == "")
							Label_LocalUser_ServerName		.Value 				= TextLib::MLEncode(LocalUser_ServerLogin);
						else
							Label_LocalUser_ServerName		.Value				= TextLib::MLEncode(LocalUser_ServerName);
					}
				}
				
				
				// BUDDIES MANAGEMENT
				Label_NoBuddyCurrentlyPlaying.Visible = Buddies_Login.count <= 0;
				for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
					if (I >= Buddies_Login.count) {
						Frame_ServerBuddy[I]			.Visible 			= False;
					} else {
						if (Buddies_ServerLogin[I] == "") Frame_ServerBuddy[I].Visible = False;
						else Frame_ServerBuddy[I]		.Visible 			= True;
						if (Buddies_ServerName[I] == "") Label_ServerName[I].Value = Buddies_ServerLogin[I];
						else Label_ServerName[I]		.Value 				= Buddies_ServerName[I];
						Label_ServerModeInfos[I]		.Value 				= Buddies_ServerModeInfos[I];
						Label_ServerPlayersCount[I]		.Value 				= Buddies_ServerPlayersCountInfos[I];
						
						Button_CardServerBg[I]			.Opacity = 0.1;
						if (Buddies_Presence[I] == "{{{PresenceShowSystemText_Available}}}") Button_CardServerBg[I].Colorize = {{{CardBgColorAvailable}}}; // 0e2
						else if (Buddies_Presence[I] == "{{{PresenceShowSystemText_Busy}}}") Button_CardServerBg[I].Colorize = {{{CardBgColorBusy}}}; // e11
						else if (Buddies_Presence[I] == "{{{PresenceShowSystemText_Away}}}") Button_CardServerBg[I].Colorize = {{{CardBgColorAway}}}; // fd1
						
						if (SelectedBuddyLogin ==  Buddies_Login[I]) {
							Button_CardServerBg[I]		.Opacity = 0.25;
						} 
						
						Button_ServerCopyLink[I]		.Visible = True;
						// Button_ServerJoin[I]			.Visible = !Buddies_Server_IsFull[I];
						Button_ServerJoin[I]			.Visible = True;
						Button_ServerPrivate[I]			.Visible = Buddies_Server_IsPrivate[I];
						Button_ServerLobby[I]			.Visible = Buddies_Server_IsLobby[I];
						
					}
				}
				// END WHILE
			}
		}
	--></script>
	""";		
	
	declare Layer_Buddies_DesiredVisible 				= False;
	declare Layer_Buddies_DesiredVisibleDelayed 		= False;
	declare Layer_Buddies_CanToggleHideShow 			= True;
	declare Latest_Layer_Buddies_DesiredVisibleDelayed 	= 0;
	declare Layer_Buddies_InitServerList 				= True;
	declare Layer_Buddies_ForceUpdate 					= False;
	declare Layer_Buddies_ForceUpdateDelayed 			= False;
	declare Layer_Buddies_Desired_PageIndex 			= 0;
	declare Layer_Buddies 								= UILayerCreate();
	Layer_Buddies.Type 									= CUILayer::EUILayerType::Normal;
	Layer_Buddies.IsVisible 							= False;
	Layer_Buddies.ManialinkPage = 
	"""
	<!-- (start) BUDDIES CARDS (online & offline framemodels) -->	
	<framemodel id="Framemodel_CardBuddyOnline">
		<quad 	id="Quad_BuddyPresence" 		posn="1 -5 2" 			hidden="1" 						sizen="7 7"  							style="Icons64x64_1" substyle="GenericButton" opacity="{{{IconOpacity}}}" {{{AlignCl}}} />
		<quad 	id="Quad_ServerLight" 			posn="-0.33 1 2" 		hidden="1" 						sizen="3 {{{CardBuddyBgSizeY}}}" 		image="{{{ImgSrc}}}/buddy-serverlight-green.dds" {{{AlignTl}}} />
		<frame 	id="Frame_CardBuddyInfos" posn="4 0 1">
			<label 	id="Label_Name" 			posn="0 -2.5 2" 		text="PLAYER NAME" 				sizen="{{{43/GlobalTextRatio}}} 7" 		{{{AlignCl}}} textsize="2" textcolor="fff" scale="{{{GlobalTextRatio}}}" appendellipsis="1" maxline="1" />
			<label 	id="Label_Status" 			posn="0 -7.5 2" 		text="PLAYER STATUS" 			sizen="{{{40/GlobalTextRatio}}} 7" 		textsize="1" textcolor="fff" {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" appendellipsis="1" maxline="1" />
			<label 	id="Label_ServerName" 		posn="0 -7.5 2" 		text="SERVER NAME" 				sizen="{{{40/GlobalTextRatio}}} 7" 		textsize="1" textcolor="fff" {{{AlignCl}}} scale="{{{GlobalTextRatio}}}" appendellipsis="1" maxline="1" />
		</frame>
		<quad 	id="Button_ServerJoin" 			posn="2.5 -5. 1" 		hidden="1" scriptevents="1"  	{{{IconSizeM}}} {{{AlignCl}}} 			style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-join.dds" imagefocus="{{{ImgSrc}}}/buddy-join-on.dds" opacity="{{{ButtonsOpacity}}}" />
		<quad 	id="Button_ServerCopyLink" 		posn="2.5 -5. 1" 		hidden="1" scriptevents="1"  	{{{IconSizeM}}} {{{AlignCl}}} 			style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-copy-serverlink.dds" imagefocus="{{{ImgSrc}}}/buddy-copy-serverlink-on.dds" opacity="{{{ButtonsOpacity}}}"/>
		<label 	id="Label_PendingMessages" 		posn="52 -7.5 1" 		hidden="1" text="$06d10" 		sizen="{{{4/GlobalTextRatio}}} 4" 		textsize="1"  style="TextTitle2Blink" scriptevents="1" {{{AlignCc}}} scale="{{{GlobalTextRatio}}}" />
		<quad 	id="Quad_IsAlly" 				posn="53.5 -1.05 2.75" 	hidden="1" scriptevents="1" 	sizen="3.25 3.25" 						image="{{{ImgSrc}}}/buddy-ally-on.dds" opacity="0.8" {{{AlignTr}}} />
		<quad 	id="Button_CardBuddyPresence" 	posn="0 -5 0.1"											sizen="2.5 	{{{CardBuddyBgSizeY}}}" 	style="Bgs1InRace" substyle="BgCard2" {{{AlignCl}}} />
		<quad 	id="Button_CardBuddyBg" 		posn="27.5 -5 -0.1" 	scriptevents="1" 				sizen="55 	{{{CardBuddyBgSizeY}}}" 	{{{CardBuddyBgStyle}}} {{{AlignCc}}} />
	</framemodel>
	
	<framemodel id="Framemodel_CardBuddyOffline">
		<quad 	id="Button_BuddyAdd" 		posn="50 -5 3" 		sizen="5.75 5.75"	hidden="1" 			{{{AlignCc}}} 	scriptevents="1" 	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-buddy-add.dds" 		imagefocus="{{{ImgSrc}}}/buddy-buddy-add-focus.dds" />
		<quad 	id="Button_BuddyCancel" 	posn="50 -5 3" 		sizen="4.5 4.5"		hidden="1" 			{{{AlignCc}}} 	scriptevents="1" 	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-buddy-deny.dds" 		imagefocus="{{{ImgSrc}}}/buddy-buddy-deny-focus.dds" />
		<quad 	id="Button_BuddyAccept" 	posn="50 -5 3" 		sizen="5 5" 		hidden="1" 			{{{AlignCc}}} 	scriptevents="1" 	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-buddy-accept.dds" 	imagefocus="{{{ImgSrc}}}/buddy-buddy-accept-focus.dds" />
		<quad 	id="Button_BuddyDeny" 		posn="43 -5 3" 		sizen="4.5 4.5"	 	hidden="1" 			{{{AlignCc}}} 	scriptevents="1" 	style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-buddy-deny.dds" 		imagefocus="{{{ImgSrc}}}/buddy-buddy-deny-focus.dds" />
		<label 	id="Label_Name" 			posn="4 -5 2" 		sizen="{{{36.5/GlobalTextRatio}}} 0" 	{{{AlignC2l}}} 						textsize="2" textcolor="fff" 			text="PLAYER NAME" 	scale="{{{GlobalTextRatio}}}"  />
		<label 	id="Label_NameOnServer" 	posn="4 -5 2" 		sizen="{{{36.5/GlobalTextRatio}}} 0"  	{{{AlignC2l}}} 	scriptevents="1"	textsize="2" textcolor="fff" 			text="PLAYER NAME" 	scale="{{{GlobalTextRatio}}}"  />
		<label 	id="Label_PendingMessages" 	posn="52 -7.5 1" 	sizen="{{{4/GlobalTextRatio}}} 4" 		{{{AlignCc}}}	scriptevents="1" 	textsize="1" style="TextTitle2Blink" 	text="$06d10" 	 	scale="{{{GlobalTextRatio}}}"  hidden="1" />
		<quad 	id="Button_CardBuddyBg" 	posn="27.5 -5 1" 	sizen="55 {{{CardBuddyBgSizeY}}}" 		{{{AlignCc}}} 	scriptevents="1" 	{{{CardBuddyBgStyleOffline}}}/>
	</framemodel>
	<!-- (end) BUDDIES CARDS (online & offline framemodels) -->	
	
	<!-- (start) GLOBAL BUDDIES FRAME -->	
	<frame id="Frame_Buddies" hidden="1" posn="{{{-25+XGlobalOffset}}} {{{78+YGlobalOffset}}} {{{LayerPosZ_Buddies}}}" scale="{{{ScaleChat}}}" >
		
		<quad id="Quad_FakeBar" 					posn="28.1 20 5" 	sizen="360 13" bgcolor="000" {{{AlignTc}}} scale="{{{1./ScaleChat}}}"/>
		
		<quad id="Quad_BuddiesListBg" 				posn="0 10 -1" 		sizen="58 125" {{{BuddiesListBgStyle}}} {{{AlignTl}}} scriptevents="1" />	
		<quad id="Quad_BuddiesListBgTitle" 			posn="0 3.5 1" 		sizen="58 {{{1./ScaleChat}}}" bgcolor="5cf" {{{AlignTl}}} scriptevents="1" />	
		<quad id="Quad_BuddiesListArrow" 			posn="14 3.4 10" 		sizen="{{{2.5/ScaleChat}}} {{{2.5/ScaleChat}}}" style="Icons128x32_1" substyle="ArrowUp" colorize="5cf" {{{AlignBc}}} scriptevents="1" />	
		<quad id="Quad_BuddiesListBgMetalBar" 		posn="0 -125 2" 	sizen="58 {{{1./ScaleChat}}}" style="Bgs1InRace" substyle="BgMetalBar" {{{AlignTl}}} scriptevents="1" />	
		
		<!-- (start) FRAME BUDDIES HEADER (Presence button, mode buttons, organize buddies etc) -->	
		<frame id="Frame_BuddiesHeader">
			<frame id="Frame_BuddiesButtons" posn="3.25 -9." scale="0.66">
				<quad 					 id="Quad_Presence" 			posn="3 5. 3" sizen="12.25 12.25" style="Icons64x64_1" substyle="GenericButton" opacity="{{{IconOpacity}}}" {{{AlignCc}}} />
				<quad 	scriptevents="1" id="Button_Presence" 			posn="3 5. 2" sizen="10.5 10.5" {{{AlignCc}}} style="Bgs1" substyle="BgButton" opacity="0.1" />
				<quad 	scriptevents="1" id="Button_ModeChat" 			posn="10 0 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeXL}}} bgcolor="0F0" {{{AlignBl}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-mode-chat.dds" imagefocus="{{{ImgSrc}}}/buddy-mode-chat-focus.dds" />
				<quad 	scriptevents="1" id="Button_ModeServerList" 	posn="22 0 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeXL}}} bgcolor="0F0" {{{AlignBl}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-mode-serverlist.dds" imagefocus="{{{ImgSrc}}}/buddy-mode-serverlist-focus.dds" />
				<label	scriptevents="1" id="Label_BuddiesPlayingCount" posn="32.5 0.5 3" text="123" textsize="3" style="TextCardRaceRank" {{{IconSizeXL}}} {{{AlignBl}}} scale="{{{GlobalTextRatio}}}" />
				<quad 	scriptevents="1" id="Button_ModeAddBuddy" 		posn="40.75 1 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeXL}}} {{{AlignBl}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-add.dds" imagefocus="{{{ImgSrc}}}/buddy-add-focus.dds" />
				<label 	scriptevents="1" id="Label_PendingRequest" 		posn="47.75 0.5 3" text="25" textsize="3" style="TextCardRaceRank" {{{IconSizeXL}}} {{{AlignBl}}} scale="{{{GlobalTextRatio}}}" />
				<quad 	scriptevents="1" id="Button_MailBox" 			posn="55.5 -0.9 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeXL}}} {{{AlignBl}}} style="Icons64x64_1" substyle="NewMessage" />
				<label 	scriptevents="1" id="Label_MessagesCount" 		posn="65.5 0.5 3" text="25" textsize="3" style="TextCardRaceRank" {{{IconSizeXL}}} {{{AlignBl}}} scale="{{{GlobalTextRatio}}}" />
				<quad 	scriptevents="1" id="Button_ModeSettings" 		posn="72.75 5.25 3" opacity="{{{ButtonsOpacity}}}" {{{IconSizeL}}} bgcolor="0F0" {{{AlignBl}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-mode-settings.dds" imagefocus="{{{ImgSrc}}}/buddy-mode-settings-focus.dds" />
			</frame>
		</frame>
		<!-- (end) FRAME BUDDIES HEADER (Presence button, mode buttons, organize buddies etc) -->	
		
		<frame id="Frame_BuddiesSearch" posn="29. -16 1">
			<entry id="Entry_SearchBuddy" scriptevents="1" posn="-4 0 0.2" sizen="47 8" textsize="2" {{{AlignCc}}}/>
			<frame id="Frame_ClearSearch" hidden="0" posn="24 0 1">
				<quad  id="Button_ClearSearch" 	posn="0 0 0.2" {{{IconSizeM}}} style="Icons64x64_1" substyle="Close"  {{{AlignCc}}} scriptevents="1" image="{{{ImgSrc}}}/buddy-search-clear-off.dds" imagefocus="{{{ImgSrc}}}/buddy-search-clear-focus.dds" />
				<quad  hidden="1"				posn="0 0 0.1" sizen="8 8"  opacity="0.04" style="Bgs1" substyle="BgWindow4" {{{AlignCc}}} />
			</frame>
		</frame>

		<frame id="Frame_BuddiesMain" posn="0 -10 1">
	
			<!-- (start) BUDDYLIST -->	
			<frame id="Frame_BuddiesList" posn="0 -11.5">
				<frameinstance modelid="Framemodel_CardBuddyOnline" id="Frame_LocalUserOnline" posn="1.5 -1.6"/>""";

				// BUDDYLIST : Generating the online & offline buddylist
				for(I, 1, C_DisplayedBuddiesCount) {
					Layer_Buddies.ManialinkPage 	^= """<frameinstance modelid="Framemodel_CardBuddyOnline" id="Frame_BuddyOnline{{{I}}}" posn="1.5 -{{{1.6 + CardBuddySpace*I}}}"/>""";
				}							
				Layer_Buddies.ManialinkPage 		^= """<frameinstance hidden="1" modelid="Frame_LocalUserOffline" id="Frame_LocalUserPreviewOffline" posn="1.5 -1.6"/>""";	
				for(I, 1, C_DisplayedBuddiesCount) {
					Layer_Buddies.ManialinkPage 	^= """<frameinstance modelid="Framemodel_CardBuddyOffline" id="Frame_BuddyOffline{{{I}}}" posn="1.5 -{{{1.6 + CardBuddySpace*I}}}"/>""";
				}			
				Layer_Buddies.ManialinkPage 		^= """
				
				<label scriptevents="1" hidden="1" id="Label_BuddyListIsEmpty" posn="3.5 -15 3" sizen="{{{53/GlobalTextRatio}}} 70" textsize="2" text="Hello and welcome to maniaplanet. You don't have any buddy yet. Click here to add a buddy from their login, or join a server and add players you've played with !" autonewline="1" style="TextCardRaceRank" {{{AlignTl}}} scale="{{{GlobalTextRatio}}}" translate="1" />
			</frame>
			<!-- (end) BUDDYLIST -->
			
			<frame id="Frame_PreviousNext" posn="52.25 -{{{YSizeChat-24}}}">
				<quad id="Button_Previous" scriptevents="1" posn="-7.5 0 3" {{{IconSizeS}}} style="UIConstruction_Buttons" substyle="Quit" rot="90" {{{AlignCc}}} />
				<quad id="Button_Next" scriptevents="1" posn="0 0 3" {{{IconSizeS}}} style="UIConstruction_Buttons" substyle="Quit" rot="-90" {{{AlignCc}}} />
			</frame>
			
			<frame id="Frame_ChatIsOffline" posn="0 13.5 0" scale="{{{0.95/ScaleChat}}}" hidden="1">
				<quad posn="0 -1 0.1" 	sizen="50 22" {{{AlignTl}}} 		style="Bgs1" substyle="BgWindow2" scriptevents="1" hidden="1"/>
				<label id="Label_PresenceAvailable" 	posn="1 -1 0.1" 	style="CardMain_Tool_NoIconSmall2" 	scriptevents="1" text="$0f0Connect as Available" />
				<label id="Label_PresenceBusy" 			posn="1 -7 0.1" 	style="CardMain_Tool_NoIconSmall2" 	scriptevents="1" text="$f00Connect as Busy" />
				<label id="Label_PresenceAway" 			posn="1 -13 0.1" 	style="CardMain_Tool_NoIconSmall2" 	scriptevents="1" text="$ff0Connect as Away" />
			</frame>
	
	
			<!-- (start) ADDITIONAL MISC FRAMES (addbuddy, presence, ...) -->
			
			<frame hidden="1" id="Frame_AddBuddy" posn="29 -10 20" {{{AlignCc}}} scale="{{{1.282}}}">
				<label id="Button_AddBuddySubmit" scriptevents="1"  posn="14.5 3. 1" sizen="{{{14/(GlobalTextRatio*0.7)}}} 11" text="Add" style="TextButtonNav" focusareacolor1="000" focusareacolor2="fff" textcolor="fff" {{{AlignCc}}} scale="0.7" />
				<entry id="Entry_AddBuddy" scriptevents="1" posn="-6.5 3 0.2" sizen="36 6" textsize="2" scale="0.8" {{{AlignCc}}}/>
				<quad id="Quad_AddBuddyGlow" hidden="1" posn="0 -3 0.3" sizen="16 8.5" scale="0.7" style="Bgs1InRace" substyle="NavButtonBlink" {{{AlignCc}}}/>
				<quad sizen="44 8.5" posn="0 7 0.1" colorize="111" opacity="0.26" style="Bgs1" substyle="BgWindow4" scriptevents="1" {{{AlignTc}}} hidden="0" />
				<frame id="Frame_AddBuddyBottomBar" posn="-11.5 -88.25">
					<quad id="Button_AddModeManiaplanet" hidden="0" posn="-6.5 0 6" 	{{{IconSizeM}}} scriptevents="1" {{{AlignCc}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-search-maniaplanet.dds" imagefocus="{{{ImgSrc}}}/buddy-search-maniaplanet-focus.dds"/>
					<quad id="Button_AddModeServer" 	 hidden="0" posn=" 0 0 6" {{{IconSizeM}}} scriptevents="1" {{{AlignCc}}} style="Icons64x64_1" image="{{{ImgSrc}}}/buddy-search-server.dds" imagefocus="{{{ImgSrc}}}/buddy-search-server-focus.dds"/>
				</frame>
			</frame>	
			
			<frame hidden="1" id="Frame_Settings" posn="3.5 -6 1" scale="1">
				<label 	id="Label_NoticeEnableSound" 		scriptevents="1" posn="0 		 0 		1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Enable sounds" 				{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<quad 	id="Check_NoticeEnableSound" 		scriptevents="1" posn="48.5 	-0.5 	1" 		sizen="6 6" style="Icons64x64_1" substyle="Check" styleselected="0"	 				{{{AlignCc}}}	/>
				<label 	id="Label_NoticeEnableMessage" 		scriptevents="1" posn="0		-8 		1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices on new messages" 		{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<quad 	id="Check_NoticeEnableMessage" 		scriptevents="1" posn="48.5 	-8.5 	1" 		sizen="6 6" style="Icons64x64_1" substyle="Check" styleselected="0"	 				{{{AlignCc}}}	/>
				<label 	id="Label_NoticeEnableConnection" 	scriptevents="1" posn="0 		-16 	1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices on new connection" 	{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<quad 	id="Check_NoticeEnableConnection" 	scriptevents="1" posn="48.5 	-16.5 	1" 		sizen="6 6" style="Icons64x64_1" substyle="Check" styleselected="0"	 				{{{AlignCc}}}	/>
				<label 	id="Label_NoticeEnableServerJoin" 	scriptevents="1" posn="0 		-24 	1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices on new server join" 	{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<quad 	id="Check_NoticeEnableServerJoin" 	scriptevents="1" posn="48.5 	-24.5 	1" 		sizen="6 6" style="Icons64x64_1" substyle="Check" styleselected="0"	 				{{{AlignCc}}}	/>
				<label 	id="Label_NoticeCount" 				scriptevents="1" posn="0 		-32 	1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices count" 				{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<entry 	id="Entry_NoticeCount" 				scriptevents="1" posn="48.5 	-32 	1" 		sizen="8 6" textsize="2"	 														{{{AlignCc}}} />
				<label 	id="Label_NoticeDuration" 			scriptevents="1" posn="0 		-40 	1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices displayed time" 		{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<entry 	id="Entry_NoticeDuration" 			scriptevents="1" posn="48.5 	-40 	1" 		sizen="8 6" textsize="2" 															{{{AlignCc}}} />
				<label 	id="Label_NoticeScale" 				scriptevents="1" posn="0 		-48 	1" 		sizen="{{{47/GlobalTextRatio}}} 6" textsize="2" text="Notices scale" 				{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<entry 	id="Entry_NoticeScale" 				scriptevents="1" posn="48.5 	-48 	1" 		sizen="8 6" textsize="2" 															{{{AlignCc}}} />
				<label 	id="Label_KeyToggleChat" 			scriptevents="1" posn="0 		-56 	1" 		sizen="{{{38/GlobalTextRatio}}} 6" textsize="2" text="Toggle chat key" 				{{{AlignCl}}} scale="{{{0.9*GlobalTextRatio}}}" translate="1" />
				<label 	id="Entry_KeyToggleChat" 			scriptevents="1" posn="51.5 	-56 	1" 		sizen="16 6" textsize="2" 															{{{AlignCr}}} style="TextCardMedium" />
			</frame>	
			
			<frame id="Frame_PresenceMenus" posn="1 0. 22" scale="{{{0.93/ScaleChat}}}">
				<frame id="Frame_PresencePlaying" hidden="1">
					<quad posn="0 1 0.1" sizen="50 24" {{{AlignTl}}} 				style="Bgs1" substyle="BgWindow2" scriptevents="1"/>
					<label id="Label_PresenceAvailable" 		posn="1 -1 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$0f0Playing available"  />
					<label id="Label_PresenceBusy" 				posn="1 -7 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$f00Playing busy"/>
					<label id="Label_PresenceOffline" 			posn="1 -13 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$DDDOffline" />
				</frame>
				<frame id="Frame_PresenceMenu" hidden="1">
					<quad posn="0 1 0.1" sizen="50 29" {{{AlignTl}}} 				style="Bgs1" substyle="BgWindow2" scriptevents="1"/>
					<label id="Label_PresenceAvailable" 		posn="1 -1 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$0f0Available" />
					<label id="Label_PresenceBusy" 				posn="1 -7 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$f00Busy" />
					<label id="Label_PresenceAway" 				posn="1 -13 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$ff0Away" />
					<label id="Label_PresenceOffline" 			posn="1 -19 0.1" 	style="CardMain_Tool_NoIconSmall2" scriptevents="1" text="$DDDOffline" />
				</frame>
			</frame>
			<!-- (end) ADDITIONAL MISC FRAMES (addbuddy, presence, ...) -->		
	
	
		</frame>	
	</frame>
	<!-- (end) GLOBAL BUDDIES FRAME -->

	<script><!--		
	
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		
		{{{MLLayer_Function}}}
		main() {
	
			declare Boolean 	Buddies_DialogBoxNeeded 			for Page;
			declare Integer 	Buddies_Messenger_MessagesCount 	for Page;
			declare Boolean 	Buddies_HasPendingMessages 			for Page;
			declare Boolean 	IsOffline 							for Page;
			declare Boolean 	IsConnecting 						for Page;
			declare Text 		SelectedBuddyLogin 					for Page;
			declare Boolean 	HasSelectedLocalUser 				for Page;
			declare Integer 	LocalUserPendingRequest 			for Page;
			declare Text 		LocalUserCurrentStatus 				for Page;
			declare Text 		LocalUserCurrentServerName 			for Page;
			declare Text 		LocalUserCurrentServerLogin 		for Page;
			declare Text 		LocalUserCurrentPresence 			for Page;
			declare Integer 	PageIndex 							for Page;
			declare Integer 	PageIndexMax 						for Page;
			declare Text[] 		Buddies_Login 						for Page;
			declare Text[] 		Buddies_Name			 			for Page;
			declare Text[]		Buddies_Status 						for Page;
			declare Text[] 		Buddies_Presence 					for Page;
			declare Text[] 		Buddies_ServerName 					for Page;
			declare Text[] 		Buddies_ServerLogin 				for Page;
			declare Text[] 		Buddies_ServerJoinLink 				for Page;
			declare Boolean[] 	Buddies_IsAlly 						for Page;
			declare Text[] 		Buddies_SubscriptionStatus 			for Page;
			declare Boolean[] 	Buddies_IsTitleCard 				for Page;
			declare Integer[] 	Buddies_UnreadMessages 				for Page;
			declare Text 		Settings_KeyToggleChat 				for Page;
			declare Real 		Settings_NoticeScale 				for Page;
			declare Real 		Settings_NoticeDuration 			for Page;
			declare Integer 	Settings_NoticeCount 				for Page;
			declare Boolean 	Settings_SoundOnNewMessage 			for Page;
			declare Boolean 	Settings_NoticeOnNewMessage 		for Page;
			declare Boolean 	Settings_NoticeOnNewConnection 		for Page;
			declare Boolean 	Settings_NoticeOnServerJoin 		for Page;
			declare Boolean 	Mode_AddBuddy 						for Page;	
			declare Boolean 	Mode_ServerList 					for Page;
			declare Boolean 	Mode_Settings 						for Page;	
			declare Boolean 	AddMode_Maniaplanet					for Page;	
			declare Boolean 	AddMode_Server 						for Page;	
			declare Integer 	Buddies_BuddiesPlayingCount 		for Page;		
			declare Text[] 		Buddies_PlayingModes 				for Page;			
								
			declare Frame_Buddies 					<=> (Page.MainFrame.GetFirstChild("Frame_Buddies") 					as CMlFrame);
			declare Frame_BuddiesHeader 			<=> (Page.MainFrame.GetFirstChild("Frame_BuddiesHeader") 			as CMlFrame);
			declare Frame_BuddiesSearch 			<=> (Page.MainFrame.GetFirstChild("Frame_BuddiesSearch") 			as CMlFrame);
			declare Frame_BuddiesList 				<=> (Page.MainFrame.GetFirstChild("Frame_BuddiesList") 				as CMlFrame);
			declare Frame_PreviousNext 				<=> (Page.MainFrame.GetFirstChild("Frame_PreviousNext") 			as CMlFrame);
			declare Frame_ChatIsOffline 			<=> (Page.MainFrame.GetFirstChild("Frame_ChatIsOffline") 			as CMlFrame);
			declare Label_PresenceAvailableOff		<=> (Frame_ChatIsOffline.GetFirstChild("Label_PresenceAvailable") 	as CMlLabel);
			declare Label_PresenceBusyOff			<=> (Frame_ChatIsOffline.GetFirstChild("Label_PresenceBusy") 		as CMlLabel);
			declare Label_PresenceAwayOff			<=> (Frame_ChatIsOffline.GetFirstChild("Label_PresenceAway") 		as CMlLabel);
			declare Frame_PresencePlaying 			<=> (Page.MainFrame.GetFirstChild("Frame_PresencePlaying") 			as CMlFrame);
			declare Label_PresenceAvailablePlaying	<=> (Frame_PresencePlaying.GetFirstChild("Label_PresenceAvailable") as CMlLabel);
			declare Label_PresenceBusyPlaying		<=> (Frame_PresencePlaying.GetFirstChild("Label_PresenceBusy") 		as CMlLabel);
			declare Label_PresenceOfflinePlaying	<=> (Frame_PresencePlaying.GetFirstChild("Label_PresenceOffline") 	as CMlLabel);
			declare Frame_PresenceMenu 				<=> (Page.MainFrame.GetFirstChild("Frame_PresenceMenu") 			as CMlFrame);
			declare Label_PresenceAvailable			<=> (Frame_PresenceMenu.GetFirstChild("Label_PresenceAvailable") 	as CMlLabel);
			declare Label_PresenceBusy				<=> (Frame_PresenceMenu.GetFirstChild("Label_PresenceBusy") 		as CMlLabel);
			declare Label_PresenceAway				<=> (Frame_PresenceMenu.GetFirstChild("Label_PresenceAway") 		as CMlLabel);
			declare Label_PresenceOffline			<=> (Frame_PresenceMenu.GetFirstChild("Label_PresenceOffline") 		as CMlLabel);
			declare Frame_ChatIsConnecting 			<=> (Page.MainFrame.GetFirstChild("Frame_ChatIsConnecting") 		as CMlFrame);
			declare Frame_AddBuddy 					<=> (Page.MainFrame.GetFirstChild("Frame_AddBuddy") 				as CMlFrame);
			declare Frame_Settings 					<=> (Page.MainFrame.GetFirstChild("Frame_Settings") 				as CMlFrame);
			declare Frame_AddBuddyBottomBar 		<=> (Page.MainFrame.GetFirstChild("Frame_AddBuddyBottomBar") 		as CMlFrame);
			declare Quad_BuddiesListBg 				<=> (Page.MainFrame.GetFirstChild("Quad_BuddiesListBg") 			as CMlQuad);
			declare Quad_BuddiesListBgTitle 		<=> (Page.MainFrame.GetFirstChild("Quad_BuddiesListBgTitle")		as CMlQuad);
			declare Quad_BuddiesListArrow 			<=> (Page.MainFrame.GetFirstChild("Quad_BuddiesListArrow") 			as CMlQuad);
			declare Quad_BuddiesListBgMetalBar 		<=> (Page.MainFrame.GetFirstChild("Quad_BuddiesListBgMetalBar") 	as CMlQuad);
			declare Button_ModeChat 				<=> (Page.MainFrame.GetFirstChild("Button_ModeChat") 				as CMlQuad);
			declare Button_ModeServerList 			<=> (Page.MainFrame.GetFirstChild("Button_ModeServerList") 			as CMlQuad);
			declare Button_ModeAddBuddy 			<=> (Page.MainFrame.GetFirstChild("Button_ModeAddBuddy") 			as CMlQuad);
			declare Button_ModeSettings 			<=> (Page.MainFrame.GetFirstChild("Button_ModeSettings") 			as CMlQuad);
			declare Label_BuddiesPlayingCount 		<=> (Page.MainFrame.GetFirstChild("Label_BuddiesPlayingCount")		as CMlLabel);
			declare Label_PendingRequest 			<=> (Page.MainFrame.GetFirstChild("Label_PendingRequest") 			as CMlLabel);
			declare Label_MessagesCount 			<=> (Page.MainFrame.GetFirstChild("Label_MessagesCount") 			as CMlLabel);
			declare Label_BuddyListIsEmpty 			<=> (Page.MainFrame.GetFirstChild("Label_BuddyListIsEmpty") 		as CMlLabel);
			declare Button_AddBuddySubmit 			<=> (Page.MainFrame.GetFirstChild("Button_AddBuddySubmit") 			as CMlLabel);
			declare Button_Previous 				<=> (Page.MainFrame.GetFirstChild("Button_Previous") 				as CMlQuad);
			declare Button_Next 					<=> (Page.MainFrame.GetFirstChild("Button_Next") 					as CMlQuad);
			declare Button_AddModeManiaplanet 		<=> (Page.MainFrame.GetFirstChild("Button_AddModeManiaplanet") 		as CMlQuad);
			declare Button_AddModeServer 			<=> (Page.MainFrame.GetFirstChild("Button_AddModeServer") 			as CMlQuad);
			declare Button_ClearSearch 				<=> (Page.MainFrame.GetFirstChild("Button_ClearSearch") 			as CMlQuad);
			declare Entry_AddBuddy 					<=> (Page.MainFrame.GetFirstChild("Entry_AddBuddy") 				as CMlEntry);
			declare Entry_SearchBuddy 				<=> (Page.MainFrame.GetFirstChild("Entry_SearchBuddy") 				as CMlEntry);
			
			declare Label_NoticeEnableSound 		<=> (Page.MainFrame.GetFirstChild("Label_NoticeEnableSound") 		as CMlLabel);
			declare Label_NoticeEnableMessage 		<=> (Page.MainFrame.GetFirstChild("Label_NoticeEnableMessage") 		as CMlLabel);
			declare Label_NoticeEnableConnection 	<=> (Page.MainFrame.GetFirstChild("Label_NoticeEnableConnection") 	as CMlLabel);
			declare Label_NoticeEnableServerJoin 	<=> (Page.MainFrame.GetFirstChild("Label_NoticeEnableServerJoin") 	as CMlLabel);
			declare Label_NoticeCount 				<=> (Page.MainFrame.GetFirstChild("Label_NoticeCount") 				as CMlLabel);
			declare Label_NoticeDuration 			<=> (Page.MainFrame.GetFirstChild("Label_NoticeDuration") 			as CMlLabel);
			declare Label_NoticeScale 				<=> (Page.MainFrame.GetFirstChild("Label_NoticeScale") 				as CMlLabel);
			declare Check_NoticeEnableSound 		<=> (Page.MainFrame.GetFirstChild("Check_NoticeEnableSound") 		as CMlQuad);
			declare Check_NoticeEnableMessage 		<=> (Page.MainFrame.GetFirstChild("Check_NoticeEnableMessage") 		as CMlQuad);
			declare Check_NoticeEnableConnection 	<=> (Page.MainFrame.GetFirstChild("Check_NoticeEnableConnection") 	as CMlQuad);
			declare Check_NoticeEnableServerJoin 	<=> (Page.MainFrame.GetFirstChild("Check_NoticeEnableServerJoin") 	as CMlQuad);
			declare Entry_NoticeCount 				<=> (Page.MainFrame.GetFirstChild("Entry_NoticeCount") 				as CMlEntry);
			declare Entry_NoticeDuration 			<=> (Page.MainFrame.GetFirstChild("Entry_NoticeDuration") 			as CMlEntry);
			declare Entry_NoticeScale 				<=> (Page.MainFrame.GetFirstChild("Entry_NoticeScale") 				as CMlEntry);
			declare Entry_KeyToggleChat 			<=> (Page.MainFrame.GetFirstChild("Entry_KeyToggleChat") 			as CMlLabel);
			
			declare Frame_LocalUser 				<=> (Page.MainFrame.GetFirstChild("Frame_LocalUserOnline") 			as CMlFrame);
			declare Frame_LocalUser_Infos 			<=> (Frame_LocalUser.GetFirstChild("Frame_CardBuddyInfos") 			as CMlFrame);
			declare Label_LocalUser_Name 			<=> (Frame_LocalUser.GetFirstChild("Label_Name") 					as CMlLabel);
			declare Label_LocalUser_Status	 		<=> (Frame_LocalUser.GetFirstChild("Label_Status") 					as CMlLabel);
			declare Label_LocalUser_ServerName 		<=> (Frame_LocalUser.GetFirstChild("Label_ServerName") 				as CMlLabel);
			declare Button_LocalUser_ServerCopyLink <=> (Frame_LocalUser.GetFirstChild("Button_ServerCopyLink") 		as CMlQuad);
			declare Button_LocalUser_ServerLight 	<=> (Frame_LocalUser.GetFirstChild("Quad_ServerLight") 				as CMlQuad);
			declare Button_LocalUserPresence 		<=> (Frame_LocalUser.GetFirstChild("Button_CardBuddyPresence") 		as CMlQuad);
			declare Button_LocalUserBg 				<=> (Frame_LocalUser.GetFirstChild("Button_CardBuddyBg") 			as CMlQuad);
			
			declare Frame_BuddiesButtons 			<=> (Page.MainFrame.GetFirstChild("Frame_BuddiesButtons") 			as CMlFrame);
			declare Button_Presence 				<=> (Frame_BuddiesButtons.GetFirstChild("Button_Presence")	 		as CMlQuad);
			declare Quad_Presence 					<=> (Frame_BuddiesButtons.GetFirstChild("Quad_Presence") 			as CMlQuad);
				
			declare CMlFrame[] 	Frame_Online;
			declare CMlFrame[] 	Frame_Online_Infos;
			declare CMlLabel[] 	Label_Online_Name;
			declare CMlLabel[] 	Label_Online_Status;
			declare CMlLabel[] 	Label_Online_ServerName;
			declare CMlLabel[] 	Label_Online_PendingMessages;
			declare CMlQuad[] 	Quad_Online_Presence;
			declare CMlQuad[] 	Quad_Online_Bg;
			declare CMlQuad[] 	Button_Online_ServerJoin;
			declare CMlQuad[] 	Quad_Online_ServerLight;
			declare CMlQuad[] 	Quad_Online_IsAlly;			
			declare CMlFrame[] 	Frame_Offline;	
			declare CMlLabel[] 	Label_Offline_Name;	
			declare CMlLabel[] 	Label_Offline_NameOnServer;	
			declare CMlLabel[] 	Label_Offline_PendingMessages;	
			declare CMlQuad[] 	Quad_Offline_Bg;
			declare CMlQuad[] 	Button_Offline_BuddyAdd;
			declare CMlQuad[] 	Button_Offline_BuddyCancel;
			declare CMlQuad[] 	Button_Offline_BuddyAccept; 
			declare CMlQuad[] 	Button_Offline_BuddyDeny;
			
			for(I, 1, {{{C_DisplayedBuddiesCount}}}) {
				Frame_Online					.add( (Page.MainFrame.GetFirstChild("Frame_BuddyOnline"^I) 			as CMlFrame) );
				Frame_Online_Infos				.add( (Frame_Online[I-1].GetFirstChild("Frame_CardBuddyInfos") 		as CMlFrame) );
				Label_Online_Name				.add( (Frame_Online[I-1].GetFirstChild("Label_Name") 				as CMlLabel) );
				Label_Online_Status				.add( (Frame_Online[I-1].GetFirstChild("Label_Status") 				as CMlLabel) );
				Label_Online_ServerName			.add( (Frame_Online[I-1].GetFirstChild("Label_ServerName") 			as CMlLabel) );
				Label_Online_PendingMessages	.add( (Frame_Online[I-1].GetFirstChild("Label_PendingMessages") 	as CMlLabel) );
				Button_Online_ServerJoin		.add( (Frame_Online[I-1].GetFirstChild("Button_ServerJoin") 		as CMlQuad) );
				Quad_Online_ServerLight			.add( (Frame_Online[I-1].GetFirstChild("Quad_ServerLight") 			as CMlQuad) );
				Quad_Online_IsAlly				.add( (Frame_Online[I-1].GetFirstChild("Quad_IsAlly") 				as CMlQuad) );
				Quad_Online_Presence			.add( (Frame_Online[I-1].GetFirstChild("Button_CardBuddyPresence") 	as CMlQuad) );
				Quad_Online_Bg					.add( (Frame_Online[I-1].GetFirstChild("Button_CardBuddyBg") 		as CMlQuad) );
				
				Frame_Offline					.add( (Page.MainFrame.GetFirstChild("Frame_BuddyOffline"^I) 		as CMlFrame) );
				Label_Offline_Name				.add( (Frame_Offline[I-1].GetFirstChild("Label_Name") 				as CMlLabel) );
				Label_Offline_NameOnServer		.add( (Frame_Offline[I-1].GetFirstChild("Label_NameOnServer") 		as CMlLabel) );
				Label_Offline_PendingMessages	.add( (Frame_Offline[I-1].GetFirstChild("Label_PendingMessages") 	as CMlLabel) );
				Button_Offline_BuddyAdd			.add( (Frame_Offline[I-1].GetFirstChild("Button_BuddyAdd") 			as CMlQuad) );
				Button_Offline_BuddyCancel		.add( (Frame_Offline[I-1].GetFirstChild("Button_BuddyCancel") 		as CMlQuad) );
				Button_Offline_BuddyAccept		.add( (Frame_Offline[I-1].GetFirstChild("Button_BuddyAccept") 		as CMlQuad) );
				Button_Offline_BuddyDeny		.add( (Frame_Offline[I-1].GetFirstChild("Button_BuddyDeny") 		as CMlQuad) );
				Quad_Offline_Bg					.add( (Frame_Offline[I-1].GetFirstChild("Button_CardBuddyBg") 		as CMlQuad) );
			}	
			
			Label_PresenceAvailableOff			.Value = TextLib::Compose(_("%1Connect as Available"), 	"$0f0");
			Label_PresenceBusyOff				.Value = TextLib::Compose(_("%1Connect as Busy"), 		"$f00");
			Label_PresenceAwayOff				.Value = TextLib::Compose(_("%1Connect as Away"), 		"$ff0");
			Label_PresenceAvailablePlaying		.Value = TextLib::Compose(_("%1Playing available"), 	"$0f0");
			Label_PresenceBusyPlaying			.Value = TextLib::Compose(_("%1Playing busy"), 			"$f00");
			Label_PresenceOfflinePlaying		.Value = TextLib::Compose(_("%1Offline"), 				"$DDD");
			Label_PresenceAvailable				.Value = TextLib::Compose(_("%1Available"), 			"$0f0");
			Label_PresenceBusy					.Value = TextLib::Compose(_("%1Busy"), 					"$f00");
			Label_PresenceAway					.Value = TextLib::Compose(_("%1Away"), 					"$ff0");
			Label_PresenceOffline				.Value = TextLib::Compose(_("%1Offline"), 				"$DDD");
			
			declare Boolean Previous_LocalUserIsPlaying = True;
			declare Integer NewSelectedBuddyLogin_KeyAfterPageChanged;
			declare Boolean PageChangedAfter_NewSelectedBuddyLogin;
			declare Boolean PresenceSelection;			
			declare Boolean IsSettingKey_ToggleChat;			
			declare Text 	Previous_EntrySearchBuddyValue;
			
			declare Integer LatestAnimStart;
			declare Integer AnimCurrentTime;
			declare Boolean AnimIsShowing 		= True;	
			declare Real 	AnimDuration 		= {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
			declare Real 	AnimDurationBounce 	= {{{C_ShowAnimDurationY*C_ShowAnimDurationRatioBounce*ScaleChat/0.78}}};
			declare Real 	AnimOffset 			= {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
			declare Real 	Frame_BuddiesPosY	= 75.;
			
			while(True) {
				yield;
				
				// SMALL UPDATE (SHOW HIDE ANIM)
				if (!PageIsVisible) continue;
				
				if (Now - LatestAnimStart < AnimDuration) {
					AnimCurrentTime = Now - LatestAnimStart;
					if (AnimIsShowing) {
						if (AnimCurrentTime < AnimDurationBounce) {
							AnimOffset = {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}} + ({{{C_ShowAnimOffsetBounce}}} - {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}}) * AnimCurrentTime/AnimDurationBounce;
						} else { 
							AnimOffset = {{{C_ShowAnimOffsetBounce}}} + ({{{C_ShowAnimOffsetEnd}}} - {{{C_ShowAnimOffsetBounce}}})  * (AnimCurrentTime-AnimDurationBounce)/(AnimDuration-AnimDurationBounce);
						}
					} else {
						AnimOffset = {{{C_HideAnimOffsetStart}}} + ({{{C_HideAnimOffsetEnd*ScaleChat/0.78}}} - {{{C_HideAnimOffsetStart}}}) * AnimCurrentTime/AnimDuration;
					}
					Frame_Buddies.RelativePosition.Y = Frame_BuddiesPosY+{{{YGlobalOffset}}} + AnimOffset; 
				} else {
						if (AnimIsShowing) Frame_Buddies.RelativePosition.Y = Frame_BuddiesPosY+{{{YGlobalOffset+C_ShowAnimOffsetEnd}}};
						else {
							Frame_Buddies.RelativePosition.Y = Frame_BuddiesPosY+{{{YGlobalOffset+C_ShowAnimOffsetEnd+C_HideAnimOffsetEnd*ScaleChat/0.78}}};
							Frame_Buddies.Visible = False;
						}
				}
						
				if(Previous_EntrySearchBuddyValue != Entry_SearchBuddy.Value) {
					Previous_EntrySearchBuddyValue = Entry_SearchBuddy.Value;
					SendCustomEvent("SearchBuddy", [Entry_SearchBuddy.Value]);
				}	
				
				if(IsSettingKey_ToggleChat)
					Entry_KeyToggleChat.Value = "Press a key";
				
				// CARDS COLOR & POSITIONS UPDATE
				if (PendingEvents.count == 0 && !Buddies_HasPendingMessages && Now - LatestAnimStart > AnimDuration) continue;
				
				for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {		
					if (I >= Buddies_Login.count) break;	
					if (Buddies_Presence[I] 			== "{{{PresenceShowSystemText_Available}}}") 	Quad_Online_Presence[I]	.Colorize 	= {{{CardBgColorAvailable}}};
					else if (Buddies_Presence[I] 		== "{{{PresenceShowSystemText_Busy}}}") 		Quad_Online_Presence[I]	.Colorize 	= {{{CardBgColorBusy}}};
					else if (Buddies_Presence[I] 		== "{{{PresenceShowSystemText_Away}}}") 		Quad_Online_Presence[I]	.Colorize 	= {{{CardBgColorAway}}};
					else if (Buddies_Presence[I] 		== "{{{PresenceShowSystemText_Offline}}}") 		Quad_Offline_Bg[I]		.Colorize 	= {{{CardBgColorOffline}}};	
					Label_Offline_Name[I]			.Style 					= "TextStaticSmall";
					Label_Offline_Name[I]			.TextSize 				= 2;
					Quad_Offline_Bg[I]				.Opacity 				= 0.33;
					
					if (SelectedBuddyLogin == Buddies_Login[I]) {
						Frame_Online[I]				.RelativePosition.X 	= 1.5 + {{{C_SelectedBuddyCardOffsetX}}};
						Quad_Online_Presence[I]		.Opacity 				= 1.;
						Quad_Online_Bg[I]			.Colorize 				= <1., 1., 1.>;
						Quad_Offline_Bg[I]			.Colorize 				= {{{CardBgColorOffline}}};
					} else {		
						Frame_Online[I]				.RelativePosition.X 	= 1.5; 
						Quad_Online_Presence[I]		.Opacity 				= 0.75;
						Quad_Online_Bg[I]			.Colorize 				= <0.15, 0.15, 0.15>;
						Quad_Offline_Bg[I]			.Colorize 				= {{{CardBgColorOfflineOff}}};	
						if (Buddies_UnreadMessages[I] > 0) {
							declare IncColor = ( MathLib::Sin(0.00628*Now/{{{C_BlinkingTimePendingMessage}}}) + 1.)/2. * 0.4;
							Quad_Online_Bg[I]		.Colorize 				= <0.15 + IncColor, 0.15 + IncColor, 0.15 + IncColor>;
							Quad_Offline_Bg[I]		.Colorize 				= <0.15 + IncColor, 0.15 + IncColor, 0.15 + IncColor>;
						} 
						if (Buddies_IsTitleCard[I]) { 
							Quad_Offline_Bg[I]		.Colorize 				= {{{CardBgColorTitle}}};	
							Quad_Offline_Bg[I]		.Opacity 				= 0.95; 
							Label_Offline_Name[I]	.Style 					= "TextTitle3";
							Label_Offline_Name[I]	.TextSize 				= 1;
						}
					}	
				}
				
			
				// MEDIUM UPDATE (MOUSE OVER)
				if (PendingEvents.count == 0) continue;
				
				declare Boolean OnlyMouseEvents = True;
				foreach(Event in PendingEvents) {			
					switch(Event.Type) {
					
						case CMlEvent::Type::MouseOut:	
							SendCustomEvent("Tooltip_Needed", [""]);
						
						case CMlEvent::Type::MouseOver: {	
							if (Event.Control == Button_ModeChat)
								SendCustomEvent("Tooltip_Needed", [ _("Buddies") ]);
							else if (Event.Control == Button_ModeServerList)
								SendCustomEvent("Tooltip_Needed", [ _("Buddies currently playing") ]);
							else if (Event.Control == Button_ModeAddBuddy) {
								if(LocalUserPendingRequest == 1)
									SendCustomEvent("Tooltip_Needed", [ _("Someone wants to be your buddy !") ]);
								else if(LocalUserPendingRequest > 1)
									SendCustomEvent("Tooltip_Needed", [ TextLib::Compose( _("%1 players want to be your buddies !"), TextLib::ToText(LocalUserPendingRequest))]);
								else
									SendCustomEvent("Tooltip_Needed", [ _("Add a buddy") ]);
								
							} else if (Event.Control == Button_ModeSettings)
								SendCustomEvent("Tooltip_Needed", [ _("Chat Settings") ]);
							else if (Event.Control.ControlId == "Button_MailBox")
								SendCustomEvent("Tooltip_Needed", [ _("Open Mail Box") ]);
							else if (Event.Control == Button_Presence)
								SendCustomEvent("Tooltip_Needed", [ _("Change your presence") ]);
							else if (Event.Control == Entry_SearchBuddy)
								SendCustomEvent("Tooltip_Needed", [ _("Search in your buddy list for...") ]);
							else if (Event.Control == Button_LocalUser_ServerCopyLink)
								SendCustomEvent("Tooltip_Needed", [ _("Copy your server link to clipboard") ]);
							else if (Event.Control.ControlId == "Button_BuddyAccept")
								SendCustomEvent("Tooltip_Needed", [ _("Accept this buddy request") ]);
							else if (Event.Control.ControlId == "Button_BuddyDeny")
								SendCustomEvent("Tooltip_Needed", [ _("Deny this buddy request") ]);
							else if (Event.Control.ControlId == "Button_BuddyAdd")
								SendCustomEvent("Tooltip_Needed", [ _("Add this buddy") ]);
							else if (Event.Control.ControlId == "Button_BuddyCancel")
								SendCustomEvent("Tooltip_Needed", [ _("Cancel your buddy request") ]);
							else if (Event.Control.ControlId == "Button_AddModeManiaplanet")
								SendCustomEvent("Tooltip_Needed", [ _("Buddy Requests and Suggestions") ]);
							else if (Event.Control.ControlId == "Button_AddModeServer")
								SendCustomEvent("Tooltip_Needed", [ _("Players playing on this server") ]);
							else if (Event.Control.ControlId == "Button_ServerJoin") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Online_ServerJoin[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Join %1 to play"), Buddies_Login[I] )]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Quad_IsAlly") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Quad_Online_IsAlly[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("%1 is your ally"), Buddies_Login[I] )]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_BuddyAccept") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyAccept[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Accept %1 buddy request"), Buddies_Login[I] )]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_BuddyDeny") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyDeny[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Deny %1 buddy request"), Buddies_Login[I] )]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Label_NameOnServer") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Label_Offline_NameOnServer[I]) {
										SendCustomEvent("Tooltip_Needed", [TextLib::Compose( _("Login : %1"), Buddies_Login[I] )]);
										break;
									}
								} 
							}
						}
						
						default: OnlyMouseEvents = False;
					}
				}
				
				// BIG UPDATE
				if (OnlyMouseEvents) continue;
				
				if (PageChangedAfter_NewSelectedBuddyLogin) {
					PageChangedAfter_NewSelectedBuddyLogin = False;
					declare Text NewSelectedBuddyLogin = Buddies_Login[NewSelectedBuddyLogin_KeyAfterPageChanged];
					SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [NewSelectedBuddyLogin, GetPresenceDisplayableText(Buddies_Presence[NewSelectedBuddyLogin_KeyAfterPageChanged])]);
				}
				
				foreach(Event in PendingEvents) {			
					switch(Event.Type) {	
				
						case CMlEvent::Type::MouseClick: {
							if (Event.Control != Entry_KeyToggleChat)
								SendCustomEvent("Click", Text[]);
							SendCustomEvent("Tooltip_Needed", [""]);
							IsSettingKey_ToggleChat = False;
							if (Event.Control == Button_ModeChat && (Mode_ServerList || Mode_AddBuddy || Mode_Settings)) {	
								PresenceSelection = False;
								SendCustomEvent("Buddies_ModeServerList_Click", ["0"]);
								SendCustomEvent("Buddies_ModeAddBuddy_Click", ["0"]);
								SendCustomEvent("Buddies_ModeSettings_Click", ["0"]);
							} else if (Event.Control == Button_ModeServerList || Event.Control == Label_BuddiesPlayingCount) {	
								if (Mode_ServerList)	SendCustomEvent("Buddies_ModeServerList_Click", ["0"]);
								else					SendCustomEvent("Buddies_ModeServerList_Click", ["1"]);
								PresenceSelection = False;
							} else if (Event.Control == Button_ModeSettings) {	
								if (Mode_Settings)		SendCustomEvent("Buddies_ModeSettings_Click", ["0"]);
								else					SendCustomEvent("Buddies_ModeSettings_Click", ["1"]);
								PresenceSelection = False;
							} else if (Event.Control == Button_ModeAddBuddy) {	
								if (Mode_AddBuddy)		{ SendCustomEvent("Buddies_ModeAddBuddy_Click", ["0"]); SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]); }
								else 					{ SendCustomEvent("Buddies_ModeAddBuddy_Click", ["1"]); SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]); }
								PresenceSelection = False;
							} else if (Event.Control == Label_BuddyListIsEmpty) {	
								if(Entry_SearchBuddy.Value != "") {
									Entry_SearchBuddy.Value = "";
								} else {
									if (Mode_AddBuddy)		{ SendCustomEvent("Buddies_ModeAddBuddy_Click", ["0"]); SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]); }
									else 					{ SendCustomEvent("Buddies_ModeAddBuddy_Click", ["1"]); SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]); }
									SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["1"]);
									
								}
								PresenceSelection = False;
							} else if (Event.Control == Label_PendingRequest) {	
								SendCustomEvent("Buddies_ModeAddBuddy_Click", ["1"]); 
								SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["1"]);
								SendCustomEvent("Buddies_AddModeServer_Click", ["0"]);
								SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["1"]);
							} else if (Event.Control.ControlId == "Button_MailBox") {	
								SendCustomEvent("SendMailToBuddy", [""]);
							} else if (Event.Control.ControlId == "Button_ClearSearch") {	
								Entry_SearchBuddy.Value = "";
							} else if (Event.Control == Button_AddModeServer) {	
								SendCustomEvent("Buddies_AddModeServer_Click", ["1"]);
								SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["0"]);
							} else if (Event.Control == Button_AddModeManiaplanet) {	
								SendCustomEvent("Buddies_AddModeServer_Click", ["0"]);
								SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["1"]);
							} else if (Event.Control.ControlId == "Button_Presence") {		
								PresenceSelection = !PresenceSelection;
							} else if (Event.Control.ControlId == "Button_Previous") {		
								SendCustomEvent("Buddies_PreviousPage", Text[]);	
							} else if (Event.Control.ControlId == "Button_Next") {
								SendCustomEvent("Buddies_NextPage", Text[]);	
							} else if (Event.Control.ControlId == "Label_PresenceOffline") {
								SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [""]);
								SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]);
								SendCustomEvent("Buddies_PresenceOffline_Click", Text[]);
								PresenceSelection = False;		
							} else if (Event.Control.ControlId == "Label_PresenceAvailable") {
								SendCustomEvent("Buddies_PresenceAvailable_Click", Text[]);					
								PresenceSelection = False;							
							} else if (Event.Control.ControlId == "Label_PresenceBusy") {
								SendCustomEvent("Buddies_PresenceBusy_Click", Text[]);		
								PresenceSelection = False;													
							} else if (Event.Control.ControlId == "Label_PresenceAway") {
								SendCustomEvent("Buddies_PresenceAway_Click", Text[]);		
								PresenceSelection = False;			
							} else if (Event.Control.ControlId == "Entry_KeyToggleChat") {
								IsSettingKey_ToggleChat = !IsSettingKey_ToggleChat;
							} else if (Event.Control.ControlId == "Button_CardBuddyBg") {	
								PresenceSelection = False;
								if (Event.Control == Button_LocalUserPresence || Event.Control == Button_LocalUserBg) {
									if (HasSelectedLocalUser)
										SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["0"]);
									else 
										SendCustomEvent("Buddies_ChangeHasSelectedLocalUser", ["1"]);	
								} else {															
									for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
										if (Event.Control == Quad_Online_Presence[I] || Event.Control == Quad_Online_Bg[I] || Event.Control == Quad_Offline_Bg[I]) {											
											if (SelectedBuddyLogin == Buddies_Login[I]) {
												SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [""]);
											} else {
												SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [Buddies_Login[I], GetPresenceDisplayableText(Buddies_Presence[I])]);
											}
											break;
										}
									}
								}
							} else if (Event.Control.ControlId == "Button_ServerJoin") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Online_ServerJoin[I]) {
										SendCustomEvent("Buddies_ServerJoin_Click", [Buddies_ServerJoinLink[I]]);
										// SendCustomEvent("CloseChat_Click", [""]);
										break;
									}
								}	
							} else if (Event.Control == Button_LocalUser_ServerCopyLink) {
								SendCustomEvent("ServerCopyLink_Click", [""]);
							} else if (Event.Control == Check_NoticeEnableServerJoin || Event.Control == Label_NoticeEnableServerJoin) {
								SendCustomEvent("Set_NoticeOnServerJoin_Click", [""]);
							} else if (Event.Control == Check_NoticeEnableConnection || Event.Control == Label_NoticeEnableConnection) {
								SendCustomEvent("Set_NoticeOnNewConnection_Click", [""]);
							} else if (Event.Control == Check_NoticeEnableMessage || Event.Control == Label_NoticeEnableMessage) {
								SendCustomEvent("Set_NoticeOnNewMessage_Click", [""]);
							} else if (Event.Control == Check_NoticeEnableSound || Event.Control == Label_NoticeEnableSound) {
								SendCustomEvent("Set_SoundOnNewMessage_Click", [""]);
							} else if (Event.Control == Entry_NoticeCount) {
								Entry_NoticeCount.Value = "";
							} else if (Event.Control == Label_NoticeCount) {
								Entry_NoticeCount.StartEdition();
							} else if (Event.Control == Entry_NoticeDuration) {
								Entry_NoticeDuration.Value = "";
							} else if (Event.Control == Label_NoticeDuration) {
								Entry_NoticeDuration.StartEdition();
							} else if (Event.Control == Entry_NoticeScale) {
								Entry_NoticeScale.Value = "";
							} else if (Event.Control == Label_NoticeScale) {
								Entry_NoticeScale.StartEdition();
							} else if (Event.Control == Entry_AddBuddy) {
								Entry_AddBuddy.Value = "";
							} else if (Event.Control == Button_AddBuddySubmit) {
								declare Request = TextLib::Trim(Entry_AddBuddy.Value);
								if (TextLib::Length(Request) > 0)
								{
									SendCustomEvent("AddBuddy", [Request]);
									Request = TextLib::Compose( _("Searching for buddy %1..."), Request);
								}
							} else if (Event.Control.ControlId == "Button_BuddyAdd") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyAdd[I]) {
										SendCustomEvent("AddBuddy", [Buddies_Login[I]]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_BuddyCancel") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyCancel[I]) {
										SendCustomEvent("AddBuddyDeny", [Buddies_Login[I]]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_BuddyAccept") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyAccept[I]) {
										SendCustomEvent("AddBuddyAccept", [Buddies_Login[I]]);
										break;
									}
								} 
							} else if (Event.Control.ControlId == "Button_BuddyDeny") {
								for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
									if (Event.Control == Button_Offline_BuddyDeny[I]) {
										SendCustomEvent("AddBuddyDeny", [Buddies_Login[I]]);
										break;
									}
								} 
							}
						}
						
						case CMlEvent::Type::EntrySubmit: {
							if (Event.Control == Entry_AddBuddy) {
								declare Request = TextLib::Trim(Entry_AddBuddy.Value);
								if (TextLib::Length(Request) > 0)
								{
									SendCustomEvent("AddBuddy", [Request]);
									Request = TextLib::Compose( _("Searching for buddy %1..."), Request);
								}
								Entry_AddBuddy.Value = "";
							} else if (Event.Control == Entry_NoticeCount && TextLib::Length(Entry_NoticeCount.Value) > 0) {
								SendCustomEvent("Set_NoticeCount", [Entry_NoticeCount.Value]);
							} else if (Event.Control == Entry_NoticeDuration && TextLib::Length(Entry_NoticeDuration.Value) > 0) {
								SendCustomEvent("Set_NoticeDuration", [Entry_NoticeDuration.Value]);
							} else if (Event.Control == Entry_NoticeScale && TextLib::Length(Entry_NoticeScale.Value) > 0) {
								SendCustomEvent("Set_NoticeScale", [Entry_NoticeScale.Value]);
							} else if (Event.Control == Entry_KeyToggleChat && TextLib::Length(Entry_KeyToggleChat.Value) > 0) {
								SendCustomEvent("Set_KeyToggleChat", [Entry_KeyToggleChat.Value]);
							}
						}
						
						case CMlEvent::Type::KeyPress: {
							if (Buddies_DialogBoxNeeded) break;
							if (IsSettingKey_ToggleChat) {
								IsSettingKey_ToggleChat = False;
								SendCustomEvent("Set_KeyToggleChat", [Event.KeyName]);
							}
							if (Event.KeyName == "Escape") {							
								SendCustomEvent("CloseChat_Click", [""]);
							} else if (Event.KeyName == "Prior") {
								declare Integer SelectedBuddyLogin_Key 				= Buddies_Login.keyof(SelectedBuddyLogin);
								declare NewSelectedBuddyLogin_Key 					= SelectedBuddyLogin_Key-1;
								if (NewSelectedBuddyLogin_Key < 0) {
									if (PageIndex > 0) { 									
										SendCustomEvent("Buddies_PreviousPage", Text[]);							
										NewSelectedBuddyLogin_Key 					= Buddies_Login.count - 1;
										NewSelectedBuddyLogin_KeyAfterPageChanged 	= NewSelectedBuddyLogin_Key;
										PageChangedAfter_NewSelectedBuddyLogin 		= True; 			
										declare Text NewSelectedBuddyLogin 			= Buddies_Login[NewSelectedBuddyLogin_Key];
										SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [NewSelectedBuddyLogin, GetPresenceDisplayableText(Buddies_Presence[NewSelectedBuddyLogin_Key])]);
									}
								} else {		
									declare Text NewSelectedBuddyLogin 				= Buddies_Login[NewSelectedBuddyLogin_Key];
									SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [NewSelectedBuddyLogin, GetPresenceDisplayableText(Buddies_Presence[NewSelectedBuddyLogin_Key])]);
								}
							} else if (Event.KeyName == "Next") { 
								declare Integer SelectedBuddyLogin_Key 				= Buddies_Login.keyof(SelectedBuddyLogin);
								declare NewSelectedBuddyLogin_Key 					= SelectedBuddyLogin_Key+1;
								if (NewSelectedBuddyLogin_Key > Buddies_Login.count - 1) {
									if (PageIndex < PageIndexMax) {
										SendCustomEvent("Buddies_NextPage", Text[]);	
										NewSelectedBuddyLogin_Key 					= 0;
										NewSelectedBuddyLogin_KeyAfterPageChanged 	= NewSelectedBuddyLogin_Key;
										PageChangedAfter_NewSelectedBuddyLogin 		= True;
										declare Text NewSelectedBuddyLogin 			= Buddies_Login[NewSelectedBuddyLogin_Key];
										SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [NewSelectedBuddyLogin, GetPresenceDisplayableText(Buddies_Presence[NewSelectedBuddyLogin_Key])]);
									} 
								} else {
									declare Text NewSelectedBuddyLogin = Buddies_Login[NewSelectedBuddyLogin_Key];
									SendCustomEvent("Buddies_ChangeSelectedBuddyLogin", [NewSelectedBuddyLogin, GetPresenceDisplayableText(Buddies_Presence[NewSelectedBuddyLogin_Key])]);
								}
							} else if (Event.KeyName == "Home" && PageIndex > 0) { 	
								SendCustomEvent("Buddies_PreviousPage", Text[]);	
								NewSelectedBuddyLogin_KeyAfterPageChanged = 0;
								PageChangedAfter_NewSelectedBuddyLogin = True;
							} else if (Event.KeyName == "End" && PageIndex != PageIndexMax) { 
								SendCustomEvent("Buddies_NextPage", Text[]);	
								NewSelectedBuddyLogin_KeyAfterPageChanged = 0;
								PageChangedAfter_NewSelectedBuddyLogin = True;
							}						
						} 
			
						case CMlEvent::Type::PluginCustomEvent: {	
							if (Event.PluginCustomEventType == "Buddies_AnimStart") {
								Frame_Buddies.Visible = True;
								if (Event.PluginCustomEventData[0] == "Show") {
									AnimDuration = {{{C_ShowAnimDurationY*ScaleChat/0.78}}};
									AnimIsShowing = True;
									AnimOffset = {{{C_ShowAnimOffsetStartY*ScaleChat/0.78}}};
									LatestAnimStart = Now;
								} else if (Event.PluginCustomEventData[0] == "Hide") {
									AnimDuration = {{{C_HideAnimDuration}}};
									AnimIsShowing = False;
									AnimOffset = 0.;
									LatestAnimStart = Now;
								}
							} else if (Event.PluginCustomEventType == "AddBuddyOk")  {
								// log("Add Buddy : Ok");
							}  else if (Event.PluginCustomEventType == "Buddies_CloseChat")  {
								SendCustomEvent("CloseChat_Click", [""]);
							}  else if (Event.PluginCustomEventType == "Buddies_CancelSettingKey")  {
								IsSettingKey_ToggleChat = False;
							} else if (Event.PluginCustomEventType == "AddBuddyError" || Event.PluginCustomEventType == "RemoveBuddyOk")  {
								declare KeyImgUrl = Buddies_Login.keyof(Event.PluginCustomEventData[0]);
								if (KeyImgUrl != -1) {
									Button_Offline_BuddyAdd[KeyImgUrl].ImageUrl 		= "{{{ImgSrc}}}/buddy-buddy-add.dds";
									Button_Offline_BuddyAdd[KeyImgUrl].ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-buddy-add-focus.dds";
								}
							} 				
						}
					}
				}
				
				// Visibility
				declare Boolean IsOnline 				 	= !IsOffline && !IsConnecting;
				declare Boolean IsPlaying 				 	= LocalUserCurrentServerLogin != "";
				Frame_BuddiesHeader				.Visible 	= IsOnline;
				Frame_BuddiesSearch				.Visible 	= IsOnline && !Mode_AddBuddy && !Mode_Settings; 
				Frame_BuddiesList				.Visible 	= IsOnline && !Mode_Settings;
				Frame_PreviousNext				.Visible 	= IsOnline && !Mode_Settings;
				Frame_ChatIsOffline				.Visible 	= IsOffline;
				Quad_BuddiesListBg				.Visible 	= !IsConnecting;
				Quad_BuddiesListArrow			.Visible 	= !IsConnecting;
				Quad_BuddiesListBgTitle			.Visible 	= !IsConnecting;
				Quad_BuddiesListBgMetalBar		.Visible 	= !IsConnecting;
				Label_LocalUser_Status			.Visible 	= !IsPlaying;
				Label_LocalUser_ServerName		.Visible 	= IsPlaying;
				Button_LocalUser_ServerCopyLink	.Visible 	= IsPlaying && !Mode_ServerList;
				Frame_AddBuddy					.Visible 	= Mode_AddBuddy && IsOnline;
				Frame_Settings					.Visible 	= Mode_Settings && IsOnline;
				Frame_AddBuddyBottomBar			.Visible 	= IsPlaying;
				Frame_PresenceMenu				.Visible 	= PresenceSelection && !IsPlaying;
				Frame_PresencePlaying			.Visible 	= PresenceSelection && IsPlaying;
				
				if(Entry_SearchBuddy.Value != "") {
					// Button_ClearSearch.Substyle = "Close";
					Button_ClearSearch.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-clear-off.dds";
					Button_ClearSearch.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-clear-focus.dds";
				} else {
					// Button_ClearSearch.Substyle = "Maximize";
					Button_ClearSearch.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-go-off.dds";
					Button_ClearSearch.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-go-focus.dds";
				}
				
				if (IsPlaying && !Mode_ServerList) {
					Frame_LocalUser_Infos		.RelativePosition.X = 8.;	
					Label_LocalUser_Name		.Size.X = {{{39./GlobalTextRatio}}};
					Label_LocalUser_Status		.Size.X = {{{39./GlobalTextRatio}}};
					Label_LocalUser_ServerName	.Size.X = {{{39./GlobalTextRatio}}};	
				} else {	
					Frame_LocalUser_Infos		.RelativePosition.X = 4.;	
					Label_LocalUser_Name		.Size.X = {{{43./GlobalTextRatio}}};
					Label_LocalUser_Status		.Size.X = {{{43./GlobalTextRatio}}};
					Label_LocalUser_ServerName	.Size.X = {{{43./GlobalTextRatio}}};				
				
				}
				
				if (IsOffline) {
					Quad_BuddiesListBg.Size.Y = 33.;
					Quad_BuddiesListBgMetalBar.RelativePosition.Y = -22.1;
				} else {
					Quad_BuddiesListBg.Size.Y = {{{YSizeChat}}}+1.5;
					Quad_BuddiesListBgMetalBar.RelativePosition.Y = -{{{YSizeChat-9.}}};
					
					// Visibility
					Label_BuddyListIsEmpty		.Visible 	= Buddies_Login.count == 0 && !Mode_AddBuddy && !Mode_ServerList && !Mode_Settings;
					Label_PendingRequest		.Visible 	= LocalUserPendingRequest > 0;
					Label_MessagesCount			.Visible 	= Buddies_Messenger_MessagesCount > 0;
					Frame_LocalUser				.Visible 	= !Mode_AddBuddy;
					Button_Previous				.Visible 	= PageIndex > 0;
					Button_Next					.Visible 	= PageIndex < PageIndexMax; 
					
					// Update Labels
					if(Entry_SearchBuddy.Value != "")
						Label_BuddyListIsEmpty	.Value		= _("No buddy found.");
					else 
						Label_BuddyListIsEmpty	.Value		= _("Hello and welcome to maniaplanet. You don't have any buddy yet. Click here to add a buddy from their login, or join a server and add players you've played with !");
					Label_MessagesCount			.Value 		= TextLib::ToText(Buddies_Messenger_MessagesCount);
					Label_BuddiesPlayingCount	.Value 		= TextLib::ToText(Buddies_BuddiesPlayingCount);
					Label_PendingRequest		.Value 		= TextLib::ToText(LocalUserPendingRequest);
					Label_LocalUser_Name		.Value 		= LocalUser.Name;
					
					// Colors
					switch (LocalUserCurrentPresence) {
						case "{{{PresenceShowSystemText_Available}}}" : { 
							Button_LocalUserPresence	.Colorize 	= {{{CardBgColorAvailable}}}; 
							Quad_Presence				.Substyle 	= "LvlGreen";
						}
						
						case "{{{PresenceShowSystemText_Busy}}}" : { 
							Button_LocalUserPresence	.Colorize 	= {{{CardBgColorBusy}}}; 
							Quad_Presence				.Substyle 	= "LvlRed";
						}
						
						case "{{{PresenceShowSystemText_Away}}}" : { 
							Button_LocalUserPresence	.Colorize 	= {{{CardBgColorAway}}}; 
							Quad_Presence				.Substyle 	= "LvlYellow";
						}
						
						default: {
							Button_LocalUserPresence	.Colorize 	= {{{CardBgColorOfflineOff}}};
							Quad_Presence				.Substyle 	= "GenericButton";
						}
					}
					
					if (HasSelectedLocalUser) {
						Button_LocalUserPresence		.Opacity 	= 1.;
						Button_LocalUserBg				.Colorize	= <1., 1., 1.>;
					} else {
						Button_LocalUserPresence		.Opacity 	= 0.75;
						Button_LocalUserBg				.Colorize 	= <0.15, 0.15, 0.15>;
					}
					
					
					if (Mode_AddBuddy) {
						Button_ModeAddBuddy		.ImageUrl 		= "{{{ImgSrc}}}/buddy-add-on.dds";
						Button_ModeAddBuddy		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-add-on.dds";
						Button_ModeChat			.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-chat.dds";
						Button_ModeChat			.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-chat-focus.dds";
						Button_ModeServerList	.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-serverlist.dds";
						Button_ModeServerList	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-serverlist-focus.dds";
						Button_ModeSettings		.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-settings.dds";
						Button_ModeSettings		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-settings-focus.dds";
						if (AddMode_Maniaplanet) {
							Button_AddModeManiaplanet	.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-maniaplanet-on.dds";
							Button_AddModeManiaplanet	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-maniaplanet-on.dds";
							Button_AddModeServer		.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-server.dds";
							Button_AddModeServer		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-server-focus.dds";
						} else { 
							Button_AddModeManiaplanet	.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-maniaplanet.dds";
							Button_AddModeManiaplanet	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-maniaplanet-focus.dds";
							Button_AddModeServer		.ImageUrl 		= "{{{ImgSrc}}}/buddy-search-server-on.dds";
							Button_AddModeServer		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-search-server-on.dds";
						}
					} else if (Mode_ServerList) {
						Button_ModeServerList	.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-serverlist-on.dds";
						Button_ModeServerList	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-serverlist-on.dds";
						Button_ModeChat			.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-chat.dds";
						Button_ModeChat			.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-chat-focus.dds";
						Button_ModeAddBuddy		.ImageUrl 		= "{{{ImgSrc}}}/buddy-add.dds";
						Button_ModeAddBuddy		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-add-focus.dds";
						Button_ModeSettings		.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-settings.dds";
						Button_ModeSettings		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-settings-focus.dds";
					} else if (Mode_Settings) {
						Button_ModeSettings		.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-settings-on.dds";
						Button_ModeSettings		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-settings-on.dds";
						Button_ModeServerList	.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-serverlist.dds";
						Button_ModeServerList	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-serverlist-focus.dds";
						Button_ModeChat			.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-chat.dds";
						Button_ModeChat			.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-chat-focus.dds";
						Button_ModeAddBuddy		.ImageUrl 		= "{{{ImgSrc}}}/buddy-add.dds";
						Button_ModeAddBuddy		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-add-focus.dds";
						// Settings Management						
						Check_NoticeEnableSound		.StyleSelected 	= Settings_SoundOnNewMessage;
						Check_NoticeEnableMessage	.StyleSelected 	= Settings_NoticeOnNewMessage;
						Check_NoticeEnableConnection.StyleSelected 	= Settings_NoticeOnNewConnection;
						Check_NoticeEnableServerJoin.StyleSelected 	= Settings_NoticeOnServerJoin;
						Entry_NoticeCount			.Value 			= TextLib::ToText(Settings_NoticeCount);
						Entry_NoticeDuration		.Value		 	= TextLib::ToText(Settings_NoticeDuration);
						Entry_NoticeScale			.Value 			= TextLib::ToText(Settings_NoticeScale);
						Entry_KeyToggleChat			.Value 			= Settings_KeyToggleChat;
					} else {
						Button_ModeChat			.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-chat-on.dds";
						Button_ModeChat			.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-chat-on.dds";
						Button_ModeServerList	.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-serverlist.dds";
						Button_ModeServerList	.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-serverlist-focus.dds";
						Button_ModeAddBuddy		.ImageUrl 		= "{{{ImgSrc}}}/buddy-add.dds";
						Button_ModeAddBuddy		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-add-focus.dds";
						Button_ModeSettings		.ImageUrl 		= "{{{ImgSrc}}}/buddy-mode-settings.dds";
						Button_ModeSettings		.ImageUrlFocus 	= "{{{ImgSrc}}}/buddy-mode-settings-focus.dds";
					}
				
					if (LocalUserCurrentServerLogin == "") {
						if (Previous_LocalUserIsPlaying) {
							SendCustomEvent("Buddies_AddModeServer_Click", 		["0"]);
							SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["1"]);
						}		
						Previous_LocalUserIsPlaying 			= False;
						Button_LocalUser_ServerLight.ImageUrl 	= "{{{ImgSrc}}}/buddy-serverlight-off.dds";
						Label_LocalUser_Status		.Value 		= LocalUserCurrentStatus;
					} else {
						if (!Previous_LocalUserIsPlaying) {
							SendCustomEvent("Buddies_AddModeServer_Click", 		["1"]);
							SendCustomEvent("Buddies_AddModeManiaplanet_Click", ["0"]);
						}							
						Previous_LocalUserIsPlaying = True; 
						Label_LocalUser_ServerName	.Value 		= LocalUserCurrentServerName;
						if 		(LocalUserCurrentPresence == "{{{PresenceShowSystemText_Available}}}") 	Button_LocalUser_ServerLight.ImageUrl = "{{{ImgSrc}}}/buddy-serverlight-green.dds"; 
						else if (LocalUserCurrentPresence == "{{{PresenceShowSystemText_Busy}}}") 		Button_LocalUser_ServerLight.ImageUrl = "{{{ImgSrc}}}/buddy-serverlight-red.dds";
						if 		(LocalUserCurrentPresence == "{{{PresenceShowSystemText_Away}}}") 		SendCustomEvent("Buddies_PresenceAvailable_Click", Text[]);		
					}	
					
					for(I, 0, {{{C_DisplayedBuddiesCount}}}-1) {
						if (I >= Buddies_Login.count) {
							// Visibility
							Frame_Online[I]						.Visible 	= False;
							Frame_Offline[I]					.Visible	= False;
						} else if (Buddies_Presence[I] == "{{{PresenceShowSystemText_Offline}}}") {
							// Visibility
							Frame_Online[I]						.Visible 	= False;
							Frame_Offline[I]					.Visible 	= True;
							Label_Offline_Name[I]				.Visible 	= !Mode_AddBuddy || !AddMode_Server;
							Label_Offline_NameOnServer[I]		.Visible 	= Mode_AddBuddy && AddMode_Server;
							Label_Offline_PendingMessages[I]	.Visible 	= Buddies_UnreadMessages[I] > 0;
							Button_Offline_BuddyAccept[I]		.Visible 	= Mode_AddBuddy && !Buddies_IsTitleCard[I] && Buddies_SubscriptionStatus[I] == "RequestFrom";
							Button_Offline_BuddyDeny[I]			.Visible 	= Mode_AddBuddy && !Buddies_IsTitleCard[I] && Buddies_SubscriptionStatus[I] == "RequestFrom";
							Button_Offline_BuddyAdd[I]			.Visible 	= Mode_AddBuddy && !Buddies_IsTitleCard[I] && Buddies_SubscriptionStatus[I] == "";
							Button_Offline_BuddyCancel[I]		.Visible 	= Mode_AddBuddy && !Buddies_IsTitleCard[I] && Buddies_SubscriptionStatus[I] == "RequestTo";
							
							// Texts
							if (Buddies_Name[I] == "") { 
								Label_Offline_Name[I]			.Value 		= Buddies_Login[I];
								Label_Offline_NameOnServer[I]	.Value 		= Buddies_Login[I];
							} else {
								Label_Offline_Name[I]			.Value 		= Buddies_Name[I];
								Label_Offline_NameOnServer[I]	.Value 		= Buddies_Name[I];
							}
							Label_Offline_PendingMessages[I]	.Value 		= "$06d"^Buddies_UnreadMessages[I];
							
						} else {
							// Visibility
							Frame_Online[I]						.Visible 	= True;
							Frame_Offline[I]					.Visible 	= False;
							Quad_Online_IsAlly[I]				.Visible 	= Buddies_IsAlly[I];
							Label_Online_PendingMessages[I]		.Visible 	= Buddies_UnreadMessages[I] > 0;
							if (Buddies_ServerLogin[I] == "" || Mode_ServerList) {
								Label_Online_ServerName[I]		.Visible 	= False;
								Label_Online_Status[I]			.Visible 	= True;
								Button_Online_ServerJoin[I]		.Visible 	= False;
								Frame_Online_Infos[I]			.RelativePosition.X = 4.;	
								Label_Online_Name[I]			.Size.X 	= {{{43./GlobalTextRatio}}};
								Label_Online_Status[I]			.Size.X 	= {{{43./GlobalTextRatio}}};
								Label_Online_ServerName[I]		.Size.X 	= {{{43./GlobalTextRatio}}};				
							} else if (!Mode_ServerList) {
								Label_Online_Status[I]			.Visible 	= False;
								Label_Online_ServerName[I]		.Visible 	= True;
								Button_Online_ServerJoin[I]		.Visible 	= True;
								Label_Online_Name[I]			.Size.X 	= {{{39./GlobalTextRatio}}};
								Label_Online_Status[I]			.Size.X 	= {{{39./GlobalTextRatio}}};
								Label_Online_ServerName[I]		.Size.X 	= {{{39./GlobalTextRatio}}};
								Frame_Online_Infos[I]			.RelativePosition.X = 8.;	
								if (Buddies_ServerName[I] == "") 	Label_Online_ServerName[I].Value = Buddies_ServerLogin[I];
								else  								Label_Online_ServerName[I].Value = Buddies_ServerName[I];
							}
							
							// Texts
							Label_Online_PendingMessages[I].Value = "$06d"^Buddies_UnreadMessages[I];
							if (Buddies_Status[I] == "") 	Label_Online_Status[I]	.Value = GetPresenceDisplayableText(Buddies_Presence[I]);
							else 							Label_Online_Status[I]	.Value = Buddies_Status[I];
							if (Buddies_Name[I] == "") 		Label_Online_Name[I]	.Value = Buddies_Login[I];
							else 							Label_Online_Name[I]	.Value = Buddies_Name[I];	
							
							// Images
							if (Buddies_ServerLogin[I] == "") 
								Quad_Online_ServerLight[I].ImageUrl = "{{{ImgSrc}}}/buddy-serverlight-off.dds";
							else {
								if 		(Buddies_Presence[I] == "{{{PresenceShowSystemText_Available}}}") 	Quad_Online_ServerLight[I].ImageUrl = "{{{ImgSrc}}}/buddy-serverlight-green.dds";
								else if (Buddies_Presence[I] == "{{{PresenceShowSystemText_Busy}}}") 		Quad_Online_ServerLight[I].ImageUrl = "{{{ImgSrc}}}/buddy-serverlight-red.dds";
							}
						}
					}
				}
			}
		}
	--></script>
	""";
	
	/////////////////////////////////////////////	
	// BUSINESS LOGIC INIT

	declare Boolean NoticeShown 		for Layer_Notices.LocalPage;
	declare Real 	TooltipSizeX 		for Layer_Notices.LocalPage;
	declare Boolean DialogBoxNeeded 	for Layer_DialogBox.LocalPage;

	declare persistent Text[] 			Persistent_LatestBuddyPlayedWith;
	declare persistent Text 			Desired_Status;
	declare persistent Text 			Desired_ShowText;
	declare persistent Text 			Persistent_Settings_KeyToggleChat = "F7";
	declare persistent Real 			Persistent_Settings_NoticeScale = 1.;
	declare persistent Real 			Persistent_Settings_NoticeDuration = 5.5;
	declare persistent Integer 			Persistent_Settings_NoticeCount = 3;
	declare persistent Boolean 			Persistent_Settings_NoticeOnNewMessage = True;
	declare persistent Boolean 			Persistent_Settings_SoundOnNewMessage = True;
	declare persistent Boolean 			Persistent_Settings_NoticeOnNewConnection = True;
	declare persistent Boolean 			Persistent_Settings_NoticeOnServerJoin = True;
	declare persistent Text[][Text] 	Persistent_HistoryMessage;
	declare persistent Boolean[][Text] 	Persistent_HistoryIsFromMe;
	declare persistent Text[][Text] 	Persistent_HistoryDate;
	declare persistent Integer[Text] 	Persistant_UnreadMessages;
	
	declare CBuddiesManager::EConnectionStatus 	SoundAlert_Previous_ConnectionStatus = CBuddiesManager::EConnectionStatus::Offline;
	declare CBuddiesManager::EConnectionStatus 	Previous_ConnectionStatus;
	declare CBuddiesManager::EPresenceShow 		Desired_Show = GetMyPresenceEnumFromSystemText(Desired_ShowText);
	declare CBuddiesManager::EPresenceShow 		Previous_Desired_Show;
	declare CBuddy 		Desired_SelectedBuddy;
	declare CBuddy 		Previous_SelectedBuddy;
	declare Boolean 	Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = True;
	declare Boolean 	Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = True;
	declare Boolean 	Displayed_Status_Update = True;
	declare Boolean 	PreviousDialogBoxNeeded;
	declare Boolean 	LocalUserNewDisconnection;
	declare Boolean 	Desired_HasSelectedLocalUser;
	declare Boolean 	Desired_ModeServerList;
	declare Boolean 	Desired_ModeSettings;
	declare Boolean 	Desired_ModeAddBuddy;
	declare Boolean 	Desired_AddModeManiaplanet = True;
	declare Boolean 	Desired_AddModeServer;
	declare Boolean 	Desired_WantOnline 					= !PrivateSession;
	declare Boolean 	Previous_WantOnline 				= !Desired_WantOnline;
	declare Text 		Actual_FirstBuddyLogin;
	declare Text 		Desired_BuddyFilter;
	declare Text 		Desired_BuddyToDelete_Login;
	declare Text 		Desired_ServerJoinLink;
	declare Text 		Previous_ServerLogin;
	declare Text 		Previous_Status;
	declare Text 		Displayed_Status;
	declare Integer 	Previous_PendingRequest = BuddiesManager.IncomingBuddyRequests.count;
	declare Integer 	Previous_BuddiesCount;
	declare Integer 	Previous_BuddiesPlayingCount 		= -1;
	declare Integer 	Previous_CurrentServerPlayersCount 	= 0;
	declare Integer 	Previous_PageIndexMax;
	declare Integer 	Latest_SwitchToOnline 				= Now;
	
	declare Text							XmppCurrent_Status;
	declare CBuddiesManager::EPresenceShow 	XmppCurrent_Show;
	
	declare Boolean 			History_HasChanged;
	declare Text[][Text] 		History_Message 						= Persistent_HistoryMessage;
	declare Boolean[][Text] 	History_IsFromMe						= Persistent_HistoryIsFromMe;
	declare Text[][Text] 		History_Date 							= Persistent_HistoryDate;
	declare Text 				Desired_Settings_KeyToggleChat 			= Persistent_Settings_KeyToggleChat;
	declare Real 				Desired_Settings_NoticeScale 			= Persistent_Settings_NoticeScale;
	declare Real 				Desired_Settings_NoticeDuration 		= Persistent_Settings_NoticeDuration;
	declare Integer 			Desired_Settings_NoticeCount 			= Persistent_Settings_NoticeCount;
	declare Boolean 			Desired_Settings_NoticeOnNewMessage 	= Persistent_Settings_NoticeOnNewMessage;
	declare Boolean 			Desired_Settings_SoundOnNewMessage 		= Persistent_Settings_SoundOnNewMessage;
	declare Boolean 			Desired_Settings_NoticeOnNewConnection 	= Persistent_Settings_NoticeOnNewConnection;
	declare Boolean 			Desired_Settings_NoticeOnServerJoin 	= Persistent_Settings_NoticeOnServerJoin;
	
	declare Boolean 			IsInit_PendingMessageNotices = True;
	
	BuddiesManager.Filter_SearchText = "";
	
	while(True) {
		yield;	
		
	if(!IsInit_PendingMessageNotices) {
		foreach(Login => MessageCount in Persistant_UnreadMessages) {
			if(BuddiesManager.GetBuddyFromLogin(Login) != Null && History_Message[Login].existskey(History_Message[Login].count-1))
				LayerCustomEvent(Layer_Notices, "Notice_Needed", ["Message", "Share", Login, _("New message"), BuddiesManager.GetBuddyFromLogin(Login).Name^" $z: "^History_Message[Login][History_Message[Login].count-1]]);
		}
		foreach(Buddy in BuddiesManager.IncomingBuddyRequests) {
			if(Buddy != Null)
				LayerCustomEvent(Layer_Notices, "Notice_Needed", ["BuddyRequest", "Invite", Buddy.Login  , _("Buddy request"), TextLib::Compose( _("%1 added you to their buddies. Confirm ?"), Buddy.Login )]);
		}
		IsInit_PendingMessageNotices = True;
	}
	
	/////////////////////////////////////////////	
	// UPDATE CONDITIONS
	
		if (Layer_Buddies_ForceUpdateDelayed) {
			Layer_Buddies_ForceUpdate = True;
			Layer_Buddies_ForceUpdateDelayed = False;
		}
		if (!ToolBarIsActive && !Layer_Notices_DesiredVisible)		
			continue; // GO BACK
	
		if (!ToolBarIsActive && !Layer_Buddies_DesiredVisible && PendingEvents.count == 0 && BuddiesManager.PendingEvents.count == 0)
			continue; // GO BACK
		
		
		
		
	/////////////////////////////////////////////	
	// BUSINESS LOGIC
		
		
		/////////////////////////////////////////////	
		// EVENTS
		
		foreach(Event in PendingEvents) {
		
			switch(Event.Type) {

				case CManiaplanetPluginEvent::EType::LayerCustomEvent: {
					if(Event.CustomEventType == "Click") {
						LayerCustomEvent(Layer_Buddies, "Buddies_CancelSettingKey", [""]);	
					} else if (Event.CustomEventType == "Widget_Click" || Event.CustomEventType == "CloseChat_Click" || Event.CustomEventType == "OpenChat_Click") {
						if (Layer_Buddies_DesiredVisible == False && Layer_Buddies_CanToggleHideShow == True && Event.CustomEventType != "CloseChat_Click") {
							Layer_Buddies_DesiredVisible = True;
							Layer_Buddies_ForceUpdate = True;
							LayerCustomEvent(Layer_Buddies, 		"Buddies_AnimStart", 		["Show"]);	
							LayerCustomEvent(Layer_LocalUser, 		"LocalUser_AnimStart", 		["Show"]);	
							LayerCustomEvent(Layer_Conversation, 	"Conversation_AnimStart", 	["Show"]);	
							LayerCustomEvent(Layer_ServerList, 		"ServerList_AnimStart", 	["Show"]);	
						} else if (Layer_Buddies_DesiredVisible == True && Layer_Buddies_CanToggleHideShow == True && Event.CustomEventType != "OpenChat_Click") {
							Latest_Layer_Buddies_DesiredVisibleDelayed = Now;
							Layer_Buddies_DesiredVisibleDelayed = True;
							Layer_Buddies_CanToggleHideShow = False;
							Layer_Buddies_ForceUpdate = True;
							LayerCustomEvent(Layer_Buddies, 		"Buddies_AnimStart", 		["Hide"]);	
							LayerCustomEvent(Layer_LocalUser, 		"LocalUser_AnimStart", 		["Hide"]);	
							LayerCustomEvent(Layer_Conversation,	"Conversation_AnimStart", 	["Hide"]);	
							LayerCustomEvent(Layer_ServerList, 		"ServerList_AnimStart", 	["Hide"]);	
						}
						PrivateSession = False;
					} else if (Event.CustomEventType == "SendMessage") {
						Layer_Buddies_Desired_PageIndex = 0;
						declare Message = Event.CustomEventData[0];			
						if (Message != "")
						{
							BuddiesManager.SendMessage(Desired_SelectedBuddy, "", Message);
							declare TrimmedMessage = TextLib::Trim( TextLib::ReplaceChars(Message, "\r\n", " ")  );
							declare I = 0;
							while(True) {
								declare SubMessage = TextLib::Trim(TextLib::SmartSplit(TrimmedMessage, C_SubMessageMaxLength, C_SubMessageMaxTolerance, I) );
								if(SubMessage == "") break;
								I += 1;
								
								if (!History_Message.existskey(Desired_SelectedBuddy.Login)) {
									History_Message[Desired_SelectedBuddy.Login] 	= Text[];
									History_IsFromMe[Desired_SelectedBuddy.Login]	= Boolean[];
									History_Date[Desired_SelectedBuddy.Login] 		= Text[];
								}							
								
								History_Message[Desired_SelectedBuddy.Login]	.add(SubMessage);
								History_IsFromMe[Desired_SelectedBuddy.Login]	.add(True);
								History_Date[Desired_SelectedBuddy.Login]		.add(CurrentLocalDateText);
								
								if (!Persistent_HistoryMessage.existskey(Desired_SelectedBuddy.Login)) {
									Persistent_HistoryMessage[Desired_SelectedBuddy.Login] 	= Text[];
									Persistent_HistoryIsFromMe[Desired_SelectedBuddy.Login] = Boolean[];
									Persistent_HistoryDate[Desired_SelectedBuddy.Login] 	= Text[];
								}							
								
								Persistent_HistoryMessage[Desired_SelectedBuddy.Login]		.add(SubMessage);
								Persistent_HistoryIsFromMe[Desired_SelectedBuddy.Login]		.add(True);
								Persistent_HistoryDate[Desired_SelectedBuddy.Login]			.add(CurrentLocalDateText);
								if (Persistent_HistoryMessage[Desired_SelectedBuddy.Login]	.count > C_HistoryPersistentCount) {
									Persistent_HistoryMessage[Desired_SelectedBuddy.Login]	.removekey(0);
									Persistent_HistoryIsFromMe[Desired_SelectedBuddy.Login]	.removekey(0);
									Persistent_HistoryDate[Desired_SelectedBuddy.Login]		.removekey(0);
								}
							}	
							
							History_HasChanged = True;
							if (Layer_Buddies_DesiredVisible && Desired_SelectedBuddy.Login != Actual_FirstBuddyLogin) {
								Layer_Buddies_ForceUpdateDelayed = True;
							}
							// log("Nouveau message de " ^ Event.Sender.Login ^ " à " ^ History_Date[Event.Sender.Login][History_Date[Event.Sender.Login].count - 1] ^ " : " ^ History_Message[Event.Sender.Login][History_Message[Event.Sender.Login].count - 1] ^ " | IsFromMe : " ^ History_IsFromMe[Event.Sender.Login][History_IsFromMe[Event.Sender.Login].count - 1]);
						}
					} else if (Event.CustomEventType == "Tooltip_Needed") {
						if (Event.CustomEventData[0] == "" )
							LayerCustomEvent(Layer_Tooltip, "Layer_Tooltip_Hide", Text[]);	
						else
							LayerCustomEvent(Layer_Tooltip, "Layer_Tooltip_Needed", [Event.CustomEventData[0], TextLib::ToText(MouseX), TextLib::ToText(MouseY)]);	
					} else if (Event.CustomEventType == "DialogBox_Needed") {
						if (Event.CustomEventData.count == 2) LayerCustomEvent(Layer_DialogBox, "Layer_DialogBox_Needed", [Event.CustomEventData[0], Event.CustomEventData[1]]);
						else if (Event.CustomEventData.count == 3) LayerCustomEvent(Layer_DialogBox, "Layer_DialogBox_Needed", [Event.CustomEventData[0], Event.CustomEventData[1], Event.CustomEventData[2]]);
						else if (Event.CustomEventData.count > 3) LayerCustomEvent(Layer_DialogBox, "Layer_DialogBox_Needed", [Event.CustomEventData[0], Event.CustomEventData[1], Event.CustomEventData[2], Event.CustomEventData[3]]);
					} else if (Event.CustomEventType == "DialogBox_Choice") {
						if (Event.CustomEventData[0] == "RemoveBuddy" && Event.CustomEventData[1] == "True") {
							BuddiesManager.RemoveBuddy(BuddiesManager.GetBuddyFromLogin(Desired_BuddyToDelete_Login));
							Layer_Buddies_ForceUpdate = True;	
						} else if (Event.CustomEventData[0] == "ServerJoin" && Event.CustomEventData[1] == "True") {
							OpenLink(Desired_ServerJoinLink, ::ELinkType::ManialinkBrowser);
						}
					} else if (Event.CustomEventType == "Tooltip_ServerInfosNeeded") {
							LayerCustomEvent(Layer_Tooltip, "Layer_Tooltip_ServerInfosNeeded", [Event.CustomEventData[0], Event.CustomEventData[1], TextLib::ToText(MouseX), TextLib::ToText(MouseY)]);	
					} else if (Event.CustomEventType == "SelectedBuddy_SetAsAllyToggle_Click") {
						Desired_SelectedBuddy.IsAlly = !Desired_SelectedBuddy.IsAlly;
						if (Desired_SelectedBuddy.IsAlly)
							LayerCustomEvent(Layer_Notices, "Notice_Needed", ["SetAsAlly", "Multiplayer", Desired_SelectedBuddy.Login, _("New Alliance"), TextLib::Compose( _("%1 is now your ally"), Desired_SelectedBuddy.Login )]);	
						else 
							LayerCustomEvent(Layer_Notices, "Notice_Needed", ["UnsetAsAlly", "Multiplayer", Desired_SelectedBuddy.Login, _("Broke Alliance"), TextLib::Compose( _("%1 is not your ally anymore"), Desired_SelectedBuddy.Login )]);
						Layer_Buddies_ForceUpdate = True;	
					} else if (Event.CustomEventType == "Buddies_ServerJoin_Click") {
						Desired_ServerJoinLink = (Event.CustomEventData[0]);
						// if (ActiveContext == ::EContext::MenuStartUp || ActiveContext == ::EContext::MenuManiaPlanet || ActiveContext == ::EContext::MenuManiaTitleMain || ActiveContext == ::EContext::MenuProfile || ActiveContext == ::EContext::MenuSolo || ActiveContext == ::EContext::MenuLocal || ActiveContext == ::EContext::MenuMulti || ActiveContext == ::EContext::MenuCompetitions || ActiveContext == ::EContext::MenuEditors || ActiveContext == ::EContext::MenuCustom)	
							OpenLink(Desired_ServerJoinLink, ::ELinkType::ManialinkBrowser);
						// else 
							// LayerCustomEvent(Layer_DialogBox, "Layer_DialogBox_Needed", ["ServerJoin", _("You will be disconnected from this server, proceed?")]);
					} else if (Event.CustomEventType == "ServerCopyLink_Click" ) {
						if (Event.CustomEventData[0] == "")
							ClipboardSet("http://maniapla.net/#join="^ CurrentServerLogin);
						else 
							ClipboardSet("http://maniapla.net/#join="^ Event.CustomEventData[0]);
					} else if (Event.CustomEventType == "CopyText_Click" ) {
						ClipboardSet(Event.CustomEventData[0]);
					} else if (Event.CustomEventType == "Set_NoticeOnNewMessage_Click" ) {
						Desired_Settings_NoticeOnNewMessage = !Desired_Settings_NoticeOnNewMessage;
						Persistent_Settings_NoticeOnNewMessage = Desired_Settings_NoticeOnNewMessage;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_SoundOnNewMessage_Click" ) {
						Desired_Settings_SoundOnNewMessage = !Desired_Settings_SoundOnNewMessage;
						Persistent_Settings_SoundOnNewMessage = Desired_Settings_SoundOnNewMessage;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_NoticeOnServerJoin_Click" ) {
						Desired_Settings_NoticeOnServerJoin = !Desired_Settings_NoticeOnServerJoin;
						Persistent_Settings_NoticeOnServerJoin = Desired_Settings_NoticeOnServerJoin;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_NoticeOnNewConnection_Click" ) {
						Desired_Settings_NoticeOnNewConnection = !Desired_Settings_NoticeOnNewConnection;
						Persistent_Settings_NoticeOnNewConnection = Desired_Settings_NoticeOnNewConnection;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_NoticeCount" ) {
						declare Value_NoticeCount = TextLib::ToInteger(Event.CustomEventData[0]);
						if(Value_NoticeCount != -1) {
							if(Value_NoticeCount > 1) {
								if(Value_NoticeCount > C_MaxDisplayedNoticeCount)
									Desired_Settings_NoticeCount = C_MaxDisplayedNoticeCount;
								else 
									Desired_Settings_NoticeCount = Value_NoticeCount;
							} else {
								Desired_Settings_NoticeCount = 1;
							}
						}
						Persistent_Settings_NoticeCount = Desired_Settings_NoticeCount;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_KeyToggleChat" ) {
						declare Value_KeyToggleChat = Event.CustomEventData[0];
						Desired_Settings_KeyToggleChat = Value_KeyToggleChat;
						Persistent_Settings_KeyToggleChat = Desired_Settings_KeyToggleChat;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_NoticeScale" ) {
						declare Value_NoticeScale = TextLib::ToReal(Event.CustomEventData[0]);
						if(Value_NoticeScale > 0.) {
							if(Value_NoticeScale > 1.)
								Desired_Settings_NoticeScale = 1.;
							else
								Desired_Settings_NoticeScale = Value_NoticeScale;
						}
						Persistent_Settings_NoticeScale = Desired_Settings_NoticeScale;
						LayerCustomEvent(Layer_Notices, "Update", Text[] );
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Set_NoticeDuration" ) {
						declare Value_NoticeDuration = TextLib::ToReal(Event.CustomEventData[0]);
						if(Value_NoticeDuration != -1)
							Desired_Settings_NoticeDuration = Value_NoticeDuration;
						Persistent_Settings_NoticeDuration = Desired_Settings_NoticeDuration;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Buddies_PresenceOffline_Click") {
						LocalUserNewDisconnection = True;
						Desired_WantOnline = False;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Buddies_PresenceAvailable_Click") {
						Desired_Show = CBuddiesManager::EPresenceShow::Available;
						Desired_WantOnline = True;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Buddies_PresenceBusy_Click") {
						Desired_Show = CBuddiesManager::EPresenceShow::DoNotDisturb;
						Desired_WantOnline = True;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );					
					} else if (Event.CustomEventType == "Buddies_PresenceAway_Click") {
						Desired_Show = CBuddiesManager::EPresenceShow::Away;
						Desired_WantOnline = True;
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					}  else if (Event.CustomEventType == "Buddies_PreviousPage") {
						Layer_Buddies_Desired_PageIndex -= 1;
						Layer_Buddies_ForceUpdate = True;							
					}  else if (Event.CustomEventType == "Buddies_NextPage") {
						Layer_Buddies_Desired_PageIndex += 1;
						Layer_Buddies_ForceUpdate = True;							
					} else if (Event.CustomEventType == "Buddies_ModeServerList_Click") {
						Desired_ModeServerList = Event.CustomEventData[0] == "1";	
						Desired_ModeAddBuddy = False;			
						Desired_ModeSettings = False;			
						if (Desired_ModeServerList)
							LayerCustomEvent(Layer_ServerList, "ServerList_AnimStart", ["Show"]);	
						else
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);
						Layer_Buddies_ForceUpdate = True;
					} else if (Event.CustomEventType == "Buddies_ModeSettings_Click") {
						Desired_ModeSettings = Event.CustomEventData[0] == "1";	
						Desired_ModeAddBuddy = False;			
						Desired_ModeServerList = False;		
						Layer_Buddies_ForceUpdate = True;
						if (!Desired_ModeSettings) {
							LayerCustomEvent(Layer_ServerList, "ServerList_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);
						}
					} else if (Event.CustomEventType == "Buddies_ModeAddBuddy_Click") {
						Desired_ModeServerList = False;	
						Desired_ModeSettings = False;	
						Desired_ModeAddBuddy = Event.CustomEventData[0] == "1";	
						Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = Desired_ModeAddBuddy;
						Layer_Buddies_ForceUpdate = True;
						if (!Desired_ModeAddBuddy) {
							LayerCustomEvent(Layer_ServerList, "ServerList_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);
						}
					} else if (Event.CustomEventType == "Buddies_AddModeManiaplanet_Click") {
						Desired_AddModeManiaplanet = Event.CustomEventData[0] == "1";	
						Desired_AddModeServer = !Desired_AddModeManiaplanet;	
						Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = True;
						Layer_Buddies_ForceUpdate = True;
					} else if (Event.CustomEventType == "Buddies_AddModeServer_Click") {
						Desired_AddModeServer = Event.CustomEventData[0] == "1";	
						Desired_AddModeManiaplanet = !Desired_AddModeServer;	
						Layer_Buddies_ForceUpdate = True;
					} else if (Event.CustomEventType == "LocalUser_EnteredNewStatus") {
						Desired_Status = Event.CustomEventData[0];
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					} else if (Event.CustomEventType == "Buddies_ChangeSelectedBuddyLogin") {	
						if (Event.CustomEventData[0] == "")
							Desired_SelectedBuddy <=> Null;
						else {
							Desired_SelectedBuddy <=> BuddiesManager.GetBuddyFromLogin(Event.CustomEventData[0]);
							if(	Desired_SelectedBuddy != Null &&
								Desired_SelectedBuddy.IsSteam && 
								!Desired_SelectedBuddy.IsXmpp && 
								Desired_SelectedBuddy.IsOnlineInSteam ) 
							{
								// Steam-only buddy	
								BuddiesManager.OpenSteamChat(Desired_SelectedBuddy);
								Desired_HasSelectedLocalUser = True;	
								Desired_SelectedBuddy <=> Null;		
							} else {	
								Desired_HasSelectedLocalUser = False;	
								LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);
								if (Event.CustomEventData.exists("Offline") && Event.CustomEventData[1] == "Offline")
									LayerCustomEvent(Layer_Conversation, "Conversation_UpdateEntry", ["$666This buddy is offline. You can still send them messages, they will receive them next time."]);
								else 
									LayerCustomEvent(Layer_Conversation, "Conversation_UpdateEntry", [""]);
							}
						}
						LayerCustomEvent(Layer_Conversation, "Update", Text[] );
						LayerCustomEvent(Layer_LocalUser, "Update", Text[] );
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );		
						LayerCustomEvent(Layer_ServerList, "Update", Text[] );						
					} else if (Event.CustomEventType == "Buddies_ChangeHasSelectedLocalUser") {	
						declare NewHasSelectedLocalUser = (Event.CustomEventData[0] == "1");	
						Desired_HasSelectedLocalUser = NewHasSelectedLocalUser;					
						if (NewHasSelectedLocalUser) {
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Hide"]);
							Desired_SelectedBuddy = Null;
						} else LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Hide"]);
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );		
						LayerCustomEvent(Layer_ServerList, "Update", Text[] );						
					} else if (Event.CustomEventType == "SendMailToBuddy") {
						declare Text BuddyLogin = Event.CustomEventData[0];
						OpenLink("maniaplanet://#mailto="^BuddyLogin, ::ELinkType::ManialinkBrowser);
					} else if (Event.CustomEventType == "AddBuddy") {
						BuddiesManager.AddBuddy(Event.CustomEventData[0]);
						Layer_Buddies_ForceUpdate = True;	
					} else if (Event.CustomEventType == "SearchBuddy") {
						BuddiesManager.Filter_SearchText = Event.CustomEventData[0];
						Layer_Buddies_ForceUpdate = True;	
					} else if (Event.CustomEventType == "RemoveBuddy") {
						Desired_BuddyToDelete_Login = Event.CustomEventData[0];
						LayerCustomEvent(Layer_DialogBox, "Layer_DialogBox_Needed", ["RemoveBuddy", TextLib::Compose( _("You are about to remove %1 from your buddies. Are you sure ?"), Event.CustomEventData[0] )]);	
					} else if (Event.CustomEventType == "AddBuddyAccept") {
						BuddiesManager.AcceptBuddy(BuddiesManager.GetBuddyFromLogin(Event.CustomEventData[0]));
						Layer_Buddies_ForceUpdate = True;	
					} else if (Event.CustomEventType == "AddBuddyDeny") {
						declare Login = Event.CustomEventData[0];
						BuddiesManager.RemoveBuddy(BuddiesManager.GetBuddyFromLogin(Login));
						Layer_Buddies_ForceUpdate = True;	
					} else if (Event.CustomEventType == "Notices_Buddy_Click") {
						Desired_SelectedBuddy <=> BuddiesManager.GetBuddyFromLogin(Event.CustomEventData[0]);
						Desired_ModeAddBuddy = False;
						Desired_ModeServerList = False;
						Desired_ModeSettings = False;
						if (!Layer_Buddies_DesiredVisible) {
							Layer_Buddies_DesiredVisible = True;
							LayerCustomEvent(Layer_Buddies, "Buddies_AnimStart", ["Show"]);
							Layer_Buddies_ForceUpdate = True;
						}
						LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);	
						LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);
						LayerCustomEvent(Layer_Conversation, "StartEdition", Text[]);
					}
				}
				
				case CManiaplanetPluginEvent::EType::KeyPress: {
				// Pressed F7
					if (DialogBoxNeeded) break;
					if (Event.KeyName == Desired_Settings_KeyToggleChat) { 	
						if (Layer_Buddies_DesiredVisible == False  && Layer_Buddies_CanToggleHideShow == True) {
							Layer_Buddies_DesiredVisible = True;
							Layer_Buddies_ForceUpdate = True;
							LayerCustomEvent(Layer_Buddies, "Buddies_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);	
							LayerCustomEvent(Layer_ServerList, "ServerList_AnimStart", ["Show"]);	
						} else if (Layer_Buddies_DesiredVisible == True && Layer_Buddies_CanToggleHideShow == True) {
							Latest_Layer_Buddies_DesiredVisibleDelayed = Now;
							Layer_Buddies_DesiredVisibleDelayed = True;
							Layer_Buddies_CanToggleHideShow = False;
							LayerCustomEvent(Layer_Buddies, "Buddies_AnimStart", ["Hide"]);	
							LayerCustomEvent(Layer_LocalUser, "LocalUser_AnimStart", ["Hide"]);	
							LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Hide"]);	
							LayerCustomEvent(Layer_ServerList, "ServerList_AnimStart", ["Hide"]);	
						}
					} if (Event.KeyName == "Escape") { 	
						Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = True;
					} 
				}
			}	
		}
		
		foreach(Event in BuddiesManager.PendingEvents) {
			switch(Event.Type) {
			    case CBuddiesEvent::EType::BuddyChange: {   
					if (Layer_Buddies_DesiredVisible) {
						Layer_Buddies_ForceUpdate = True;
						LayerCustomEvent(Layer_LocalUser, "Update", Text[]);
						LayerCustomEvent(Layer_Conversation, "Update", Text[]);
						LayerCustomEvent(Layer_ServerList, "Update", Text[]);
					}
				}
				case CBuddiesEvent::EType::PresenceChange: {			
					LayerCustomEvent(Layer_LocalUser, "Update", Text[]);
					LayerCustomEvent(Layer_Conversation, "UpdateHistory", Text[]);
					LayerCustomEvent(Layer_ServerList, "Update", Text[]);
					if (Layer_Buddies_DesiredVisible)
						Layer_Buddies_ForceUpdate = True;
					if (!Event.PreviousIsOnline && Event.Buddy.IsOnline && Now > Latest_SwitchToOnline + 5000)
						if(Desired_Settings_NoticeOnNewConnection) LayerCustomEvent(Layer_Notices, "Notice_Needed", ["Connection", "Solo", Event.Buddy.Login, _("New connection"), TextLib::Compose( _("%1 $zis now connected."), Event.Buddy.Name )]);
					else if (Event.PreviousServerLogin != Event.Buddy.CurrentServerLogin && Event.Buddy.CurrentServerLogin != ""  && Now > Latest_SwitchToOnline + 5000){
						if(Desired_Settings_NoticeOnServerJoin) LayerCustomEvent(Layer_Notices, "Notice_Needed", ["ServerJoin", "ServersAll", Event.Buddy.Login, _("Server join"), TextLib::Compose( _("%1 $zis playing on %2"), Event.Buddy.Name, Event.Buddy.CurrentServerName), Event.Buddy.CurrentServerJoinLink]);
					}
				}
				
				case CBuddiesEvent::EType::Message: {
					if (Event.MessageBody != "")
					{
					
						declare TrimmedMessage = TextLib::Trim( TextLib::ReplaceChars(Event.MessageBody, "\r\n", " ")  );
						declare I = 0;
						while(True) {
							declare SubMessage = TextLib::Trim(TextLib::SmartSplit(TrimmedMessage, C_SubMessageMaxLength, C_SubMessageMaxTolerance, I));
							if(SubMessage == "") break;
							I += 1;
							
							if (!History_Message.existskey(Event.Sender.Login)) {
								History_Message	[Event.Sender.Login] = Text[];
								History_IsFromMe[Event.Sender.Login] = Boolean[];
								History_Date	[Event.Sender.Login] = Text[];
							}							
							
							History_Message	[Event.Sender.Login].add(SubMessage);
							History_IsFromMe[Event.Sender.Login].add(False);
							History_Date	[Event.Sender.Login].add(CurrentLocalDateText);
							
							if (!Persistent_HistoryMessage.existskey(Event.Sender.Login)) {
								Persistent_HistoryMessage	[Event.Sender.Login] = Text[];
								Persistent_HistoryIsFromMe	[Event.Sender.Login] = Boolean[];
								Persistent_HistoryDate		[Event.Sender.Login] = Text[];
							}							
							
							Persistent_HistoryMessage		[Event.Sender.Login].add(SubMessage);
							Persistent_HistoryIsFromMe		[Event.Sender.Login].add(False);
							Persistent_HistoryDate			[Event.Sender.Login].add(CurrentLocalDateText);
							if (Persistent_HistoryMessage	[Event.Sender.Login].count > C_HistoryPersistentCount) {
								Persistent_HistoryMessage	[Event.Sender.Login].removekey(0);
								Persistent_HistoryIsFromMe	[Event.Sender.Login].removekey(0);
								Persistent_HistoryDate		[Event.Sender.Login].removekey(0);
							}
						}
							
						
						// Adding 1 to unread messages count
						if (Layer_Buddies.IsVisible == False || Desired_SelectedBuddy == Null || Event.Sender.Login != Desired_SelectedBuddy.Login || Desired_ModeAddBuddy || Desired_ModeServerList || Desired_ModeSettings) {							
							if (!Persistant_UnreadMessages.existskey(Event.Sender.Login)) {
								Persistant_UnreadMessages[Event.Sender.Login] = 1;
							} else {
								Persistant_UnreadMessages[Event.Sender.Login] += 1;
							}	
							if(Desired_Show != CBuddiesManager::EPresenceShow::DoNotDisturb) {
								if(Desired_Settings_SoundOnNewMessage) PlaySound(::EUISound::Alert, 1);
								if(Desired_Settings_NoticeOnNewMessage) LayerCustomEvent(Layer_Notices, "Notice_Needed", ["Message", "Share", Event.Sender.Login, _("New message"), Event.Sender.Name^" $z: "^Event.MessageBody]);
							}
						} 
						
						// Layers update management
						if (Layer_Buddies_DesiredVisible) { 
							if (Event.Sender.Login != Actual_FirstBuddyLogin) 
								Layer_Buddies_ForceUpdateDelayed = True;
							if (Desired_SelectedBuddy == Null || Event.Sender.Login != Desired_SelectedBuddy.Login) 
								Layer_Buddies_ForceUpdate = True;
						}
						
						History_HasChanged = True;
						FlashWindow();
					}
				}
				
				case CBuddiesEvent::EType::AddBuddyResult: {
					if (Event.Success) {
						LayerCustomEvent(Layer_Notices, "Notice_Needed", ["AddBuddyOk", "Invite", Event.BuddyLogin, _("Buddy add"), TextLib::Compose( _("Succesfully sent buddy request to %1"), Event.BuddyLogin )]);
						LayerCustomEvent(Layer_Buddies, "AddBuddyOk", [Event.BuddyLogin]);
						Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = True;
						Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = True;
					} else {
						LayerCustomEvent(Layer_Notices, "Notice_Needed", ["AddBuddyError", "Invite", Event.BuddyLogin, _("Buddy add"), Event.BuddyLogin^" : "^Event.ErrorMessage]);
						LayerCustomEvent(Layer_Buddies, "AddBuddyError", [Event.BuddyLogin]);
					}
					Layer_Buddies_ForceUpdate = True;
				}
				
				case CBuddiesEvent::EType::RemoveBuddyResult: {
					if (Event.Success) {
						LayerCustomEvent(Layer_Notices, "Notice_Needed", ["RemoveBuddyOk", "Invite", Event.BuddyLogin, _("Buddy remove"), TextLib::Compose( _("Succesfully removed %1 from your buddies"), Event.BuddyLogin )]);
						LayerCustomEvent(Layer_Buddies, "RemoveBuddyOk", [Event.BuddyLogin]);
						Desired_SelectedBuddy = Null;
						Layer_Buddies_ForceUpdate = True;							
						Persistent_LatestBuddyPlayedWith.remove(Event.BuddyLogin);
						Persistent_LatestBuddyPlayedWith.add(Event.BuddyLogin);
						Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = True;
					} else {
						LayerCustomEvent(Layer_Notices, "Notice_Needed", ["RemoveBuddyError", "Invite", Event.BuddyLogin, _("Buddy Remove"), Event.BuddyLogin^" : "^Event.ErrorMessage]);
					}
					Layer_Buddies_ForceUpdate = True;
				}
			}
		}
		
		
		
		
		/////////////////////////////////////////////	
		// STATES
		
		// USER CHANGED CONNECTION STATUS
		if (Previous_WantOnline != Desired_WantOnline) {
			if (Desired_WantOnline) {
				Latest_SwitchToOnline = Now;
				BuddiesManager.DesiredConnectionStatus = CBuddiesManager::EDesiredConnectionStatus::Online;	
			} else if (!Desired_WantOnline) {
				Layer_Buddies_ForceUpdate = True;
				Layer_Buddies_DesiredVisible = False;
				BuddiesManager.DesiredConnectionStatus = CBuddiesManager::EDesiredConnectionStatus::Offline;
				// Réinitialisation des modes pour la prochaine connexion	
				// Desired_SelectedBuddy = Null;
				Desired_HasSelectedLocalUser = False;
				Desired_ModeServerList = False;
				Desired_ModeAddBuddy = False;
				Desired_ModeSettings = False;
				Desired_AddModeManiaplanet = True;
				Desired_AddModeServer = False;
			} 
			Previous_WantOnline = Desired_WantOnline;
		}
		
		// CONNECTION STATUS DID CHANGE
		if (Previous_ConnectionStatus != BuddiesManager.CurrentConnectionStatus) {
			Previous_ConnectionStatus = BuddiesManager.CurrentConnectionStatus;	
			Previous_PendingRequest = BuddiesManager.IncomingBuddyRequests.count;
			Desired_SelectedBuddy = Null;
			Previous_SelectedBuddy = Null;
			Layer_Buddies_ForceUpdate = True;
			LayerCustomEvent(Layer_Buddies, "Update", Text[] );
			Layer_Widget_ForceUpdate =  True;
			IsInit_PendingMessageNotices = False;
		}
		
		// USER CHANGED PRESENCE_STATUS OR PRESENCE_SHOW
		if (Displayed_Status_Update || Desired_Status != Previous_Status || Desired_Show != Previous_Desired_Show) {
			Previous_Desired_Show = Desired_Show;
			Previous_Status = Desired_Status;			
			Desired_ShowText = GetMyPresenceSystemText(Desired_Show);
			// Protection : empeche les status vides
			if (TextLib::Trim(Desired_Status) == "")
				Displayed_Status = GetMyPresenceDisplayableText(Previous_Desired_Show);
			else 
				Displayed_Status = Desired_Status;
			LayerCustomEvent(Layer_LocalUser, "StatusChange", Text[]);
			Displayed_Status_Update = False;
		}
						
		if (Desired_Status != XmppCurrent_Status || Desired_Show != XmppCurrent_Show) {
			BuddiesManager.ChangePresence(Desired_Show, Desired_Status);
			XmppCurrent_Status = Desired_Status;
			XmppCurrent_Show = Desired_Show;	
		}
		
		// USER SELECTED A BUDDY
		if (Previous_SelectedBuddy != Desired_SelectedBuddy) {
			if (Desired_SelectedBuddy != Null) {
				LayerCustomEvent(Layer_Conversation, "Conversation_AnimStart", ["Show"]);	
			}
			Previous_SelectedBuddy = Desired_SelectedBuddy;
		}
		
		// DELETING UNREAD MESSAGES
		if (Layer_Buddies_DesiredVisible && Desired_SelectedBuddy != Null && !Desired_ModeServerList && !Desired_ModeAddBuddy && !Desired_ModeSettings && Persistant_UnreadMessages.existskey(Desired_SelectedBuddy.Login)) {
			Persistant_UnreadMessages.removekey(Desired_SelectedBuddy.Login);
			Layer_Buddies_ForceUpdate = True;	
		}
		
		// USER CONNECTED OR DISCONNECTED FROM A SERVER
		if (Previous_ServerLogin != CurrentServerLogin) {
			Previous_ServerLogin = CurrentServerLogin;
			LayerCustomEvent(Layer_Buddies, "Update", Text[] );		
			LayerCustomEvent(Layer_Buddies, "Buddies_CloseChat", Text[] );		
			LayerCustomEvent(Layer_ServerList, "Update", Text[] );	
			LayerCustomEvent(Layer_LocalUser, "Update", Text[] );	
			Layer_LocalUser_ForceUpdate = True;
			Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = True;
			Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = True;	
		}
		
		// PREVENT FROM TOGGLING UNTIL SHOW_ANIM IS DONE
		if (Layer_Buddies_DesiredVisibleDelayed && Now > Latest_Layer_Buddies_DesiredVisibleDelayed + C_HideAnimDuration) {
			Layer_Buddies_DesiredVisibleDelayed = False;
			Layer_Buddies_DesiredVisible = False;
			Layer_Buddies_ForceUpdate = True;
			Layer_Buddies_CanToggleHideShow = True;
		}
		
		// UNREAD_MESSAGES ALERT MANAGEMENT
		if (Persistant_UnreadMessages.count > 0 && !Layer_Buddies_DesiredVisible) {
			LayerCustomEvent(Layer_Widget, "UnreadMessagesAlert", Text[]);
		} else {
			LayerCustomEvent(Layer_Widget, "UnreadMessagesAlertStop", Text[]);
		}	
		
		// NEW BUDDY ADDED USER NOTIFICATION
		if (Previous_PendingRequest != BuddiesManager.IncomingBuddyRequests.count) {
			if (Previous_PendingRequest < BuddiesManager.IncomingBuddyRequests.count && BuddiesManager.IncomingBuddyRequests.existskey(0)) {
				declare Text BuddyLogin = BuddiesManager.IncomingBuddyRequests[0].Login;
				LayerCustomEvent(Layer_Notices, "Notice_Needed", ["BuddyRequest", "Invite", BuddyLogin  , _("Buddy request"), TextLib::Compose( _("%1 added you to their buddies. Confirm ?"), BuddyLogin )]);
				if (Layer_Buddies_DesiredVisible && Desired_ModeAddBuddy)
					Layer_Buddies_ForceUpdate = True;
			}
			Previous_PendingRequest = BuddiesManager.IncomingBuddyRequests.count;
		}
		
		// A PLAYER DISCONNECTED FROM / CONNECTED TO THE CURRENT SERVER
		if (CurrentServerLogin != "" && Previous_CurrentServerPlayersCount != BuddiesManager.CurrentServerPlayerCount) {
			if (Layer_Buddies_DesiredVisible && Desired_ModeAddBuddy) Layer_Buddies_ForceUpdate = True;
			if (Desired_ModeAddBuddy) Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = True;
			if(CurrentServerPlayers.existskey(CurrentServerPlayers.count-1) && Previous_CurrentServerPlayersCount < BuddiesManager.CurrentServerPlayerCount) {
				Persistent_LatestBuddyPlayedWith.remove(CurrentServerPlayers[CurrentServerPlayers.count-1].Login);
				Persistent_LatestBuddyPlayedWith.add(CurrentServerPlayers[CurrentServerPlayers.count-1].Login);
			}
			Previous_CurrentServerPlayersCount = BuddiesManager.CurrentServerPlayerCount;
		}
		
		// ADD BUDDY SUGGESTION
		if(Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated) {
			Persistent_LatestBuddyPlayedWith_NeedsToBeUpdated = False;
			foreach(User in CurrentServerPlayers) {
				Persistent_LatestBuddyPlayedWith.remove(User.Login);
				Persistent_LatestBuddyPlayedWith.add(User.Login);
			}			
		}
		
		// SORT & CLEAN DOUBLES
		if (Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned) {
			while(Persistent_LatestBuddyPlayedWith.count > 40) 
				Persistent_LatestBuddyPlayedWith.removekey(0);
			foreach (Login in Persistent_LatestBuddyPlayedWith) {
				declare Buddy = BuddiesManager.GetBuddyFromLogin(Login);
				if (Buddy != Null) {
					Persistent_LatestBuddyPlayedWith.remove(Login);
				}
			}
			Persistent_LatestBuddyPlayedWith_NeedsToBeCleaned = False;
			Layer_Buddies_ForceUpdate = True;
		}		
			
		// SOUND MANAGEMENT	
		// SOUND : ON SUCCESSFUL CONNECTION
		if (SoundAlert_Previous_ConnectionStatus != CBuddiesManager::EConnectionStatus::Online && BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online) {
			PlaySound(::EUISound::Alert, 0);
			SoundAlert_Previous_ConnectionStatus = BuddiesManager.CurrentConnectionStatus;
		}		if (SoundAlert_Previous_ConnectionStatus != CBuddiesManager::EConnectionStatus::Online && BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online) {
			PlaySound(::EUISound::Alert, 0);
			SoundAlert_Previous_ConnectionStatus = BuddiesManager.CurrentConnectionStatus;
		}
		
		// SOUND : DIALOG_BOX
		if (PreviousDialogBoxNeeded != DialogBoxNeeded) {
			PreviousDialogBoxNeeded = DialogBoxNeeded;
			if (DialogBoxNeeded)
				PlaySound(::EUISound::ShowDialog, 0);
			else
				PlaySound(::EUISound::HideDialog, 0);
		}
		
		
		// PLAYING BUDDIES FILTERING
		BuddiesManager.Filter_PlayingOnline = Desired_ModeServerList;
		
		// VISIBILITY
		ToolBarForceShow 					= Layer_Buddies_DesiredVisible || NoticeShown || DialogBoxNeeded;
		Layer_Widget_DesiredVisible 		= ToolBarIsActive;
		Layer_Notices_DesiredVisible 		= Desired_Show != CBuddiesManager::EPresenceShow::DoNotDisturb && Desired_WantOnline;
		Layer_LocalUser_DesiredVisible 		= Layer_Buddies_DesiredVisible && Desired_HasSelectedLocalUser && (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online) && !Desired_ModeServerList && !Desired_ModeAddBuddy && !Desired_ModeSettings;
		Layer_Conversation_DesiredVisible 	= Layer_Buddies_DesiredVisible && (Desired_SelectedBuddy != Null) && (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online) && !Desired_ModeServerList && !Desired_ModeAddBuddy && !Desired_ModeSettings;	
		Layer_ServerList_DesiredVisible 	= Layer_Buddies_DesiredVisible && (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online) && Desired_ModeServerList && !Desired_ModeAddBuddy && !Desired_ModeSettings;	
		
		
		
		/////////////////////////////////////////////		
		// UI : LAYER MANAGEMENT

		// Widget
		{
			Layer_Widget.IsVisible = Layer_Widget_DesiredVisible;

			if (Layer_Widget.IsVisible) {
				declare IsOffline 				for Layer_Widget.LocalPage = False;				
				declare IsConnecting 			for Layer_Widget.LocalPage = False;				
				declare IsOnline 				for Layer_Widget.LocalPage = False;
				declare BuddiesCount 			for Layer_Widget.LocalPage = 0;
				declare PendingMessagesCount 	for Layer_Widget.LocalPage = 0;
				
				if (Layer_Widget_PreviousVisible != Layer_Widget_DesiredVisible) {
					LayerCustomEvent(Layer_Widget, "Update", Text[] );
					Layer_Widget_PreviousVisible = Layer_Widget_DesiredVisible;
				}
				
				if (Previous_BuddiesCount != BuddiesManager.OnlineBuddies.count) {
					BuddiesCount = BuddiesManager.OnlineBuddies.count;	
					LayerCustomEvent(Layer_Widget, "Update", Text[] );
					Previous_BuddiesCount = BuddiesCount;
				}
				
				PendingMessagesCount = 0;
				foreach(MessageCount in Persistant_UnreadMessages) {
						PendingMessagesCount += MessageCount;
				}
				
				if(Layer_Widget_ForceUpdate) {
					IsOffline = (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Offline);
					IsConnecting = (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Connecting);
					IsOnline = (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Online);
					LayerCustomEvent(Layer_Widget, "Update", Text[] );
					Layer_Widget_ForceUpdate = False;
				}
				
			}
		}
		
		// Notices 
		{
		
			Layer_Notices.IsVisible = Layer_Notices_DesiredVisible;	
			if(Layer_Notices_DesiredVisible) {
				declare Real Settings_NoticeScale for Layer_Notices.LocalPage;
				declare Real Settings_NoticeDuration for Layer_Notices.LocalPage;
				declare Integer Settings_NoticeCount for Layer_Notices.LocalPage;
				
				Settings_NoticeScale = Desired_Settings_NoticeScale;
				Settings_NoticeDuration = Desired_Settings_NoticeDuration*1000;
				Settings_NoticeCount = Desired_Settings_NoticeCount;
			}
		}		
				
		if (PendingEvents.count == 0 && BuddiesManager.PendingEvents.count == 0 && !Layer_Buddies_ForceUpdate && !Layer_ServerList_ForceUpdate && !Layer_LocalUser_ForceUpdate) continue;
		
		// Local User Header
		{
		
			Layer_LocalUser.IsVisible = Layer_LocalUser_DesiredVisible;	
			if (Layer_LocalUser_DesiredVisible) {
				declare Text LocalUserCurrentServerName 	for Layer_LocalUser.LocalPage;
				declare Text LocalUserCurrentServerLogin 	for Layer_LocalUser.LocalPage;
				declare Text LocalUserDisplayedStatus 		for Layer_LocalUser.LocalPage;
				declare Text LocalUserCurrentPresence 		for Layer_LocalUser.LocalPage;
				
				LocalUserDisplayedStatus	 	= Displayed_Status;
				LocalUserCurrentPresence 		= GetMyPresenceSystemText(Desired_Show);
				LocalUserCurrentServerName 		= CurrentServerName;
				LocalUserCurrentServerLogin 	= CurrentServerLogin;
			}
			
		}
		
		// Convers
		{
			Layer_Conversation.IsVisible = Layer_Conversation_DesiredVisible;	
			
			if (Layer_Buddies.IsVisible || Layer_Buddies_ForceUpdate) {
				
				if (Layer_Conversation_DesiredVisible != Layer_Conversation_PreviousVisible) {
					LayerCustomEvent(Layer_Conversation, "HistoryChanged", Text[]);	
					Layer_Conversation_PreviousVisible = Layer_Conversation_DesiredVisible;
					History_HasChanged = True;
				}
				
				if (Layer_Conversation.IsVisible) {
					declare Text 		LocalUserCurrentServerLogin 			for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyLogin 						for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyShow 						for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyName 						for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyStatus 					for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerLogin 				for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerName 				for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerModeName 			for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerModeStatus 			for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerJoinLink 			for Layer_Conversation.LocalPage;
					declare Text 		SelectedBuddyServerModePlayerCountInfo 	for Layer_Conversation.LocalPage;
					declare Boolean 	SelectedBuddyServer_IsFull 				for Layer_Conversation.LocalPage;
					declare Boolean 	SelectedBuddyIsPlaying 					for Layer_Conversation.LocalPage;
					declare Boolean 	SelectedBuddyIsAlly 					for Layer_Conversation.LocalPage;
					declare Text[] 		SelectedBuddyHistory_Message 			for Layer_Conversation.LocalPage;
					declare Boolean[] 	SelectedBuddyHistory_IsFromMe 			for Layer_Conversation.LocalPage;
					declare Text[] 		SelectedBuddyHistory_Date 				for Layer_Conversation.LocalPage;
				
					// Update history on Show Layer_Conversation
					if (Desired_SelectedBuddy != Null) {
						declare Boolean SelectedBuddyHasChanged = SelectedBuddyLogin != Desired_SelectedBuddy.Login;
						if (History_HasChanged || SelectedBuddyHasChanged) {
							if (!History_Message.existskey(Desired_SelectedBuddy.Login)) {
								History_Message[Desired_SelectedBuddy.Login]	= Text[];
								History_IsFromMe[Desired_SelectedBuddy.Login] 	= Boolean[];
								History_Date[Desired_SelectedBuddy.Login] 		= Text[];
							}			
							SelectedBuddyHistory_Message 		= History_Message[Desired_SelectedBuddy.Login];
							SelectedBuddyHistory_IsFromMe 		= History_IsFromMe[Desired_SelectedBuddy.Login];
							SelectedBuddyHistory_Date 			= History_Date[Desired_SelectedBuddy.Login];
							LayerCustomEvent(Layer_Conversation, "HistoryChanged", Text[]);	
							History_HasChanged 					= False;
						}		
					}
					
					LocalUserCurrentServerLogin 			= CurrentServerLogin;
					SelectedBuddyLogin 						= Desired_SelectedBuddy.Login;
					SelectedBuddyName 						= Desired_SelectedBuddy.Name;
					SelectedBuddyStatus 					= TextLib::SubString(Desired_SelectedBuddy.PresenceStatus, 0, C_StatusMaxLength);
					SelectedBuddyShow 						= GetBuddyPresenceSystemText(Desired_SelectedBuddy.PresenceShow);
					SelectedBuddyIsAlly 					= Desired_SelectedBuddy.IsAlly;
					SelectedBuddyServerModeName 			= Desired_SelectedBuddy.CurrentServerModeName;
					SelectedBuddyServerModeStatus 			= Desired_SelectedBuddy.CurrentServerModeStatus;
					SelectedBuddyServerJoinLink 			= Desired_SelectedBuddy.CurrentServerJoinLink;
					SelectedBuddyServerModePlayerCountInfo 	= Desired_SelectedBuddy.CurrentServerPlayerCount^"/"^Desired_SelectedBuddy.CurrentServerPlayerCountMax;
					SelectedBuddyServer_IsFull 				= Desired_SelectedBuddy.CurrentServer_IsFull;
					SelectedBuddyServerLogin				= Desired_SelectedBuddy.CurrentServerLogin;
					if (Desired_SelectedBuddy.CurrentServerLogin != "" ) {
						SelectedBuddyServerName 			= Desired_SelectedBuddy.CurrentServerName;
						SelectedBuddyIsPlaying 				= True;
					} else { 
						SelectedBuddyIsPlaying 				= False;
					}
				}
			}			
		}
		
		// ServerList
		{
			// Toggle Hide Show Layer_ServerList
			if (Layer_ServerList.IsVisible != Layer_ServerList_DesiredVisible) {
				Layer_ServerList.IsVisible = Layer_ServerList_DesiredVisible;
				if (Layer_ServerList.IsVisible) {
					Layer_ServerList_ForceUpdate = True;
					Layer_Buddies_Desired_PageIndex = 0;
				}
			}
			
			if (Layer_ServerList.IsVisible) {
				declare Text[] 		Buddies_Login 						for Layer_ServerList.LocalPage;
				declare Text[] 		Buddies_Presence 					for Layer_ServerList.LocalPage;
				declare Text[] 		Buddies_ServerLogin 				for Layer_ServerList.LocalPage;
				declare Text[] 		Buddies_ServerName 					for Layer_ServerList.LocalPage;
				declare Text[]	 	Buddies_ServerModeInfos 			for Layer_ServerList.LocalPage;
				declare Text[] 		Buddies_ServerJoinLink 				for Layer_ServerList.LocalPage;
				declare Text[] 		Buddies_ServerPlayersCountInfos 	for Layer_ServerList.LocalPage;
				declare Real[]	 	Buddies_ServerPlayersCountRatio 	for Layer_ServerList.LocalPage;
				declare Boolean[] 	Buddies_Server_IsPrivate 			for Layer_ServerList.LocalPage;
				declare Boolean[] 	Buddies_Server_IsLobby 				for Layer_ServerList.LocalPage;
				declare Boolean[] 	Buddies_Server_IsFull 				for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_ServerName 				for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_ServerLogin 				for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_ServerPlayersCountInfos 	for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_ServerModeInfos 			for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_ServerJoinLink 			for Layer_ServerList.LocalPage;
				declare Text 		LocalUser_CurrentPresenceShow 		for Layer_ServerList.LocalPage;
				declare Text 		SelectedBuddyLogin 					for Layer_ServerList.LocalPage;
				declare Boolean 	HasSelectedLocalUser 				for Layer_ServerList.LocalPage;
				
				
				declare Integer PageIndex;	
				LocalUser_ServerName 				= CurrentServerName;
				LocalUser_ServerLogin 				= CurrentServerLogin;
				LocalUser_ServerModeInfos 			= CurrentServerModeName;
				LocalUser_ServerJoinLink 			= CurrentServerJoinLink;
				LocalUser_ServerPlayersCountInfos 	= BuddiesManager.CurrentServerPlayerCount^" / "^MathLib::NearestInteger(BuddiesManager.CurrentServerPlayerCountMax * 1.);
				LocalUser_CurrentPresenceShow 		= GetMyPresenceSystemText(Desired_Show);
				
				PageIndex = Layer_Buddies_Desired_PageIndex;
				
				if (Desired_SelectedBuddy != Null)
					SelectedBuddyLogin = Desired_SelectedBuddy.Login;
				else 
					SelectedBuddyLogin = "";
				HasSelectedLocalUser = Desired_HasSelectedLocalUser;				
				
				
				if (Layer_ServerList_ForceUpdate || Layer_Buddies_ForceUpdate) {				
					
					LayerCustomEvent(Layer_Buddies, "Update", Text[] );	
					LayerCustomEvent(Layer_ServerList, "Update", Text[] );
					
					Layer_ServerList_ForceUpdate 	= False;
					Buddies_Login 					= Text[];
					Buddies_Presence	 			= Text[];
					Buddies_ServerLogin 			= Text[];
					Buddies_ServerName 				= Text[];
					Buddies_ServerModeInfos 		= Text[];
					Buddies_ServerJoinLink 			= Text[];
					Buddies_ServerPlayersCountInfos = Text[];
					Buddies_ServerPlayersCountRatio = Real[];
					Buddies_Server_IsPrivate 		= Boolean[];
					Buddies_Server_IsLobby 			= Boolean[];
					Buddies_Server_IsFull 			= Boolean[];
					for( I, PageIndex*C_DisplayedBuddiesCount, PageIndex*C_DisplayedBuddiesCount + C_DisplayedBuddiesCount - 1) {				
						
						declare CBuddy Buddy;
						if (I >= BuddiesManager.FilteredBuddies.count) break;
						Buddy = BuddiesManager.FilteredBuddies[I];
						
						declare Real CurrentServerPlayerCountMaxOk = Buddy.CurrentServerPlayerCountMax * 1.;
						if (CurrentServerPlayerCountMaxOk < 1) 
							CurrentServerPlayerCountMaxOk = 1 * 1.;
						Buddies_Login.add(Buddy.Login);
						Buddies_Presence.add(GetBuddyPresenceSystemText(Buddy.PresenceShow));	
						Buddies_ServerLogin.add(Buddy.CurrentServerLogin);
						Buddies_ServerName.add(Buddy.CurrentServerName);
						Buddies_ServerJoinLink.add(Buddy.CurrentServerJoinLink);
						Buddies_ServerPlayersCountInfos.add(Buddy.CurrentServerPlayerCount^" / "^MathLib::NearestInteger(CurrentServerPlayerCountMaxOk));
						Buddies_ServerPlayersCountRatio.add(Buddy.CurrentServerPlayerCount/CurrentServerPlayerCountMaxOk);
						Buddies_Server_IsPrivate.add(Buddy.CurrentServer_IsPrivate);
						Buddies_Server_IsLobby.add(Buddy.CurrentServer_IsLobby);
						Buddies_Server_IsFull.add(Buddy.CurrentServer_IsFull);
						Buddies_ServerModeInfos.add(Buddy.CurrentServerModeName);	//hack temp
						/*if (Buddy.CurrentServerModeStatus == "")
							Buddies_ServerModeInfos.add(Buddy.CurrentServerModeName);	
						else 
							Buddies_ServerModeInfos.add(Buddy.CurrentServerModeName^" : "^Buddy.CurrentServerModeStatus);	
						*/
					}	
				}
			}
		}
		
		if (PendingEvents.count == 0 && BuddiesManager.PendingEvents.count == 0 && !Layer_Buddies_ForceUpdate && !Layer_LocalUser_ForceUpdate) continue;
		
		// BuddyList
		{	
			// Toggle Hide Show Layer_Buddies
			if (Layer_Buddies.IsVisible != Layer_Buddies_DesiredVisible) {
				Layer_Buddies.IsVisible = Layer_Buddies_DesiredVisible;
				if (Layer_Buddies.IsVisible) {
					Layer_Buddies_ForceUpdate = True;
				}
			}
			
			// ACTIF UNIQUEMENT QUAND VISIBLE
			if (Layer_Buddies.IsVisible || Layer_Buddies_ForceUpdate || Layer_LocalUser_ForceUpdate) {
			
				declare Boolean 	Buddies_DialogBoxNeeded 		for Layer_Buddies.LocalPage;
				declare Integer 	Buddies_Messenger_MessagesCount for Layer_Buddies.LocalPage;
				declare Boolean 	Buddies_HasPendingMessages 		for Layer_Buddies.LocalPage;
				declare Boolean 	IsOffline 						for Layer_Buddies.LocalPage;
				declare Boolean 	IsConnecting 					for Layer_Buddies.LocalPage;
				declare Integer 	LocalUserPendingRequest 		for Layer_Buddies.LocalPage;
				declare Text 		LocalUserCurrentStatus 			for Layer_Buddies.LocalPage;
				declare Text 		LocalUserCurrentServerName 		for Layer_Buddies.LocalPage;
				declare Text 		LocalUserCurrentServerLogin 	for Layer_Buddies.LocalPage;
				declare Text 		LocalUserCurrentPresence 		for Layer_Buddies.LocalPage;
				declare Text 		SelectedBuddyLogin 				for Layer_Buddies.LocalPage;
				declare Boolean 	HasSelectedLocalUser 			for Layer_Buddies.LocalPage;
				declare Integer 	PageIndex 						for Layer_Buddies.LocalPage;
				declare Integer 	PageIndexMax 					for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_Login 					for Layer_Buddies.LocalPage;
				declare Text[]		Buddies_Name 					for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_Status 					for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_Presence 				for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_ServerName 				for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_ServerLogin 			for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_ServerJoinLink 			for Layer_Buddies.LocalPage;
				declare Boolean[] 	Buddies_IsAlly 					for Layer_Buddies.LocalPage;
				declare Text[] 		Buddies_SubscriptionStatus 		for Layer_Buddies.LocalPage;
				declare Boolean[] 	Buddies_IsTitleCard 			for Layer_Buddies.LocalPage;
				declare Integer[] 	Buddies_UnreadMessages 			for Layer_Buddies.LocalPage;

				declare Text 		Settings_KeyToggleChat 			for Layer_Buddies.LocalPage;
				declare Real 		Settings_NoticeScale 			for Layer_Buddies.LocalPage;
				declare Real 		Settings_NoticeDuration 		for Layer_Buddies.LocalPage;
				declare Integer 	Settings_NoticeCount 			for Layer_Buddies.LocalPage;
				declare Boolean 	Settings_SoundOnNewMessage 		for Layer_Buddies.LocalPage;
				declare Boolean 	Settings_NoticeOnNewMessage 	for Layer_Buddies.LocalPage;
				declare Boolean 	Settings_NoticeOnNewConnection 	for Layer_Buddies.LocalPage;
				declare Boolean 	Settings_NoticeOnServerJoin 	for Layer_Buddies.LocalPage;
				
				declare Boolean 	Mode_AddBuddy 					for Layer_Buddies.LocalPage;	
				declare Boolean 	Mode_ServerList 				for Layer_Buddies.LocalPage;
				declare Boolean 	Mode_Settings 					for Layer_Buddies.LocalPage;	
				declare Boolean 	AddMode_Maniaplanet 			for Layer_Buddies.LocalPage;	
				declare Boolean	 	AddMode_Server 					for Layer_Buddies.LocalPage;				
						
				declare Integer 	Buddies_BuddiesPlayingCount 	for Layer_Buddies.LocalPage;		
				
				Settings_KeyToggleChat 			= Desired_Settings_KeyToggleChat;
				Settings_NoticeScale 			= Desired_Settings_NoticeScale;
				Settings_NoticeDuration 		= Desired_Settings_NoticeDuration;
				Settings_NoticeCount 			= Desired_Settings_NoticeCount;
				Settings_NoticeOnNewMessage 	= Desired_Settings_NoticeOnNewMessage;
				Settings_SoundOnNewMessage 		= Desired_Settings_SoundOnNewMessage;
				Settings_NoticeOnNewConnection 	= Desired_Settings_NoticeOnNewConnection;
				Settings_NoticeOnServerJoin 	= Desired_Settings_NoticeOnServerJoin;	
				
				Mode_AddBuddy 					= Desired_ModeAddBuddy;
				Mode_ServerList 				= Desired_ModeServerList;
				Mode_Settings 					= Desired_ModeSettings;
				AddMode_Maniaplanet 			= Desired_AddModeManiaplanet;
				AddMode_Server 					= Desired_AddModeServer;
				
				Buddies_DialogBoxNeeded 		= DialogBoxNeeded;
				Buddies_Messenger_MessagesCount = Messenger_MessagesCount;
				IsOffline 						= (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Offline);
				IsConnecting 					= (BuddiesManager.CurrentConnectionStatus == CBuddiesManager::EConnectionStatus::Connecting);
				LocalUserPendingRequest 		= BuddiesManager.IncomingBuddyRequests.count;
				LocalUserCurrentStatus 			= Displayed_Status;
				LocalUserCurrentServerName 		= CurrentServerName;
				LocalUserCurrentServerLogin 	= CurrentServerLogin;
				LocalUserCurrentPresence 		= GetMyPresenceSystemText(Desired_Show);
				if (Desired_SelectedBuddy != Null)			
					SelectedBuddyLogin 			= Desired_SelectedBuddy.Login;
				else
					SelectedBuddyLogin 			= "";		
				HasSelectedLocalUser 			= Desired_HasSelectedLocalUser;
				
				Buddies_BuddiesPlayingCount = BuddiesManager.PlayingOnlineBuddies.count;
				
				if (Previous_BuddiesPlayingCount != Buddies_BuddiesPlayingCount) {
					Previous_BuddiesPlayingCount  = Buddies_BuddiesPlayingCount;	
					LayerCustomEvent(Layer_Buddies, "Update", Text[] );
				}
					
					
							
				// UPDATE DES BUDDIES
				if (Layer_Buddies.IsVisible && Layer_Buddies_ForceUpdate) {
					
					declare BuddiesAdd_Login	= Text[];
					declare BuddiesAdd_Type 	= Integer[];
					if(Desired_ModeAddBuddy) {
						if(BuddiesManager.IncomingBuddyRequests.count > 0) {
							BuddiesAdd_Login.add(_("Received requests"));
							BuddiesAdd_Type.add(BuddiesAdd_Type_TitleCard);
							foreach(Buddy in BuddiesManager.IncomingBuddyRequests) {
								if(Buddy != Null) {
									BuddiesAdd_Login.add(Buddy.Login);
									BuddiesAdd_Type.add(BuddiesAdd_Type_Incoming);
								}
							}
						}
						if(BuddiesManager.OutgoingBuddyRequests.count > 0) {
							BuddiesAdd_Login.add(_("Sent requests"));
							BuddiesAdd_Type.add(BuddiesAdd_Type_TitleCard);
							foreach(Buddy in BuddiesManager.OutgoingBuddyRequests) {
								if(Buddy != Null) {
									BuddiesAdd_Login.add(Buddy.Login);
									BuddiesAdd_Type.add(BuddiesAdd_Type_Outgoing);
								}
							}
						}
						if(Persistent_LatestBuddyPlayedWith.count > 0) {
							BuddiesAdd_Login.add(_("Buddy suggestions"));
							BuddiesAdd_Type.add(BuddiesAdd_Type_TitleCard);
							declare Integer I = Persistent_LatestBuddyPlayedWith.count - 1;
							while(I > 0) {
								if(Persistent_LatestBuddyPlayedWith.existskey(I)) {
									BuddiesAdd_Login.add(Persistent_LatestBuddyPlayedWith[I]);
									BuddiesAdd_Type.add(BuddiesAdd_Type_Suggestion);
								}
								I -= 1;
							}
						}
					}
					
					
					Buddies_Login 				= Text[];
					Buddies_Name 				= Text[];
					Buddies_Status 				= Text[];
					Buddies_Presence 			= Text[];	
					Buddies_ServerName 			= Text[];	
					Buddies_ServerLogin 		= Text[];	
					Buddies_ServerJoinLink 		= Text[];	
					Buddies_IsAlly 				= Boolean[];	
					Buddies_SubscriptionStatus 	= Text[];	
					Buddies_IsTitleCard 		= Boolean[];	
					Buddies_UnreadMessages 		= Integer[];		
					Buddies_HasPendingMessages 	= False;
				
					if (Desired_ModeAddBuddy) {					
						if (Desired_AddModeServer && CurrentServerLogin != "")
							PageIndexMax = (CurrentServerPlayers.count - 1) / C_DisplayedBuddiesCount;
						else
							PageIndexMax = (BuddiesAdd_Login.count - 1) / C_DisplayedBuddiesCount;	
					} else {
						PageIndexMax = (BuddiesManager.FilteredBuddies.count - 1) / C_DisplayedBuddiesCount;
					}
					
					if (Previous_PageIndexMax != PageIndexMax) {
						Previous_PageIndexMax  = PageIndexMax;	
						LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					}
					
					if (Layer_Buddies_Desired_PageIndex > PageIndexMax) 
						Layer_Buddies_Desired_PageIndex = PageIndexMax;
					if (Layer_Buddies_Desired_PageIndex < 0) 
						Layer_Buddies_Desired_PageIndex = 0;
					PageIndex = Layer_Buddies_Desired_PageIndex;
					
					declare Integer StartBuddyIndex 	= PageIndex*C_DisplayedBuddiesCount;
					declare Integer EndBuddyIndex 		= StartBuddyIndex + C_DisplayedBuddiesCount - 1;
					
					for(I, StartBuddyIndex, EndBuddyIndex) {				
						
						declare CBuddy Buddy = Null;
						declare CUser User <=> Null;
						declare Text PersistentLogin;
						declare Boolean IsTitleCard;
						if (Desired_ModeServerList) {
							if (I >= BuddiesManager.FilteredBuddies.count) break;
							Buddy = BuddiesManager.FilteredBuddies[I];
						} else if (Desired_ModeAddBuddy) {
							if (Desired_AddModeManiaplanet) {
								if(I >= BuddiesAdd_Type.count) break;
								PersistentLogin = BuddiesAdd_Login[I];
								Buddy = BuddiesManager.GetBuddyFromLogin(BuddiesAdd_Login[I]);
								switch(BuddiesAdd_Type[I]) {
									case BuddiesAdd_Type_TitleCard: {
										IsTitleCard = True;
									}
									case BuddiesAdd_Type_Incoming: {
										// Nothing to do atm
									}
									case BuddiesAdd_Type_Outgoing: {
										// Nothing to do atm
									}
									case BuddiesAdd_Type_Suggestion: {
										// Nothing to do atm
									}
								}
							} else {
								if (I >= CurrentServerPlayers.count) break;
								User <=> CurrentServerPlayers[I];
								Buddy = BuddiesManager.GetBuddyFromLogin(User.Login);
							}
						} else {
							if (I >= BuddiesManager.FilteredBuddies.count) break;
							Buddy = BuddiesManager.FilteredBuddies[I];
						}
													
						if (Buddy == Null) {	
							declare Text Name;
							declare Text Login;
							if (User == Null) {
								Login	= PersistentLogin;
								Name	= PersistentLogin;
							} else {
								Login 	= User.Login;
								Name 	= User.Name;
							}
							Buddies_Login				.add(Login);
							Buddies_Name				.add(Name);
							Buddies_Status				.add("Not a buddy yet");
							Buddies_Presence			.add(PresenceShowSystemText_Offline);	
							Buddies_ServerName			.add("");
							Buddies_ServerLogin			.add("");
							Buddies_ServerJoinLink		.add("");
							Buddies_IsAlly				.add(False);
							Buddies_SubscriptionStatus	.add("");
							Buddies_IsTitleCard			.add(IsTitleCard);
							Buddies_UnreadMessages		.add(0);
						} else {
							Buddies_Login				.add(Buddy.Login);
							Buddies_Name				.add(Buddy.Name);
							Buddies_Status				.add(Buddy.PresenceStatus);
							Buddies_Presence			.add(GetBuddyPresenceSystemText(Buddy.PresenceShow));	
							Buddies_ServerName			.add(Buddy.CurrentServerName);
							Buddies_ServerLogin			.add(Buddy.CurrentServerLogin);
							Buddies_ServerJoinLink		.add(Buddy.CurrentServerJoinLink);
							Buddies_IsAlly				.add(Buddy.IsAlly);
							Buddies_SubscriptionStatus	.add(GetBuddySubscriptionStatusText(Buddy.SubscriptionStatus));
							Buddies_IsTitleCard			.add(IsTitleCard);
							if (Persistant_UnreadMessages.existskey(Buddy.Login)) {
								Buddies_UnreadMessages	.add(Persistant_UnreadMessages[Buddy.Login]);
								Buddies_HasPendingMessages = True;
							} else {
								Buddies_UnreadMessages	.add(0);
							}
						}
					}
					if (Buddies_Login.existskey(0))
						Actual_FirstBuddyLogin = Buddies_Login[0];
					LayerCustomEvent(Layer_Buddies, "Update", Text[] );
					Layer_Buddies_ForceUpdate = False;
				}
			}
		}
		Layer_LocalUser_ForceUpdate = False;
	}
}