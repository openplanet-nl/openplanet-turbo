#Include "MathLib" as ML

#Include "Libs/Openplanet/TMConsole/XmlHelmetEditor.Script.txt"		as XmlHelmetEditor

#Const ImgSrc 			"file://Media/Manialinks/Nadeo/TMConsole/Images/Helmets/"


#Const C_BASE 		0
#Const C_CREST		1
#Const C_PEAK		2
#Const C_STENCIL	3
#Const C_SCREWS 	4

#Const C_RandomHelmetsCount 	1

declare Integer[Integer][] 	G_Helmets;
declare Text[][Integer] 	G_Pictures;
declare Boolean				G_HasGeneratedPictures;


Void Private_CreateLayerPersistent() {

	// declare Text 	LayerName 	= C_LibHelmet_LayerPersistent;
	
	declare Text 	MLText = """
	
	<script><!--

		main() {
			declare persistent Integer[Integer][] PersistenteHelmets for Title;
			
			while(True) {
				yield;
				
			}
		}
	
	--></script>
	""";
	
	declare Layer_HelmetEditor = UILayerCreate();
	Layer_HelmetEditor.IsVisible = True;
	Layer_HelmetEditor.ManialinkPage = MLText;
	// Layers::Create(LayerName, MLText);
	// Layers::Attach(LayerName);
}

Void GeneratePictures(Boolean _Generate) 
{
	if(_Generate) 
	{
		G_Pictures.clear();
		G_Pictures[C_BASE] 		= XmlHelmetEditor::GetBasePictures();
		G_Pictures[C_CREST] 	= XmlHelmetEditor::GetCrestPictures();
		G_Pictures[C_PEAK] 		= XmlHelmetEditor::GetPeakPictures();
		G_Pictures[C_STENCIL] 	= XmlHelmetEditor::GetStencilPictures();
		G_Pictures[C_SCREWS] 	= XmlHelmetEditor::GetScrewsPictures();
	}
	G_HasGeneratedPictures = True;
}

Integer GetElementsCount()
{
	return G_Pictures.count;
}

Integer GetPicturesCountFromElement(Integer _ElementKey)
{
	return G_Pictures[_ElementKey].count;
}

Text[][Integer] GetPictures() 
{
	GeneratePictures(G_HasGeneratedPictures);
	return G_Pictures;
}

Integer	GetHelmetsCount()
{
	// declare persistent Integer[Integer][] PersistenteHelmets for This;
	return G_Helmets.count;
}

Boolean	GetHelmetsExists(Integer _HelmetKey)
{
	return G_Helmets.existskey(_HelmetKey);
}


Integer[Integer][] GetHelmets()
{
	return G_Helmets;
}

Integer[Integer] GetHelmet(Integer _HelmetKey)
{
	if(G_Helmets.existskey(_HelmetKey)) return G_Helmets[_HelmetKey];
	
	log("CAN'T FIND HELMET AT KEY "^_HelmetKey);
	return [C_BASE => 0, C_CREST => 0, C_PEAK => 0, C_STENCIL => 0, C_SCREWS => 0];
}

Integer GetHelmetElementValue(Integer _HelmetKey, Integer _ElementKey)
{
	if(G_Helmets.existskey(_HelmetKey) && G_Helmets[_HelmetKey].existskey(_ElementKey)) 
	{
		return G_Helmets[_HelmetKey][_ElementKey];
	}
	
	log("CAN'T FIND ELEMENT AT KEY "^_ElementKey^" FOR HELMET AT KEY "^_HelmetKey);
	return 0;
}



Void AddHelmet(Integer[Integer] _NewHelmet)
{
	declare Integer[Integer][] HelmetsBackward;
	
	HelmetsBackward.add(_NewHelmet);
	
	foreach(Helmet in G_Helmets)
	{
		HelmetsBackward.add(Helmet);
	}
	
	G_Helmets = HelmetsBackward;
}

Boolean RemoveHelmet(Integer _KeyToRemove, Boolean _CanBeEmpty)
{
	declare HasRemovedHelmet = True;
	
	if(_CanBeEmpty || G_Helmets.count > 1)
	{
		G_Helmets.removekey(_KeyToRemove);
	}
	else
	{
		HasRemovedHelmet = False;
	}
	
	return HasRemovedHelmet;
}

Boolean RemoveHelmet(Integer _KeyToRemove)
{
	return RemoveHelmet(_KeyToRemove, True);
}

Void SetHelmet(Integer _HelmetKey, Integer[Integer] _HelmetSettings)
{
	if(G_Helmets.existskey(_HelmetKey)) 
	{ 
		G_Helmets[_HelmetKey] = _HelmetSettings;
	}
	else
	{
		log("SetHelmetElement : This Helmet does not exist");
	}
}

Void SetHelmetElement(Integer _HelmetKey, Integer _ElementKey, Integer _ElementSettings)
{
	if(G_Helmets.existskey(_HelmetKey) 
	&& G_Helmets[_HelmetKey].existskey(_ElementKey) 
	&& G_Pictures[_ElementKey].existskey(_ElementSettings)
	) 
	{ 
		G_Helmets[_HelmetKey][_ElementKey] = _ElementSettings;
	}
	else
	{
		log("SetHelmetElement : Either The Helmet or the Element does not exist, or this Setting cannot be set to this Element (Unexisting variant)");
	}
}



Text[] GetHelmetElementUrls(Integer _HelmetKey)
{
	declare Text[]	HelmetElementUrls;
	
	if(G_Helmets.existskey(_HelmetKey))
	{
		declare Helmet = G_Helmets[_HelmetKey];
		foreach(Element => PictureVariant in Helmet) HelmetElementUrls.add(ImgSrc^G_Pictures[Element][PictureVariant]);
	}
	else
	{
		log("SetHelmetElement : This Helmet does not exist");
	}
	
	return HelmetElementUrls;
}

Text[] GetHelmetElementUrls(Integer[Integer] _HelmetSettings)
{
	declare Text[]	HelmetElementUrls;
	
	foreach(Element => PictureVariant in _HelmetSettings) HelmetElementUrls.add(ImgSrc^G_Pictures[Element][PictureVariant]);
	
	return HelmetElementUrls;
}



Integer[Integer] GenerateRandomHelmetSettings()
{
	
	declare Integer[Integer] 	RandomHelmet;
	
	foreach(I => Element in G_Pictures)
	{
		declare Count 			= Element.count;
		declare Variant 		= ML::Rand(0, Count-1);
		
		RandomHelmet[I] = Variant;
	}
	
	return RandomHelmet;
}

Void GenerateRandomHelmet() 
{
	declare Integer[Integer] 	RandomHelmet = GenerateRandomHelmetSettings();
	
	AddHelmet(RandomHelmet);
}

Void Load()
{
	XmlHelmetEditor::Load("HelmetEditorElementsList.xml");
	
	// G_Helmets.add([C_BASE => 0, C_CREST => 0, C_PEAK => 0, C_STENCIL => 0, C_SCREWS => 0]);
	
	GeneratePictures(True);
	
	declare Count = C_RandomHelmetsCount;
	for(I, 0, Count-1) GenerateRandomHelmet();
}

Text GetHelmetReaderFramemodel(Text _FrameModelId, Real _Size)
{
	return """ 
		<framemodel id="{{{_FrameModelId}}}">
			<quad id="Quad_Crest" 	posn="0 0 .5" sizen="{{{_Size}}} {{{_Size}}}" valign="center" halign="center" />
			<quad id="Quad_Peak" 	posn="0 0 .4" sizen="{{{_Size}}} {{{_Size}}}" valign="center" halign="center" />
			<quad id="Quad_Screws" 	posn="0 0 .3" sizen="{{{_Size}}} {{{_Size}}}" valign="center" halign="center" />
			<quad id="Quad_Stencil" posn="0 0 .2" sizen="{{{_Size}}} {{{_Size}}}" valign="center" halign="center" />
			<quad id="Quad_Base" 	posn="0 0 .1" sizen="{{{_Size}}} {{{_Size}}}" valign="center" halign="center" />
		</framemodel>
	""";
}



Text GetConst()
{
	declare Text ML;
	
	ML ^= """ 
	#Const C_Pictures [ """;
	foreach(I => Element in G_Pictures)
	{
		if(G_Pictures.count > 1 && I != 0) ML ^= """,""";
		ML ^= """
		[""";
		foreach(J => Picture in Element) 
		{ 
			if(Element.count > 1 && J != 0) ML ^= """,""";
			ML ^= """ "{{{Picture}}}" """;
		}
		ML ^= """]""";
	}
	
	ML ^= """
	]""";
	
	// log(ML);
	return ML;
}


Text GetFunctions()
{
	
	return """ 
		
		Text[] GetHelmetElementUrls(Integer[Integer] _HelmetSettings)
		{
			declare Text[]	HelmetElementUrls;
			
			foreach(Element => PictureVariant in _HelmetSettings) HelmetElementUrls.add("{{{ImgSrc}}}"^C_Pictures[Element][PictureVariant]);
			
			return HelmetElementUrls;
		}
		
		
		Integer[Integer] GenerateRandomHelmetSettings()
		{
			
			declare Integer[Integer] 	RandomHelmet;
			
			foreach(I => Element in C_Pictures)
			{
				declare Count 			= Element.count;
				declare Variant 		= ML::Rand(0, Count-1);
				
				RandomHelmet[I] = Variant;
			}
			
			return RandomHelmet;
		}
		
		Void SetFrameFromHelmetSettings(CMlFrame _Frame, Integer[Integer] _HelmetSettings)
		{
			declare CMlQuad[Integer] Quads;
			
			Quads[{{{C_BASE}}}] 	= (_Frame.GetFirstChild("Quad_Base") 		as CMlQuad);
			Quads[{{{C_CREST}}}] 	= (_Frame.GetFirstChild("Quad_Crest") 		as CMlQuad);
			Quads[{{{C_PEAK}}}] 	= (_Frame.GetFirstChild("Quad_Peak") 		as CMlQuad);
			Quads[{{{C_STENCIL}}}] 	= (_Frame.GetFirstChild("Quad_Stencil") 	as CMlQuad);
			Quads[{{{C_SCREWS}}}] 	= (_Frame.GetFirstChild("Quad_Screws") 		as CMlQuad);
			
			declare Helmet 			= GetHelmetElementUrls(_HelmetSettings);
			
			foreach(I => Url in Helmet) Quads[I].ImageUrl = Url;
		}
		
		Void SetFrameFromHelmetSettings(Text _FrameId, Integer[Integer] _HelmetSettings)
		{
			declare CMlFrame Frame 	= (Page.MainFrame.GetFirstChild(_FrameId) 	as CMlFrame);
			
			SetFrameFromHelmetSettings(Frame, _HelmetSettings);
		}
		
		Void SetFrameFromHelmet(CMlFrame _Frame)
		{
			declare HelmetSettings 	= GenerateRandomHelmetSettings();
			SetFrameFromHelmetSettings(_Frame, HelmetSettings);
		}
		
		Void SetFrameFromHelmet(Text _FrameId)
		{
			declare CMlFrame Frame 	= (Page.MainFrame.GetFirstChild(_FrameId) 	as CMlFrame);
			
			SetFrameFromHelmet(Frame);
		}
		
		Void SetQuadFromHelmetElement(CMlQuad _Quad, Integer _ElementKey, Integer _ElementValue)
		{
			if (C_Pictures.existskey(_ElementKey) && C_Pictures[_ElementKey].existskey(_ElementValue))
			{
				_Quad.ImageUrl = "{{{ImgSrc}}}"^C_Pictures[_ElementKey][_ElementValue];
			}
		}
		
		
		
	""";		

}
	