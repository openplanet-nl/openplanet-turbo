#Include "Libs/Openplanet/TMConsole/MenuColor.Script.txt"					as MenuColor
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt"					as Font
#Include "Libs/Openplanet/UIPadButtons.Script.txt"							as LibUIButtons
#Include "Libs/Openplanet/TMConsole/Menu/2DSelectArray.Script.txt"			as SelectArray2D
#Include "Libs/Openplanet/TMConsole/Prompter2.Script.txt"					as Prompter
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt"						as Colors
#Include "Libs/Openplanet/TMConsole/LibAudio.Script.txt"						as LibAudio
#Include "Libs/Openplanet/TMConsole/Volumes.Script.txt"						as Volumes

#Include "TextLib" as TextLib

#Const C_BrowseSlot_Landmark		3

#Const Count_InstancesY				11

#Const C_ImgBase 		"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgBase2		"file://Media/Images/TMConsole/Ingame/"
#Const C_ImgBaseFlags	"file://Media/Manialinks/Nadeo/TMConsole/Images/Helmets/Drapeaux/NewFlag/"

Text InjectInManialink() {
	//IMAGES
	declare Text 	IMGSlotSmallBg           = C_ImgBase2^"slot-medium-bg.dds";
	declare Text 	IMGSlotSmallFg           = C_ImgBase2^"slot-medium-fg.dds";
	declare Text 	IMGSlotMediumBg          = C_ImgBase2^"slot-medium-bg.dds";
	declare Text 	IMGSlotMediumFg          = C_ImgBase^"slot-medium-fg2.dds";
	declare Text 	IMGSlotBigBg             = C_ImgBase^"slot-big-bg2.dds";
	declare Text 	IMGSlotBigFg             = C_ImgBase^"slot-big-fg2.dds";
	declare Text 	IMGMenuBg                = C_ImgBase2^"menu-bg-1.dds";
	
	declare Integer Platform = LibUIButtons::GetPlatform();
	
	declare Text 	IMGR1_PC      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::PageUp);
	declare Text 	IMGR1_PS4      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::PageUp);
	declare Text 	IMGR1_XB1      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::PageUp);
	
	declare Text 	IMGL1_PC      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::PageDown);
	declare Text 	IMGL1_PS4      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::PageDown);
	declare Text 	IMGL1_XB1      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::PageDown);
	
	declare Text 	IMGSelect_PC      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMGSelect_PS4      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMGSelect_XB1      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Select);
	
	declare Text 	IMGCancel_PC      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Cancel);
	declare Text 	IMGCancel_PS4      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Cancel);
	declare Text 	IMGCancel_XB1      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Cancel);
	
	declare Text 	IMGAction1_PC      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Action1);
	declare Text 	IMGAction1_PS4      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Action1);
	declare Text 	IMGAction1_XB1      	= LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Action1);
	
	declare Text 	IMGLStickPress_PC      	= "file://Media/Manialinks/Common/PadButtons/PC/F5.dds";
	declare Text 	IMGLStickPress_PS4      = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), "RandomModel");
	declare Text 	IMGLStickPress_XB1      = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), "RandomModel");
	
	declare Text	IMGChallengeRating 		= C_ImgBase^"Online/BrowseServers/Championship_Rating.png";
	
	declare Text 	IMGArrow				= C_ImgBase^"Arrow.tga";
	
	declare Text 	TitleColor    = TextLib::ColorToText(MenuColor::GetMenuColor(2));
	
	//SIZES
	declare Real	Browser_SizeTotalX          = 259.0;
	declare Real	Browser_SizeOngletInfoX     = 17.5; //c'est la largeur de L1/R1 (je suppose)
	declare Real	Browser_SizeY               = 8.27;
	declare Real	Browser_Separator           = Browser_SizeY * 0.095;
	declare Real	Browser_SizeYElement        = Browser_SizeY - Browser_Separator;	

	declare Real	Browser_SizeXCircle 		= Browser_SizeTotalX / 36.;
	declare Real	Browser_SizeXInputSmall		= Browser_SizeXCircle * 5;
	declare Real	Browser_SizeXInput			= Browser_SizeXCircle * 7;
	
	//POSITIONS
	declare Real	Browser_PosY                = 60.;
	declare Real	Browser_PosYElementAlignTop = Browser_PosY - Browser_Separator;	
	//declare Real	PositionFirstQuadX       	= 20.8;
	declare Real	PositionFirstQuadX       	= 0.;
	declare Real	PositionFirstQuadY       	= 36.3;
	
	declare Real    LabelPosX_Base			 	= - Browser_SizeTotalX / 2.;
	declare Real	LabelPosX_Flag				= LabelPosX_Base + Browser_SizeTotalX * 0.03;
	declare Real	LabelPosX_Echelon		 	= LabelPosX_Base + Browser_SizeTotalX * 0.96;
	declare Real	LabelPosX_Name			 	= LabelPosX_Base + Browser_SizeTotalX * 0.05;
	declare Real	LabelPosX_MapsCount		 	= LabelPosX_Base + Browser_SizeTotalX * 0.66;
	declare Real	LabelPosX_Length		 	= LabelPosX_Base + Browser_SizeTotalX * 0.74;
	declare Real	LabelPosX_Stunts	 		= LabelPosX_Base + Browser_SizeTotalX * 0.445;
	declare Real	LabelPosX_Environment	 	= LabelPosX_Base + Browser_SizeTotalX * 0.54;
	declare Real	LabelPosX_End			 	= LabelPosX_Base + Browser_SizeTotalX * 0.75;
	declare Real	LabelPosX_Status		 	= LabelPosX_Base + Browser_SizeTotalX * 0.855;
	
	declare Real	LabelPosX_Ratings			= LabelPosX_Base + Browser_SizeTotalX * 0.86;
	declare Real	Ratings_StarsXYRatio		= 4.69;
	declare Real 	Ratings_SizeX				= Browser_SizeTotalX * 0.13;
	
	SelectArray2D::Init(Browser_SizeTotalX, Browser_SizeYElement, 1, Count_InstancesY);
	SelectArray2D::SetPosFirstQuad(PositionFirstQuadX, PositionFirstQuadY);
	SelectArray2D::SetQuadMarge(0., Browser_Separator);
	SelectArray2D::SetSelectorColor(MenuColor::GetMenuColor(2));
	
	SelectArray2D::AddQuad		("Echelon", 	<LabelPosX_Echelon, 0.>, 	<7., 7.>);
	
	SelectArray2D::AddQuad		("Echelon_Ech", 	<LabelPosX_Echelon + 4., 0.>, 	<7., 7.>);
	SelectArray2D::AddQuad		("Echelon_Medal", 	<LabelPosX_Echelon - 4., 0.>, 	<7., 7.>);
	
	SelectArray2D::AddQuad		("Flag", 		<LabelPosX_Flag, 0.>,		<7., 7.>);
	SelectArray2D::AddLabel		("Name",		<LabelPosX_Name, 0.>, 		110, 	Font::GetFontName("Main"), "fff", "left", "center", """textprefix="$t" """);
	SelectArray2D::AddQuad		("Stunts", 		<LabelPosX_Stunts, 0.>,		<7., 7.>);
	SelectArray2D::AddQuad		("Environment_Stadium", 	<LabelPosX_Environment+12., 0.>,	<7., 7.>);
	SelectArray2D::AddQuad		("Environment_Lagoon", 		<LabelPosX_Environment+4., 0.>,		<7., 7.>);
	SelectArray2D::AddQuad		("Environment_Canyon", 		<LabelPosX_Environment-12., 0.>,	<7., 7.>);
	SelectArray2D::AddQuad		("Environment_Valley", 		<LabelPosX_Environment-4., 0.>,		<7., 7.>);
	SelectArray2D::AddLabel		("MapsCount",	<LabelPosX_MapsCount, 0.>, 	13, 	Font::GetFontName("Main"), "fff", "center", "center", """textprefix="$t" """);
	SelectArray2D::AddLabel		("Length",		<LabelPosX_Length, 0.>,	 	20, 	Font::GetFontName("Main"), "fff", "center", "center", "");
	SelectArray2D::AddLabel		("Remaining",	<LabelPosX_End, 0.>, 		100, 	Font::GetFontName("Main"), "fff", "left", "center", """textprefix="$t" """);
	SelectArray2D::AddLabel		("Status",		<LabelPosX_Status, 0.>, 	30, 	Font::GetFontName("Main"), "fff", "center", "center", """textprefix="$t" """);
	SelectArray2D::AddLabel		("Info",  		<0., 0.>, 	200,Font::GetFontName("Main"), "", "center", "center"); //Label que l'on set lorsque tous les autres sont vides (erreur chargement, empty room slot, etc...)
	
	declare MLText = """
		<framemodel id="FrameModel_Landmark">
			<label 	halign="center" valign="center" posn="0 0 1"		sizen="60 7" id="Label_LandmarkName"   textfont="{{{Font::GetFontName("Main")}}}" textcolor="000"	textprefix="$t"	/>
			<quad 	halign="center" valign="center" posn="-0.2 -0.7 1" 	sizen="{{{(Browser_SizeTotalX - Browser_SizeOngletInfoX)/C_BrowseSlot_Landmark-0.2}}} {{{Browser_SizeY*0.95}}}"  bgcolor="00E2FF" opacity="0.6"/>
		</framemodel>
		<framemodel id="Frame_SubMenu">	
			<quad halign="center" valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeYElement}}}" 	image="{{{IMGSlotMediumBg}}}" 	posn="0 0 2" />
			<quad halign="center" valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeYElement}}}" 	image="{{{IMGSlotMediumFg}}}" 	posn="0 0 4" />
			<quad halign="center" valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeY}}}" 			image="{{{IMGMenuBg}}}"		 	posn="0 0 1" />
		</framemodel>
		<framemodel id="FrameModel_InputInfo">
			<quad 	halign="center" valign="bottom" posn="0 0 6" 	sizen="50 {{{Browser_SizeYElement}}}" image="{{{IMGSlotSmallBg}}}"   />
			<quad 	halign="center" valign="bottom" posn="0 0 8" 	sizen="50 {{{Browser_SizeYElement}}}" image="{{{IMGSlotSmallFg}}}"   />
			<quad 	halign="center" valign="center" posn="18.5 4 7" sizen="6 6" id="Quad_Icon" />
			<label 	halign="right" 	valign="center" posn="12 4.5 7" sizen="34" 	id="Label_Name" textcolor="ddd"  textsize="3." />
		</framemodel>
		
		<framemodel id="FrameModel_Rating">
			<quad						halign="left"	valign="center"		sizen="{{{Ratings_SizeX * 0.6}}} 		{{{Ratings_SizeX * 0.6 / Ratings_StarsXYRatio}}}" 		image="{{{IMGChallengeRating}}}"	posn="{{{-Ratings_SizeX*0.5}}} 0 1.9" />
			<gauge	id="gauge_rating"	halign="left"	valign="center"		sizen="{{{Ratings_SizeX * 0.6 + 3.2}}} 	{{{Ratings_SizeX * 0.6 / Ratings_StarsXYRatio + 7.2}}}" color="{{{TitleColor}}}" ratio=".98" grading="1." drawbg="0" posn="{{{-Ratings_SizeX*0.5 - 1.5}}} 0.3 1.8" />
			<label	id="label_rating"	halign="left"	valign="center2" 	sizen="{{{Ratings_SizeX * 0.35}}} 		{{{Browser_SizeYElement}}}" text="(5000)" textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"	posn="{{{Ratings_SizeX * 0.15}}} 0 3" />
		</framemodel>
		
		{{{SelectArray2D::InjectInFrameModel()}}}
	""";
	//{{{Ratings_SizeX * 0.6 / Ratings_StarsXYRatio}}}" 
	
	//<gauge	halign="left"	valign="center"	sizen="{{{Ratings_SizeX * 0.6}}}" keepratio="1" color="{{{TitleColor}}}" ratio="1." grading="0.2" drawbg="0" posn="{{{-Ratings_SizeX*0.5}}} 0 2.8" />
	//<label	halign="left"	valign="center" sizen="{{{Ratings_SizeX * 0.35}}} {{{Browser_SizeYElement}}}" text="(5000)" textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"	posn="{{{Ratings_SizeX * 0.15}}} 0 3" />
	
	
	////////////////
	//FRAME TITLE
	////////////////
	MLText ^= """
		<frame id="Frame_Title" posn="0 1.0 0">
			<quad 	halign="center" valign="bottom" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeY*2.}}}" image="{{{IMGSlotBigFg}}}" posn="0 {{{Browser_PosY-2.8}}} 7" />
			<quad  	halign="center" valign="bottom" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeY*2.}}}" image="{{{IMGSlotBigBg}}}" posn="0 {{{Browser_PosY-2.8}}} 5" />
			<label 	halign="left" valign="center" textprefix="$t" textfont="{{{Font::GetFontName("Main")}}}" posn="{{{-(Browser_SizeTotalX-2)/2.}}}  {{{Browser_PosY + Browser_SizeY - 1.}}} 6" textcolor="{{{TitleColor}}}" textsize="13." text="{{{_("Browse Challenges")}}}" sizen="{{{Browser_SizeTotalX-2.}}}" />
		</frame>
	""";
	
	////////////////
	//ONGLETS
	////////////////	
	MLText ^= """
		<frame id="Frame_Onglet" posn="0 -5.6 0">
			<quad halign="center" 	valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeY*0.95}}}" 	image="{{{IMGSlotMediumFg}}}" posn="0 {{{Browser_PosYElementAlignTop}}} 5" />			
			<quad halign="center" 	valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeY*0.95}}}" 	image="{{{IMGSlotMediumBg}}}" posn="0 {{{Browser_PosYElementAlignTop}}} 2" />
	""";
		for (I, 0, 2) {
		declare Text ImageR1;
		declare Text ImageL1;
		switch (I) {
			case LibUIButtons::GetPlatform("PC") : {
				ImageR1 = IMGR1_PC;
				ImageL1 = IMGL1_PC;
			}				
			case LibUIButtons::GetPlatform("PS4") : {
				ImageR1 = IMGR1_PS4;
				ImageL1 = IMGL1_PS4;
			}
			case LibUIButtons::GetPlatform("XB1") : {
				ImageR1 = IMGR1_XB1;
				ImageL1 = IMGL1_XB1;
			}
		}
		
		MLText ^= """<quad halign="center" 	valign="center" sizen="8 8" id="MouseInput_NextTab_{{{I}}}" scriptevents="1" image="{{{ImageR1}}}" keepratio="Fit" posn="124.9 {{{Browser_PosYElementAlignTop+0.2}}} 3" """;
		if (I != Platform)
			MLText ^= """ hidden="1" """;
		MLText ^= """/>
			<quad halign="center" 	valign="center" sizen="8 8" id="MouseInput_PrevTab_{{{I}}}" scriptevents="1" image="{{{ImageL1}}}" keepratio="Fit" posn="-125.1 {{{Browser_PosYElementAlignTop+0.2}}} 3" """;
		if (I != Platform)
			MLText ^= """ hidden="1" """;
		MLText ^= "/>";
	}
	
	MLText ^= """
			<quad halign="left" 	valign="center" sizen="{{{(Browser_SizeTotalX - Browser_SizeOngletInfoX)/C_BrowseSlot_Landmark-0.2}}} {{{Browser_SizeY*0.95}}}"	 posn="{{{-Browser_SizeTotalX/2.}}} {{{Browser_PosYElementAlignTop}}} 4" bgcolor="00E2FF" opacity="1.0" id="OngletFocus" />
		</frame>
	""";
	for(I, 0, C_BrowseSlot_Landmark-1) {
		declare Real PosnX = - Browser_SizeTotalX / 2 + (I + 0.5) * ((Browser_SizeTotalX/C_BrowseSlot_Landmark)-5.7)+8.4; 
		MLText ^= """
			<frameinstance modelid="FrameModel_Landmark" posn="{{{PosnX}}} 54.3 3" id="FrameInstance_Landmark{{{I}}}" />
			<quad id="MouseInput_Landmark_{{{I}}}" halign="center" valign="center" sizen="{{{(Browser_SizeTotalX - Browser_SizeOngletInfoX)/C_BrowseSlot_Landmark-0.2}}} {{{Browser_SizeY*0.95}}}" posn="{{{PosnX-0.2}}} {{{53.6}}} 6" opacity="0." scriptevents="1"/>
		""";
	}
	
	////////////////
	//FILTERS PROMPTER
	////////////////
	MLText ^= """
		<frame id="Frame_FilterValue" posn="0 {{{PositionFirstQuadY + Browser_SizeY }}} 5" halign="center" valign="center">
			<frameinstance modelid="Frame_SubMenu"/>
			{{{Prompter::InjectInManialink("filtervalue", <-Browser_SizeTotalX/4 + 2, 0.5, 3.>, <Browser_SizeTotalX - 4, 10.>, 3, Font::GetFontName("Main"))}}}
		</frame>
	""";

	////////////////
	//INPUT
	////////////////
	MLText ^= """<frame id="Frame_InputInfos" posn="0 {{{-9*Browser_SizeY}}} 7">""";
	//SELECT
	MLText ^= """<frame id="Browser_InputInfo_Select" posn="{{{Browser_SizeTotalX/2.}}}" >
		<quad 	halign="right" valign="bottom" posn="0 0 6" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallBg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 8" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallFg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 9" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" opacity="0." scriptevents="1" id="MouseInput_BrowserInputInfo_Select"  />
	""";
	
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMGSelect_PC;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMGSelect_PS4;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMGSelect_XB1;
			}
		
			MLText ^= """<quad 	halign="center" valign="center" posn="{{{-Browser_SizeXCircle*0.5}}} {{{Browser_SizeY*0.5}}} 7" 	sizen="{{{Browser_SizeXCircle*0.8}}} {{{Browser_SizeXCircle*0.8}}} 6" image="{{{Image}}}" id="Browser_InputInfo_Select_{{{I}}}" """;
			if (I != Platform)
				MLText ^= """ hidden="1" """;
			MLText ^= "/>";
		}
		
	MLText ^= """
		<label 	halign="right" valign="center2" posn="{{{-Browser_SizeXCircle-2.}}} {{{Browser_SizeY*0.5}}} 7" sizen="{{{Browser_SizeXInputSmall - Browser_SizeXCircle - 4. }}}" 	id="Label_Name" textcolor="ddd"  textsize="4." textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t" />
	</frame>""";
	
	//CANCEL
	MLText ^= """<frame id="Browser_InputInfo_Cancel" posn="{{{Browser_SizeTotalX/2. - Browser_SizeXInputSmall - Browser_SizeXCircle}}}" >
		<quad 	halign="right" valign="bottom" posn="0 0 6" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallBg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 8" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallFg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 9" 	sizen="{{{Browser_SizeXInputSmall}}} {{{Browser_SizeY}}}" opacity="0." scriptevents="1" id="MouseInput_BrowserInputInfo_Cancel"  />
	""";
	
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMGCancel_PC;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMGCancel_PS4;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMGCancel_XB1;
			}
		
			MLText ^= """<quad 	halign="center" valign="center" posn="{{{-Browser_SizeXCircle*0.5}}} {{{Browser_SizeY*0.5}}} 7" 	sizen="{{{Browser_SizeXCircle*0.8}}} {{{Browser_SizeXCircle*0.8}}} 6" image="{{{Image}}}" id="Browser_InputInfo_Cancel_{{{I}}}" """;
			if (I != Platform)
				MLText ^= """ hidden="1" """;
			MLText ^= "/>";
		}
		
	MLText ^= """
		<label 	halign="right" valign="center2" posn="{{{-Browser_SizeXCircle-2.}}} {{{Browser_SizeY*0.5}}} 7" sizen="{{{Browser_SizeXInputSmall - Browser_SizeXCircle - 4. }}}" 	id="Label_Name" textcolor="ddd"  textsize="4." textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"/>
	</frame>""";
	
	//ACTION1
	MLText ^= """<frame id="Browser_InputInfo_Action1" posn="{{{Browser_SizeTotalX/2. - 2*Browser_SizeXInputSmall - 2*Browser_SizeXCircle}}}" >
		<quad 	halign="right" valign="bottom" posn="0 0 6" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallBg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 8" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallFg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 9" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" opacity="0." scriptevents="1" id="MouseInput_BrowserInputInfo_Action1"  />
	""";
		
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMGAction1_PC;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMGAction1_PS4;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMGAction1_XB1;
			}
		
			MLText ^= """<quad 	halign="center" valign="center" posn="{{{-Browser_SizeXCircle*0.5}}} {{{Browser_SizeY*0.5}}} 7" 	sizen="{{{Browser_SizeXCircle*0.8}}} {{{Browser_SizeXCircle*0.8}}} 6" image="{{{Image}}}" id="Browser_InputInfo_Action1_{{{I}}}" """;
			if (I != Platform)
				MLText ^= """ hidden="1" """;
			MLText ^= "/>";
		}
	MLText ^= """
		<label 	halign="right" valign="center2" posn="{{{-Browser_SizeXCircle-2.}}} {{{Browser_SizeY*0.5}}} 7" sizen="{{{Browser_SizeXInput - Browser_SizeXCircle - 4. }}}" 	id="Label_Name" textcolor="ddd"  textsize="4." textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"/>
	</frame>""";
	
	//LSTICK
	MLText ^= """<frame id="Browser_InputInfo_LStickPress" posn="{{{Browser_SizeTotalX/2. - 2*Browser_SizeXInputSmall - 2*Browser_SizeXInput - 4*Browser_SizeXCircle}}}" >
		<quad 	halign="right" valign="bottom" posn="0 0 6" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallBg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 8" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" image="{{{IMGSlotSmallFg}}}"   />
		<quad 	halign="right" valign="bottom" posn="0 0 9" 	sizen="{{{Browser_SizeXInput}}} {{{Browser_SizeY}}}" opacity="0." scriptevents="1" id="MouseInput_BrowserInputInfo_LStickPress"  />
	""";
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMGLStickPress_PC;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMGLStickPress_PS4;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMGLStickPress_XB1;
			}
		
			MLText ^= """<quad 	halign="center" valign="center" posn="{{{-Browser_SizeXCircle*0.5}}} {{{Browser_SizeY*0.5}}} 7" 	sizen="{{{Browser_SizeXCircle*0.8}}} {{{Browser_SizeXCircle*0.8}}} 6" image="{{{Image}}}" id="Browser_InputInfo_LStickPress_{{{I}}}" """;
			if (I != Platform)
				MLText ^= """ hidden="1" """;
			MLText ^= "/>";
		}
		
	MLText ^= """
		<label 	halign="right" valign="center2" posn="{{{-Browser_SizeXCircle-2.}}} {{{Browser_SizeY*0.5}}} 7" sizen="{{{Browser_SizeXInput - Browser_SizeXCircle - 4. }}}" 	id="Label_Name" textcolor="ddd"  textsize="4." textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t"/>
	</frame>""";
	
	MLText ^= "</frame>";
	
	//MLText ^= """<frame id="Frame_InputInfos" posn="0 -74.8 7">""";
	//for(I, 0, 3) {
	//	declare Real PosnX = 104. - I*57.4;
	//	MLText ^= """<frameinstance modelid="FrameModel_InputInfo" posn="{{{PosnX}}} 0 0" id="FrameInstance_InputInfo{{{I}}}" />""";
	//}
	//MLText ^= "</frame>";
	
	////////////////
	//SERVERLIST
	////////////////
	MLText ^= """
		<frame id="Frame_ChampionshipsList" posn="0 -8.27">
			<frame id="Frame_Legends" posn="{{{PositionFirstQuadX}}} {{{PositionFirstQuadY + Browser_SizeY}}} 7" hidden="1">
				<label id="Label_Echelon"  		textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Level")}}}"   					posn="{{{LabelPosX_Echelon}}} 0 0" 		sizen="30"  textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_Name"  		textprefix="$t" halign="left"    valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Challenge Name")}}}"    		posn="{{{LabelPosX_Name}}} 0 0" 		sizen="100" textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_Environment"  	textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Environments")}}}"  			posn="{{{LabelPosX_Environment}}} 0 0" 	sizen="40"  textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_MapsCount"  	textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Maps")}}}"  					posn="{{{LabelPosX_MapsCount}}} 0 0" 	sizen="17"  textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_Length"		textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Duration")}}}"					posn="{{{LabelPosX_Length}}} 0 0" 		sizen="35"  textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_Ratings"		textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Ratings")}}}"					posn="{{{LabelPosX_Ratings}}} 0 0" 		sizen="35"  textfont="{{{Font::GetFontName("Main")}}}"/>
				<label id="Label_Status"  		textprefix="$t" halign="center"  valign="center2" bgcolor="fff" text="{{{_("|ChallengeBrowserColumnName|Status")}}}"					posn="{{{LabelPosX_Status}}} 0 0" 		sizen="30"  textfont="{{{Font::GetFontName("Main")}}}" hidden="1"/>				
			</frame>
			<quad id="MouseInput_NextPage" 	halign="center" valign="center" keepratio="Fit" 			sizen="12.0 12.0" image="{{{IMGArrow}}}" posn="{{{Browser_SizeTotalX * 0.5 + 15.}}} 0. 11" 		colorize="{{{TextLib::ColorToText(Colors::GetColor("White"))}}}" hidden="1" scriptevents="1"/>
			<quad id="MouseInput_PrevPage" 	halign="center" valign="center" keepratio="Fit" rot="180" 	sizen="12.0 12.0" image="{{{IMGArrow}}}" posn="{{{- Browser_SizeTotalX * 0.5 - 15.}}} 0. 11"  	colorize="{{{TextLib::ColorToText(Colors::GetColor("White"))}}}" hidden="1" scriptevents="1"/>
	""";
	
	for(K, 0, Count_InstancesY)
	{
		declare Real FramePosnX = PositionFirstQuadX;
		declare Real FramePosnY = PositionFirstQuadY + 0.2 - (K-1) * Browser_SizeY; //on fait une ligne au dessus pour les légendes

		MLText^="""	
			<frameinstance modelid="Frame_SubMenu" 		posn="{{{FramePosnX}}} {{{FramePosnY}}} 3.5" id="Frame_InstanceSubMenu{{{K-1}}}" hidden="0"/>
				""";
		if (K >= 1)
			MLText ^= """
				<frameinstance modelid="FrameModel_Rating"	posn="{{{LabelPosX_Ratings}}} {{{FramePosnY}}} 4." id="Frame_Ratings{{{K-1}}}" hidden="1" />
				<quad halign="center" valign="center" sizen="{{{Browser_SizeTotalX}}} {{{Browser_SizeYElement}}}" posn="{{{FramePosnX}}} {{{FramePosnY}}} 8" opacity="0." scriptevents="1" hidden="1" id="MouseInput_BrowserLine_{{{K-1}}}" />
			""";
	}
	
	MLText ^= """
			{{{SelectArray2D::InjectInManialink()}}}	
		</frame>
	""";
	
	return MLText;
}

Text InjectInGlobals() {
	declare Globals = """
		declare Integer						G_IndexFocusX;
		declare Integer						G_IndexFocusY;
		declare Text[]						G_Onglets;
		declare Integer						G_OngletFocus;
		declare Integer						G_TimeSwitchOnglet;
		declare Boolean						G_NextPageOnRequestCompletion;
		declare Integer		 				G_NextRequestNextPageTime;
		declare Boolean 					G_RequestError;		
		declare Integer 					G_CurrentSelectedChallengeIndex;
		declare Integer						G_Prev_PageIndex;
		declare Integer						G_LastRefreshTime;
		
		{{{SelectArray2D::InjectInGlobalDeclaration()}}}
		{{{Prompter::InjectInGlobals()}}}
		
	""";
	
	return Globals;
}

Text InjectInInit() {
	declare Init = """
		//L16N Title of the tab where you can choose to play on an installed challenge
		G_Onglets.add(_("Play"));
		//L16N Title of the tab where you can find new challenges to play with
		G_Onglets.add(_("Find"));
		//L16N Title of the tab where you can create and publish your own challenges
		G_Onglets.add(_("Create"));
		
		for(I, 0, G_Onglets.count - 1)
		{
			declare CMlFrame  FrameInstance_Landmark <=> (Page.GetFirstChild("FrameInstance_Landmark"^I) as CMlFrame);
			declare CMlLabel  Label_LandmarkName <=> (FrameInstance_Landmark.GetFirstChild("Label_LandmarkName") as CMlLabel);
			Label_LandmarkName.Value = G_Onglets[I];	
		}
		
		G_RequestError = False;
		G_NextPageOnRequestCompletion = False;
		G_NextRequestNextPageTime = Now;
		G_CurrentSelectedChallengeIndex = 0;
		
		{{{Prompter::InjectInInit()}}}
		{{{SelectArray2D::InjectInInit()}}}
		
		G_Prev_PageIndex = G_PageIndex;
		
		InitInputsInfo();
	""";
		
	return Init;
}

Text InjectInFunctions() {
	declare Text	IMGEnvironment_Canyon      = "file://Media/Manialinks/Nadeo/TMConsole/Images/Online/BrowseServers/logos_enviro/canyon_s.tga";
	declare Text	IMGEnvironment_Stadium     = "file://Media/Manialinks/Nadeo/TMConsole/Images/Online/BrowseServers/logos_enviro/stadium_s.tga";
	declare Text	IMGEnvironment_Lagoon      = "file://Media/Manialinks/Nadeo/TMConsole/Images/Online/BrowseServers/logos_enviro/lagoon_s.tga";
	declare Text	IMGEnvironment_Valley      = "file://Media/Manialinks/Nadeo/TMConsole/Images/Online/BrowseServers/logos_enviro/valley_s.tga";
	declare Text	IMGStunts					= "file://Media/Manialinks/Nadeo/TMConsole/Images/Online/BrowseServers/Challenge_Stunts.png";
	
	declare Text 	IMGMedalNoMedal        = C_ImgBase2^"medal-empty.dds";
	declare Text 	IMGMedalBronze         = C_ImgBase2^"medal-bronze.dds";
	declare Text 	IMGMedalSilver         = C_ImgBase2^"medal-silver.dds";
	declare Text 	IMGMedalGold           = C_ImgBase2^"medal-gold.dds";
	declare Text 	IMGMedalTrackmaster    = C_ImgBase2^"medal-author.dds";
	
	declare Real	Browser_SizeTotalX          = 259.0;
	declare Real	Browser_SizeOngletInfoX     = 17.5; //c'est la largeur de L1/R1 (je suppose)
	
	declare Functions = """
		{{{SelectArray2D::InjectInFunction()}}}
		{{{Prompter::InjectInFunctions()}}}
		
		Text TimeToText(Integer _Time, Boolean _Approx)
		{
			if (_Time <= 0)
			{
				//L16N Displayed in the "Duration" column of the challenge browser
				return _("|feminine|Unknown");
			}
				
			declare Text Time;
			declare Integer Minutes = _Time / 60000;
			declare Integer Seconds = (_Time - Minutes * 60000) / 1000;
			declare Integer Milliseconds = _Time - Minutes * 60000 - Seconds * 1000;
			
			if (_Approx)
			{
				Time = "~";
				if (Minutes != 0)	
				{
					//L16N Displayed in the "Duration" column of the chmapionship browser
					Time ^= Minutes^TL::GetTranslatedText(_("|minutes|mn"));
				} else {
					//L16N Displayed in the "Duration" column of the chmapionship browser
					Time ^= Seconds^TL::GetTranslatedText(_("|seconds|s"));
				}
			} else {
				Time = Minutes^":";
				if (Seconds < 10)
					Time ^= "0";
				Time ^= Seconds^".";
				if (Milliseconds < 10)
					Time ^= "00";
				else if (Milliseconds < 100)
					Time ^= "0";
				Time ^= Milliseconds;
			}
			return Time;
		}
		
		//////////////////
		// INPUT INFO
		//////////////////
		Void InitInputsInfo() {
			declare CMlLabel Label_InputName;
			declare CMlQuad  Quad_InputIcon;
		
			//SELECT
			declare CMlFrame FrameInputSelect <=> (Page.GetFirstChild("Browser_InputInfo_Select") as CMlFrame);
			Label_InputName <=> (FrameInputSelect.GetFirstChild("Label_Name") as CMlLabel);
			//L16N Displayed next to a button icon to explain what it does
			Label_InputName.Value = _("|16 chars max|SELECT");
			//CANCEL
			declare CMlFrame FrameInputCancel <=> (Page.GetFirstChild("Browser_InputInfo_Cancel") as CMlFrame);
			Label_InputName <=> (FrameInputCancel.GetFirstChild("Label_Name") as CMlLabel);
			//L16N Displayed next to a button icon to explain what it does
			Label_InputName.Value = _("|16 chars max|BACK");
			//ACTION1
			declare CMlFrame FrameInputAction1 <=> (Page.GetFirstChild("Browser_InputInfo_Action1") as CMlFrame);
			Label_InputName <=> (FrameInputAction1.GetFirstChild("Label_Name") as CMlLabel);
			//L16N Displayed next to a button icon to explain what it does
			Label_InputName.Value = _("|16 chars max|EDIT FILTERS");
			//LSTICK
			declare CMlFrame FrameInputLStick <=> (Page.GetFirstChild("Browser_InputInfo_LStickPress") as CMlFrame);
			Label_InputName <=> (FrameInputLStick.GetFirstChild("Label_Name") as CMlLabel);
			//L16N Displayed next to a button icon to explain what it does
			Label_InputName.Value = _("|16 chars max|REFRESH");
		}
		
		Void UpdateInputsInfo() {
			declare CMlLabel Label_InputName;
			declare Text[Text][] RequestedChallenges for Page;
			
			//SELECT = INSTALL (ALL) / SELECT (OTHERS)
			declare CMlFrame FrameInputSelect <=> (Page.GetFirstChild("Browser_InputInfo_Select") as CMlFrame);
			if (!G_RequestError && RequestedChallenges.count != 0)
			{
				FrameInputSelect.Show();
				//FrameInputAction2.Show();
			} else {
				FrameInputSelect.Hide();
				//FrameInputAction2.Hide();
			}
			
			//ACTION1 = FILTERS (challenges) / CREATE
			declare CMlFrame FrameInputAction1 <=> (Page.GetFirstChild("Browser_InputInfo_Action1") as CMlFrame);
			Label_InputName <=> (FrameInputAction1.GetFirstChild("Label_Name") as CMlLabel);
			if (!G_RequestError)
			{
				switch(G_OngletFocus)
				{
					case C_ONGLET_FIND :
					{
						FrameInputAction1.Show();
						//L16N Displayed next to a button icon to explain what it does
						Label_InputName.Value = _("|16 chars max|EDIT FILTERS");
					}
					case C_ONGLET_PLAY : FrameInputAction1.Hide();
					case C_ONGLET_CREATE :
					{
						if (!G_IsLimitedToCanyon)
						{
							FrameInputAction1.Show();
							//L16N Displayed next to a button icon to explain what it does
							Label_InputName.Value = _("|16 chars max|CREATE");
						} else {
							FrameInputAction1.Hide();
						}
					}
				}
			} else {
				FrameInputAction1.Hide();
			}
		}
		
		//////////////////
		// ARRAY 2D
		//////////////////
		Void UpdateChallengeFocus()
		{   //replace le sélecteur dans la range des servers affichés si besoin est
			declare Text[Text][] RequestedChallenges for Page;	
			if (RequestedChallenges.count != 0)
			{
				SetNearestIndex(RequestedChallenges.count);		
			} else {
				SetNearestIndex(1);			
			}
			G_CurrentSelectedChallengeIndex = G_PageIndex * {{{Count_InstancesY}}} + G_IndexSelectY;
		}
		
		Void UpdateChallengeFocusAndInfo()
		{
			//ajoute les messages "no challenge available" etc...
			
			declare Text[Text][] RequestedChallenges for Page;
			declare CMlQuad  Quad_Selector <=> (Page.GetFirstChild("Quad_Selector") as CMlQuad);
			declare CMlFrame Frame_Legends <=> (Page.GetFirstChild("Frame_Legends") as CMlFrame);
			switch (G_OngletFocus)
			{
				case C_ONGLET_FIND :
				{
					if (RequestedChallenges.count == 0)
					{
						ActivateLine(0, True);
						if(G_RequestError)
						{
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0, 	_("The connection to the Trackmania Servers has been lost. Online features will become available once the connection has been re-established."));
						} else {
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0, 	_("No challenges available. Widen your filters, refresh the page later or create your own challenge."));
						}
						Quad_Selector.Hide();				
						Frame_Legends.Hide();
					} else {
						Frame_Legends.Show();
						Quad_Selector.Show();
					}
					UpdateChallengeFocus();
				}
				case C_ONGLET_PLAY :
				{					
					if (RequestedChallenges.count == 0)
					{
						ActivateLine(0, True);
						if(G_RequestError)
						{
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0, 	_("The connection to the Trackmania Servers has been lost. Online features will become available once the connection has been re-established."));
						} else {
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0,	_("No challenge added."));
						}
						Quad_Selector.Hide();
						Frame_Legends.Hide();
					} else {
						Frame_Legends.Show();
						Quad_Selector.Show();
					}
					UpdateChallengeFocus();
				}
				case C_ONGLET_CREATE :
				{
					if (RequestedChallenges.count == 0)
					{
						ActivateLine(0, True);
						if (G_RequestError)
						{
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0, 	_("The connection to the Trackmania Servers has been lost. Online features will become available once the connection has been re-established."));
						} else {
							//L16N Displayed in the challenges browser
							SetColumnTextData("Info", 0, 	_("No unpublished challenges."));
						}
						Quad_Selector.Hide();
						Frame_Legends.Hide();
					} else {
						Frame_Legends.Show();
						Quad_Selector.Show();
					}
					UpdateChallengeFocus();
				}
			}	
		}
		
		Vec3 GetEnvironmentColorize(Text _Environments, Text _Environment)
		{
			
			if (TL::Find(_Environment, _Environments, True, False))
			{
				return <1., 1., 0.>;
			} else {
				return <.5, .5, .5>;
			}
			return <1., 1., 1.>;
		}
		
		Void UpdateArrows()
		{
			declare CMlQuad  	MouseInput_PrevPage  <=> (Page.GetFirstChild("MouseInput_PrevPage") as CMlQuad);
			declare CMlQuad  	MouseInput_NextPage <=> (Page.GetFirstChild("MouseInput_NextPage") as CMlQuad);
			declare Text[Text][] RequestedChallenges for Page;
			if (G_PageIndex > 0)
				MouseInput_PrevPage.Show();
			else
				MouseInput_PrevPage.Hide();
			
			if ((G_PageIndex+1)*{{{Count_InstancesY}}} < RequestedChallenges.count)
				MouseInput_NextPage.Show();
			else
				MouseInput_NextPage.Hide();
		}
	
		Void Update2DArray(Boolean _UpdateInfoMessage) {
			//Affiche la liste des challenges reçus dans le tableau
			declare Text[Text][] RequestedChallenges for Page;
			
			declare Integer NbChallenges = RequestedChallenges.count;
			declare Text[Text] FocusedChallenge;
			
			declare Integer StartIndexPosition 	=  {{{Count_InstancesY}}}*(G_PageIndex);
						
			for(I, 0, {{{Count_InstancesY - 1}}}) {
				declare Integer ChallengeIndex = StartIndexPosition + I;
				
				declare Text Quad_Echelon;
				declare Text Quad_Medal;
				declare Text Quad_Flag;
				declare Text Quad_Stunts;
				declare Text Label_Name;
					declare Text Author;
					declare Text Style;
					declare Text Duration;
				declare Boolean AreEnvVisible;
				declare Vec3 Colorize_Stadium;
				declare Vec3 Colorize_Lagoon;
				declare Vec3 Colorize_Canyon;
				declare Vec3 Colorize_Valley;
				declare Text Label_Info;
				declare Text Label_TracksCount;
				declare Text Label_Length;
				declare Text Label_End;
				declare Text Label_Status;

				declare CMlQuad MouseInput_BrowserLine = (Page.GetFirstChild("MouseInput_BrowserLine_"^I) as CMlQuad);
				
				if(ChallengeIndex < NbChallenges)
				{
					FocusedChallenge = RequestedChallenges[ChallengeIndex];
					MouseInput_BrowserLine.Show();
					ActivateLine(I, True);
					
					//INFO
					Label_Info = "";
					
					//FLAG
					if (FocusedChallenge.existskey("country") && FocusedChallenge["country"] != "")
						Quad_Flag = "{{{C_ImgBaseFlags}}}"^GetCountryFlag(FocusedChallenge["country"]);
					
					//ECHELON
					if (FocusedChallenge.existskey("ladder_points"))
					{
						declare Integer Echelon = TL::ToInteger(FocusedChallenge["ladder_points"]) / 10000;
						if (G_Images_Echelon.existskey(Echelon))
							Quad_Echelon = G_Images_Echelon[Echelon];
					}
					
					//MEDAL
					if (G_OngletFocus == C_ONGLET_PLAY)
					{
						if (FocusedChallenge.existskey("best_score"))
						{
							declare Real AveragePointsPerMap = TL::ToReal(FocusedChallenge["best_score"]) / TL::ToReal(FocusedChallenge["maps_count"]);
							if (AveragePointsPerMap >= 10.)
								Quad_Medal = "{{{IMGMedalTrackmaster}}}";
							else if (AveragePointsPerMap >= 7.)
								Quad_Medal = "{{{IMGMedalGold}}}";
							else if (AveragePointsPerMap >= 4.)
								Quad_Medal = "{{{IMGMedalSilver}}}";
							else if (AveragePointsPerMap >= 1.)
								Quad_Medal = "{{{IMGMedalBronze}}}";
							else
								Quad_Medal = "{{{IMGMedalNoMedal}}}";
						} else
							Quad_Medal = "{{{IMGMedalNoMedal}}}";
					}
					
					//NAME
					if (FocusedChallenge.existskey("displayname"))
						Author = FocusedChallenge["displayname"]; //hostName
					else
						Author = "";
				
					//DURATION
					if (FocusedChallenge.existskey("duration"))
					{
						declare Integer DurationId = TL::ToInteger(FocusedChallenge["duration"]);
						if (DurationId != 0)
							Duration = " - "^TL::GetTranslatedText(G_ChallengesDurations[DurationId]);
					}	
					
					//TOTAL LENGTH
					if (FocusedChallenge.existskey("length"))
					{
						Label_Length = TimeToText(TL::ToInteger(FocusedChallenge["length"]), True);
					}
					
					//STYLE
					if (FocusedChallenge.existskey("style"))
					{
						Style = " - "^TL::GetTranslatedText(FocusedChallenge["style"]);
					}	
					
					Label_Name = TL::Compose("%1%2%3", Author, Duration, Style);
					
					//ISSTUNT
					if (FocusedChallenge.existskey("stunts") && FocusedChallenge["stunts"] == "true")
						Quad_Stunts = "{{{IMGStunts}}}";
					
					//TRACKSCOUNT
					if (FocusedChallenge.existskey("maps_count"))
					{
						Label_TracksCount = FocusedChallenge["maps_count"];
					}
					
					//PLAYED & LIKED
					declare CMlFrame Frame_Ratings <=> (Page.GetFirstChild("Frame_Ratings"^I) as CMlFrame);
					if (G_OngletFocus != C_ONGLET_CREATE)
					{
						Frame_Ratings.Show();
						declare CMlGauge Gauge_Rating <=> (Frame_Ratings.GetFirstChild("gauge_rating") as CMlGauge);
						declare CMlLabel Label_Rating <=> (Frame_Ratings.GetFirstChild("label_rating") as CMlLabel);
						
						if (FocusedChallenge.existskey("completed_tries_count"))
							Label_Rating.Value = "("^FocusedChallenge["completed_tries_count"]^")";
						else	
							Label_Rating.Value = "(0)";
							
						declare Real VoteRatio;
						if (FocusedChallenge.existskey("vote_score") && FocusedChallenge["vote_score"] != "")
							VoteRatio = TL::ToReal(FocusedChallenge["vote_score"]) / 5.; //ML::FloorInteger((TL::ToReal(FocusedChallenge["vote_score"]) / 0.5)) / 2. / 5.;
						else
							VoteRatio = 0.;	
						declare Real GaugeCutOff = 4. / Gauge_Rating.Size.X;
						Gauge_Rating.Ratio = ML::Min(VoteRatio * (1 - GaugeCutOff) + GaugeCutOff, 0.98);
					} else {
						Frame_Ratings.Hide();
					}
					
					//STATUS & INSTALLED
					if (G_OngletFocus == C_ONGLET_CREATE && FocusedChallenge.existskey("status"))
					{
						switch (TL::ToInteger(FocusedChallenge["status"]))
						{
							case 1 : Label_Status ^= TL::Compose( "$900%1", _("|Challenge status|Unvalidated") );
							case 2 : Label_Status ^= TL::Compose( "$090%1", _("|Challenge status|Publishable") );
						}
					}
					
					//ENVIRONMENTS
					AreEnvVisible = True;
					declare Text Environments = FocusedChallenge["environments"];
					Colorize_Stadium	= GetEnvironmentColorize(Environments, "Stadium");
					Colorize_Lagoon		= GetEnvironmentColorize(Environments, "Lagoon");
					Colorize_Canyon		= GetEnvironmentColorize(Environments, "Canyon");
					Colorize_Valley		= GetEnvironmentColorize(Environments, "Valley");	
					
				} else {
					AreEnvVisible = False;
					MouseInput_BrowserLine.Hide();
					ActivateLine(I, False);
					declare CMlFrame Frame_Ratings <=> (Page.GetFirstChild("Frame_Ratings"^I) as CMlFrame);
					Frame_Ratings.Hide();
				}
				
				if (AreEnvVisible)
				{
					SetColumnImageData	("Environment_Stadium", I, 	"{{{IMGEnvironment_Stadium}}}", Colorize_Stadium);
					SetColumnImageData	("Environment_Lagoon", I, 	"{{{IMGEnvironment_Lagoon}}}", 	Colorize_Lagoon);
					SetColumnImageData	("Environment_Canyon", I, 	"{{{IMGEnvironment_Canyon}}}", 	Colorize_Canyon);
					SetColumnImageData	("Environment_Valley", I, 	"{{{IMGEnvironment_Valley}}}", 	Colorize_Valley);
				} else {
					SetColumnImageData	("Environment_Stadium", I, 	"");
					SetColumnImageData	("Environment_Lagoon", I, 	"");
					SetColumnImageData	("Environment_Canyon", I, 	"");
					SetColumnImageData	("Environment_Valley", I, 	"");
				}
				
				if (G_OngletFocus == C_ONGLET_PLAY)
				{
					SetColumnImageData("Echelon",		I,	"");
					SetColumnImageData("Echelon_Ech",	I,	Quad_Echelon);
				} else {
					SetColumnImageData("Echelon",		I,	Quad_Echelon);
					SetColumnImageData("Echelon_Ech",	I,	"");
				}
				
				SetColumnImageData("Echelon_Medal",	I,	Quad_Medal);
				SetColumnImageData("Flag",			I,	Quad_Flag);
				SetColumnTextData("Name",			I,	Label_Name);
				SetColumnImageData("Stunts", 		I, 	Quad_Stunts);
				SetColumnTextData("Length",			I,	Label_Length);
				SetColumnTextData("MapsCount", 		I, 	Label_TracksCount);
				SetColumnTextData("Status", 		I,	Label_Status);
				SetColumnTextData("Remaining",		I,	Label_End);
				SetColumnTextData("Info",			I,	Label_Info);
			}
			
			if (_UpdateInfoMessage)
				UpdateChallengeFocusAndInfo();
			UpdateArrows();
		}

		//////////////////
		// REQUESTS
		//////////////////
		Text GetFilters()
		{
			declare Text[][] CurrentFilters for Page;
			
			declare Text[] 	Styles;
			declare Text[] 	Durations;
			declare Text[] 	Environments;
			
			declare Integer MinMaps;
			declare Integer MaxMaps;
			
			Styles = CurrentFilters[0];
			
			for (I, 0, CurrentFilters[1].count - 1)
			{
				declare Index = G_ChallengesDurations.keyof(CurrentFilters[1][I]);
				if (Index != -1)
					Durations.add(TL::ToText(Index));
			}
			Environments = CurrentFilters[2];
			
			declare Text Filters;
			if (G_IsLimitedToCanyon)
				Filters = GetFiltersText(Text[], ["Canyon"], Durations, Styles);
			else
				Filters = GetFiltersText(Text[], Environments, Durations, Styles);
			
			if (CurrentFilters[3].count != 0)
			{
				switch (CurrentFilters[3][0])
				{
					case "1"	:
					{
						MinMaps = 1;
						MaxMaps = 1;
					}
					case "2-5"	:
					{
						MinMaps = 2;
						MaxMaps = 5;
					}
					case "6-10"	:
					{
						MinMaps = 6;
						MaxMaps = 10;
					}
				}
				Filters ^= "&minMapsCount="^MinMaps^"&maxMapsCount="^MaxMaps;
			}
			
			return Filters;
		}
		
		Void SendRequestOpenTries()
		{
			SendCustomEvent("RequestOpenTries", Text[]);
		}
		
		Void SendRequestChallenges()
		{ 
			//L16N Displayed while the browser is loading
			Loading_SetText(_("Retrieving information. Please wait."));
			Loading_SetIsLoading(True);
			G_NextPageOnRequestCompletion = False;
			
			switch(G_OngletFocus)
			{
				case C_ONGLET_PLAY  	: SendCustomEvent("RequestInstalledChallenges", [TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}})]);
				case C_ONGLET_FIND  	: SendCustomEvent("RequestAllChallenges", 		[TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}}), GetFilters()]);
				case C_ONGLET_CREATE  	: SendCustomEvent("RequestMyChallenges", 		[TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}})]);
			}
		}

		Void SendRequestNextPage() 
		{
			//L16N Displayed while the browser is loading
			Loading_SetText(_("Retrieving information. Please wait."));
			Loading_SetIsLoading(True);
			G_NextRequestNextPageTime = Now + 2000;
			G_NextPageOnRequestCompletion = True;
			switch(G_OngletFocus)
			{
				case C_ONGLET_PLAY  	: SendCustomEvent("RequestInstalledChallenges", [TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}})]);
				case C_ONGLET_FIND  	: SendCustomEvent("RequestAllChallenges", 	 	[TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}}), GetFilters()]);
				case C_ONGLET_CREATE 	: SendCustomEvent("RequestMyChallenges", 		[TL::ToText(G_PageIndex*{{{Count_InstancesY}}}), TL::ToText({{{3*Count_InstancesY}}})]);
			}
		}
		
		//////////////////
		// ONGLETS
		//////////////////
		Void SwitchOnglet()
		{
			declare CMlQuad  OngletFocus <=> (Page.GetFirstChild("OngletFocus") as CMlQuad);
			//declare Real NewFramePosX = {{{-Browser_SizeTotalX/2.}}} + G_OngletFocus *  {{{Browser_SizeTotalX/C_BrowseSlot_Landmark-0.02}}};
			declare Real NewFramePosX = 8.5 + G_OngletFocus *  {{{(Browser_SizeTotalX - Browser_SizeOngletInfoX)/C_BrowseSlot_Landmark}}} - {{{Browser_SizeTotalX/2.}}};
			declare Vec3 NewFramePos  = <NewFramePosX, OngletFocus.RelativePosition.Y, OngletFocus.RelativePosition.Z>;
			LibManialink_SetTargetPosition(OngletFocus, NewFramePos);
			LibManialink_PresetAnim(OngletFocus, 250, "EaseOutQuint");
			G_TimeSwitchOnglet = Now; //+ 500;
			G_PageIndex = 0;
			
			declare Text[Text][] RequestedChallenges for Page;
			RequestedChallenges.clear();
			SendRequestChallenges();
		}

		Void SetOnglet()
		{
			declare CMlQuad  OngletFocus <=> (Page.GetFirstChild("OngletFocus") as CMlQuad);
			//declare Real NewFramePosX = {{{-Browser_SizeTotalX/2.}}} + G_OngletFocus *  {{{Browser_SizeTotalX/C_BrowseSlot_Landmark}}};
			declare Real NewFramePosX = 8.5 + G_OngletFocus *  {{{(Browser_SizeTotalX - Browser_SizeOngletInfoX)/C_BrowseSlot_Landmark}}} - {{{Browser_SizeTotalX/2.}}};
			declare Vec3 NewFramePos  = <NewFramePosX, OngletFocus.RelativePosition.Y, OngletFocus.RelativePosition.Z>;
			OngletFocus.RelativePosition = NewFramePos;
			G_PageIndex = 0;
			
			declare Text[Text][] RequestedChallenges for Page;
			RequestedChallenges.clear();
			SendRequestChallenges();
		}
		
		///////////////////
		// FILTERS PROMPTER
		///////////////////
		Text BuildFilterText(Text _FilterName, Text[] _Filter)
		{
			declare Text FilterText = TL::GetTranslatedText(_FilterName)^" : [ ";
			for (I, 0, _Filter.count-1)
			{
				if (I != 0)
					FilterText ^=" , ";
				FilterText ^= TL::GetTranslatedText(_Filter[I]);
			}
			FilterText ^= " ]	";

			return FilterText;
		}
		
		Void UpdateFiltersVisibility() {
			declare CMlFrame  Frame_FilterValue <=> (Page.GetFirstChild("Frame_FilterValue") as CMlFrame);
			declare Text[][] CurrentFilters for Page;
			
			if (G_OngletFocus == C_ONGLET_FIND)
			{
				declare Boolean HasFilters = False;
				for (I, 0, CurrentFilters.count-1)
					HasFilters = HasFilters || CurrentFilters[I].count != 0;
				if (HasFilters)
				{
					Frame_FilterValue.Show();
					return;
				}
			}
			Frame_FilterValue.Hide();
		}
		
		Void UpdateFiltersContent() {
			declare Text[][] CurrentFilters for Page;
			declare Text FiltersText;
			if (CurrentFilters[0].count != 0)
			{
				//L16N Challenges browser filter names
				FiltersText ^= BuildFilterText(_("Styles"), CurrentFilters[0]);
			}
			if (CurrentFilters[1].count != 0)
			{
				//L16N Challenges browser filter name
				FiltersText ^= BuildFilterText(_("Durations"), CurrentFilters[1]);
			}
			if (CurrentFilters[2].count != 0)
			{
				//L16N Challenges browser filter name
				FiltersText ^= BuildFilterText(_("Environments"), CurrentFilters[2]);
			}
			if (CurrentFilters[3].count != 0)
			{
				//L16N Challenges browser filter name
				FiltersText ^= BuildFilterText(_("Maps"), CurrentFilters[3]);
			}
				
		
			if (TL::Length(FiltersText) != 0)
			{
				//L16N Displayed in front of the list of currently selected filters
				Prompter_SetBanner("filtervalue", TL::GetTranslatedText(_("Filters"))^" :	"^FiltersText, 10000, 20);
				Prompter_SetBannerIsActive("filtervalue", True, True);
				Prompter_SetBanner("TitlePrompt", FiltersText, 10000, 10);
				Prompter_SetBannerIsActive("TitlePrompt", True, True);
			}
			UpdateFiltersVisibility();
		}
		
		Void Browser_Show() {
			G_NextPageOnRequestCompletion = False;
			G_NextRequestNextPageTime = Now;
			
			ToggleInputInfo("Browser", "Select", False);
			ToggleInputInfo("Browser", "Cancel", False);
			ToggleInputInfo("Browser", "Action1", False);
			ToggleInputInfo("Browser", "LStickPress", False);
			
			for (I, 0, 2) {	
				declare CMlQuad QuadPrevTab <=> (Page.GetFirstChild("MouseInput_PrevTab_"^I) as CMlQuad);
				declare CMlQuad QuadNextTab <=> (Page.GetFirstChild("MouseInput_NextTab_"^I) as CMlQuad);
				QuadPrevTab.Opacity = 1.;
				QuadPrevTab.Scale = 1.;
				QuadNextTab.Opacity = 1.;
				QuadNextTab.Scale = 1.;
			}
			
			SendRequestChallenges();
			UpdateFiltersContent();
		}
		
		Void Input_SwitchOnglet(Integer _Target) {
			if (_Target < 0 || _Target > {{{C_BrowseSlot_Landmark-1}}} || _Target == G_OngletFocus)
				return;
				
			G_OngletFocus = _Target;
			if (Loading_GetIsLoading())
				Loading_SetIsLoading(False);
			SwitchOnglet();
		}
		
		Void Browser_UpdateHelpersForPlatform(Integer _Platform) {
			declare Text[] AdditionnalInputIds = ["MouseInput_NextTab_", "MouseInput_PrevTab_", "Browser_InputInfo_Select_", "Browser_InputInfo_Cancel_", "Browser_InputInfo_Action1_", "Browser_InputInfo_LStickPress_"];
	
			declare CMlQuad  QuadInputIcon;
			for (I, 0, 2) {
				for (J, 0, AdditionnalInputIds.count-1) {
					QuadInputIcon <=> (Page.GetFirstChild(AdditionnalInputIds[J]^I) as CMlQuad);
					if (I == _Platform)
						QuadInputIcon.Show();
					else
						QuadInputIcon.Hide();
				}
			}
		}
		
	""";
	
	return Functions;
}

Text InjectBeforeLoop() {
	declare BeforeLoop = """
		declare CMlQuad  	Quad_Selector <=> (Page.GetFirstChild("Quad_Selector") as CMlQuad);
		declare CMlQuad  	MouseInput_PrevPage  <=> (Page.GetFirstChild("MouseInput_PrevPage") as CMlQuad);
		declare CMlQuad  	MouseInput_NextPage <=> (Page.GetFirstChild("MouseInput_NextPage") as CMlQuad);
		
		declare Integer     Update2DArray    for Page;
		declare Integer     Prev_Update2DArray;
		declare Integer     Prev_TimeSwitchOnglet;
		declare Integer     PrevOngletFocus;
		
		Prev_Update2DArray = Update2DArray; //force refresh à l'ouverture pour test
		G_IndexFocusX = GetIndexFocusX();
		G_IndexFocusY = GetIndexFocusY();
		
		declare Integer Selection;	
		G_Prev_PageIndex = G_PageIndex;
		G_OngletFocus = C_ONGLET_PLAY;
		PrevOngletFocus = G_OngletFocus;
	""";
	
	return BeforeLoop;
}

Text InjectInLoop() {
	declare Browser_SizeTotalX = 259.;
	declare ArrowPos = Browser_SizeTotalX * 0.5 + 10.;
	
	declare Loop = """
		G_CurrentSelectedChallengeIndex = G_PageIndex * {{{Count_InstancesY}}} + G_IndexFocusY;
		
		//Blink du quad de sélection
		declare Real ButtonSelectedSinVar  = ML::Sin(Now * 0.01) * 0.5 + 0.5;
		declare Real ButtonSelectedOpacity = 0.0 + ButtonSelectedSinVar * 1.;
		Quad_Selector.Opacity = ButtonSelectedOpacity;
		MouseInput_PrevPage.RelativePosition.X  = 	{{{-ArrowPos}}} + ButtonSelectedSinVar;
		MouseInput_NextPage.RelativePosition.X =  	{{{ArrowPos}}} - ButtonSelectedSinVar;
		
		if(G_Prev_PageIndex != G_PageIndex)
		{
			G_Prev_PageIndex = G_PageIndex;
			if (G_PageIndex >= G_PageMax - 2)
				SendRequestChallenges(); //ne pas faire de requête pour rien
		}

		if(Prev_TimeSwitchOnglet != G_TimeSwitchOnglet && G_TimeSwitchOnglet < Now && PrevOngletFocus != G_OngletFocus)
		{
			Prev_TimeSwitchOnglet = G_TimeSwitchOnglet;
			PrevOngletFocus = G_OngletFocus;
			UpdateFiltersVisibility();
		}
		
		if(Prev_Update2DArray != Update2DArray)
		{
			Prev_Update2DArray = Update2DArray;
			Update2DArray(True);
		}

		declare IndexFocusY = GetIndexFocusY();
		if(G_IndexFocusY != IndexFocusY)
		{
			G_IndexFocusY = IndexFocusY;
			UpdateChallengeFocus();
			G_CurrentSelectedChallengeIndex = G_PageIndex * {{{Count_InstancesY}}} + G_IndexFocusY;
			UpdateInputsInfo();
		}
		
		Selection = GetSelection();
		if(Selection >= 0 && RequestedChallenges.count != 0)
				ChallengeBrowserStatus_Switch(C_STATUS_CHALLENGEOPTIONS);

		declare IndexFocusX = GetIndexFocusX();
		if(G_IndexFocusX != IndexFocusX)
		{
			G_IndexFocusX = IndexFocusX;
			UpdateChallengeFocus();
		}

		
		{{{Prompter::InjectInLoop()}}}
		
		foreach (Event in Input.PendingEvents)
		{
			if (Event.Type == CInputEvent::EType::PadButtonPress && Event.Button == CInputEvent::EButton::LeftStick && G_ChallengeBrowserStatus == C_STATUS_BROWSER && G_LastRefreshTime + 5000 <= Now)
			{
				//LSTICKPRESS
				G_LastRefreshTime = Now;
				SendRequestChallenges(); 
			}
		}	
	""";
	
	return Loop;
}

Text InjectInKeyPress() {
	declare Text KeyPress = """
		if (Event.KeyName == "F5" && G_LastRefreshTime + 5000 <= Now) {
			if (ActiveButtonPlatform !=  {{{LibUIButtons::GetPlatform("PC")}}})
				SendCustomEvent("ChallengeBrowser", ["MyTracks", TL::ToText({{{LibUIButtons::GetPlatform("PC")}}})]);
			G_LastRefreshTime = Now;
			SendRequestChallenges();
		}
	""";
	
	return KeyPress;
}

Text InjectInMouseClick() {
	declare Text 	SoundPageForward 		 = LibAudio::GetSound("PageForward");
	declare Text 	SoundMove                = LibAudio::GetSoundMove();
	
	declare MouseClick = """	
		declare Text[] InputId = TL::Split("_", Event.ControlId);
		if (InputId.count < 2 || InputId[0] != "MouseInput")
			continue;
		switch (InputId[1]) {
			case "Landmark" : Input_SwitchOnglet(TL::ToInteger(InputId[2]));
			case "PrevTab"  : Input_SwitchOnglet(G_OngletFocus-1);
			case "NextTab"  : Input_SwitchOnglet(G_OngletFocus+1);
			case "PrevPage" : {
				if (Loading_GetIsLoading())
					continue;
				if(G_PageIndex > 0) {
					Audio.PlaySoundEvent("{{{SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
					declare Integer Update2DArray    for Page;
					G_PageIndex -= 1;
					Update2DArray = Now;
				}
			}
			case "NextPage" : {
				if (Loading_GetIsLoading())
					continue;
				if(G_PageIndex < G_PageMax - 1)
				{
					Audio.PlaySoundEvent("{{{SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
					declare Integer Update2DArray    for Page;
					G_PageIndex += 1;
					Update2DArray = Now;
				}
			}
			case "BrowserLine" : {
				if (Loading_GetIsLoading())
					continue;
				declare Integer NewIndex = TL::ToInteger(InputId[2]);
				if(!G_IsActivate.existskey(NewIndex)) return;
				if(NewIndex >= 0 && NewIndex <= {{{Count_InstancesY - 1}}} && G_IsActivate[NewIndex])
				{
					G_IndexSelectY = NewIndex;
					UpdateSelection();
				}
				Audio.PlaySoundEvent("{{{SoundPageForward}}}", {{{Volumes::GetVolumedB("MenuPageForward")}}});
				G_Selection = G_IndexSelectY;
			}
			case "BrowserInputInfo" : {
				switch (InputId[2]) {
					case "Select": {
						if (Loading_GetIsLoading())
							continue;
						Audio.PlaySoundEvent("{{{SoundPageForward}}}", {{{Volumes::GetVolumedB("MenuPageForward")}}});
						G_Selection = G_IndexSelectY;
					}
					case "Cancel": Quit();
					case "AppMenu": Quit();
					case "Action1": {
						if (Loading_GetIsLoading())
							continue;
						switch (G_OngletFocus)
						{
							case C_ONGLET_FIND : ChallengeBrowserStatus_Switch(C_STATUS_FILTERS);
							case C_ONGLET_CREATE : if (!G_IsLimitedToCanyon) CreateNewChallenge();
						}
					}
					case "LStickPress": {
						if (G_LastRefreshTime + 5000 <= Now) {
							G_LastRefreshTime = Now;
							SendRequestChallenges(); 
						}
					}
				}
			}
		}
	""";
	
	return MouseClick;
}

Text InjectInMouseOver() {
	declare Text 	SoundPageForward 		 = LibAudio::GetSound("PageForward");
	declare Text 	SoundMove                = LibAudio::GetSoundMove();
	
	declare MouseOver = """
		declare Text[] InputId = TL::Split("_", Event.ControlId);
		if (InputId.count < 2 || InputId[0] != "MouseInput")
			continue;
		switch (InputId[1]) {
			case "BrowserLine" : {
				if (Loading_GetIsLoading())
					continue;
				declare Integer NewIndex = TL::ToInteger(InputId[2]);
				if(!G_IsActivate.existskey(NewIndex)) return;
				if(NewIndex >= 0 && NewIndex <= {{{Count_InstancesY - 1}}} && G_IsActivate[NewIndex])
				{
					Audio.PlaySoundEvent("{{{SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
					G_IndexSelectY = NewIndex;
					UpdateSelection();
				}
			}
			case "PrevTab" : {
				for (I, 0, 2) {	
					declare CMlQuad QuadInputIcon <=> (Page.GetFirstChild("MouseInput_PrevTab_"^I) as CMlQuad);
					QuadInputIcon.Opacity = 0.6;
					QuadInputIcon.Scale = 0.95;
				}
			}
			case "NextTab" : {
				for (I, 0, 2) {	
					declare CMlQuad QuadInputIcon <=> (Page.GetFirstChild("MouseInput_NextTab_"^I) as CMlQuad);
					QuadInputIcon.Opacity = 0.6;
					QuadInputIcon.Scale = 0.95;
				}
			}
			case "BrowserInputInfo" : ToggleInputInfo("Browser", InputId[2], True);
		
		}
	""";
	
	return MouseOver;
}

Text InjectInMouseOut() {
	declare MouseOut = """
		declare Text[] InputId = TL::Split("_", Event.ControlId);
		if (InputId.count < 2 || InputId[0] != "MouseInput")
			continue;
		switch (InputId[1]) {
			case "PrevTab" : {
				for (I, 0, 2) {	
					declare CMlQuad QuadInputIcon <=> (Page.GetFirstChild("MouseInput_PrevTab_"^I) as CMlQuad);
					QuadInputIcon.Opacity = 1.;
					QuadInputIcon.Scale = 1.;
				}
			}
			case "NextTab" : {
				for (I, 0, 2) {	
					declare CMlQuad QuadInputIcon <=> (Page.GetFirstChild("MouseInput_NextTab_"^I) as CMlQuad);
					QuadInputIcon.Opacity = 1.;
					QuadInputIcon.Scale = 1.;
				}
			}
			case "BrowserInputInfo" : ToggleInputInfo("Browser", InputId[2], False);
		}
	""";
	
	return MouseOut;
}

Text InjectInMenuNavigation() {
	declare MenuNav = """
		switch(Event.MenuNavAction) {
			case CMlEvent::EMenuNavAction::PageUp : Input_SwitchOnglet(G_OngletFocus-1);
			case CMlEvent::EMenuNavAction::PageDown : Input_SwitchOnglet(G_OngletFocus+1);
			case CMlEvent::EMenuNavAction::Cancel : {
				Quit();
			}
			case CMlEvent::EMenuNavAction::AppMenu : {
				Quit();
			}
			case CMlEvent::EMenuNavAction::Action1 : {
				//X : EDIT FILTERS 
				if (Loading_GetIsLoading())
					continue;
				switch (G_OngletFocus)
				{
					case C_ONGLET_FIND : ChallengeBrowserStatus_Switch(C_STATUS_FILTERS);
					case C_ONGLET_CREATE : if (!G_IsLimitedToCanyon) CreateNewChallenge();
				}
			}
			case CMlEvent::EMenuNavAction::Right : {
				if(Now >= G_NextRequestNextPageTime && G_PageIndex >= G_PageMax - 1 && RequestedChallenges.count != 0 && (RequestedChallenges.count % {{{Count_InstancesY}}}) == 0 && !Loading_GetIsLoading())
					SendRequestNextPage();
			}
		}
		if (Loading_GetIsLoading())
			continue;
		{{{SelectArray2D::InjectInMenuNavigation()}}}
	""";
	
	return MenuNav;
}