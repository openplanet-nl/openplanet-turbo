
#Include "TextLib" 													as TL
#Include "Libs/Openplanet/Manialink2.Script.txt"							as Manialink
#Include "Libs/Openplanet/UIPadButtons.Script.txt"						as LibUIButtons
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt"				as Font
#Include "Libs/Openplanet/TMConsole/Volumes.Script.txt" 					as Volumes
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt" 					as Colors

#Const C_ImgBase 			"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgPlugin			"file://Media/PluginNadeoCE/Images/"

#Const SoundPath				"file://Media/Sounds/TMConsole/"
#Const SoundMove	   	 		"event-focus.wav"
#Const SoundValidate 			"event-validate.wav"
#Const SoundShowPauseMenu		"event-menupause.wav"

#Const C_SIZEX  120.
#Const C_RATIO 	12.962
#Const C_SCALE 	0.9
 
Text Build(Text _ShowAnim, Text _HideAnim) {

	declare Text IMGPopupBg     = C_ImgPlugin^"popup-bg-small.dds";
	declare Text IMGPopupTitle  = C_ImgPlugin^"popup-title.dds";
	declare Text IMGPopupBottom = C_ImgPlugin^"popup-bottom.dds";

	declare Integer Platform      = LibUIButtons::GetPlatform();
	declare Text 	IMG_PC_Select = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"),  CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMG_PS_Select = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMG_XB_Select = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Select);
	declare Text 	IMG_PC_Cancel = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"),  CManiaAppEvent::EMenuNavAction::Cancel);
	declare Text 	IMG_PS_Cancel = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Cancel);
	declare Text 	IMG_XB_Cancel = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Cancel);
	

	declare Text 	TXTSelect    = _("Select");
	declare Text 	TXTCancel    = _("Cancel");
	declare Text	ImgFadeBlack = C_ImgBase^"rewards_1-02_low.dds";
	declare Text 	IMGTrame     = C_ImgBase^"Trame_XPLOD.tga";
	declare Text    IMGLogo      = C_ImgBase^"logo512.png";

	declare Vec2    Size = <C_SCALE * C_SIZEX, C_SCALE * C_SIZEX/C_RATIO>;

	declare Text[][] LayersContent;
	LayersContent.add(["Title", 	"Title", 		"",		"2",	"", "", ""]);
	//LayersContent.add(["Space", 	"", 		  	"", 				"1",	"", "", ""]);
	LayersContent.add(["Space", 	"", 		  	"", 				"1",	"", "", ""]);
	LayersContent.add(["Label", 	"Content2", 		"",		"1",	"", "Bg AutoNewLine Small White", ""]);
	LayersContent.add(["Label", 	"Content3", 		"",		"1",	"", "Bg", ""]);
	LayersContent.add(["Label", 	"Content4", 		"",		"1",	"", "Bg", ""]);
	LayersContent.add(["Label", 	"Content5", 		"",		"1",	"", "Bg", ""]);
	LayersContent.add(["Label", 	"Content6", 		"",		"1",	"", "Bg", ""]);
	LayersContent.add(["Space", 	"", 		  	"", 				"1",	"", "", ""]);
	LayersContent.add(["Label", 	"Content", 		"",		"1",	"", "Bg Roll", ""]);
	LayersContent.add(["Button", 	"No", 			_("No"), 			"1",	"", "", ""]);
	LayersContent.add(["Button", 	"Yes", 			_("Yes"), 			"1",	"", "", ""]);
	LayersContent.add(["Space", 	"", 		  	"", 				"1",	"", "", ""]);
	LayersContent.add(["Input", 	"Input", 		"", 				"1",	"", "", ""]);
	
	//declare MLShowAnim = UIXmlBuilder::GetShowAnim(LayersContent, LayerPos);

	declare Text MLText = """
	<frame id="Frame_PopUp" posn="0 0 70" hidden="1">
	
		<quad  id="Quad_RemoveFocus" opacity="0." scriptevents="1" />
		
		<quad posn="0 0 1" sizen="200 160" bgcolor="000" halign="center" valign="center" opacity="0." keepratio="Fit" image="{{{IMGPopupBg}}}" scale="0.8" />
		<quad posn="-92.5 61.0 1"  sizen="168 90" bgcolor="000" halign="top" valign="left" opacity="1." keepratio="Fit" image="{{{IMGPopupTitle}}}" hidden="1" />
		<quad posn="0 0 0" sizen="320 180" bgcolor="000" halign="center" opacity="0.5" valign="center" scriptevents="1"/>

		<frame scale="0.8" posn="70 -35 0" hidden="0">
			<quad posn="92.5 -61.5 1" sizen="150 90" bgcolor="000" halign="right" valign="bottom" opacity="-1." keepratio="Fit" image="{{{IMGPopupBottom}}}" />
			<frame id="Frame_ButtonOk" hidden="0" posn="0 0 5">
			""";
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMG_PC_Select;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMG_PS_Select;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMG_XB_Select;
			}
		
			MLText ^= """
				<quad id="Button_SelectPopUp{{{I}}}" halign="center" valign="center" keepratio="Fit"
					 	posn="62 -52.8 5" sizen="13.0 13.0" image="{{{Image}}}" opacity="1."/>
			""";
		
		}
	MLText ^= """
				<label  posn="71.1 -51.8 2" sizen="120 9" text="OK" id="Button_OK" textsize="10." style="TextValueSmallSm" halign="left" valign="center"/>
				<quad id="ButtonClick_OK" halign="center" valign="center" keepratio="Fit" posn="74 -52.8 7" sizen="38.0 13.0" bgcolor="900" opacity="0." scriptevents="1"/>
			</frame>
			<frame id="Frame_ButtonCancel" hidden="1">""";
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMG_PC_Cancel;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMG_PS_Cancel;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMG_XB_Cancel;
			}
		
			MLText ^= """
				<quad id="Button_CancelPopUp{{{I}}}" halign="center" valign="center" keepratio="Fit"
					sizen="13.0 13.0" image="{{{Image}}}" posn="27.3 -52.8 3" opacity="1."/>
			""";
		
		}
	MLText ^= """
				<label posn="36.4 -51.8 2" sizen="120 9" text="Cancel" id="Button_Cancel" textsize="9." style="TextValueSmallSm" halign="left" valign="center"/>
				<quad id="ButtonClick_Cancel" halign="center" valign="center" keepratio="Fit" posn="74 -52.8 7" sizen="38.0 13.0" bgcolor="900" opacity="0." scriptevents="1"/>
			</frame>
		</frame>

		<frame posn="0 15 0">
			<label 
			posn="0 5.0 1" 
			sizen="120 9" 
			textfont="{{{Font::GetFontName("Main")}}}" 
			textsize="11" 
			textcolor="fff" 
			halign="center" 
			valign="bottom"
			autonewline="1" 
			maxline="4"
			textprefix="$t"
			text="Trackmania"
			/>

			<label id="Message" 
			posn="0. 4.0 1" 
			sizen="175" 
			textfont="{{{Font::GetFontName("Main")}}}" 
			textsize="5.0" 
			halign="center"
			valign="top"
			autonewline="1" 
			maxline="9"
			textcolor="{{{Colors::GetColorHexa("Yellow")}}}"
			linespacing="1.15"
			text=""
			/>
		</frame>


		<label posn="-88.4 53.5 2" sizen="120 9" text="Pop Up Title" id="Title" textsize="22." style="TextValueSmallSm" halign="left" valign="center" hidden="1" />
		
		<quad id="Quad_Image" 
		posn="0 0 0" 
		sizen="320 180" 
		valign="center" 
		halign="center" 
		bgcolor="fff" 
		image="{{{IMGTrame}}}"
		opacity="0."

		/>	
		<quad id="Quad_Transition" halign="center" valign="center" hidden="0" sizen="1500 180" bgcolor="090" image="{{{ImgFadeBlack}}}" posn="640 0 -1" keepratio="Fit"/>
		
	</frame>

	<frame id="Frame_PopUpYesNo" posn="0 0 50" hidden="1">
		
		<quad id="BG" sizen="320. 180." posn="0. 0. 3" bgcolor="000" halign="center" valign="center" opacity="0." />

		<frame posn="0 15 4">
			<label id="TitleYesNo"
			posn="0 5.0 1" 
			sizen="250" 
			textfont="{{{Font::GetFontName("Main")}}}" 
			textcolor="{{{Colors::GetColorHexa("Yellow")}}}"
			textsize="11" 
			halign="center" 
			valign="bottom"
			autonewline="1" 
			maxline="2"
			textprefix="$t"
			/>

			<label id="MessageYesNo" 
			posn="0 4.0 0" 
			sizen="255" 
			textfont="{{{Font::GetFontName("Main")}}}" 
			textsize="4.0" 
			halign="center" 
			valign="top"
			textcolor="fff" 
			autonewline="1" 
			maxline="15"
			linespacing="1.15"
			text=""
			/>
			<quad posn="75. 30. 3" sizen="115 115" id="Quad_Logo" halign="center" valign="center" opacity="1." keepratio="Fit" image="{{{IMGLogo}}}" />
		</frame>

		<frame scale="0.8" posn="70 -35 0" hidden="0">
			<quad posn="92.5 -61.5 1" sizen="150 90" bgcolor="000" halign="right" valign="bottom" opacity="-1." keepratio="Fit" image="{{{IMGPopupBottom}}}" />
			<frame id="Frame_ButtonYes" posn="0 17 0" hidden="0">
			""";
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMG_PC_Select;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMG_PS_Select;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMG_XB_Select;
			}
			declare Vec2 QuadSize;
			if(I <= 1)
			{
				QuadSize = <13., 13.>;
			}
			else
			{
				QuadSize = <10., 10.>;
			}
		
			MLText ^= """
				<quad id="Button_SelectAsk{{{I}}}" halign="center" valign="center" keepratio="Fit"
					 	posn="75 -52.8 3" sizen="{{{QuadSize.X}}} {{{QuadSize.Y}}}" image="{{{Image}}}" opacity="1."/>
			""";
		
		}
	MLText ^= """
				<label  posn="69 -51.8 2" sizen="200 9" id="Button_Yes" textsize="9." textfont="{{{Font::GetFontName("Main")}}}" halign="right" valign="center"/>
				<quad id="ButtonClick_Yes" halign="right" valign="center" keepratio="Fit" posn="83 -52.8 7" sizen="106.0 13.0" bgcolor="900" opacity="0." scriptevents="1"/>
			</frame>
			<frame id="Frame_ButtonNo" posn="0 5 0" hidden="0">
			""";
		for (I, 0, 2) {
			declare Text Image;
			switch (I) {
				case LibUIButtons::GetPlatform("PC") 	: Image = IMG_PC_Cancel;
				case LibUIButtons::GetPlatform("PS4") 	: Image = IMG_PS_Cancel;
				case LibUIButtons::GetPlatform("XB1") 	: Image = IMG_XB_Cancel;
			}
			declare Vec2 QuadSize;
			if(I <= 1)
			{
				QuadSize = <13., 13.>;
			}
			else
			{
				QuadSize = <10., 10.>;
			}
		
			MLText ^= """
				<quad id="Button_NoAsk{{{I}}}" halign="center" valign="center" keepratio="Fit"
						posn="75 -52.8 3" sizen="{{{QuadSize.X}}} {{{QuadSize.Y}}}" image="{{{Image}}}" opacity="1."/>
			""";
		
		}
	MLText ^= """
				<label posn="69 -51.8 2" sizen="200 9" id="Button_No" textsize="9." textfont="{{{Font::GetFontName("Main")}}}" halign="right" valign="center"/>
				<quad id="ButtonClick_No" halign="right" valign="center" keepratio="Fit" posn="83 -52.8 7" sizen="106.0 13.0" bgcolor="900" opacity="0." scriptevents="1"/>
			</frame>
		</frame>

		<quad id="Quad_Image" 
		posn="0 0 2" 
		sizen="320 180" 
		valign="center" 
		halign="center" 
		bgcolor="fff" 
		image="{{{IMGTrame}}}"
		opacity="0."
		scriptevents="1"
		/>	
		<quad id="Quad_Transition" halign="center" valign="center" hidden="0" sizen="1500 180" bgcolor="090" image="{{{ImgFadeBlack}}}" posn="640 0 1" keepratio="Fit"/>
		
	</frame>
	<script><!--
		#Include "TextLib" as TL
	
		#Const DebugName  "L_SuperPopUp"
			
		{{{Manialink::GetIncludes()}}}
		{{{Manialink::Load()}}}

		declare Text G_AskYesNoFeedback;
		declare Boolean G_IsPopUpShow;
		declare Integer G_LockInput;

		
		Void HidePopUp()
		{
			declare CMlFrame Frame_PopUp = (Page.GetFirstChild("Frame_PopUp") as CMlFrame);
			declare CMlFrame Frame_PopUpYesNo = (Page.GetFirstChild("Frame_PopUpYesNo") as CMlFrame);
			Frame_PopUp.Hide();
			Frame_PopUpYesNo.Hide();
			EnableMenuNavigation(False,False,Null,0);
			G_IsPopUpShow = False;

		}
		Void HidePopUpAsk()
		{
			declare CMlFrame Frame_PopUpYesNo = (Page.GetFirstChild("Frame_PopUpYesNo") as CMlFrame);
			Frame_PopUpYesNo.Hide();
			EnableMenuNavigation(False,False,Null,0);
		}

		Void LaunchAnimBG(Text _FrameSelect)
		{
			declare CMlFrame FrameSelect     =  (Page.GetFirstChild(_FrameSelect)             as CMlFrame);
			declare CMlQuad Quad_Transition <=> (FrameSelect.GetFirstChild("Quad_Transition") as CMlQuad);
			declare CMlQuad Quad_Image      <=> (FrameSelect.GetFirstChild("Quad_Image")      as CMlQuad);
		    declare Real QuadSizeY = Quad_Transition.Size.Y;
		    Quad_Transition.RelativePosition.X = QuadSizeY*3.;
		    Quad_Image.Opacity = 0.;
			//declare Real NewQuadPosX = -QuadSizeY*6.;
			declare Vec3 NewQuadPos  = <0., Quad_Transition.RelativePosition.Y, Quad_Transition.RelativePosition.Z>;
			LibManialink_SetTargetPosition(Quad_Transition, NewQuadPos);
			LibManialink_PresetAnim(Quad_Transition, 400, "EaseLinear");
			LibManialink_SetTargetOpacity(Quad_Image, 1.);
			LibManialink_PresetAnimInsert(Quad_Image, 150, 250, "EaseLinear");

		}
				
		Void LaunchPopUp(Integer _Update, Text _LabelText, Text _ButtonText, Boolean _FocusOnButton)
		{
			HidePopUp();
			declare CMlFrame Frame_PopUp = (Page.GetFirstChild("Frame_PopUp") as CMlFrame);
			declare CMlLabel Message_Label = (Page.GetFirstChild("Message") as CMlLabel);
			Message_Label.Value = _LabelText;
			
			//declare CMlFrame Frame_Content3 = (Page.GetFirstChild("Frame_Content3") as CMlFrame);
			//Frame_Content3.Hide();

			declare CMlLabel Button_Ok = (Frame_PopUp.GetFirstChild("Button_OK") as CMlLabel);
			Button_Ok.Value = "OK";
			declare CMlFrame Frame_ButtonCancel = (Frame_PopUp.GetFirstChild("Frame_ButtonCancel") as CMlFrame);
			Frame_ButtonCancel.Hide();
			declare CMlLabel Button_Cancel = (Frame_PopUp.GetFirstChild("Button_Cancel") as CMlLabel);
			Button_Cancel.Value = "Cancel";
			
			LaunchAnimBG("Frame_PopUp");
			Frame_PopUp.Show();
			EnableMenuNavigation(True,False,Null,990);

			declare CMlQuad Quad_RemoveFocus <=> (Page.GetFirstChild("Quad_RemoveFocus") as CMlQuad);
			Quad_RemoveFocus.Focus();
			
			//log("LaunchPopUp ["^_Update^"], LabelText ["^_LabelText^"], ButtonText ["^_ButtonText^"], FocusOnButton ["^_FocusOnButton^"]");
			G_IsPopUpShow = True;
		}

		// Void LaunchAskYesNo(Text _LabelText, Text _TitleText, Text _TitleColor, Text _LabelText2)
		Void LaunchAskYesNo(Text _LabelText, Text _TitleText, Text _TitleColor, Text _FirstChoice, Text _SecondChoice)
		{
			HidePopUp();

			declare CMlFrame Frame_PopUpYesNo = (Page.GetFirstChild("Frame_PopUpYesNo") as CMlFrame);
			declare CMlLabel Title_Label = (Frame_PopUpYesNo.GetFirstChild("TitleYesNo") as CMlLabel);
			declare CMlLabel Message_Label = (Frame_PopUpYesNo.GetFirstChild("MessageYesNo") as CMlLabel);
			
			declare CMlLabel FirstChoice_Label = (Frame_PopUpYesNo.GetFirstChild("Button_Yes") as CMlLabel);
			declare CMlLabel SecondChoice_Label = (Frame_PopUpYesNo.GetFirstChild("Button_No") as CMlLabel);
			
			Title_Label.Value = _TitleText;
			Message_Label.Value = _LabelText;
			
			FirstChoice_Label.SetText(_FirstChoice);
			SecondChoice_Label.SetText(_SecondChoice);

			//declare Real LabelsHeight = Title_Label.ComputeHeight(Title_Label.Value) + Message_Label.ComputeHeight(Message_Label.Value);
			//log("Label2Height: "^ Message_Label.Value);
			
			Frame_PopUpYesNo.Show();

			LaunchAnimBG("Frame_PopUpYesNo");
			Audio.PlaySoundEvent("{{{SoundPath^SoundShowPauseMenu}}}", {{{Volumes::GetVolumedB("MenuPauseShow")}}});
			EnableMenuNavigation(True, False, Null, 10);
		}
		
		Void Input_Select()
		{
			HidePopUp();
			if (G_AskYesNoFeedback != "")
			{
				SendCustomEvent(G_AskYesNoFeedback^"_AskYesNo", ["True"]);
				G_AskYesNoFeedback = "";
			}
		}
		Void Input_Cancel()
		{
			HidePopUp();
			if (G_AskYesNoFeedback != "")
			{
				SendCustomEvent(G_AskYesNoFeedback^"_AskYesNo", ["False"]);
				G_AskYesNoFeedback = "";
			}
		}

		Void UpdateHelpersForPlatform(Integer _Platform) {
			declare Text[] AdditionnalInputIds = ["Button_SelectPopUp", "Button_CancelPopUp", "Button_SelectAsk", "Button_NoAsk"];
	

			declare CMlQuad  QuadInputIcon;
			for (I, 0, 2) {
				
				for (J, 0, AdditionnalInputIds.count-1) {
					QuadInputIcon <=> (Page.GetFirstChild(AdditionnalInputIds[J]^I) as CMlQuad);
					if (I == _Platform)
						QuadInputIcon.Show();
					else
						QuadInputIcon.Hide();
				}
			}
		}

		main() {
		

			//declare Label_SubtitleTitle	 	<=> (Page.MainFrame.GetFirstChild("Label_SubtitleTitle") 	as CMlLabel);
			//declare Quad_RightInput 		<=> (Page.MainFrame.GetFirstChild("Quad_RightInputInput") 	as CMlQuad);
			//declare Quad_LeftInput 			<=> (Page.MainFrame.GetFirstChild("Quad_LeftInputInput") 	as CMlQuad);
			//declare Label_RightInput 		<=> (Page.MainFrame.GetFirstChild("Label_RightInputInput") 	as CMlLabel);
			//declare Label_LeftInput 		<=> (Page.MainFrame.GetFirstChild("Label_LeftInputInput") 	as CMlLabel);
			//declare Frame_LeftInput 		<=> (Page.MainFrame.GetFirstChild("Frame_LeftInput") 	as CMlLabel);

			declare CMlQuad[] 	Buttons;

			Buttons.add((Page.MainFrame.GetFirstChild("Button_No") as CMlQuad));
			Buttons.add((Page.MainFrame.GetFirstChild("Button_Yes")  as CMlQuad));
			
			declare CMlQuad  ButtonSelected <=> Buttons[0];
			G_IsPopUpShow = False;



			declare Integer Net_Message_Update			for This;
			declare Text    Net_Message_LabelText		for This;
			declare Text    Net_Message_ButtonText		for This;
			declare Boolean Net_Message_FocusOnButton	for This;
			HidePopUp();
			
			declare Integer ActiveButtonPlatform = {{{Platform}}};


			while(True) 
			{
				yield;
				LibManialink_AnimLoop();
				

				if(G_IsPopUpShow)
				{
					//declare Real ButtonSelectedSinVar  = MathLib::Sin(Now * 0.007) * 0.5 + 0.5;
					//declare CMlLabel Message_Label = (Page.GetFirstChild("Message") as CMlLabel);
					//Message_Label.Opacity = ButtonSelectedSinVar;
				}

				if (Input.PendingEvents.count != 0) {
					declare Integer LastInputPlatform;
					switch (Input.PendingEvents[Input.PendingEvents.count-1].Pad.Type) {
						case CInputPad::EPadType::Keyboard 		: LastInputPlatform = {{{LibUIButtons::GetPlatform("PC")}}};
						case CInputPad::EPadType::PlayStation 	: LastInputPlatform = {{{LibUIButtons::GetPlatform("PS4")}}};
						case CInputPad::EPadType::XBox 			: LastInputPlatform = {{{LibUIButtons::GetPlatform("XB1")}}};
						default 								: LastInputPlatform = {{{LibUIButtons::GetPlatform("PC")}}};
					}
					if (LastInputPlatform != ActiveButtonPlatform)
					{
						SendCustomEvent("SetActiveButtonPlaform", ["SuperPopUp", TL::ToText(LastInputPlatform)]);
					}
				}

				foreach(Event in PendingEvents)
				{
					switch(Event.Type) 
					{
						case CMlEvent::Type::MenuNavigation: {
							if(G_LockInput + 150 > Now) continue;
							G_LockInput = Now;
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Select : {
									Input_Select();
								}	
								case CMlEvent::EMenuNavAction::Cancel : {
									Input_Cancel();
									
								}
								case CMlEvent::EMenuNavAction::AppMenu : {
									Input_Cancel();
									
								}
								case CMlEvent::EMenuNavAction::Action1 : {
								}	
							}						
						}
						case CMlEvent::Type::MouseClick: {
							if(G_LockInput + 150 > Now) continue;
							G_LockInput = Now;
							Audio.PlaySoundEvent("{{{SoundPath^SoundValidate}}}", {{{Volumes::GetVolumedB("MenuClick")}}});
							if(Event.Control.ControlId == "Button_No")
							{
								HidePopUp();
								SendCustomEvent(G_AskYesNoFeedback^"_AskYesNo", ["False"]);
								G_AskYesNoFeedback = "";
							}
							else if(Event.Control.ControlId == "Button_Yes")
							{
								HidePopUp();
								SendCustomEvent(G_AskYesNoFeedback^"_AskYesNo", ["True"]);
								G_AskYesNoFeedback = "";
							}
							else if(Event.Control.ControlId == "ButtonClick_OK" || Event.Control.ControlId =="ButtonClick_Yes")
							{
								Input_Select();
							}
							else if(Event.Control.ControlId == "ButtonClick_Cancel" || Event.Control.ControlId =="ButtonClick_No")
							{
								Input_Cancel();
							}

						}
						case CMlEvent::Type::MouseOver: {
							Audio.PlaySoundEvent("{{{SoundPath^SoundMove}}}", {{{Volumes::GetVolumedB("MenuMove")}}});
							foreach(I => Button in Buttons)
							{
								if (Event.Control == Button)
								{
									ButtonSelected = Button;
								}
							}
						}


						case CMlEvent::Type::PluginCustomEvent: 
						{
							switch(Event.PluginCustomEventType)
							{
								case "UpdatePopUp" : {
									G_LockInput = Now + 300;
									if(Event.CustomEventData.count < 4) continue;
									declare Integer Update     = TL::ToInteger(Event.CustomEventData[0]);
									declare Text LabelText     = Event.CustomEventData[1];
									declare Text ButtonText    = Event.CustomEventData[2];
									declare Boolean FocusOnButton = False;
									if(Event.CustomEventData[3] == "True") FocusOnButton = True;

									G_AskYesNoFeedback = "";
									LaunchPopUp(Update, LabelText, ButtonText, FocusOnButton);
									SendCustomEvent("GetActiveButtonPlatform", ["SuperPopUp"]);
								}
								case "UpdateAskYesNo" : {
									G_LockInput = Now + 300;
									if(Event.CustomEventData.count < 2 ) continue;
									declare Text LabelText = Event.CustomEventData[0];
									declare Text TitleText = Event.CustomEventData[1];
									declare Text TitleColor = Event.CustomEventData[2];
									G_AskYesNoFeedback = Event.CustomEventData[3]; //on envoie un event <ManagerName>_AskYesNo pour feedback
									// declare Text LabelText2 = Event.CustomEventData[4];
									
									declare Text FirstChoice;
									declare Text SecondChoice;
									if(Event.CustomEventData.count >= 6) {
										FirstChoice = Event.CustomEventData[4];
										SecondChoice = Event.CustomEventData[5];
									} else {
										FirstChoice = _("Yes");
										SecondChoice =  _("No");
									}

									//BuyFullGameMode
									declare CMlFrame Frame_PopUpYesNo <=> (Page.GetFirstChild("Frame_PopUpYesNo")                 as CMlFrame);
									declare CMlLabel Title_Label      <=> (Frame_PopUpYesNo.GetFirstChild("TitleYesNo") as CMlLabel);
									declare CMlLabel MessageYesNo     <=> (Frame_PopUpYesNo.GetFirstChild("MessageYesNo") as CMlLabel);
									declare Quad_Image                <=> (Frame_PopUpYesNo.GetFirstChild("Quad_Image") as CMlQuad);
									declare Frame_ButtonYes           <=> (Frame_PopUpYesNo.GetFirstChild("Frame_ButtonYes") as CMlQuad);
									declare Frame_ButtonNo            <=> (Frame_PopUpYesNo.GetFirstChild("Frame_ButtonNo") as CMlQuad);
									declare CMlQuad Button_No         <=> (Frame_PopUpYesNo.GetFirstChild("Button_No") as CMlQuad);
									declare CMlQuad Button_Yes        <=> (Frame_PopUpYesNo.GetFirstChild("Button_Yes") as CMlQuad);
									declare CMlQuad Quad_Logo        <=> (Frame_PopUpYesNo.GetFirstChild("Quad_Logo") as CMlQuad);
									
									
									declare Text BGImg;
									if(Event.CustomEventData.count >= 7)
									{
										BGImg = Event.CustomEventData[6];
										//aaaaaaaaaaa
										Title_Label.RelativePosition = <77., 4., 1.>;
										MessageYesNo.RelativePosition = <77., -20., 0.>;
										Frame_ButtonYes.RelativePosition = <15., 20., 0.>;
										Frame_ButtonNo.RelativePosition.X  = 15.;
										Title_Label.Size.X  = 200.;
										MessageYesNo.Size.X = 150.;
										Button_No.Size.X    = 150.;
										Button_Yes.Size.X   = 150.;
										Title_Label.VerticalAlign = CMlControl::AlignVertical::Top;
										BGImg = Event.CustomEventData[6];
										Title_Label.TextSizeReal = 8.;
										Quad_Logo.Show();
									}
									else
									{
										Title_Label.RelativePosition = <0., 5., 1.>;
										MessageYesNo.RelativePosition = <0., 4., 0.>;
										Frame_ButtonYes.RelativePosition = <0., 17., 0.>;
										Frame_ButtonNo.RelativePosition.X  = 0.;
										Title_Label.Size.X  = 250.;
										Title_Label.Size.X  = 250.;
										MessageYesNo.Size.X = 255.;
										Button_No.Size.X    = 200.;
										Button_Yes.Size.X   = 200.;
										BGImg = "{{{IMGTrame}}}";
										Title_Label.VerticalAlign = CMlControl::AlignVertical::Bottom;
										Title_Label.TextSizeReal = 11.;
										Quad_Logo.Hide();

									}
									Quad_Image.ChangeImageUrl(BGImg);
									
									LaunchAskYesNo(LabelText, TitleText, TitleColor, FirstChoice, SecondChoice);
									SendCustomEvent("GetActiveButtonPlatform", ["SuperPopUp"]);
								}
								case "Show" : {	
									SendCustomEvent("GetActiveButtonPlatform", ["SuperPopUp"]);
									HidePopUp();
								}

								case "HidePopUp" : {	
									HidePopUp();
								}
								case "HideAll" : {
									HidePopUp();
									//HidePopUpAsk();
								}
								case "SetActiveButtonPlatform" : {
									ActiveButtonPlatform = TL::ToInteger(Event.CustomEventData[0]);
									UpdateHelpersForPlatform(ActiveButtonPlatform);
								}
							}
						}
					}
				}
			}
		}
	--></script>
	""";
	
	return MLText;
}