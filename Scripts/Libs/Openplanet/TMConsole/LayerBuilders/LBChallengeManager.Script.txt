
#Include "Libs/Openplanet/Manialink2.Script.txt"								as Manialink
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt"					as Font
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt"		   				as Colors
#Include "Libs/Openplanet/TMConsole/Live/LiveHelpers.Script.txt"				as LiveHelpers
#Include "Libs/Openplanet/TMConsole/Menu/LibOnlineGameplay.Script.txt"		as Gameplay
#Include "Libs/Openplanet/TMConsole/Selector.Script.txt"						as Selector
#Include "Libs/Openplanet/UIPadButtons.Script.txt"							as LibUIButtons
#Include "Libs/Openplanet/TMConsole/MenuColor.Script.txt"					as MenuColor
#Include "TextLib" 														as TextLib
#Include "Libs/Openplanet/TMConsole/Menu/LibInputInfos.Script.txt"			as InputInfos

#Const C_ImgBase 	"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_ImgBase2	"file://Media/Images/TMConsole/Ingame/"

#Const C_ImgBaseDev "file://Media/Images/"

#Const C_BrowseSlot_SlotNb			10
#Const C_BrowseSlot_Landmark		2

#Const LabelSizen					90

Text Build(Text _ShowAnim, Text _HideAnim) {

	//IMAGES
	declare Text 	IMGSlotSmallBg           = C_ImgBase2^"slot-medium-bg.dds";
	declare Text 	IMGSlotSmallFg           = C_ImgBase2^"slot-medium-fg.dds";
	declare Text 	IMGSlotMediumBg          = C_ImgBase2^"slot-medium-bg.dds";
	declare Text 	IMGSlotMediumFg          = C_ImgBase^"slot-medium-fg2.dds";
	declare Text 	IMGSlotBigBg             = C_ImgBase^"slot-big-bg2.dds";
	declare Text 	IMGSlotBigFg             = C_ImgBase^"slot-big-fg2.dds";
	declare Text 	IMGMenuBg                = C_ImgBase2^"menu-bg-1.dds";
	declare Text	IMGBoardEmpty            = C_ImgBase^"board_Empty.tga";
	
	declare Integer Platform   = LibUIButtons::GetPlatform();
	
	declare Text 	IMGPopupArrow            = C_ImgBase^"Online/RoomSettings/fleche.tga";
	declare Text	IMGEmptyTracklist		 = C_ImgBaseDev^"EmptyTracklist.png";
	
	declare Text TitleColor    = TextLib::ColorToText(MenuColor::GetMenuColor(2));
	
	//SIZES
	//declare Real	SM_SizeTotalX            = 200.0;
	declare Real	SM_SizeTotalX            = 259.0;
	declare Real	SM_SizeTotalY            = 150.;
	declare Real	SM_SizeY                 = 8.27;
	declare Real	SM_Separator             = SM_SizeY * 0.095;
	declare Real	SM_SizeYElement          = SM_SizeY; // - SM_Separator;
	
	
	//POSITIONS
	declare Real	SM_PosY                  = 60.;
	declare Real	SM_PosYElementAlignTop   = 53.;
	declare Real	PositionFirstQuadX       = 0.;
	declare Real	PositionFirstQuadY       = 36.3;
	
	//SETTINGS & TRACKLIST ARRAY VALUES
	declare Real	SettingNamePosX			 = - SM_SizeTotalX / 4.; //+ 5.; //left haligned
	declare Real	SettingValuePosX		 =   SM_SizeTotalX / 4.; //centered
	
	declare Integer	SelectArray_SettingsCount 	= 3;
	declare Real	SelectArray_TrackListArrowWidth = 4.;
	declare Integer SelectArray_TrackListDisplayedCount = 8;
	declare Real	SelectArray_TrackWidth		= (SM_SizeTotalX - 2*SelectArray_TrackListArrowWidth) / SelectArray_TrackListDisplayedCount;
	//declare Real	SelectArray_TrackHeight		= SM_SizeY * 4.;
	declare Real	SelectArray_TrackHeight		= SelectArray_TrackWidth;
	
	InputInfos::Init("Main", SM_SizeTotalX / 36., SM_SizeY, 1.);
	InputInfos::AddInput(7., "Select");
	InputInfos::AddInput(7., "Cancel");
	InputInfos::AddInput(7., "Action1");
	
	InputInfos::SetConstantInput("Cancel"		, _("|16 chars max|BACK"));
	InputInfos::SetStates(["Setting", "Tracklist", "Track", "SaveAndQuit"]);
	InputInfos::SetVariableInput("Setting"			, "Select"	, False);
	InputInfos::SetVariableInput("Setting"			, "Action1"	, False);
	InputInfos::SetVariableInput("Tracklist"		, "Select"	, True, _("|16 chars max|EDIT TRACKLIST"));
	InputInfos::SetVariableInput("Tracklist"		, "Action1"	, False);
	InputInfos::SetVariableInput("Track"			, "Select"	, True, _("|16 chars max|EDIT TRACKLIST"));
	InputInfos::SetVariableInput("Track"			, "Action1"	, True,	_("|16 chars max|REMOVE TRACK"));
	InputInfos::SetVariableInput("SaveAndQuit"		, "Select"	, True, _("|16 chars max|SAVE & QUIT"));
	InputInfos::SetVariableInput("SaveAndQuit"		, "Action1"	, False);
	
	/////////////////////////
	// FRAMEMODELS
	/////////////////////////
	declare MLText = """
	
	<framemodel id="Frame_SubMenu">
		<quad halign="center" valign="center" 	sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement}}}" 	image="{{{IMGSlotMediumBg}}}" 	opacity="1.0" 	posn="0 0 2" />
		<quad halign="center" valign="center" 	sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement}}}" 	image="{{{IMGSlotMediumFg}}}" 	opacity="1.0" 	posn="0 0 4" />
		<quad halign="center" valign="center" 	sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY}}}" 			image="{{{IMGMenuBg}}}" 		opacity="1." 	posn="0 0 1" />
	</framemodel>

	<framemodel id="FrameModel_InputInfo">
		<quad halign="center" valign="bottom" 	sizen="50 {{{SM_SizeYElement}}}"	image="{{{IMGSlotSmallBg}}}"   	posn="0 0 6" 	opacity="1."/>
		<quad halign="center" valign="bottom" 	sizen="50 {{{SM_SizeYElement}}}"	image="{{{IMGSlotSmallFg}}}"  	posn="0 0 8" 	opacity="1.0"/>
		<quad halign="center" valign="center" 	sizen="6 6"	id="Quad_Icon" 			image=""  						posn="18.5 4 7" opacity="1.0"/>
		<label halign="right" valign="center" 	sizen="34" 	id="Label_Name"  		text="{{{_("BACK")}}}"	    	posn="12 4.5 7" opacity="1.0" textcolor="ddd" textsize="3."/>
	</framemodel>
	
	<framemodel id="Frame_Setting">
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY}}}" bgcolor="333" id="Quad_Bg" opacity="0.3" />
		
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.95}}}" image="{{{IMGSlotMediumBg}}}" 	opacity="1.0" posn="0 0 2" />
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}" image="{{{IMGSlotMediumFg}}}" 	opacity="1.0" posn="0 0 4" />
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}"	image="{{{IMGMenuBg}}}" 		opacity="1.0" posn="0 0 1" />
		
		<label halign="center" 	valign="center"  sizen="60"  posn="{{{SettingNamePosX}}}  0.8 3" textsize="4."	textcolor="fff" id="Setting_Name"  textprefix="$t" scale="1.2" textfont="{{{Font::GetFontName("Main")}}}"/>
		<label halign="center" 	valign="center"  sizen="80"  posn="{{{SettingValuePosX}}} 0.8 3" textsize="3."	textcolor="fff" id="Setting_Value" textprefix="$t" textfont="{{{Font::GetFontName("Main")}}}"/>
	</framemodel>
	
	<framemodel id="Frame_Track">
		<quad id="Track_Thumbnail" 	halign="center" valign="center" sizen="{{{SelectArray_TrackWidth*0.98}}} {{{SelectArray_TrackHeight}}}" posn="0 0 3" />
		<quad id="Quad_Color"		halign="center" valign="center" sizen="{{{SelectArray_TrackWidth*0.98}}} {{{SelectArray_TrackHeight * 0.2}}}" bgcolor="00E2FF" posn="0 {{{-SelectArray_TrackHeight * 0.4}}} 3.1" />
		<label id="Track_Name" 		halign="center" valign="center2" sizen="{{{SelectArray_TrackWidth * 0.8}}}" text="Test Map Name" style="BgMainMenuTitleHeader" textsize="2" posn="0 {{{- SelectArray_TrackHeight * 0.4}}} 3.2" />
	</framemodel>
	

	/////////////////////////
	// MANIALINK
	/////////////////////////
	<frame id="Frame_General">
		<frame id="Frame_Board_Settings">
			<quad id="Quad_Board" posn="0 0 0" halign="center" valign="center" sizen="259.5 {{{SM_SizeTotalY}}}" image="{{{IMGBoardEmpty}}}" />
		</frame>
	""";
			
	/////////////////////////
	// TITLE
	/////////////////////////
	MLText^="""
	<frame id="Frame_Title" posn="0 1.0 0">
		<quad halign="center" valign="bottom" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY*2.}}}" image="{{{IMGSlotBigFg}}}" posn="0 {{{SM_PosY-2.8}}} 7" />
		<quad halign="center" valign="bottom" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY*2.}}}" image="{{{IMGSlotBigBg}}}" posn="0 {{{SM_PosY-2.8}}} 5" />
		<label halign="left" valign="center" textprefix="$t" textfont="{{{Font::GetFontName("Main")}}}" posn="{{{-(SM_SizeTotalX-2)/2.+1.}}}  {{{SM_PosY + SM_SizeY - 1.}}} 6" textcolor="{{{TitleColor}}}" id="Label_Title" textsize="13." text="{{{_("Challenge - Settings")}}}" sizen="{{{SM_SizeTotalX-2.}}}"/>
	</frame>
		
	/////////////////////////
	// CHALLENGE TITLE
	/////////////////////////		
	<frame id="Frame_ChallengeTitle" posn="0 {{{SM_PosYElementAlignTop}}} 3">
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement*0.96}}}" image="{{{IMGSlotMediumFg}}}" posn="0 -0.1 5" />
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement*0.95}}}" image="{{{IMGSlotMediumBg}}}" posn="0 0 2" />
		<label id="Label_ChallengeName" posn="{{{-SM_SizeTotalX/2.+2.}}} 0.6 4" halign="left" valign="center" sizen="150 7" textcolor="000" textprefix="$t" textsize="4." textfont="{{{Font::GetFontName("Main")}}}" />
		<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement*0.96}}}" posn="0. -0.1 3" bgcolor="fff" opacity="0.95"/>
	</frame>	
	""";
	
	MLText ^= """<frame id="Frame_InputInfos" posn="{{{SM_SizeTotalX * 0.5}}} {{{-SM_SizeY * 9.}}} 7">
		{{{InputInfos::InjectInManialink()}}}
	</frame>""";
	
	//- (SelectArray_SettingsCount+1.) * SM_SizeY + 62.5
	/////////////////////////
	// SETTINGS & TRACKLIST
	/////////////////////////
	MLText ^= """
		<frame id="Frame_SettingsSelector" posn="0 {{{PositionFirstQuadY + 0.2}}} 6.5">
			<frame id="Frame_Settings_Buttons" posn="{{{SettingValuePosX}}}">			
				<quad  	halign="center" valign="center"  sizen="{{{SelectArray_TrackListArrowWidth/1.35}}} {{{SelectArray_TrackListArrowWidth/1.35}}}" posn="{{{-LabelSizen / 2. - 1}}} 0 2." image="{{{IMGPopupArrow}}}" rot="180" id="MouseInput_SettingPrev" scriptevents="1" keepratio="Fit" />
				<quad  	halign="center" valign="center"  sizen="{{{SelectArray_TrackListArrowWidth/1.35}}} {{{SelectArray_TrackListArrowWidth/1.35}}}" posn="{{{LabelSizen / 2. + 1}}}  0 2." image="{{{IMGPopupArrow}}}" rot="0"   id="MouseInput_SettingNext" scriptevents="1" keepratio="Fit" />
			</frame>
			<quad 	halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.9}}}" bgcolor="{{{Colors::GetColorHexa("Red")}}}" id="Quad_SettingsSelector"   opacity="1.0" />
		</frame>
	
		<frame id="Frame_Parameters">
			<frame id="Frame_TrackListLoading" posn="0 {{{PositionFirstQuadY - SM_SizeY + 4.}}} 10" >
				<label halign="center" valign="center2" textprefix="$t" textfont="{{{Font::GetFontName("Main")}}}" posn="0 {{{-SelectArray_TrackHeight*0.5}}} 1" id="Label_LoadingTracks" textsize="13." text="{{{_("Loading")}}}"  opacity="1.0"/>
				<quad halign="center"   valign="top"																		  sizen="{{{SM_SizeTotalX}}} {{{SelectArray_TrackHeight}}}" bgcolor="000F" />
			</frame>
			<frame id="Frame_TrackList" posn="0 {{{PositionFirstQuadY - SM_SizeY + 4.}}} 10" >
				<quad halign="center"   valign="top"																		  sizen="{{{SM_SizeTotalX}}} {{{SelectArray_TrackHeight}}}" bgcolor="000F" />
				<quad halign="center"   valign="center" sizen="{{{SelectArray_TrackListArrowWidth/1.35}}} {{{SelectArray_TrackListArrowWidth/1.35}}}" posn="{{{- SM_SizeTotalX/2. + SelectArray_TrackListArrowWidth / 2.0}}} {{{- SelectArray_TrackHeight/2.}}} 3" image="{{{IMGPopupArrow}}}" rot="180"  scriptevents="1" id="MouseInput_TrackPrev" keepratio="Fit" />
				<frame posn="0 0 5">
					{{{Selector::InsertFrameworkInManialink(13, SelectArray_TrackWidth, SelectArray_TrackHeight*0.98, -SelectArray_TrackWidth/2., SelectArray_TrackHeight/2., 0., 0.)}}}
				</frame>
				<frame id="Frame_Tracks" clip="1" clipsizen="{{{SelectArray_TrackWidth * SelectArray_TrackListDisplayedCount}}} {{{SelectArray_TrackHeight}}}" clipposn="0 {{{-SelectArray_TrackHeight/2.}}}" >
			""";
		for (I, 0, SelectArray_TrackListDisplayedCount+1)
		{
			MLText ^= """
				<frame id="Frame_Track{{{I}}}" posn="{{{- SM_SizeTotalX / 2. + SelectArray_TrackListArrowWidth + ((I - 0.5) * SelectArray_TrackWidth)}}} {{{ - SelectArray_TrackHeight / 2.}}}" hidden="1" >
					<frameinstance  modelid="Frame_Track" />
					<quad halign="center" valign="center" sizen="{{{SelectArray_TrackWidth}}} {{{SelectArray_TrackHeight}}}" posn="0 0 5" opacity="0." scriptevents="1" id="MouseInput_Track_{{{I}}}" />
				</frame>
			""";
		}
			
		MLText ^= """	
				</frame>
				<quad  halign="center"   valign="center" sizen="{{{SelectArray_TrackListArrowWidth/1.35}}} {{{SelectArray_TrackListArrowWidth/1.35}}}" posn="{{{ SM_SizeTotalX/2. - SelectArray_TrackListArrowWidth / 2.0}}} {{{- SelectArray_TrackHeight/2.}}} 3" image="{{{IMGPopupArrow}}}" id="MouseInput_TrackNext" scriptevents="1" keepratio="Fit" />
			</frame>
			<frame id="Frame_Settings">	
				<frame id="Frame_EditTracklist" posn="{{{PositionFirstQuadX}}} {{{PositionFirstQuadY + 0.2}}} 4.">
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY}}}" bgcolor="333" id="Quad_Bg" scriptevents="1" opacity="0.3" />
			
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.95}}}" image="{{{IMGSlotMediumBg}}}" 	posn="0 0 1" />
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}" image="{{{IMGSlotMediumFg}}}" 	posn="0 0 4" scriptevents="1" id="MouseInput_EditTracklist"/>
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}"	 	bgcolor="fff"				opacity="0.95" 	posn="0 0 2" />
					
					<label halign="center" 	valign="center"  sizen="60"  posn="0 0.8 3" textsize="4."	textcolor="000" text="{{{_("EDIT TRACKLIST")}}}" textprefix="$t" scale="1.2" textfont="{{{Font::GetFontName("Main")}}}"/>
				</frame>
				<frame id="Frame_SaveAndQuit" posn="{{{PositionFirstQuadX}}} {{{PositionFirstQuadY + 0.2 - 12 * SM_SizeY}}} 4.">
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeY}}}" bgcolor="333" id="Quad_Bg" scriptevents="1" opacity="0.3" />
			
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.95}}}" image="{{{IMGSlotMediumBg}}}" 	posn="0 0 2" />
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}" image="{{{IMGSlotMediumFg}}}" 	posn="0 0 4" scriptevents="1" id="MouseInput_SaveAndQuit" />
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}"	 	bgcolor="000"				posn="0 0 1" />
					<label halign="center" 	valign="center"  sizen="60"  posn="0 0.8 3" textsize="4."	textcolor="fff" text="{{{_("SAVE & QUIT")}}}" textprefix="$t" scale="1.2" textfont="{{{Font::GetFontName("Main")}}}"/>
				</frame>
			""";
		
		for(K, 0, SelectArray_SettingsCount-1)
		{
			declare Real FramePosnX = PositionFirstQuadX;
			declare Real FramePosnY = PositionFirstQuadY + 0.2 - (K+5) * SM_SizeY;

			MLText^="""
				<frame posn="{{{FramePosnX}}} {{{FramePosnY}}} 4." id="Frame_Setting{{{K}}}">
					<frameinstance modelid="Frame_Setting" />
					<quad halign="center" valign="center" sizen="{{{SM_SizeTotalX}}} {{{SM_SizeYElement * 0.96}}}" posn="0 0 4" scriptevents="1" id="MouseInput_Setting_{{{K}}}" />
				</frame>
			""";
		}
		
		MLText^="""
			</frame>
		</frame>
	</frame>
	
	<script><!--
		#Const DebugName  "L_ChallengeManager"
		
		#Const C_TrackFramesCount {{{SelectArray_TrackListDisplayedCount+2}}}
		#Const C_DisplayedTrackFramesCount {{{SelectArray_TrackListDisplayedCount}}}
		#Const C_LeftTrackFramePosX {{{- SM_SizeTotalX / 2. + SelectArray_TrackListArrowWidth - 0.5 * SelectArray_TrackWidth}}}
		#Const C_TrackFrameWidth {{{SelectArray_TrackWidth}}}
		
		#Include "TextLib" as TL
		#Include "MathLib" as ML
		
		{{{Manialink::GetIncludes()}}}
		{{{Manialink::Load()}}}
		
		declare Integer			G_LockInput;
		//Pages & Tabs
		declare Integer			G_IndexFocusX;
		declare Integer			G_IndexFocusY;
		
		//Data
		declare Text			G_MenuUserDisplayName;
		
		//Settings
		declare Boolean			G_IsStunts;
		
		declare Text[]			G_SettingsFieldNames; 	//nom des champs des settings
		declare Text[][]		G_Settings;				//valeurs des settings
		declare Text[] 			G_DefaultSettings;
		
		//Tracklist State
		declare Integer			G_FirstDisplayedTrackIndex;			//en gros le nombre de tracks cachées à gauche
		declare Integer			G_FirstDisplayedTrackFrameIndex;	//pour savoir où en sont les frameinstances dans leur défilement
		
		{{{InputInfos::InjectInGlobals()}}}
		
		{{{InputInfos::InjectInFunctions()}}}
		
		/////////////////
		// JSON
		/////////////////
		{{{LiveHelpers::InjectConverters()}}}
		{{{LiveHelpers::InjectCountryToCodeConverter()}}}
		{{{LiveHelpers::InjectJson()}}}
		
		
		Text TracksIdsToJson(Integer[] _TracksIds)
		{
			//ou Text[]_TracksIds, auquel cas on peut se passer du TL::ToText
			declare Text Json;
			Json = "{ \"maps\": [";
			for (I, 0, _TracksIds.count-1)
			{
				if (I > 0)
					Json ^= ",";
				Json ^= TL::ToText(_TracksIds[I]);
			}
			Json = "] }";
			return Json;
		}
		
		Text ChallengeDataToJson ()
		{   //pas fermé pour pouvoir rajouter le token de création de room éventuel (cf handler)
			declare Text[Text] 		RequestedChallenge for Page;
			declare Text[Text][]	RequestedRoomMaps for Page;
			declare Text Json;
			
			declare Boolean NeedComma;
			
			Json = "{";
			
			NeedComma = True;
			Json ^= "\"maps\": [";
			if (RequestedRoomMaps.count != 0)
			{
				for (I, 0, RequestedRoomMaps.count - 1)
				{
					if (I > 0)
						Json ^= ",";
					Json ^= "\""^RequestedRoomMaps[I]["uid"]^"\"";
					//Json^=Json_DoElem("id", 			RequestedRoomMaps[I]["id"]);
				}
			}
			Json ^= "]";
			
			declare Text[] SplitPath = TL::Split("|", LocalUser.ZonePath);
			Json ^= ",";
			if (SplitPath.count >= 2)
					Json ^= Json_DoElem("country", "\""^GetCountryCodeFromName(SplitPath[1])^"\"");
				else
					Json ^= Json_DoElem("country", "\"WOR\"");
			
			for (I, 0, G_SettingsFieldNames.count-1)
			{
				if (RequestedChallenge.existskey(G_SettingsFieldNames[I]) && TL::Length(RequestedChallenge[G_SettingsFieldNames[I]]) != 0)
				{
					if (!NeedComma)
						NeedComma = True;
					else
						Json ^= ",";
					switch (G_SettingsFieldNames[I])
					{
						case "style"	  		: Json^=Json_DoElemText(G_SettingsFieldNames[I],		RequestedChallenge[G_SettingsFieldNames[I]]);
						case "duration"	  		: Json^=Json_DoElem(G_SettingsFieldNames[I],			RequestedChallenge[G_SettingsFieldNames[I]]);
						case "stunts"			: Json^=Json_DoElem(G_SettingsFieldNames[I],			RequestedChallenge[G_SettingsFieldNames[I]]);
					}
				}
			}
			return Json;
		}
		
				
		/////////////////
		// SELECTION
		/////////////////
		Void ResetTracksColors() {
			declare CMlFrame Frame_Tracks <=> (Page.GetFirstChild("Frame_Tracks") as CMlFrame);
			for (I, 0, C_DisplayedTrackFramesCount-1)
			{
				declare FrameIndex = (I + G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
				declare CMlFrame 	Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^FrameIndex) as CMlFrame);
				declare CMlQuad		Quad_Color	<=> (Frame_Track.GetFirstChild("Quad_Color") as CMlQuad);
				Quad_Color.BgColor = <0.,226./255., 1.>;
			}
		}
		
		Void SetTracksColorForStyleOrDuration(Boolean _StyleOrElseDuration, Text _ValueToMatch) {
			declare Text[Text][] RequestedRoomMaps for Page;
			declare CMlFrame Frame_Tracks <=> (Page.GetFirstChild("Frame_Tracks") as CMlFrame);
			
			declare Boolean IsVarious;
			if (_StyleOrElseDuration)
				IsVarious = (_ValueToMatch == "Various");
			else
				IsVarious = (_ValueToMatch == "0");
			
			if (IsVarious)
			{
				for (I, 0, C_DisplayedTrackFramesCount-1)
				{
					if (I+G_FirstDisplayedTrackIndex >= RequestedRoomMaps.count)
						break;
					declare FrameIndex = (I + G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
					declare CMlFrame 	Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^FrameIndex) as CMlFrame);
					declare CMlQuad		Quad_Color	<=> (Frame_Track.GetFirstChild("Quad_Color") as CMlQuad);
					Quad_Color.BgColor = <0., 9./15., 0.>;	
				}
			} else {
			
				declare Text FieldName;
				if (_StyleOrElseDuration)
					FieldName = "style";
				else
					FieldName = "duration";
				
				for (I, 0, C_DisplayedTrackFramesCount-1)
				{
					if (I+G_FirstDisplayedTrackIndex  >= RequestedRoomMaps.count)
						break;
					declare FrameIndex = (I + G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
					declare CMlFrame 	Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^FrameIndex) as CMlFrame);
					declare CMlQuad		Quad_Color	<=> (Frame_Track.GetFirstChild("Quad_Color") as CMlQuad);
					
					if (RequestedRoomMaps[I+G_FirstDisplayedTrackIndex][FieldName] == _ValueToMatch)
						Quad_Color.BgColor = <0., 9./15., 0.>;	
					else
						Quad_Color.BgColor = <9./15., 0., 0.>;
				}
			}
		}
		
		Void UpdateSelection()
		{
			declare CMlFrame Frame_Parameters <=> (Page.GetFirstChild("Frame_Parameters") as CMlFrame);
			declare CMlFrame Frame_SelectorTrack <=> (Frame_Parameters.GetFirstChild("Frame_Selector") as CMlFrame);
			if (G_IndexFocusY < {{{SelectArray_SettingsCount}}}) //on est sur un setting
			{
				declare CMlFrame NewFrame_Instance <=> (Frame_Parameters.GetFirstChild("Frame_Setting"^G_IndexFocusY) as CMlFrame);
				declare CMlFrame Frame_Selector    <=> (Page.GetFirstChild("Frame_SettingsSelector")     as CMlFrame);
				declare CMlQuad Quad_SettingsSelector <=> (Frame_Selector.GetFirstChild("Quad_SettingsSelector") as CMlQuad);
				Quad_SettingsSelector.BgColor = {{{MenuColor::GetMenuColor(2)}}};
			
				Frame_Selector.Show();
				Frame_Selector.RelativePosition.X      = 0.;
				Frame_Selector.RelativePosition.Y      = NewFrame_Instance.RelativePosition.Y + 0.2;
				Frame_SelectorTrack.Hide();
				
				declare Text[Text] RequestedChallenge for Page;
				
				declare CMlFrame Frame_Settings_Buttons <=> (Frame_Selector.GetFirstChild("Frame_Settings_Buttons") as CMlFrame);
				if (G_IndexFocusY >= {{{SelectArray_SettingsCount}}})
				{
					Frame_Settings_Buttons.Hide();
				} else {
					Frame_Settings_Buttons.Show();
				}
				
				if (G_SettingsFieldNames[G_IndexFocusY] == "style")
					SetTracksColorForStyleOrDuration(True, RequestedChallenge["style"]);
				else if (G_SettingsFieldNames[G_IndexFocusY] == "duration")
					SetTracksColorForStyleOrDuration(False, RequestedChallenge["duration"]);
				else
					ResetTracksColors();
			} else if (G_IndexFocusY == {{{SelectArray_SettingsCount}}}) { //SAVE & QUIT
				declare CMlFrame NewFrame_Instance <=> (Frame_Parameters.GetFirstChild("Frame_SaveAndQuit") as CMlFrame);
				declare CMlFrame Frame_Selector    <=> (Page.GetFirstChild("Frame_SettingsSelector")     as CMlFrame);
				declare CMlQuad Quad_SettingsSelector <=> (Frame_Selector.GetFirstChild("Quad_SettingsSelector") as CMlQuad);
				Quad_SettingsSelector.BgColor = {{{Colors::GetColor("Green")}}};
				Frame_Selector.Show();
				Frame_Selector.RelativePosition.X      = 0.;
				Frame_Selector.RelativePosition.Y      = NewFrame_Instance.RelativePosition.Y + 0.2;
				Frame_SelectorTrack.Hide();
				declare CMlFrame Frame_Settings_Buttons <=> (Frame_Selector.GetFirstChild("Frame_Settings_Buttons") as CMlFrame);
				Frame_Settings_Buttons.Hide();
				ResetTracksColors();
				
			} else if (G_IndexFocusY == {{{SelectArray_SettingsCount+1}}}) { //on est sur le bouton EDIT TRACKLIST
				declare CMlFrame NewFrame_Instance <=> (Frame_Parameters.GetFirstChild("Frame_EditTracklist") as CMlFrame);
				declare CMlFrame Frame_Selector    <=> (Page.GetFirstChild("Frame_SettingsSelector")     as CMlFrame);
				declare CMlQuad Quad_SettingsSelector <=> (Frame_Selector.GetFirstChild("Quad_SettingsSelector") as CMlQuad);
				Quad_SettingsSelector.BgColor = {{{MenuColor::GetMenuColor(2)}}};
			
				Frame_Selector.Show();
				Frame_Selector.RelativePosition.X      = 0.;
				Frame_Selector.RelativePosition.Y      = NewFrame_Instance.RelativePosition.Y + 0.2;
				Frame_SelectorTrack.Hide();
				ResetTracksColors();
				
				declare CMlFrame Frame_Settings_Buttons <=> (Frame_Selector.GetFirstChild("Frame_Settings_Buttons") as CMlFrame);
				Frame_Settings_Buttons.Hide();
			} else if (G_IndexFocusY == {{{SelectArray_SettingsCount + 2}}}) {//on est sur la tracklist
				declare CMlQuad  Frame_Selector      <=> (Page.GetFirstChild("Frame_SettingsSelector")  as CMlQuad);
				Frame_Selector.Hide();
				
				Frame_SelectorTrack.RelativePosition.X = C_LeftTrackFramePosX + (G_IndexFocusX+0.5)*C_TrackFrameWidth;
				Frame_SelectorTrack.RelativePosition.Y = 0.;
				Frame_SelectorTrack.Show();
				ResetTracksColors();
			}
		}
		
		/////////////////
		// TRACKLIST
		/////////////////
		Void TrackList_SetFromResult()
		{
			declare CMlFrame Frame_TrackListLoading <=> (Page.GetFirstChild("Frame_TrackListLoading") as CMlFrame);
			declare CMlFrame Frame_TrackList		<=> (Page.GetFirstChild("Frame_TrackList") as CMlFrame);
			Frame_TrackListLoading.Hide();
			Frame_TrackList.Show();
		
			declare Text[Text][] RequestedRoomMaps for Page;
			declare CMlFrame Frame_Tracks <=> (Page.GetFirstChild("Frame_Tracks") as CMlFrame);
			
			if (RequestedRoomMaps.count != 0)
				{
				if (G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount >= RequestedRoomMaps.count)
				{
					if (RequestedRoomMaps.count < C_DisplayedTrackFramesCount)
					{
						G_FirstDisplayedTrackIndex = 0;
						G_IndexFocusX = ML::Min(G_IndexFocusX, RequestedRoomMaps.count-1);
						UpdateSelection();
					} else {
						G_FirstDisplayedTrackIndex = RequestedRoomMaps.count  - C_DisplayedTrackFramesCount;
					}
				}
			} else {
				//on affiche une frame ("empty tracklist") et on cache les autres
				G_IndexFocusX = 0;
				declare CMlFrame Frame_EmptyTrackList <=> (Frame_Tracks.GetFirstChild("Frame_Track"^G_FirstDisplayedTrackFrameIndex) as CMlFrame);
				
				// HACK EG : non, ça sert à rien ;)
				// Frame_EmptyTrackList.Show();
				Frame_EmptyTrackList.Hide();
				
				
				declare CMlQuad Quad_Thumbnail <=> (Frame_EmptyTrackList.GetFirstChild("Track_Thumbnail") as CMlQuad);
				Quad_Thumbnail.ImageUrl = "{{{IMGEmptyTracklist}}}"; //set image new track ?
				declare CMlLabel Label_TrackName <=> (Frame_EmptyTrackList.GetFirstChild("Track_Name") as CMlLabel);
				Label_TrackName.Value = _("Add a new track");
				
				for (I, 1, C_DisplayedTrackFramesCount)
				{
					declare FrameIndex = (I + G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
					declare CMlFrame Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^FrameIndex) as CMlFrame);
					Frame_Track.Hide();
				}
				return;
			}
				
			// -> On remplit les N frames visibles
			for (I, 0, C_DisplayedTrackFramesCount - 1)
			{
				declare FrameIndex = (I + G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
				declare CMlFrame Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^FrameIndex) as CMlFrame);
				if (I+G_FirstDisplayedTrackIndex >= RequestedRoomMaps.count)
				{					
					Frame_Track.Hide();
				} else {
					declare CMlQuad Quad_Thumbnail <=> (Frame_Track.GetFirstChild("Track_Thumbnail") as CMlQuad);
					if (RequestedRoomMaps[I+G_FirstDisplayedTrackIndex].existskey("thumbnail_url"))
					{
						Quad_Thumbnail.ImageUrl = RequestedRoomMaps[I+G_FirstDisplayedTrackIndex]["thumbnail_url"];
						Quad_Thumbnail.Image = Null;
					} else if (RequestedRoomMaps[I+G_FirstDisplayedTrackIndex].existskey("mapinfo")) {
						declare MapInfoIndex = TL::ToInteger(RequestedRoomMaps[I+G_FirstDisplayedTrackIndex]["mapinfo"]);
						if (MapInfoIndex < DataMgr.Maps.count && DataMgr.Maps[MapInfoIndex].MapUid == RequestedRoomMaps[I+G_FirstDisplayedTrackIndex]["uid"])
						{
							wait(DataMgr.Ready);
							DataMgr.LoadMapThumbnail(MapInfoIndex);
							wait(DataMgr.Ready);
							Quad_Thumbnail.Image = DataMgr.MapThumbnail;
							Quad_Thumbnail.ImageUrl = "";
						}	
					}
					declare CMlLabel Label_TrackName <=> (Frame_Track.GetFirstChild("Track_Name") as CMlLabel);
					Label_TrackName.Value = RequestedRoomMaps[I+G_FirstDisplayedTrackIndex]["name"];
					Frame_Track.Show();
				}
			}
		}
		
		Void TrackList_OnRight()
		{
			declare Text[Text][] RequestedRoomMaps for Page;	
			declare CMlFrame Frame_Tracks <=> (Page.GetFirstChild("Frame_Tracks") as CMlFrame);
		
			// -> Check si il faut scroll
			if (RequestedRoomMaps.count == 0)
				return;
			
			if (G_FirstDisplayedTrackIndex + G_IndexFocusX == RequestedRoomMaps.count - 1)
				return; //la dernière map de la tracklist est sélectionnée, on ne peut pas aller plus loin
			if (G_IndexFocusX < C_DisplayedTrackFramesCount - 2) //lastindex - 1
			{
				G_IndexFocusX += 1;
				UpdateSelection();
			} else {
				//si on peut, il faut scroll
				if(G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount - 1 < RequestedRoomMaps.count - 1)
				{
					//remplir la frameinstance cachée à droite
					declare CMlFrame Frame_TrackRight <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_DisplayedTrackFramesCount) % C_TrackFramesCount)) as CMlFrame);
					declare CMlQuad Quad_Thumbnail <=> (Frame_TrackRight.GetFirstChild("Track_Thumbnail") as CMlQuad);
					if (RequestedRoomMaps[C_DisplayedTrackFramesCount+G_FirstDisplayedTrackIndex].existskey("thumbnail_url"))
					{
						Quad_Thumbnail.ImageUrl = RequestedRoomMaps[G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount]["thumbnail_url"];
						Quad_Thumbnail.Image = Null;
					} else if (RequestedRoomMaps[G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount].existskey("mapinfo")) {
						declare MapInfoIndex = TL::ToInteger(RequestedRoomMaps[G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount]["mapinfo"]);
						if (MapInfoIndex < DataMgr.Maps.count && DataMgr.Maps[MapInfoIndex].MapUid == RequestedRoomMaps[C_DisplayedTrackFramesCount+G_FirstDisplayedTrackIndex]["uid"])
						{
							wait(DataMgr.Ready);
							DataMgr.LoadMapThumbnail(MapInfoIndex);
							wait(DataMgr.Ready);
							Quad_Thumbnail.Image = DataMgr.MapThumbnail;
							Quad_Thumbnail.ImageUrl = "";
						}	
					}
					declare CMlLabel Label_TrackName <=> (Frame_TrackRight.GetFirstChild("Track_Name") as CMlLabel);
					Label_TrackName.Value = RequestedRoomMaps[G_FirstDisplayedTrackIndex + C_DisplayedTrackFramesCount]["name"];
					Frame_TrackRight.Show();
					//bouger la frameinstance cachée à gauche à droite
					declare CMlFrame Frame_TrackLeft <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_TrackFramesCount-1) % C_TrackFramesCount)) as CMlFrame);
					Frame_TrackLeft.RelativePosition.X = C_LeftTrackFramePosX + C_TrackFramesCount * C_TrackFrameWidth;
					//scroll le tout
					G_FirstDisplayedTrackIndex += 1;
					G_FirstDisplayedTrackFrameIndex = (G_FirstDisplayedTrackFrameIndex+1) % C_TrackFramesCount;
					
					for (I, 0, C_TrackFramesCount - 1)
					{
						declare CMlFrame Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_TrackFramesCount-1+I) % C_TrackFramesCount)) as CMlFrame);
						declare Real NewFramePosX = C_LeftTrackFramePosX + I*C_TrackFrameWidth;
						declare Vec3 NewFramePos = <NewFramePosX, Frame_Track.RelativePosition.Y, Frame_Track.RelativePosition.Z>;
						LibManialink_SetTargetPosition(Frame_Track, NewFramePos);
						LibManialink_PresetAnim(Frame_Track, 200, "EaseOutQuint"); //EaseOutQuint
					}
					UpdateSelection();
				} else {
					G_IndexFocusX = G_IndexFocusX + 1;
					UpdateSelection();
				}
			}
		}
		
		Void TrackList_OnLeft()
		{
			declare Text[Text][] RequestedRoomMaps for Page;	
		
			declare CMlFrame Frame_Tracks <=> (Page.GetFirstChild("Frame_Tracks") as CMlFrame);
		
			if (RequestedRoomMaps.count == 0)
				return;
		
			// -> Check si il faut scroll
			if (G_FirstDisplayedTrackIndex + G_IndexFocusX == 0)
				return; //la première map de la tracklist est sélectionnée, on ne peut pas aller plus loin
			if (G_IndexFocusX > 1)
			{
				G_IndexFocusX -= 1;
				UpdateSelection();
			} else {
				//si on peut, il faut scroll
				if(G_FirstDisplayedTrackIndex > 0)
				{
					//remplir la frameinstance cachée à gauche
					declare CMlFrame Frame_TrackLeft <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_TrackFramesCount-1) % C_TrackFramesCount)) as CMlFrame);		
					declare CMlQuad Quad_Thumbnail <=> (Frame_TrackLeft.GetFirstChild("Track_Thumbnail") as CMlQuad);
					if (RequestedRoomMaps[G_FirstDisplayedTrackIndex-1].existskey("thumbnail_url"))
					{
						Quad_Thumbnail.ImageUrl = RequestedRoomMaps[G_FirstDisplayedTrackIndex-1]["thumbnail_url"];
						Quad_Thumbnail.Image = Null;
					} else if (RequestedRoomMaps[G_FirstDisplayedTrackIndex-1].existskey("mapinfo")) {
						declare MapInfoIndex = TL::ToInteger(RequestedRoomMaps[G_FirstDisplayedTrackIndex-1]["mapinfo"]);
						if (MapInfoIndex < DataMgr.Maps.count && DataMgr.Maps[MapInfoIndex].MapUid == RequestedRoomMaps[G_FirstDisplayedTrackIndex-1]["uid"])
						{
							wait(DataMgr.Ready);
							DataMgr.LoadMapThumbnail(MapInfoIndex);
							wait(DataMgr.Ready);
							Quad_Thumbnail.Image = DataMgr.MapThumbnail;
							Quad_Thumbnail.ImageUrl = "";
						}	
					}
					declare CMlLabel Label_TrackName <=> (Frame_TrackLeft.GetFirstChild("Track_Name") as CMlLabel);
					Label_TrackName.Value = RequestedRoomMaps[G_FirstDisplayedTrackIndex - 1]["name"];
					Frame_TrackLeft.Show();
					//bouger la frameinstance cachée à droite à gauche
					declare CMlFrame Frame_TrackRight <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_DisplayedTrackFramesCount) % C_TrackFramesCount)) as CMlFrame);
					Frame_TrackRight.RelativePosition.X = C_LeftTrackFramePosX - C_TrackFrameWidth;
					//scroll le tout
					G_FirstDisplayedTrackIndex -= 1;
					G_FirstDisplayedTrackFrameIndex = (G_FirstDisplayedTrackFrameIndex + C_TrackFramesCount - 1) % C_TrackFramesCount;
					for (I, 0, C_TrackFramesCount - 1)
					{
						declare CMlFrame Frame_Track <=> (Frame_Tracks.GetFirstChild("Frame_Track"^((G_FirstDisplayedTrackFrameIndex+C_TrackFramesCount-1+I) % C_TrackFramesCount)) as CMlFrame);
						declare Real NewFramePosX = C_LeftTrackFramePosX + I*C_TrackFrameWidth;
						declare Vec3 NewFramePos = <NewFramePosX, Frame_Track.RelativePosition.Y, Frame_Track.RelativePosition.Z>;
						LibManialink_SetTargetPosition(Frame_Track, NewFramePos);
						LibManialink_PresetAnim(Frame_Track, 200, "EaseOutQuint"); //EaseOutQuint
					}
					UpdateSelection();
				} else {
					G_IndexFocusX = G_IndexFocusX - 1;
					UpdateSelection();
				}
			}
		}
		
		/////////////////
		// CHALLENGE NAME
		/////////////////
		Void UpdateLabelChallengeName()
		{	
			declare Text ChallengeName;
			declare Text[Text] RequestedChallenge for Page;
			
			declare Text Author = G_MenuUserDisplayName;
			declare Text Style;
			declare Text Duration;
			
			if (RequestedChallenge.existskey("duration"))
			{
				declare Integer DurationId = TL::ToInteger(RequestedChallenge["duration"]);
				if (DurationId != 0)
					Duration = " - " ^ TL::GetTranslatedText(G_Settings[1][DurationId]);
			}
			if (RequestedChallenge.existskey("style"))
			{
				Style = " - "^TL::GetTranslatedText(RequestedChallenge["style"]);
			}
			declare CMlLabel LabelChallengeName <=> (Page.GetFirstChild("Label_ChallengeName") as CMlLabel);
			
			LabelChallengeName.Value = TL::Compose("%1%2%3", Author, Duration, Style);
		}
		
		/////////////////
		// SETTINGS
		/////////////////
		Void Settings_Update()
		{
			declare Text[Text] RequestedChallenge for Page;
			for (I, 0, G_SettingsFieldNames.count - 1)
			{
				declare CMlFrame Frame_Setting <=> (Page.GetFirstChild("Frame_Setting"^I) as CMlFrame);
				declare CMlLabel Label_Value <=> (Frame_Setting.GetFirstChild("Setting_Value") as CMlLabel);
				if (G_SettingsFieldNames[I] == "style")
					Label_Value.Value = TL::GetTranslatedText(RequestedChallenge[G_SettingsFieldNames[I]]);
				else if (G_SettingsFieldNames[I] == "stunts")
					if (G_IsStunts)
						Label_Value.Value = _("Yes");
					else
						Label_Value.Value = _("No");
				else
					Label_Value.Value = G_Settings[I][TL::ToInteger(RequestedChallenge[G_SettingsFieldNames[I]])];
			}
			UpdateLabelChallengeName();
		}
		
		Void SetDefaultData()
		{
			declare Text[Text] RequestedChallenge for Page;
			for (I, 0, G_SettingsFieldNames.count - 1)
				RequestedChallenge[G_SettingsFieldNames[I]] = G_DefaultSettings[I];
			Settings_Update();
		}
		
		Void Settings_Init()
		{	
			G_Settings.clear();
			G_Settings.add({{{dump(Gameplay::GetRoomStyles())}}});
			G_Settings.add({{{dump(Gameplay::GetDurations())}}});
			
			G_SettingsFieldNames = ["style", "duration", "stunts"];
			G_DefaultSettings = ["Various", "0" , "false"];
			G_IsStunts = False;
			
			declare SettingsDisplayNames = [_("Tracks style"), _("Duration"), "Stunt"];
			for (I, 0, G_SettingsFieldNames.count - 1)
			{
				declare CMlFrame Frame_Setting <=> (Page.GetFirstChild("Frame_Setting"^I) as CMlFrame);
				declare CMlLabel Label_Name <=> (Frame_Setting.GetFirstChild("Setting_Name") as CMlLabel);
				Label_Name.Value = SettingsDisplayNames[I];
			}
			SetDefaultData();
		}	
		
		Void Settings_OnPrev()
		{
			declare Text[Text] RequestedChallenge for Page;
			
			if (G_SettingsFieldNames[G_IndexFocusY] == "stunts") {
				G_IsStunts = !G_IsStunts;
				if (G_IsStunts)
					RequestedChallenge["stunts"] = "true";
				else
					RequestedChallenge["stunts"] = "false";
				Settings_Update();
				return;
			}
			
			declare Integer Value;
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
			{
				Value = G_Settings[G_IndexFocusY].keyof(RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]]);
			} else {
				Value = TL::ToInteger(RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]]);
			}
			Value -= 1;
			if (Value < 0)
				Value = G_Settings[G_IndexFocusY].count - 1;
				
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
			{
				RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]] = G_Settings[G_IndexFocusY][Value];
			} else {
				RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]] = TL::ToText(Value);
			}
			
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
				SetTracksColorForStyleOrDuration(True, RequestedChallenge["style"]);
			else if (G_SettingsFieldNames[G_IndexFocusY] == "duration")
				SetTracksColorForStyleOrDuration(False, RequestedChallenge["duration"]);
			
			Settings_Update();
		}
		
		Void Settings_OnNext()
		{
			declare Text[Text] RequestedChallenge for Page;
			
			if (G_SettingsFieldNames[G_IndexFocusY] == "stunts") {
				G_IsStunts = !G_IsStunts;
				if (G_IsStunts)
					RequestedChallenge["stunts"] = "true";
				else
					RequestedChallenge["stunts"] = "false";
				Settings_Update();
				return;
			}
			
			declare Integer Value;
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
			{
				Value = G_Settings[G_IndexFocusY].keyof(RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]]);
			} else {
				Value = TL::ToInteger(RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]]);
			}
			
			Value += 1;
			if (Value >= G_Settings[G_IndexFocusY].count)
				Value = 0;
			
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
			{
				RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]] = G_Settings[G_IndexFocusY][Value];
			} else {
				RequestedChallenge[G_SettingsFieldNames[G_IndexFocusY]] = TL::ToText(Value);
			}
			
			if (G_SettingsFieldNames[G_IndexFocusY] == "style")
				SetTracksColorForStyleOrDuration(True, RequestedChallenge["style"]);
			else if (G_SettingsFieldNames[G_IndexFocusY] == "duration")
				SetTracksColorForStyleOrDuration(False, RequestedChallenge["duration"]);
			
			Settings_Update();
		}
		
		/////////////////
		// INPUT INFOS
		/////////////////
		{{{LibUIButtons::Inject_SetInputInfoTextSelected()}}}
	
		Void ToggleInputInfo(Text _FrameName, Boolean _IsHovered) {
			declare CMlFrame FrameInput <=> (Page.GetFirstChild(_FrameName) as CMlFrame);
			declare CMlLabel LabelInputInfo <=> (FrameInput.GetFirstChild("Label_Name") as CMlLabel);
			SetInputInfoTextSelected(LabelInputInfo, _IsHovered);
		}
		
		Void ResetInputInfos() {
			ToggleInputInfo("Frame_InputInfo_Main_Select", False);
			ToggleInputInfo("Frame_InputInfo_Main_Cancel", False);
			ToggleInputInfo("Frame_InputInfo_Main_Action1", False);
		}
		
		Void UpdateInputsInfo() {
			declare Text State;
			if (G_IndexFocusY == {{{SelectArray_SettingsCount}}})
				State = "SaveAndQuit";
			else if (G_IndexFocusY == {{{SelectArray_SettingsCount+1}}})
				State = "Tracklist";
			else if (G_IndexFocusY == {{{SelectArray_SettingsCount+2}}})
				State = "Track";
			else
				State = "Setting";
			Main_UpdateInputInfos(State);
		}	
		
		/////////////////
		// INIT & SAVE
		/////////////////
		Void Init()
		{
			{{{InputInfos::InjectInInit()}}}
			Main_InitInputInfos("Tracklist");
			Settings_Init();
			
			G_FirstDisplayedTrackIndex 	= 0; 
			G_FirstDisplayedTrackFrameIndex = 1;
			G_MenuUserDisplayName = "";
			
			declare CMlQuad Quad_Selector <=> (Page.GetFirstChild("Quad_Selector") as CMlQuad);
			Quad_Selector.Colorize = {{{MenuColor::GetMenuColor(2)}}};
		}   
		
		Void Quit(Boolean _Saved)
		{
			declare Boolean IsNewChallenge for Page;	
			SendCustomEvent("GotoPrevious", [""]);
			if (IsNewChallenge && _Saved)
				SendCustomEvent("SetOngletFocusNewChallenge", Text[]);
			{{{_HideAnim}}}
			SendCustomEvent("DetachPage", ["ChallengeManager"]);	
		}
		
		Void SaveAndQuit()
		{
			declare Text[Text][]	RequestedRoomMaps for Page;
			if (RequestedRoomMaps.count == 0)
			{
				SendCustomEvent("PopUp_EmptyTracklist", Text[]);
			} else
				SendCustomEvent("SendChallengeData", [ChallengeDataToJson()]);
			//Quit(True);
		}		
		
		/////////////////
		// STATE
		/////////////////	
	
		Void Back()
		{
			Quit(False);
		}
		
		/////////////////
		// UPDATE DISPLAY
		/////////////////		
		Void UpdateDisplay()
		{
			UpdateSelection();
			Settings_Update();
		}
		
		Boolean Input_Select() {
			declare Text[Text][] RequestedRoomMaps for Page;
		
			if (G_IndexFocusY == {{{SelectArray_SettingsCount}}}) {
				if (RequestedRoomMaps.count == 0)
				{
					SendCustomEvent("PopUp_EmptyTracklist", Text[]);
					G_IndexFocusY = {{{SelectArray_SettingsCount+1}}};
					UpdateInputsInfo();
					UpdateSelection();
				} else {
					SaveAndQuit();
				}
			} else if (G_IndexFocusY > {{{SelectArray_SettingsCount}}}) {
				declare CMlLabel Label_ChallengeName <=> (Page.GetFirstChild("Label_ChallengeName") as CMlLabel);
				SendCustomEvent("SetMenuContext", ["RoomPlaylist", "ChallengeManager", Label_ChallengeName.Value, _("Challenge - Tracklist"), "<0.898, 0.848, 0.000>", "10"] );
				SendCustomEvent("GotoPage", ["RoomPlaylist"]);
				{{{_HideAnim}}}
				SendCustomEvent("DetachPage", ["ChallengeManager"]);
				return True;
			}
			return False;
		}
		
		Void Input_Action1() {
			declare Text[Text][] RequestedRoomMaps for Page;
			if(G_IndexFocusY == {{{SelectArray_SettingsCount+2}}})
			{
				declare Text[Text][] RequestedRoomMaps for Page;
				if (RequestedRoomMaps.count != 0)
				{
					RequestedRoomMaps.removekey(G_FirstDisplayedTrackIndex + G_IndexFocusX);
					if (RequestedRoomMaps.count == 0)
					{
						G_IndexFocusY -= 1;
						UpdateSelection();
					}
					TrackList_SetFromResult();
					UpdateInputsInfo();
				}
			}
		}
		
		Void UpdateHelpersForPlatform(Integer _Platform) {
			declare Text[] InputIds = ["Select", "Cancel", "Action1"];
	
			declare CMlQuad  QuadInputIcon;
			for (I, 0, 2) {
				for (J, 0, InputIds.count - 1) {
					declare CMlFrame FrameInput <=> (Page.GetFirstChild("Frame_InputInfo_Main_"^InputIds[J]) as CMlFrame);
					QuadInputIcon <=> (FrameInput.GetFirstChild("Quad_InputIcon_"^I) as CMlQuad);
					if (I == _Platform)
						QuadInputIcon.Show();
					else
						QuadInputIcon.Hide();
				}
			}
		}
		
		/////////////////
		// MAIN
		/////////////////
		main() {
			Init();
			
			declare CMlQuad  Quad_SettingsSelector <=> (Page.GetFirstChild("Quad_SettingsSelector") as CMlQuad);
			
			declare Boolean		 IsEditingTrackList = False;
			
			declare Text[Text]	 RequestedChallenge for Page;
			declare Text[Text][] RequestedRoomMaps for Page;
			
			declare Integer ActiveButtonPlatform = {{{Platform}}};
			
			declare Boolean IsNewChallenge for Page;
			
			G_IndexFocusX = 0; declare Prev_IndexFocusX = G_IndexFocusX;
			G_IndexFocusY = 0; declare Prev_IndexFocusY = G_IndexFocusY;
			
			declare RequestLogger = False;			
			
			
			while(True) {
				yield;
				if(! PageIsVisible) continue;
				LibManialink_AnimLoop();
				
				{{{Selector::InsertInLoop()}}}
				
				///////////////////////////////////
				//Blink de Quad_SettingsSelector (les lignes)
				///////////////////////////////////
				if (G_IndexFocusY <= {{{SelectArray_SettingsCount+1}}})
				{
					declare Real QuadSelectedSinVar  = ML::Sin(Now * 0.01) * 0.5 + 0.5;
					declare Real QuadSelectedOpacity = 0.0 + QuadSelectedSinVar * 1.;
					Quad_SettingsSelector.Opacity    = QuadSelectedOpacity;
				}
				
				if (Input.PendingEvents.count != 0) {
					declare Integer LastInputPlatform;
					switch (Input.PendingEvents[Input.PendingEvents.count-1].Pad.Type) {
						case CInputPad::EPadType::Keyboard 		: LastInputPlatform = {{{LibUIButtons::GetPlatform("PC")}}};
						case CInputPad::EPadType::PlayStation 	: LastInputPlatform = {{{LibUIButtons::GetPlatform("PS4")}}};
						case CInputPad::EPadType::XBox 			: LastInputPlatform = {{{LibUIButtons::GetPlatform("XB1")}}};
						default 								: LastInputPlatform = {{{LibUIButtons::GetPlatform("PC")}}};
					}
					if (LastInputPlatform != ActiveButtonPlatform)
						SendCustomEvent("SetActiveButtonPlaform", ["ChallengeManager", TL::ToText(LastInputPlatform)]);
				}
			
				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::MouseClick: {
							if (ActiveButtonPlatform !=  {{{LibUIButtons::GetPlatform("PC")}}})
								SendCustomEvent("SetActiveButtonPlaform", ["ChallengeManager", TL::ToText({{{LibUIButtons::GetPlatform("PC")}}})]);
							declare Text[] InputId = TL::Split("_", Event.ControlId);
							if (InputId.count < 2 || InputId[0] != "MouseInput")
								continue;
							switch (InputId[1]) {
								case "Setting" : {
									G_IndexFocusY = TL::ToInteger(InputId[2]);
									UpdateInputsInfo();
									UpdateSelection();
								}
								case "SaveAndQuit" : {
									G_IndexFocusY = {{{SelectArray_SettingsCount}}};
									UpdateInputsInfo();
									UpdateSelection();
									IsEditingTrackList = Input_Select();
								}
								case "EditTracklist" : {
									G_IndexFocusY = {{{SelectArray_SettingsCount+1}}};
									UpdateInputsInfo();
									UpdateSelection();
									IsEditingTrackList = Input_Select();
								}
								case "Track" : {
									declare Integer TrackFrameIndex = TL::ToInteger(InputId[2]);
									G_IndexFocusY = {{{SelectArray_SettingsCount+2}}};
									G_IndexFocusX = (TrackFrameIndex + C_TrackFramesCount - G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
									UpdateInputsInfo();
									UpdateSelection();
									IsEditingTrackList = Input_Select();
								}
								case "TrackPrev" : {
									TrackList_OnLeft();
								}
								
								/*
								G_FirstDisplayedTrackFrameIndex = (G_FirstDisplayedTrackFrameIndex + C_TrackFramesCount - 1) % 
						if (G_FirstDisplayedTrackIndex + G_IndexFocusX == 0)
									*/
								
								case "TrackNext" : {
									TrackList_OnRight();
								}
								case "SettingPrev" : Settings_OnPrev();
								case "SettingNext" : Settings_OnNext();
								case "MainInputInfo" : {
									switch (InputId[2]) {
										case "Select" : IsEditingTrackList = Input_Select();
										case "Cancel" : SendCustomEvent("RequestBack", [""]);
										case "AppMenu" : SendCustomEvent("RequestBack", [""]);
 										case "Action1" : Input_Action1();
									}
								}
							}
						}
						case CMlEvent::Type::MouseOver: {
							declare Text[] InputId = TL::Split("_", Event.ControlId);
							if (InputId.count < 2 || InputId[0] != "MouseInput")
								continue;
							switch (InputId[1]) {
								case "Setting" : {
									G_IndexFocusY = TL::ToInteger(InputId[2]);
									UpdateInputsInfo();
									UpdateSelection();
								}
								case "SaveAndQuit" : {
									G_IndexFocusY = {{{SelectArray_SettingsCount}}};
									UpdateInputsInfo();
									UpdateSelection();
								}
								case "EditTracklist" : {
									G_IndexFocusY = {{{SelectArray_SettingsCount+1}}};
									UpdateInputsInfo();
									UpdateSelection();
								}
								case "Track" : {
									declare Integer TrackFrameIndex = TL::ToInteger(InputId[2]);
									G_IndexFocusY = {{{SelectArray_SettingsCount+2}}};
									G_IndexFocusX = (TrackFrameIndex + C_TrackFramesCount - G_FirstDisplayedTrackFrameIndex) % C_TrackFramesCount;
									UpdateInputsInfo();
									UpdateSelection();
								}
								case "MainInputInfo" : ToggleInputInfo("Frame_InputInfo_Main_"^InputId[2], True);
							}
						}
						case CMlEvent::Type::MouseOut: {
							declare Text[] InputId = TL::Split("_", Event.ControlId);
							if (InputId.count < 2 || InputId[0] != "MouseInput")
								continue;
							switch (InputId[1]) {
								case "MainInputInfo" : ToggleInputInfo("Frame_InputInfo_Main_"^InputId[2], False);
							}
						}
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.PluginCustomEventType) {
								case "Show" : {
									ResetInputInfos();
									{{{_ShowAnim}}}
									EnableMenuNavigation(True,False,Null,2);
									if (IsEditingTrackList)
									{
										if (RequestedRoomMaps.count != 0)
										{
											G_IndexFocusY = {{{SelectArray_SettingsCount}}};
											
											declare Text[] MapsUids;
											for (I, 0, RequestedRoomMaps.count-1)
												MapsUids.add(RequestedRoomMaps[I]["uid"]);
											SendCustomEvent("RequestMapsThumbnails", [TL::Join(";", MapsUids)]);
										}
										IsEditingTrackList = False;
									} else {
										RequestedRoomMaps.clear();
										G_IndexFocusY = {{{SelectArray_SettingsCount+1}}};
										TrackList_SetFromResult();
										declare CMlLabel Label_Title <=> (Page.GetFirstChild("Label_Title") as CMlLabel);
										Label_Title.Value = _("Challenge - Settings");
										Settings_Init();
										G_MenuUserDisplayName = "";
									}
									UpdateInputsInfo();
									UpdateDisplay();
									RequestLogger = False;SendCustomEvent("GetActiveButtonPlatform", ["ChallengeManager"]);
								}
								case "SetActiveButtonPlatform" : {
									ActiveButtonPlatform = TL::ToInteger(Event.CustomEventData[0]);
									UpdateHelpersForPlatform(ActiveButtonPlatform);
								}
								case "Hide" : {
									{{{_HideAnim}}}
									EnableMenuNavigation(True,False,Null,0);
									SendCustomEvent("DetachPage", ["ChallengeManager"]);
								}
								case "TrackListSent" : { //from the tracklist manager
									TrackList_SetFromResult();
									declare Text Style = Event.CustomEventData[0];
									declare Text Duration = Event.CustomEventData[1];
									if (Style != "")
										RequestedChallenge["style"] = Style;
									if (Duration != "" && TL::ToInteger(Duration) != -1)
										RequestedChallenge["duration"] = Duration;
									Settings_Update();
								}
								case "CannotCreateChallenges" : {
									//SendCustomEvent("PopUp_CannotCreateRooms", Text[]);
									//SendCustomEvent("GotoPrevious", [""]);
									//{{{_HideAnim}}}
									//SendCustomEvent("DetachPage", ["ChallengeManager"]);	
								}
								case "Quit" : {
									if (Event.CustomEventData.count < 1)
										continue;
									if (Event.CustomEventData[0] == "True")
									{
										SaveAndQuit();
									} else {
										Quit(False);
									}
								}
								case "ChallengeNotSentToServer" : {
									//rien à faire pour l'instant
								}
								case "MenuUserDisplayName" : {
									G_MenuUserDisplayName = Event.CustomEventData[0];
									UpdateLabelChallengeName();
								}
								case "Request_CreateChallenge_Success" : {
									Quit(True);
								}
								case "NewChallenge" : {
									SetDefaultData();
									SendCustomEvent("RequestMenuUserDisplayName", Text[]);
								}
								case "Request_GetMapsThumbnails_Success" : TrackList_SetFromResult();
							}
						}
						
						//INPUTS
						case CMlEvent::Type::MenuNavigation: {
							if(G_LockInput + 50 > Now) continue;
							G_LockInput = Now; // sécurité pour éviter le double input
							switch(Event.MenuNavAction) {
								case CMlEvent::EMenuNavAction::Up : {
									if (G_IndexFocusY > 0)
									{
										G_IndexFocusY = G_IndexFocusY - 1;
									} else if (RequestedRoomMaps.count != 0) {
										G_IndexFocusY = {{{SelectArray_SettingsCount + 2}}};
									} else {
										G_IndexFocusY = {{{SelectArray_SettingsCount + 1}}};
									}
									UpdateInputsInfo();
									UpdateSelection();
								}
								case CMlEvent::EMenuNavAction::Down : {
									if (G_IndexFocusY < {{{SelectArray_SettingsCount+1}}})
									{
										G_IndexFocusY = G_IndexFocusY + 1;
									} else if (G_IndexFocusY == {{{SelectArray_SettingsCount+1}}} && RequestedRoomMaps.count != 0) {
										G_IndexFocusY = G_IndexFocusY + 1;
									} else {
										G_IndexFocusY = 0;
									}
									UpdateInputsInfo();
									UpdateSelection();
								}
								case CMlEvent::EMenuNavAction::Left : {
									if (G_IndexFocusY == {{{SelectArray_SettingsCount+2}}})
									{
										TrackList_OnLeft(); //le défilement est géré là dedans
									} else if (G_IndexFocusY < {{{SelectArray_SettingsCount}}}) {
										Settings_OnPrev();
									}
								}
								case CMlEvent::EMenuNavAction::Right : {
									if (G_IndexFocusY == {{{SelectArray_SettingsCount+2}}})
									{
										TrackList_OnRight(); //le défilement est géré là dedans
									} else if (G_IndexFocusY < {{{SelectArray_SettingsCount}}}) {
										Settings_OnNext();
									}
								}
								case CMlEvent::EMenuNavAction::Select : IsEditingTrackList = Input_Select();
								case CMlEvent::EMenuNavAction::Cancel : SendCustomEvent("RequestBack", [""]);
								case CMlEvent::EMenuNavAction::AppMenu : SendCustomEvent("RequestBack", [""]);
								case CMlEvent::EMenuNavAction::Action1 : Input_Action1();
							}
						}
					}
				}
			}
		}
	--></script>
	""";
	
	return MLText;
}
