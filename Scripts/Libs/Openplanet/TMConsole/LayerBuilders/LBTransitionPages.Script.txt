
#Include "Libs/Openplanet/TMConsole/PanelParameter.Script.txt"	as PanelParameter
#Include "Libs/Openplanet/Manialink2.Script.txt"					as Manialink
#Include "Libs/Openplanet/TMConsole/MenuColor.Script.txt"		as MenuColor

#Const C_ImgBase 	"file://Media/Manialinks/Nadeo/TMConsole/Images/"
#Const C_VideoBase 	"file://Media/Manialinks/Nadeo/TMConsole/Video/"
 
Text Build(Text _ShowAnim, Text _HideAnim) {
	
	declare Text 	VideoMain2Bill       = C_VideoBase ^ "tmce_menu_transition_Main2Bill.webm";
	declare Text 	VideoBill2Main       = C_VideoBase ^ "tmce_menu_transition_Bill2Main.webm";
	declare Text 	VideoBill2TracksA    = C_VideoBase ^ "tmce_menu_transition_bill2tracks_A.webm"; //old ToDelete
	declare Text 	VideoBill2TracksB    = C_VideoBase ^ "tmce_menu_transition_bill2tracks_B.webm"; //old ToDelete
	declare Text 	VideoHelico          = C_VideoBase ^ "tmce_menu_transition_helico.webm";
	declare Text 	VideoBillCanyon      = C_VideoBase ^ "TransitionBillboard/BillEnviro_Canyon.webm";
	declare Text 	VideoBillValley      = C_VideoBase ^ "TransitionBillboard/BillEnviro_Valley.webm";
	declare Text 	VideoBillLagoon      = C_VideoBase ^ "TransitionBillboard/BillEnviro_Lagoon.webm";
	declare Text 	VideoBillStadium     = C_VideoBase ^ "TransitionBillboard/BillEnviro_Stadium.webm";
	declare Text 	VideoBillHotSeat     = C_VideoBase ^ "TransitionBillboard/MultiLocal_Hotseat.webm";
	declare Text 	VideoBillArcade      = C_VideoBase ^ "TransitionBillboard/MultiLocal_Arcade.webm";
	declare Text 	VideoBillSplitScreen = C_VideoBase ^ "TransitionBillboard/MultiLocal_Split.webm";
	
	declare Real	SizeX_Total      = PanelParameter::GetSizePanelX();
	declare Real	SizeY_Total      = PanelParameter::GetSizePanelY();
	declare Real	SizeX_Screen     = PanelParameter::GetSizePanelX();
	declare Real	SizeY_Screen     = PanelParameter::GetOneScreenSizeY();
	declare Text	ImgFadeBlack     = C_ImgBase^"rewards_1-02_low.dds";

	declare Text MLText = """
	
	<frame id="Frame_AllTransition" posn="0 0 40" hidden="0">
		<quad id="VideoMain2Bill" halign="center" valign="center" hidden="1"
		 sizen="320 180" scale="1.3" image="" posn="0 18 2" />
		<quad id="VideoBill2Main" halign="center" valign="center" hidden="1"
		 sizen="320 180" scale="1.3" image="" posn="0 27 0" />
		
		<quad id="VideoHelico" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBill2TracksB" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Total}}} {{{SizeY_Total}}}"      scale="1." image="" posn="0 3 0" />
		<quad id="VideoBill2TracksA" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillCanyon" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillValley" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillLagoon" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillStadium" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillHotSeat" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillArcade" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		<quad id="VideoBillSplitScreen" halign="center" valign="center" hidden="1"
		 sizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" scale="1." image="" posn="0 3 0" />
		
		<frame id="Clip_Buttons" posn="0. 0. 0." clip="True" clipsizen="{{{SizeX_Screen}}} {{{SizeY_Screen*6.}}}" clipposn="0 3">
			<quad id="Quad_BillBoardTransition" halign="left" valign="center" hidden="0" sizen="1500 160" bgcolor="090" image="{{{ImgFadeBlack}}}" posn="160 0 1" keepratio="Fit"/>
		</frame>
		<quad id="Quad_BigBillBoardTransition" halign="left" valign="center" hidden="0" sizen="1500 180" bgcolor="090" image="{{{ImgFadeBlack}}}" posn="180 0 1" keepratio="Fit"/>
	</frame>

	<script><!--
		#Const DebugName  "L_TransitionPages"
		{{{Manialink::GetIncludes()}}}

		{{{Manialink::Load()}}}

		declare CVideo[Text]	G_Videos;
		declare CMlQuad[Text]	G_VideoQuads;
				
		Void Load(Text _Name, Text _Path) {
			declare V = Video.CreateVideo(_Path, False, True);
			declare Q = (Page.GetFirstChild(_Name) as CMlQuad);
			Q.Image = V.Image;
			Q.Hide();
			
			G_Videos[_Name] 			= V;
			G_VideoQuads[_Name]			= Q;
		}
		Void LoadAll() {
			Load("VideoMain2Bill",		 "{{{VideoMain2Bill}}}");
			Load("VideoBill2Main",		 "{{{VideoBill2Main}}}");
			Load("VideoBill2TracksA",	 "{{{VideoBill2TracksA}}}");
			Load("VideoBill2TracksB",	 "{{{VideoBill2TracksB}}}");
			Load("VideoBillCanyon",		 "{{{VideoBillCanyon}}}");
			Load("VideoBillValley",		 "{{{VideoBillValley}}}");
			Load("VideoBillLagoon",		 "{{{VideoBillLagoon}}}");
			Load("VideoBillStadium",	 "{{{VideoBillStadium}}}");
			Load("VideoBillHotSeat",     "{{{VideoBillHotSeat}}}");
			Load("VideoBillArcade",      "{{{VideoBillArcade}}}");
			Load("VideoBillSplitScreen", "{{{VideoBillSplitScreen}}}");
			PreloadImage("{{{ImgFadeBlack}}}");
			//Load("VideoHelico",			"{{{VideoHelico}}}");
		}
		
		Void AllocResource() {
			foreach (V in G_Videos) {
				V.Stop();	//(pour etre tranquille, normalement inutile.)
				V.BeginProcessing();
			}
		}

		Void ReleaseResource() {
			foreach (V in G_Videos)
				V.EndProcessing();
		}
		
		Text GetQuad(Text _Name)
		{
			switch(_Name)
			{
				case "BillBoardTransition"   : return "Quad_BillBoardTransition";
				case "BigBillBoardTransition": return "Quad_BigBillBoardTransition";
			}

			return "";
		}

		Void LaunchAnimation(Text _Name) {
		    declare CMlQuad Quad_Transition <=> (Page.GetFirstChild(GetQuad(_Name)) as CMlQuad);
		    declare Real QuadSizeY = Quad_Transition.Size.Y;
		    //QuadSizeY = 160.;
		    Quad_Transition.RelativePosition.X = QuadSizeY;
			declare Real NewQuadPosX = -QuadSizeY*6.;
			declare Vec3 NewQuadPos  = <NewQuadPosX, Quad_Transition.RelativePosition.Y, Quad_Transition.RelativePosition.Z>;

			LibManialink_SetTargetPosition(Quad_Transition, NewQuadPos);
			LibManialink_PresetAnim(Quad_Transition, 520, "EaseLinear");
		}

		Vec3 GetMenuColor(Text _IndexMenu) {
			switch(_IndexMenu)
			{
				case "TMC_Menu_Online":            return {{{MenuColor::GetMenuColor(0)}}};
				case "TMC_Menu_Multiplayer":       return {{{MenuColor::GetMenuColor(1)}}};
				case "TMC_Menu_Campaign":          return {{{MenuColor::GetMenuColor(2)}}};
				case "TMC_Menu_Trackbuilder":      return {{{MenuColor::GetMenuColor(3)}}};
				case "TMC_Menu_Garage":            return {{{MenuColor::GetMenuColor(4)}}};
			}
			return {{{MenuColor::GetMenuColor(2)}}};
		}

		main() {
			LoadAll();
			
			declare IsMenuActive for ParentApp = False;
			declare ResourceAllocated = False;
			declare Text[]	TransitionsInProgress;
			while(True) {
				yield;
				
				LibManialink_AnimLoop();
				
				if (ResourceAllocated && !(PageIsVisible && IsMenuActive)) {
					ReleaseResource();
					ResourceAllocated = False;
				}
				
				if (!PageIsVisible) continue;
				
				if (!ResourceAllocated && IsMenuActive) {
					AllocResource();
					ResourceAllocated = True;
				}

				if (TransitionsInProgress.count > 0) {
					declare Text[]	FinishedTransitions;
					
					foreach(Name in TransitionsInProgress) {
						if (!G_Videos[Name].IsPlaying) {
							FinishedTransitions.add(Name);
						}
					}
					foreach(Name in FinishedTransitions) {
						TransitionsInProgress.remove(Name);
						G_Videos[Name].Stop();	// rewind & get ready pour la prochaine fois!
						G_VideoQuads[Name].Hide();
					}
					FinishedTransitions.clear();
				}

				foreach(Event in PendingEvents) {
					switch(Event.Type) {
						case CMlEvent::Type::PluginCustomEvent: {
							switch(Event.PluginCustomEventType) {
								case "Show" : {
								}
								case "Hide" : {
								}
								case "StarTransition" : {
									declare Name = Event.CustomEventData[0];
									if(Name == "VideoBillCanyon" || Name == "VideoBillValley" || Name == "VideoBillLagoon" || Name == "VideoBillStadium")
									{
										declare Mode = Event.CustomEventData[1];
										declare Color = GetMenuColor(Mode);
		    							declare CMlQuad Quad_Transition <=> (Page.GetFirstChild(Name) as CMlQuad);
		    							Quad_Transition.Colorize = Color;
									}

									//HACK - Block les anims voitures
									if(Name == "VideoMain2Bill" || Name == "VideoBill2Main") continue;
									//HACKEND
									if(Name == "BillBoardTransition" || Name ==  "BigBillBoardTransition"){
										LaunchAnimation(Name);
										continue;
									}
									TransitionsInProgress.add(Name);
									G_Videos[Name].Play();
									G_VideoQuads[Name].Show();
								}
							}
						}
					}
				}
			}
		}
	--></script>
	""";
	
	return MLText;
}