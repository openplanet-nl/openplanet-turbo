//////////////////////////////////////////
//   Utils                                
//////////////////////////////////////////

#Const Version			"2013-11-06"
#Const ScriptName		"XmlSkillTree.Script.txt"
#Const C_XmlPathRoot	"file://Media/Manialinks/Nadeo/TMConsole/XML/"
#Const C_ReqTimeout		5000

#Const C_BASE 		0
#Const C_CREST		1
#Const C_PEAK		2
#Const C_STENCIL	3
#Const C_SCREWS 	4


declare CXmlDocument	G_XmlStruct;

declare Text[] G_PicturesBase;
declare Text[] G_PicturesCrest;
declare Text[] G_PicturesPeak;
declare Text[] G_PicturesStencil;
declare Text[] G_PicturesScrews;


/* ------------------------------------------- */
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

/* ------------------------------------------ */
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}




// ////////////////////////////////////////////////
// PRIVATE FUNCTIONS
// ////////////////////////////////////////////////

// ---------------------------------- //
/** Load an external xml file
 *
 *	@param	_Path		Path to the file
 *
 *	@return				The xml if found, enmpty string otherwise
 */
 
Text Private_LoadXml(Text _Path) {
	declare XmlFile = "";
	
	// @Debug
	//return XmlTmp::Get(_Path);
	
	declare Req <=> Http.CreateGet(_Path);
	declare ReqEndTime = Now + C_ReqTimeout;
	declare Success = False;
	
	while (Now < ReqEndTime) 
	{
		if (Req.IsCompleted) 
		{
			XmlFile = Req.Result;
			Success = True;
			break;
		}
	}
	if (!Success) log(Now^"> "^ScriptName^" > Private_LoadXml() > Failed to load: "^_Path);
	Http.Destroy(Req);
	
	return XmlFile;
}

Text CreateKeyStat(Text _SkillId, Text _StatName) 
{

	declare Text Key = _SkillId^_StatName;
	
	return Key;
}




Void Private_LoadBase(CXmlNode _SkillsRoot) 
{
	declare Text File = _SkillsRoot.GetAttributeText("file", "");
	if(File != "") 
	{
		G_PicturesBase.add(File);
	}	
}

Void Private_LoadCrest(CXmlNode _SkillsRoot) 
{
	declare Text File = _SkillsRoot.GetAttributeText("file", "");
	if(File != "") 
	{
		G_PicturesCrest.add(File);
	}	
}

Void Private_LoadPeak(CXmlNode _SkillsRoot) 
{
	declare Text File = _SkillsRoot.GetAttributeText("file", "");
	if(File != "") 
	{
		G_PicturesPeak.add(File);
	}	
}

Void Private_LoadStencil(CXmlNode _SkillsRoot) 
{
	declare Text File = _SkillsRoot.GetAttributeText("file", "");
	if(File != "") 
	{
		G_PicturesStencil.add(File);
	}	
}

Void Private_LoadScrews(CXmlNode _SkillsRoot) 
{
	declare Text File = _SkillsRoot.GetAttributeText("file", "");
	if(File != "") 
	{
		G_PicturesScrews.add(File);
	}	
}




///////////////////////////////////////////
// PUBLIC FUNCTIONS                        
///////////////////////////////////////////

Void Unload() {
	
	G_PicturesBase		.clear();
	G_PicturesCrest		.clear();
	G_PicturesPeak		.clear();
	G_PicturesStencil	.clear();
	G_PicturesScrews	.clear();
	
	Xml.Destroy(G_XmlStruct);
}

Void Load(Text _SkillTreeName) {

	Unload();

	declare XmlWorld 	= C_XmlPathRoot^_SkillTreeName;
	declare FileText	= Private_LoadXml(XmlWorld);
	declare XmlStruct	= Xml.Create(FileText);
	
	if (XmlStruct != Null) {
		
		foreach(Node in XmlStruct.Root.Children) 
		{
			switch(Node.Name)
			{
				case "Base" 	: Private_LoadBase		(Node);
				case "Crest" 	: Private_LoadCrest		(Node);
				case "Peak" 	: Private_LoadPeak		(Node);
				case "Stencil" 	: Private_LoadStencil	(Node);
				case "Screws" 	: Private_LoadScrews	(Node);
			}
		}
	}
	
	G_XmlStruct = XmlStruct;
}


Text[] GetBasePictures() {
	return G_PicturesBase;
}

Text[] GetCrestPictures() {
	return G_PicturesCrest;
}

Text[] GetPeakPictures() {
	return G_PicturesPeak;
}

Text[] GetStencilPictures() {
	return G_PicturesStencil;
}

Text[] GetScrewsPictures() {
	return G_PicturesScrews;
}
