/** 
 * Tuto UI
 */

#Const Version		"2016-03-15"
#Const ScriptName	"Tuto.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Openplanet/Buttons.Script.txt" as Buttons
#Include "Libs/Openplanet/Manialink3.Script.txt" as Manialink
#Include "Libs/Openplanet/UIPadButtons.Script.txt" as Buttons2
#Include "Libs/Openplanet/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Openplanet/TMConsole/MapEditor/Macroblock.Script.txt" as Macroblock
#Include "Libs/Openplanet/TMConsole/MapEditor/ThemePack.Script.txt" as ThemePack
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Colors.Script.txt" as Colors
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Tuto_StopEngine	0
#Const C_Tuto_Finish		1
#Const C_Tuto_Checkpoint	2
#Const C_Tuto_Multilaps		3
#Const C_Tuto_Test			4
#Const C_Tuto_CameraMove_Mouse	5
#Const C_Tuto_CameraMove_Pad	6
#Const C_Tuto_MoveBlock		7
#Const C_Tuto_MoveBlock_Mouse 8
#Const C_Tuto_RotateBlock_Mouse 9
#Const C_Tuto_PlaceBlock_Mouse 10
#Const C_Tuto_Rosaces		11
#Const C_Tuto_ChangeMode	12
#Const C_Tuto_Edit			13
#Const C_Tuto_Skin			14
#Const C_Tuto_Switch		15
#Const C_Tuto_CameraZoom	16
#Const C_Tuto_CutPaste		17
#Const C_Tuto_Turbo			18
#Const C_Tuto_Landscape		19
#Const C_Tuto_Decoration	20
#Const C_Tuto_EditTerrain	21
#Const C_Tuto_ConnectMode	22
/// Devices
#Const C_Device_Keyboard	0
#Const C_Device_Gamepad		1

#Const C_Tmp03 _("While holding the left mouse button, move the mouse up and down to raise and lower the block or left and right to rotate it.")

// ---------------------------------- //
// Globales
// ---------------------------------- //
declare Integer[] G_TutosVisibilities;
declare Integer G_TutoEnabled;
declare Integer[Integer] G_TriggerCount;
declare CMlPage G_Page;

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Get the tuto manialink
 *
 *	@return							The manialink
 */
Text Private_GetTutoML() {
	declare TutoText = [
		C_Tuto_MoveBlock => [
			//L16N [MapEditor] Tutorial explaining how to move the selected block
			C_Device_Keyboard => _("Use the arrow keys to move the cursor."),
			//L16N [MapEditor] Tutorial explaining how to move the selected block, %1 will be replaced by the name of the button
			C_Device_Gamepad => TL::Compose(_("Use %1 to move the cursor."), Buttons2::GetDirectionalButtonsName())
		],
		C_Tuto_ChangeMode => [
			//L16N [MapEditor] Tutorial explaining how to switch between the different building mode
			C_Device_Keyboard => _("Use the shift key to switch between the different building modes."),
			//L16N [MapEditor] Tutorial explaining how to switch between the different building mode, %1 will be replaced by the name of the button
			C_Device_Gamepad => TL::Compose(_("Press on %1 to switch between the different building modes."), Buttons2::GetChangeEditorModeName())
		],
		C_Tuto_ConnectMode => [
			//L16N [MapEditor] Tutorial explaining how to switch between the connection modes
			C_Device_Keyboard => _("Use the shift key to switch between connected and disconnected modes. In connected mode the cursor is always attached to the track. In disconnected mode you can move the cursor freely."),
			//L16N [MapEditor] Tutorial explaining how to switch between the connection modes, %1 will be replaced by the name of the button
			C_Device_Gamepad => TL::Compose(_("Press on %1 to switch between connected and disconnected modes. In connected mode the cursor is always attached to the track. In disconnected mode you can move the cursor freely."), Buttons2::GetChangeEditorModeName())
		],
		C_Tuto_Skin => [
			//L16N [MapEditor] Tutorial explaining how to select a skin
			C_Device_Keyboard => _("This block has a customizable skin. Use the mouse to select the picture you want to use."),
			//L16N [MapEditor] Tutorial explaining how to select a skin, %1 will be replaced by the name of the button
			C_Device_Gamepad => TL::Compose(_("This block has a customizable skin. Use %1 to select the picture you want to use."), Buttons2::GetLeftStickName())
		],
		C_Tuto_Rosaces => [
			//L16N [MapEditor] Tutorial explaining how to select a block
			C_Device_Keyboard => _("Right-click to open the block selection screen. Left-click to first choose the category and then the block you want to place."),
			//L16N [MapEditor] Tutorial explaining how to select a block, %1 and %2 will be replaced by the name of the buttons
			C_Device_Gamepad => TL::Compose(_("Use %1 to open the block selection screen and to select a category. Then use %2 to choose the block you want to place."), Buttons2::GetLeftStickName(), Buttons2::GetRightStickName())
		]
	];
	
	declare Page <=> Layers::Get("Tuto").LocalPage;
	declare L_CheckpointId for Page = NullId;
	declare L_StopEngineId for Page = NullId;
	declare L_FinishId for Page = NullId;
	declare L_MultilapsId for Page = NullId;
	L_CheckpointId = NullId;
	L_StopEngineId = NullId;
	L_FinishId = NullId;
	L_MultilapsId = NullId;
	foreach (MacroblockModel in MacroblockModels) {
		if (!ThemePack::IsAvailable(MacroblockModel)) continue;
		if (L_CheckpointId == NullId && MacroblockModel.HasCheckpoint) {
			L_CheckpointId = MacroblockModel.Id;
		}
		if (L_StopEngineId == NullId && TL::Find("StopEngine", Macroblock::GetName(MacroblockModel), False, False)) {
			L_StopEngineId = MacroblockModel.Id;
		}
		if (L_FinishId == NullId && MacroblockModel.HasFinish) {
			L_FinishId = MacroblockModel.Id;
		}
		if (L_MultilapsId == NullId && MacroblockModel.HasMultilap) {
			L_MultilapsId = MacroblockModel.Id;
		}
		if (L_CheckpointId != NullId && L_StopEngineId != NullId && L_FinishId != NullId && L_MultilapsId != NullId) break;
	}
	
	declare SwitchButton = Buttons::Editor_SelectConnector();
	declare TestButton = Buttons::Editor_OpenTest();
	declare PasteButton = Buttons::Editor_PasteBlock();
	declare DiscardButton = Buttons::Editor_DiscardBlock();
	declare PrevLandscapeButton = Buttons::Editor_PrevCategory();
	declare NextLandscapeButton = Buttons::Editor_NextCategory();
	declare ValidLandscapeButton = Buttons::Editor_Valid();
	declare GenerateDecoButton = Buttons::Editor_DecoGenerate();
	declare LessButton = Buttons::Editor_LessDeco();
	declare MoreButton = Buttons::Editor_MoreDeco();
	declare ConnectButton = Buttons::Editor_AutoConnect();
	declare CopyButton = Buttons::Editor_CopyBlock();
	declare SkinButton = Buttons::Editor_BrowseSkins();
	declare AddButton = Buttons::Editor_AddTerrain();
	declare RemoveButton = Buttons::Editor_RemoveTerrain();
	declare MoveButton = Buttons::Editor_MoveBlock();
	declare SwitchModeButton = Buttons::Editor_BuildMode();
	declare DisconnectButton = Buttons::Editor_Disconnect();
	
	declare CameraRotatePad = Buttons::Editor_CameraMove();
	declare CameraZoomPad = Buttons::Editor_CameraZoom();
	declare CameraRotateMouse = Buttons::GetImage(Buttons::Editor_CameraMove(), Buttons::System_PC());
	declare CameraZoomMouse = Buttons::GetImage(Buttons::Editor_CameraZoom(), Buttons::System_PC());
	
	declare LeftStick = Buttons::GetLeftStickImage();
	declare RightStick = Buttons::GetRightStickImage();
	declare LeftClick = "file://Media/Manialinks/Common/PadButtons/PC/LeftClick.dds";
	declare RightClick = "file://Media/Manialinks/Common/PadButtons/PC/RightClick.dds";
	
	declare TutoSizeX = 25.;
	declare TutoSizeY = 5.;
	declare TitleSizeY = 1.;
	declare TextSizeY = 3.;
	declare MacroblockSize = 3.;
	declare ButtonSize = 0.9;
	declare OptionSize = 8.;
	declare TextMaxLine = "4";
	declare TextLineSpacing = "0.9";
	
	return """
<manialink version="3" name="MapEditor:Tuto">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<framemodel id="Framemodel_Tuto">
	{{{Styles::BuildBackground(<0., 0., 0.>, <TutoSizeX, TutoSizeY>, Styles::CircleSize_Bottom(), Styles::Align_CenterTop())}}}
	{{{Styles::BuildLine(<0., 0., 1.>, <TutoSizeX, TitleSizeY>, Styles::CircleSize_Bottom(), Styles::Align_CenterTop(), Colors::Color_Purple(), True, True, Text[Text])}}}
	{{{Styles::BuildQuad(<0., -1., 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_CenterTop(), ["bgcolor" => Colors::GetColorML(Colors::Color_SoftBlack())])}}}
</framemodel>
<frame z-index="1" id="Frame_Global">
	<frame id="Frame_Tutos">
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Checkpoint}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Checkpoint block
					"class" => "turbo2-text-title", "text" => _("|BlockInfo|Checkpoint")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX-MacroblockSize-2., TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial about checkpoints
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Place checkpoints to avoid shortcuts and make it easier for other players to respawn on your track.")
				])}}}
				{{{Styles::BuildQuad(<TutoSizeX*0.5-1., -1.-(TextSizeY*0.5), 1.>, <MacroblockSize, MacroblockSize>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter(), ["id" => "Quad_Checkpoint", "keepratio" => "fit"])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Finish}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Finish line block
					"class" => "turbo2-text-title", "text" => _("|BlockInfo|Finish")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX-MacroblockSize-2., TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial about the finish line
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Place a finish block to end your track.")
				])}}}
				{{{Styles::BuildQuad(<TutoSizeX*0.5-1., -1.-(TextSizeY*0.5), 1.>, <MacroblockSize, MacroblockSize>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter(), ["id" => "Quad_Finish", "keepratio" => "fit"])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Multilaps}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Starting line block for race with several laps
					"class" => "turbo2-text-title", "text" => _("|BlockInfo|Multilaps")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX-MacroblockSize-2., TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial about race with several laps.
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("This is a multilaps start block. Players must cross all checkpoints and pass through this block to validate one lap.")
				])}}}
				{{{Styles::BuildQuad(<TutoSizeX*0.5-1., -1.-(TextSizeY*0.5), 1.>, <MacroblockSize, MacroblockSize>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter(), ["id" => "Quad_Multilaps", "keepratio" => "fit"])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_StopEngine}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial about engine disabler blocks
					"class" => "turbo2-text-title", "text" => _("Engine disabled")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX-MacroblockSize-2., TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial about engine disabler blocks
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Take care! This block disable your engine until you cross a new checkpoint.")
				])}}}
				{{{Styles::BuildQuad(<TutoSizeX*0.5-1., -1.-(TextSizeY*0.5), 1.>, <MacroblockSize, MacroblockSize>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter(), ["id" => "Quad_StopEngine", "keepratio" => "fit"])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Switch}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial about the blocks connectors and how to switch between them
					"class" => "turbo2-text-title", "text" => _("Connector selection")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial about the blocks connectors and how to switch between them
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Some blocks offer several connections possibilities. They are represented by white boxes. Press the \"switch\" button to choose the one you want to use.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(SwitchButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: switching between several available block connectors.
					"text" => _("Switch"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Test}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to test a track
					"class" => "turbo2-text-title", "text" => _("Test the track")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to test a track
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("You can test your track at any time. Press the \"test\" button to choose where to start.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(TestButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: launching a test race on the track.
					"text" => _("Test"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_MoveBlock}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to move the selected block
					"class" => "turbo2-text-title", "text" => _("Move the cursor")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to move the selected block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "id" => "Label_Tuto_"^C_Tuto_MoveBlock, "text" => TutoText[C_Tuto_MoveBlock][C_Device_Gamepad]
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(MoveButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: moving the currently selected block.
					"text" => _("Move"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_MoveBlock_Mouse}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to move the selected block
					"class" => "turbo2-text-title", "text" => _("Move the cursor")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to move the selected block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Left-click on the ground to move your cursor there.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => Buttons::GetImage(Buttons::Editor_MoveBlock_Mouse(), Buttons::System_PC())])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: moving the currently selected block.
					"text" => _("Move"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_PlaceBlock_Mouse}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to place the selected block
					"class" => "turbo2-text-title", "text" => _("Place the block")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to place the selected block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Use the enter key to place the block. Alternatively left-click on the block to place it.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => Buttons::GetImage(Buttons::Editor_PlaceBlock(), Buttons::System_PC())])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: placing the currently selected block.
					"text" => _("Place"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => Buttons::GetImage(Buttons::Editor_PlaceBlock_Mouse(), Buttons::System_PC())])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: placing the currently selected block.
					"text" => _("Place"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_ChangeMode}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to switch between the different building mode
					"class" => "turbo2-text-title", "text" => _("Change the building mode")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to switch between the different building mode, %1 will be replaced by the name of the button
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "id" => "Label_Tuto_"^C_Tuto_ChangeMode, "text" => TutoText[C_Tuto_ChangeMode][C_Device_Gamepad]
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(SwitchModeButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: switching between different building mode
					"text" => _("Switch"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_ConnectMode}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to switch between the connection modes
					"class" => "turbo2-text-title", "text" => _("Change the connection mode")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to switch between the connection modes, %1 will be replaced by the name of the button
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "id" => "Label_Tuto_"^C_Tuto_ConnectMode, "text" => TutoText[C_Tuto_ConnectMode][C_Device_Gamepad]
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(DisconnectButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: switching between different building mode
					"text" => _("Switch"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Skin}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to select a skin
					"class" => "turbo2-text-title", "text" => _("Choose a skin")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to select a skin
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "id" => "Label_Tuto_"^C_Tuto_Skin, "text" => TutoText[C_Tuto_Skin][C_Device_Gamepad]
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(SkinButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: navigating in the macroblock selection UI.
					"text" => _("Browse"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Rosaces}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to select a block
					"class" => "turbo2-text-title", "text" => _("Block selection")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to select a block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "id" => "Label_Tuto_"^C_Tuto_Rosaces, "text" => TutoText[C_Tuto_Rosaces][C_Device_Gamepad]
				])}}}
			</frame>
			<frame z-index="2" id="Frame_GamepadInput_{{{C_Tuto_Rosaces}}}">
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
					{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
					{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => LeftStick, "keepratio" => "fit"])}}}
					{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
						//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a block category
						"text" => _("Category"), "class" => "turbo2-text-button"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
					{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
					{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => RightStick, "keepratio" => "fit"])}}}
					{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
						//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a block
						"text" => _("|Track|Block"), "class" => "turbo2-text-button"
					])}}}
				</frame>
			</frame>
			<frame z-index="2" id="Frame_KeyboardInput_{{{C_Tuto_Rosaces}}}">
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
					{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
					{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => RightClick, "keepratio" => "fit"])}}}
					{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
						//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: opening the block selection UI
						"text" => _("|BlockSelection|Open"), "class" => "turbo2-text-button"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
					{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
					{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => LeftClick, "keepratio" => "fit"])}}}
					{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
						//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a block
						"text" => _("Select"), "class" => "turbo2-text-button"
					])}}}
				</frame>
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_CameraMove_Mouse}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to control the camera
					"class" => "turbo2-text-title", "text" => _("Camera controls")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to control the camera
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Click on the middle mouse button and drag the mouse to rotate the camera. Use the scroll wheel to change the zoom level.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => CameraRotateMouse, "keepratio" => "fit"])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: rotating the camera.
					"text" => _("Rotate"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildQuad(<-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => CameraZoomMouse, "keepratio" => "fit"])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: zooming the camera.
					"text" => _("Zoom"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_CameraMove_Pad}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to control the camera
					"class" => "turbo2-text-title", "text" => _("Camera controls")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to control the camera, %1 and %2 will be replaced by the name of the buttons
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => TL::Compose(_("Tilt %1 to rotate the camera. Press %2 to change the zoom level."), Buttons2::GetRightStickName(), Buttons2::GetRightStickName())
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(CameraRotatePad, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: rotating the camera.
					"text" => _("Rotate"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(CameraZoomPad, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: zooming the camera.
					"text" => _("Zoom"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Edit}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to copy or automatically connect a block
					"class" => "turbo2-text-title", "text" => _("Copy and connect")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to copy or automatically connect a block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("When you move the cursor on a block you placed, you can copy it or try to automatically connect a compatible block.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(CopyButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: copying a block from the track and selecting it in the block selection UI.
					"text" => _("Copy"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(ConnectButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: connecting a block.
					"text" => _("Connect"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_CutPaste}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to cut and paste a block
					"class" => "turbo2-text-title", "text" => _("Cut and paste")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to cut and paste a block
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("When you cut a block it is stored into your block history. You can then paste it back into your track or discard it from the history.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(PasteButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: pasting a block.
					"text" => _("Paste"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(DiscardButton, <-0.5, -0.5, 2.>, <1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here : when cutting a block, it goes inside a stack. You can then paste a block from this stack or discard it.
					"text" => _("|Infinitive - throw out|Discard"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_EditTerrain}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to edit the terrain
					"class" => "turbo2-text-title", "text" => _("Edit terrain")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to edit the terrain
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Press and maintain the \"add\" or \"remove\" button. Then move the cursor to define the zone where the terraforming will be applied and release the button.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(AddButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: adding a terrain block in the landscape.
					"text" => _("Add"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(RemoveButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: removing a terrain block in the landscape.
					"text" => _("Remove"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Landscape}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to generate a random landscape
					"class" => "turbo2-text-title", "text" => _("Landscape")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to select a landscape before starting to build a track
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Select a landscape and start building your track.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(PrevLandscapeButton, <-2.25, -0.5, 2.>, <1.5, 0.8>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildButton(NextLandscapeButton, <-0.75, -0.5, 2.>, <1.5, 0.8>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-3., -0.45, 1.>, <OptionSize-3., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a landscape style.
					"text" => _("Style"), "class" => "turbo2-text-button"])
				}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(ValidLandscapeButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a landscape.
					"text" => _("Select"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
		
		
		<frame pos="0 {{{92 + Styles::GetSize2(<0., TutoSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="{{{C_Tuto_Decoration}}}">
			<frameinstance z-index="0" modelid="Framemodel_Tuto" />
			<frame z-index="1">
				{{{Styles::BuildLabel(<0., -0.45, 0.>, <TutoSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
					//L16N [MapEditor] Title of the tutorial explaining how to generate a random decoration
					"class" => "turbo2-text-title", "text" => _("Decoration")
				])}}}
				{{{Styles::BuildLabel(<-TutoSizeX*0.5, -0.85, 2.>, <TutoSizeX, TextSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), [
					//L16N [MapEditor] Tutorial explaining how to generate a random decoration
					"autonewline" => "1", "maxline" => TextMaxLine, "linespacing" => TextLineSpacing, "class" => "turbo2-text-popup", "text" => _("Choose the proportion of each decoration style then press the \"generate\" button. When you are satisfied with your decoration you can validate your track.")
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5-OptionSize-1., -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(LessButton, <-2.25, -0.5, 2.>, <1.5, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildButton(MoreButton, <-0.75, -0.5, 2.>, <1.5, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-3., -0.45, 1.>, <OptionSize-3., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: selecting a proportion for each decoration category.
					"text" => _("Quantity"), "class" => "turbo2-text-button"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<TutoSizeX*0.5, -TutoSizeY+1., 2.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, Text[Text])}}}
				{{{Styles::BuildButton(GenerateDecoButton, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Text displayed next to a button's picture describing the action of this button. Here: generating a new random decoration.
					"text" => _("Generate"), "class" => "turbo2-text-button"
				])}}}
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
{{{Manialink::DefaultIncludes()}}}

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons::ML_Functions()}}}

Void SetTuto(Integer _Tuto) {
	declare Frame_Tutos <=> (Page.GetFirstChild("Frame_Tutos") as CMlFrame);
	foreach (Control in Frame_Tutos.Controls) {
		declare Frame_Tuto <=> (Control as CMlFrame);
		
		if (Frame_Tuto.ControlId == ""^_Tuto) {
			LibManialink_Anim(Frame_Tuto, "<frame pos=\"0 {{{Styles::Margin_Top()}}}\" hidden=\"0\" />", 500, "EaseOutQuad");
		} else {
			LibManialink_Anim(Frame_Tuto, "<frame pos=\"0 "^(92+Frame_Tuto.Size.Y)^"\" hidden=\"1\" />", 500, "EaseOutQuad");
		}
	}
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 0" hidden="0" id="Frame_Tutos" />""")}}}, 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{Styles::GetSize2(<0., TutoSizeY+2.>, Styles::CircleSize_Bottom()).Y+(92.-Styles::Margin_Top())}}}" hidden="1" id="Frame_Tutos" />""")}}}, 250, "EaseOutQuad");
	}
}

main() {
	declare L_Tuto for Page = -1;
	declare L_CheckpointId for Page = NullId;
	declare L_StopEngineId for Page = NullId;
	declare L_FinishId for Page = NullId;
	declare L_MultilapsId for Page = NullId;
	declare L_Visibility for Page = False;
	declare L_Platform for Page = -1;
	
	declare UIMacroblockSelection_RosaceVisible for This = False;
	
	declare PrevTuto = -1;
	declare PrevVisibility = False;
	declare PrevInputDevice = -1;
	
	LibButtons_Init();
	
	declare Quad_Checkpoint <=> (Page.GetFirstChild("Quad_Checkpoint") as CMlQuad);
	declare Quad_StopEngine <=> (Page.GetFirstChild("Quad_StopEngine") as CMlQuad);
	declare Quad_Finish <=> (Page.GetFirstChild("Quad_Finish") as CMlQuad);
	declare Quad_Multilaps <=> (Page.GetFirstChild("Quad_Multilaps") as CMlQuad);
	foreach (MacroblockModel in Editor.MacroblockModels) {
		if (MacroblockModel.Id == L_CheckpointId) {
			Quad_Checkpoint.Image = MacroblockModel.Icon;
		}
		if (MacroblockModel.Id == L_StopEngineId) {
			Quad_StopEngine.Image = MacroblockModel.Icon;
		}
		if (MacroblockModel.Id == L_FinishId) {
			Quad_Finish.Image = MacroblockModel.Icon;
		}
		if (MacroblockModel.Id == L_MultilapsId) {
			Quad_Multilaps.Image = MacroblockModel.Icon;
		}
	}
	
	declare Label_Tuto_{{{C_Tuto_MoveBlock}}} <=> (Page.GetFirstChild("Label_Tuto_{{{C_Tuto_MoveBlock}}}") as CMlLabel);
	declare Label_Tuto_{{{C_Tuto_ChangeMode}}} <=> (Page.GetFirstChild("Label_Tuto_{{{C_Tuto_ChangeMode}}}") as CMlLabel);
	declare Label_Tuto_{{{C_Tuto_ConnectMode}}} <=> (Page.GetFirstChild("Label_Tuto_{{{C_Tuto_ConnectMode}}}") as CMlLabel);
	declare Label_Tuto_{{{C_Tuto_Skin}}} <=> (Page.GetFirstChild("Label_Tuto_{{{C_Tuto_Skin}}}") as CMlLabel);
	declare Label_Tuto_{{{C_Tuto_Rosaces}}} <=> (Page.GetFirstChild("Label_Tuto_{{{C_Tuto_Rosaces}}}") as CMlLabel);
	
	declare Frame_GamepadInput_{{{C_Tuto_Rosaces}}} <=> (Page.GetFirstChild("Frame_GamepadInput_{{{C_Tuto_Rosaces}}}") as CMlFrame);
	declare Frame_KeyboardInput_{{{C_Tuto_Rosaces}}} <=> (Page.GetFirstChild("Frame_KeyboardInput_{{{C_Tuto_Rosaces}}}") as CMlFrame);
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
		
		declare InputDevice = LibButtons_GetInputDevice();
		if (PrevInputDevice != InputDevice) {
			PrevInputDevice = InputDevice;
			L_Platform = InputDevice;
			
			if (LibButtons_IsKeyboard(InputDevice)) {
				Label_Tuto_{{{C_Tuto_MoveBlock}}}.Value = "{{{TutoText[C_Tuto_MoveBlock][C_Device_Keyboard]}}}";
				Label_Tuto_{{{C_Tuto_ChangeMode}}}.Value = "{{{TutoText[C_Tuto_ChangeMode][C_Device_Keyboard]}}}";
				Label_Tuto_{{{C_Tuto_ConnectMode}}}.Value = "{{{TutoText[C_Tuto_ConnectMode][C_Device_Keyboard]}}}";
				Label_Tuto_{{{C_Tuto_Skin}}}.Value = "{{{TutoText[C_Tuto_Skin][C_Device_Keyboard]}}}";
				Label_Tuto_{{{C_Tuto_Rosaces}}}.Value = "{{{TutoText[C_Tuto_Rosaces][C_Device_Keyboard]}}}";
				
				Frame_GamepadInput_{{{C_Tuto_Rosaces}}}.Visible = False;
				Frame_KeyboardInput_{{{C_Tuto_Rosaces}}}.Visible = True;
			} else {
				Label_Tuto_{{{C_Tuto_MoveBlock}}}.Value = "{{{TutoText[C_Tuto_MoveBlock][C_Device_Gamepad]}}}";
				Label_Tuto_{{{C_Tuto_ChangeMode}}}.Value = "{{{TutoText[C_Tuto_ChangeMode][C_Device_Gamepad]}}}";
				Label_Tuto_{{{C_Tuto_ConnectMode}}}.Value = "{{{TutoText[C_Tuto_ConnectMode][C_Device_Gamepad]}}}";
				Label_Tuto_{{{C_Tuto_Skin}}}.Value = "{{{TutoText[C_Tuto_Skin][C_Device_Gamepad]}}}";
				Label_Tuto_{{{C_Tuto_Rosaces}}}.Value = "{{{TutoText[C_Tuto_Rosaces][C_Device_Gamepad]}}}";
				
				Frame_GamepadInput_{{{C_Tuto_Rosaces}}}.Visible = True;
				Frame_KeyboardInput_{{{C_Tuto_Rosaces}}}.Visible = False;
			}
		}
		
		if (PrevTuto != L_Tuto) {
			PrevTuto = L_Tuto;
			SetTuto(L_Tuto);
		}
		
		if (UIMacroblockSelection_RosaceVisible && PrevVisibility != False) {
			PrevVisibility = False;
			SetVisibility(False);
		} else if (!UIMacroblockSelection_RosaceVisible && PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
		}
	}
}
--></script>
</manialink>
""";
}

// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/// Select which tuto should be displayed
Void Private_UpdateTutoVisibility() {
	declare Page <=> Layers::Get("Tuto").LocalPage;
	declare L_Tuto for Page = -1;
	declare Min = -1;
	foreach (Priority in G_TutosVisibilities) {
		if (Min < 0 || Priority < Min) Min = Priority;
	}
	L_Tuto = Min;
	G_TutoEnabled = Min;
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return							The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return							The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Get the tuto constants
Integer Tuto_Finish() { return C_Tuto_Finish; }
Integer Tuto_Checkpoint() { return C_Tuto_Checkpoint; }
Integer Tuto_Multilaps() { return C_Tuto_Multilaps; }
Integer Tuto_Switch() { return C_Tuto_Switch; }
Integer Tuto_MoveBlock() { return C_Tuto_MoveBlock; }
Integer Tuto_MoveBlock_Mouse() { return C_Tuto_MoveBlock_Mouse; }
Integer Tuto_RotateBlock_Mouse() { return C_Tuto_RotateBlock_Mouse; }
Integer Tuto_PlaceBlock_Mouse() { return C_Tuto_PlaceBlock_Mouse; }
Integer Tuto_Rosaces() { return C_Tuto_Rosaces; }
Integer Tuto_ChangeMode() { return C_Tuto_ChangeMode; }
Integer Tuto_Test() { return C_Tuto_Test; }
Integer Tuto_Edit() { return C_Tuto_Edit; }
Integer Tuto_Skin() { return C_Tuto_Skin; }
Integer Tuto_CameraMove_Mouse() { return C_Tuto_CameraMove_Mouse; }
Integer Tuto_CameraMove_Pad() { return C_Tuto_CameraMove_Pad; }
Integer Tuto_CameraZoom() { return C_Tuto_CameraZoom; }
Integer Tuto_CutPaste() { return C_Tuto_CutPaste; }
Integer Tuto_Turbo() { return C_Tuto_Turbo; }
Integer Tuto_StopEngine() { return C_Tuto_StopEngine; }
Integer Tuto_Landscape() { return C_Tuto_Landscape; }
Integer Tuto_Decoration() { return C_Tuto_Decoration; }
Integer Tuto_EditTerrain() { return C_Tuto_EditTerrain; }
Integer Tuto_ConnectMode() { return C_Tuto_ConnectMode; }

// ---------------------------------- //
/** Enable a tutorial
 *
 *	@param	_Tuto					The tutorial to enable
 */
Void Enable(Integer _Tuto) {
	declare persistent Integer[] LibTuto_MapEditor_Validated for LocalUser;
	if (LibTuto_MapEditor_Validated.exists(_Tuto)) return;
	if (G_TutosVisibilities.exists(_Tuto)) return;
	
	G_TutosVisibilities.add(_Tuto);
	Private_UpdateTutoVisibility();
}

// ---------------------------------- //
/** Disable a tutorial
 *
 *	@param	_Tuto					The tutorial to disable
 */
Void Disable(Integer _Tuto) {
	declare Removed = G_TutosVisibilities.remove(_Tuto);
	if (Removed) Private_UpdateTutoVisibility();
}

// ---------------------------------- //
/// Disable all tutorials
Void DisableAll() {
	G_TutosVisibilities.clear();
	Private_UpdateTutoVisibility();
}

// ---------------------------------- //
/** Check if a given tutorial is the enabled and visible
 *
 *	@param	_Tuto					The tutorial to check
 * 
 *	@return							True if the tutorial is enabled and visible, False otherwise
 */
Boolean IsEnabledAndVisible(Integer _Tuto) {
	return (G_TutoEnabled == _Tuto);
}

// ---------------------------------- //
/** Check if a given tutorial is enabled
 *
 *	@param	_Tuto					The tutorial to check
 * 
 *	@return							True if the tutorial is enabled, False otherwise
 */
Boolean IsEnabled(Integer _Tuto) {
	return G_TutosVisibilities.exists(_Tuto);
}

// ---------------------------------- //
/** Check if any tutorial is enabled
 * 
 *	@return							True if a tutorial is enabled, False otherwise
 */
Boolean IsEnabled() {
	return G_TutosVisibilities.count > 0;
}

// ---------------------------------- //
/** Validate a tutorial and disable it if it was enabled
 *
 *	@param	_Tuto					The tutorial to validate
 */
Void Validate(Integer _Tuto) {
	declare persistent Integer[] LibTuto_MapEditor_Validated for LocalUser;
	if (!LibTuto_MapEditor_Validated.exists(_Tuto)) LibTuto_MapEditor_Validated.add(_Tuto);
	Disable(_Tuto);
}

// ---------------------------------- //
/** Check if a given tutorial is validated
 *
 *	@param	_Tuto					The tutorial to check
 *
 *	@return							True if the tutorial is validated, False otherwise
 */
Boolean IsValidated(Integer _Tuto) {
	declare persistent Integer[] LibTuto_MapEditor_Validated for LocalUser;
	return LibTuto_MapEditor_Validated.exists(_Tuto);
}

// ---------------------------------- //
/** Trigger the counter of a tutorial
 *
 *	@param	_Tuto					The tutorial counter to trigger
 */
Void Trigger(Integer _Tuto) {
	if (!G_TriggerCount.existskey(_Tuto)) G_TriggerCount[_Tuto] = 0;
	G_TriggerCount[_Tuto] += 1;
}

// ---------------------------------- //
/** Get the number of timer a tutorial was triggered
 *
 *	@param	_Tuto					The tutorial to check
 *
 *	@return							The tutorial trigger count
 */
Integer Count(Integer _Tuto) {
	if (!G_TriggerCount.existskey(_Tuto)) return 0;
	return G_TriggerCount[_Tuto];
}

// ---------------------------------- //
/// Reset all validated tutorial to an unvalidated state
Void Reset() {
	declare persistent Integer[] LibTuto_MapEditor_Validated for LocalUser;
	LibTuto_MapEditor_Validated.clear();
	G_TriggerCount.clear();
}

// ---------------------------------- //
/** Get the platform currently used
 *
 *	@return							The platform
 */
Integer GetPlatform() {
	if (G_Page != Null) {
		declare L_Platform for G_Page = -1;
		return L_Platform;
	}
	return -1;
}

// ---------------------------------- //
/** Check if the tuto UI is visible
 *
 *	@return							True if the UI is visible, False otherwise
 */
Boolean IsVisible() {
	declare Page <=> Layers::Get("Tuto").LocalPage;
	declare L_Visibility for Page = False;
	return L_Visibility;
}

// ---------------------------------- //
/** Set the tuto UI visibility
 *
 *	@param	_Visible			Show the tuto UI if True
 */
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::Get("Tuto").LocalPage;
	declare L_Visibility for Page = False;
	L_Visibility = _Visible;
}

// ---------------------------------- //
/// Show the tuto UI
Void Show() {
	SetVisibility(True);
}

// ---------------------------------- //
/// Hide the tuto UI
Void Hide() {
	SetVisibility(False);
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Destroy("Tuto");
	//Layers::Unload();
	
	G_TutosVisibilities.clear();
	G_TutoEnabled = -1;
	G_TriggerCount.clear();
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	//Layers::Load();
	Buttons::Load();
	declare LayerTuto <=> Layers::Create("Tuto");
	LayerTuto.ManialinkPage = Private_GetTutoML();
	Buttons::Unload();
	
	declare Page <=> LayerTuto.LocalPage;
	G_Page <=> Page;
	declare L_Visibility for Page = False;
	declare L_Tuto for Page = -1;
	L_Visibility = False;
	L_Tuto = -1;
}