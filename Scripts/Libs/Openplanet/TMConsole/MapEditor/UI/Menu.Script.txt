/** 
 * Menu UI
 */

#Const Version		"2016-02-19"
#Const ScriptName	"Menu.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Openplanet/Manialink3.Script.txt" as Manialink
#Include "Libs/Openplanet/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Openplanet/TMConsole/MapEditor/Sound.Script.txt" as Sound
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Colors.Script.txt" as Colors
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultVisibility	False	///< Default visibility
/// Selection
#Const C_Selection_Null			0
#Const C_Selection_Validate		1
#Const C_Selection_Style		2
#Const C_Selection_Save			3
#Const C_Selection_SaveAs		4
#Const C_Selection_New			5
#Const C_Selection_Tuto			6
#Const C_Selection_Quit			7
#Const C_Selection_Back			8

#Const C_Selection [1, 2, 3, 4, 5, 6, 7, 8]
/// Events
#Const C_Event_Hover	"LibMenu_Hover"
#Const C_Event_Click	"LibMenu_Click"

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Get the menu manialink
 *
 *	@return						The manialink
 */
Text Private_GetMenuML() {
	declare OptionsCount = 8;
	declare MenuSizeX = 36.;
	declare MenuSizeY = OptionsCount + 2.;
	declare MenuPosY = 8.;
	
	return """
<manialink version="3" name="MapEditor:Menu">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame id="Frame_Global">
	<quad z-index="0" opacity="0" hidden="1" class="turbo2-screen-overlay" id="Quad_ScreenOverlay" />
	<frame pos="0 -92" z-index="1" hidden="1" id="Frame_Menu">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-MenuSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildBackground(<0., 0., 0.>, <MenuSizeX, MenuSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop())}}}
			{{{Styles::BuildLine(<0., 0., 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_White(), True, True, Text[Text])}}}
			{{{Styles::BuildLabel(<0., -0.45, 2.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
				//L16N [MapEditor] Title of the menu where the player can manage his track
				"text" => _("Manage track"), "textcolor" => Colors::GetColorML(Colors::Color_Black()), "class" => "turbo2-text-title"
			])}}}
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 3.>, Styles::CircleSize_Bottom()))}}} id="Frame_Buttons">
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., 0., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Validate}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Validate the track
						"text" => _("Validate track"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -1., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Style}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Select a style for the track (tech, lol, fullspeed, ...)
						"text" => _("Select style"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Save}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Save the track
						"text" => _("Save"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -3., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_SaveAs}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Save the track in a new file
						"text" => _("Save as new"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -4., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_New}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Create a new track
						"text" => _("New track"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -5., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Tuto}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Reset the tutorial progression and restart from the beginning
						"text" => _("See tutorial again"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -6., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Quit}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Leave the track editor
						"text" => _("Quit"), "class" => "turbo2-text-menu"
					])}}}
				</frame>
				<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -7., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{C_Selection_Back}}}">
					{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
					{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
						//L16N [MapEditor] Close the menu
						"text" => _("Back"), "class" => "turbo2-text-menu"])
					}}}
				</frame>
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "AnimLib" as AL
{{{Manialink::DefaultIncludes()}}}

#Const C_Black	{{{Colors::GetColor(Colors::Color_Black())}}}
#Const C_Red	{{{Colors::GetColor(Colors::Color_Red())}}}

declare Integer[] G_Selectables;
declare CMlQuad G_QuadSelected;

{{{Manialink::Animations(["EaseOutQuad"])}}}

Void InitSelectables() {
	G_Selectables.clear();
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		Value = TL::ToInteger(Control.DataAttributeGet("value"));
		G_Selectables.add(Value);
		
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare ItemKey for Quad_Button = -1;
		ItemKey = Value;
	}
}

Void SelectButton(Integer _Selected) {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare Value for Frame_Button = -1;
		declare Color for Frame_Button = 0;
		if (Value == _Selected && Color == 0) {
			G_QuadSelected <=> Quad_Button;
			Color = 1;
			//LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Red())}}}" />""")}}}, 250, "EaseOutQuad");
		} else if (Value != _Selected && Color == 1) {
			Color = 0;
			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Black())}}}" />""")}}}, 25, "EaseOutQuad");
		}
	}
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{Styles::GetSize2(<0., MenuPosY>, Styles::CircleSize_Bottom()).Y}}}" hidden="0" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="1" hidden="0" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -92" hidden="1" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
		LibManialink_Anim({{{Manialink::Inject("""<frame opacity="0" hidden="1" id="Quad_ScreenOverlay" />""")}}}, 500, "EaseOutQuad");
	}
}

main() {
	declare L_Visibility for Page = {{{C_DefaultVisibility}}};
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = -1;
	
	declare PrevVisibility = {{{C_DefaultVisibility}}};
	declare PrevSelectedUpdate = -1;
	
	G_Selectables.clear();
	
	InitSelectables();
	
	declare AnimDir = 1;
	declare AnimStartTime = Now;
	declare AnimDuration = 350;
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		
		if (PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
		}
		
		if (PrevSelectedUpdate != L_SelectedUpdate) {
			PrevSelectedUpdate = L_SelectedUpdate;
			SelectButton(L_Selected);
			
			AnimDir = 1;
			AnimStartTime = Now;
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlEvent::Type::MouseOver) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Hover}}}", [TL::ToText(ItemKey)]);
				}
			} else if (Event.Type == CMlEvent::Type::MouseClick) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Click}}}", [TL::ToText(ItemKey)]);
				}
			}
		}
		
		if (L_Visibility && G_QuadSelected != Null) {
			if (AnimDir > 0) {
				declare X = AL::EaseOutQuad(Now - AnimStartTime, C_Black.X, C_Red.X - C_Black.X, AnimDuration);
				declare Y = AL::EaseOutQuad(Now - AnimStartTime, C_Black.Y, C_Red.Y - C_Black.Y, AnimDuration);
				declare Z = AL::EaseOutQuad(Now - AnimStartTime, C_Black.Z, C_Red.Z - C_Black.Z, AnimDuration);
				
				G_QuadSelected.Colorize = <X, Y, Z>;
				if (Now > AnimStartTime + AnimDuration) {
					AnimDir = -1;
					AnimStartTime = Now;
				}
			} else if (AnimDir < 0) {
				declare X = AL::EaseOutQuad(Now - AnimStartTime, C_Red.X, C_Black.X - C_Red.X, AnimDuration);
				declare Y = AL::EaseOutQuad(Now - AnimStartTime, C_Red.Y, C_Black.Y - C_Red.Y, AnimDuration);
				declare Z = AL::EaseOutQuad(Now - AnimStartTime, C_Red.Z, C_Black.Z - C_Red.Z, AnimDuration);
				
				G_QuadSelected.Colorize = <X, Y, Z>;
				if (Now > AnimStartTime + AnimDuration) {
					AnimDir = 1;
					AnimStartTime = Now;
				}
			}
		}
	}
}
--></script>
</manialink>	
""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return						The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return						The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Get the events constants
Text Event_Hover() { return C_Event_Hover; }
Text Event_Click() { return C_Event_Click; }

// ---------------------------------- //
/// Get the selection constants
Integer Selection_Validate() { return C_Selection_Validate; }
Integer Selection_Style() { return C_Selection_Style; }
Integer Selection_Save() { return C_Selection_Save; }
Integer Selection_SaveAs() { return C_Selection_SaveAs; }
Integer Selection_New() { return C_Selection_New; }
Integer Selection_Tuto() { return C_Selection_Tuto; }
Integer Selection_Quit() { return C_Selection_Quit; }
Integer Selection_Back() { return C_Selection_Back; }

// ---------------------------------- //
/** Select a button in the menu
 *
 *	@param	_Selection			The button to select
 *	@param	_PlaySound			Play a sound
 */
Void Select(Integer _Selection, Boolean _PlaySound) {
	if (!C_Selection.exists(_Selection)) return;
	
	declare Page <=> Layers::GetPage("Menu");
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	L_Selected = _Selection;
	L_SelectedUpdate = Now;
	
	if (_PlaySound) Sound::Play("EditorMenuMove");
}

// ---------------------------------- //
/// Overload Select()
Void Select(Integer _Selection) {
	Select(_Selection, False);
}

// ---------------------------------- //
/** Select the next or the previous button in the menu
 *
 *	@param	_Shift				In which direction to shift
 */
Void Shift(Integer _Shift) {
	declare Page <=> Layers::GetPage("Menu");
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	declare Key = C_Selection.keyof(L_Selected);
	if (Key < 0) Key = 0;
	
	Key += _Shift;
	if (Key < 0) Key = C_Selection.count - 1;
	else if (Key > C_Selection.count - 1) Key = 0;
	
	L_Selected = C_Selection[Key];
	L_SelectedUpdate = Now;
}

// ---------------------------------- //
/// Go to the next entry in the menu
Void Next() {
	Sound::Play("EditorMenuMove");
	Shift(1);
}

// ---------------------------------- //
/// Go to the previous entry in the menu
Void Prev() {
	Sound::Play("EditorMenuMove");
	Shift(-1);
}

// ---------------------------------- //
/** Check if the menu is visible
 *
 *	@return						True if the menu is visible, False otherwise
 */
Boolean IsVisible() {
	declare Page <=> Layers::GetPage("Menu");
	declare L_Visibility for Page = C_DefaultVisibility;
	return L_Visibility;
}

// ---------------------------------- //
/** Set the menu visibility
 *
 *	@param	_Visible			Show the menu if True
 */
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("Menu");
	declare L_Visibility for Page = C_DefaultVisibility;
	
	if (_Visible && !L_Visibility) {	
		Select(C_Selection_Validate);
	}
	
	L_Visibility = _Visible;
}

// ---------------------------------- //
/// Show the menu
Void Show() {
	SetVisibility(True);
}

// ---------------------------------- //
/// Hide the menu
Void Hide() {
	SetVisibility(False);
}

// ---------------------------------- //
/// Toggle the menu
Void Toggle() {
	declare Page <=> Layers::GetPage("Menu");
	declare L_Visibility for Page = C_DefaultVisibility;
	
	SetVisibility(!L_Visibility);
}

// ---------------------------------- //
/** Valid the current selection
 *
 *	@return						The current selection
 */
Integer Valid() {
	declare Page <=> Layers::GetPage("Menu");
	declare L_Selected for Page = C_Selection_Null;
	
	Sound::Play("EditorMenuValid");
	if (C_Selection.exists(L_Selected)) return L_Selected;
	return C_Selection_Null;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Destroy("Menu");
	//Layers::Unload();
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	//Layers::Load();
	declare LayerMenu <=> Layers::Create("Menu");
	LayerMenu.ManialinkPage = Private_GetMenuML();
	
	declare Page <=> LayerMenu.LocalPage;
	declare L_Visibility for Page = C_DefaultVisibility;
	declare L_Selected for Page = C_Selection_Null;
	declare L_SelectedUpdate for Page = -1;
	L_Visibility = C_DefaultVisibility;
	L_Selected = C_Selection_Null;
	L_SelectedUpdate = -1;
	
	Hide();
}