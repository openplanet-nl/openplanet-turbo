/** 
 * Multilaps UI
 */

#Const Version		"2016-03-14"
#Const ScriptName	"Multilaps.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Openplanet/Buttons.Script.txt" as Buttons
#Include "Libs/Openplanet/MLEffects.Script.txt" as MLE
#Include "Libs/Openplanet/Manialink3.Script.txt" as Manialink
#Include "Libs/Openplanet/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Openplanet/TMConsole/MapEditor/Sound.Script.txt" as Sound
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Colors.Script.txt" as Colors
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultVisibility False
#Const C_BgAnim False ///< Anim butotn background on mouse over/out
#Const C_LapsNbMin 	1 	///< Minimum number of laps
#Const C_LapsNbMax	99	///< Maximum number of laps
#Const C_AutoRepeat_Init	500	///< Delay before activation of the auto repeat
#Const C_AutoRepeat_Delay	100 ///< Delay between two activations during the auto repeat
/// Events
#Const C_Event_LapsMore		"LibMultilaps_LapsMore"
#Const C_Event_LapsLess		"LibMultilaps_LapsLess"
#Const C_Event_LapsConfirm	"LibMultilaps_LapsConfirm"
#Const C_Event_LapsCancel	"LibMultilaps_LapsCancel"

// ---------------------------------- //
// Constants
// ---------------------------------- //.
declare Boolean G_Confirmed; 	///< Number of laps confirmed
declare Boolean G_Canceled;		///< Number of laps canceled
declare Integer G_SkipInput;	///< Skip inputs for this frame
declare Integer G_AutoRepeat;	///< Next time the auto repeat can be activated
declare Integer G_AutoRepeatCount;	///< Number of times the auto repeat has been activated

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Get the multilaps manialink
 *
 *	@return							The manialink
 */
Text Private_GetMultilapsML() {
	declare MultilapsSizeX = 24.;
	declare MultilapsSizeY = 6.;
	declare OptionSize = 8.;
	declare ButtonSize = 0.9;
	
	declare Pointer = "file://Media/Images/TMConsole/MapEditor/Menu/pointer.dds";
	declare ButtonConfirm = Buttons::Menu_Select();
	declare ButtonCancel = Buttons::Menu_Cancel();
	
	return """
<manialink version="3" name="MapEditor:Multilaps">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame id="Frame_Global">
	<frame pos="0 {{{92 + Styles::GetSize2(<0., MultilapsSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="Frame_NewMultilaps">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-MultilapsSizeX*0.5, 0., 1.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildBackground(<0., 0., 0.>, <MultilapsSizeX, MultilapsSizeY>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop())}}}
			{{{Styles::BuildLine(<0., 0., 1.>, <MultilapsSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Purple(), True, True, Text[Text])}}}
			{{{Styles::BuildLabel(<MultilapsSizeX*0.5, -0.45, 2.>, <MultilapsSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), [
				//L16N [MapEditor] Title of the pop-up allowing to select the number of laps raced on a multilaps track
				"text" => _("Number of laps"), "class" => "turbo2-text-title"
			])}}}
			{{{Styles::BuildQuad(<0., -1., 3.>, <MultilapsSizeX, MultilapsSizeY-2.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), ["bgcolor" => Colors::GetColorML(Colors::Color_SoftBlack())])}}}
			{{{Styles::BuildQuad(<MultilapsSizeX*0.5, -1.5, 5.>, <1., 0.5>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["rot" => "180", "image" => Pointer, "colorize" => Colors::GetColorML(Colors::Color_White()), "scriptevents" => "1", "id" => "Quad_Up"])}}}
			{{{Styles::BuildQuad(<MultilapsSizeX*0.5, -4.5, 5.>, <1., 0.5>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), ["image" => Pointer, "colorize" => Colors::GetColorML(Colors::Color_White()), "scriptevents" => "1", "id" => "Quad_Down"])}}}
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<MultilapsSizeX*0.5-2.5, -1., 4.>, Styles::CircleSize_Bottom()))}}} {{{Styles::BuildSize2(Styles::GetSize2(<5., 4.>, Styles::CircleSize_Bottom()))}}}>
				<frame id="Frame_LapsNb">
					{{{Styles::BuildLabel(<2.5, -2., 0.>, <5., 4.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "turbo2-text-laps", "id" => "Label_LapsNb"])}}}
					{{{Styles::BuildLabel(<2.5, 2., 0.>, <5., 4.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "turbo2-text-laps", "id" => "Label_LapsNb2"])}}}
					{{{Styles::BuildLabel(<2.5, -6., 0.>, <5., 4.>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter2(), ["class" => "turbo2-text-laps", "id" => "Label_LapsNb3"])}}}
				</frame>
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<MultilapsSizeX-OptionSize-1., -MultilapsSizeY+1., 6.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", MLE::Data_Triggers() => "B1", "class" => MLE::ML_Class(), "id" => "Quad_Cancel"])}}}
				{{{Styles::BuildButton(ButtonCancel, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Cancel an action
					"text" => _("Cancel"), MLE::Data_Effects() => """B1:{{{MLE::Effect_LabelHover()}}}""", "class" => """turbo2-text-button {{{MLE::ML_Class()}}}""", "id" => "Label_Cancel"
				])}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<MultilapsSizeX, -MultilapsSizeY+1., 5.>, Styles::CircleSize_Bottom()))}}}>
				{{{Styles::BuildLine(<0., 0., 0.>, <OptionSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", MLE::Data_Triggers() => "B2", "class" => MLE::ML_Class(), "id" => "Quad_Confirm"])}}}
				{{{Styles::BuildButton(ButtonConfirm, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <OptionSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Validate an action
					"text" => _("|Infinitive|Validate"), MLE::Data_Effects() => """B2:{{{MLE::Effect_LabelHover()}}}""", "class" => """turbo2-text-button {{{MLE::ML_Class()}}}""", "id" => "Label_Confirm"
				])}}}
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
{{{Manialink::DefaultIncludes()}}}
{{{MLE::ML_Includes()}}}

#Const C_ClickTick	100
#Const C_InitTick	500

declare CMlFrame Frame_LapsNb;
declare CMlLabel Label_LapsNb;
declare CMlLabel Label_LapsNb2;
declare CMlLabel Label_LapsNb3;
declare CMlQuad Quad_Up;
declare CMlQuad Quad_Down;

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons::ML_Functions()}}}
{{{MLE::ML_Functions()}}}


Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 25" hidden="0" id="Frame_NewMultilaps" />""")}}}, 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{92 + Styles::GetSize2(<0., MultilapsSizeY>, Styles::CircleSize_Bottom()).Y}}}" hidden="1" id="Frame_NewMultilaps" />""")}}}, 250, "EaseOutQuad");
	}
}

Void SetLapsNb(Integer _LapsNb) {
	Label_LapsNb.Value = TL::ToText(_LapsNb);
	Label_LapsNb2.Value = TL::ToText(_LapsNb+1);
	Label_LapsNb3.Value = TL::ToText(_LapsNb-1);
	
	declare L_Direction for Page = 0;
	if (L_Direction > 0) {
		Frame_LapsNb.RelativePosition_V3.Y = {{{Styles::GetSize2(<0., 4.>, Styles::CircleSize_Bottom()).Y}}};
	} else if (L_Direction < 0) {
		Frame_LapsNb.RelativePosition_V3.Y = {{{-Styles::GetSize2(<0., 4.>, Styles::CircleSize_Bottom()).Y}}};
	}
	LibManialink_Anim(Frame_LapsNb, {{{Manialink::Inject("""<frame pos="0 0" />""")}}}, 250, "EaseOutQuad");
	
	if (_LapsNb <= {{{C_LapsNbMin}}}) {
		Quad_Up.Visible = True;
		Quad_Down.Visible = False;
	} else if (_LapsNb >= {{{C_LapsNbMax}}}) {
		Quad_Up.Visible = False;
		Quad_Down.Visible = True;
	} else {
		Quad_Up.Visible = True;
		Quad_Down.Visible = True;
	}
}

main() {
	Frame_LapsNb <=> (Page.GetFirstChild("Frame_LapsNb") as CMlFrame);
	Label_LapsNb <=> (Frame_LapsNb.GetFirstChild("Label_LapsNb") as CMlLabel);
	Label_LapsNb2 <=> (Frame_LapsNb.GetFirstChild("Label_LapsNb2") as CMlLabel);
	Label_LapsNb3 <=> (Frame_LapsNb.GetFirstChild("Label_LapsNb3") as CMlLabel);
	Quad_Up <=> (Page.GetFirstChild("Quad_Up") as CMlQuad);
	Quad_Down <=> (Page.GetFirstChild("Quad_Down") as CMlQuad);
	
	declare ClickPage = 0;
	declare NextClickUpdate = -1;
	
	declare L_Visibility for Page = {{{C_DefaultVisibility}}};
	declare L_LapsNb for Page = 0;
	declare PrevVisibility = {{{C_DefaultVisibility}}};
	declare PrevLapsNb = L_LapsNb;
	
	LibButtons_Init();
  LibMLEffects_Init();
	SetVisibility({{{C_DefaultVisibility}}});
	SetLapsNb(L_LapsNb);
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
    LibMLEffects_Loop();
		
		if (PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
		}
		
		if (PrevLapsNb != L_LapsNb) {
			PrevLapsNb = L_LapsNb;
			SetLapsNb(L_LapsNb);
		}
		
		if (ClickPage != 0) {
			if (!MouseLeftButton) {
				ClickPage = 0;
				NextClickUpdate = -1;
			}
			
			if (NextClickUpdate > 0 && Now >= NextClickUpdate) {
				if (ClickPage > 0) {
					SendCustomEvent("{{{C_Event_LapsMore}}}", Text[]);
					NextClickUpdate = Now + C_ClickTick;
				} else if (ClickPage < 0) {
					SendCustomEvent("{{{C_Event_LapsLess}}}", Text[]);
					NextClickUpdate = Now + C_ClickTick;
				}
			}
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlEvent::Type::MouseClick) {
				if (Event.ControlId == "Quad_Up") {
					SendCustomEvent("{{{C_Event_LapsMore}}}", Text[]);
					ClickPage = 1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_Down") {
					SendCustomEvent("{{{C_Event_LapsLess}}}", Text[]);
					ClickPage = -1;
					NextClickUpdate = Now + C_InitTick;
				} else if (Event.ControlId == "Quad_Confirm") {
					SendCustomEvent("{{{C_Event_LapsConfirm}}}", Text[]);
				} else if (Event.ControlId == "Quad_Cancel") {
					SendCustomEvent("{{{C_Event_LapsCancel}}}", Text[]);
				}
			} else if (Event.Type == CMlEvent::Type::MouseOut) {
				if (Event.ControlId == "Quad_Confirm" || Event.ControlId == "Quad_Cancel") {
					if ({{{C_BgAnim}}}) LibManialink_Anim(
						(Event.Control as CMlQuad),
						{{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Black())}}}" />""")}}},
						250,
						"EaseOutQuad"
					);
				}
			} else if (Event.Type == CMlEvent::Type::MouseOver) {
				if (Event.ControlId == "Quad_Confirm" || Event.ControlId == "Quad_Cancel") {
					if ({{{C_BgAnim}}}) LibManialink_Anim(
						(Event.Control as CMlQuad),
						{{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Red())}}}" />""")}}},
						250,
						"EaseOutQuad"
					);
				}
			}
		}
	}
}
--></script>
</manialink>	
""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return							The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return							The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/** Set the multilaps UI visibility
 *
 *	@param	_Visible				Show the multilaps UI if True
 */
Void SetVisibility(Boolean _Visible) {
	declare L_Visibility for Layers::GetPage("Multilaps") = False;
	L_Visibility = _Visible;
}

// ---------------------------------- //
/// Get the events constants
Text Event_LapsMore() { return C_Event_LapsMore; }
Text Event_LapsLess() { return C_Event_LapsLess; }
Text Event_LapsConfirm() { return C_Event_LapsConfirm; }
Text Event_LapsCancel() { return C_Event_LapsCancel; }

// ---------------------------------- //
/// Show the multilaps UI
Void Show() {
	G_Confirmed = False;
	G_Canceled = False;
	G_SkipInput = Now;
	
	declare L_LapsNb for Layers::GetPage("Multilaps") = 0;
	declare L_Direction for Layers::GetPage("Multilaps") = 0;
	L_LapsNb = Map.TMObjective_NbLaps;
	L_Direction = 0;
				
	SetVisibility(True);
}

// ---------------------------------- //
/// Hide the multilaps UI
Void Hide() {
	SetVisibility(False);
}

// ---------------------------------- //
/** Number of laps confirmed
 *
 *	@return							True if the number of laps was confirmed
 */
Boolean Confirmed() {
	return G_Confirmed;
}

// ---------------------------------- //
/** Number of laps canceled
 *
 *	@return							True if the number of laps was canceled
 */
Boolean Canceled() {
	return G_Canceled;
}

// ---------------------------------- //
/// Add one lap
Void AddLap() {
	Map.TMObjective_NbLaps += 1;
	if (Map.TMObjective_NbLaps > C_LapsNbMax) Map.TMObjective_NbLaps = C_LapsNbMax;
	else Sound::Play("EditorMenuMove");
	declare L_LapsNb for Layers::GetPage("Multilaps") = 0;
	declare L_Direction for Layers::GetPage("Multilaps") = 0;
	L_LapsNb = Map.TMObjective_NbLaps;
	L_Direction = 1;
}

// ---------------------------------- //
/// Remove one lap
Void RemoveLap() {
	Map.TMObjective_NbLaps -= 1;
	if (Map.TMObjective_NbLaps < C_LapsNbMin) Map.TMObjective_NbLaps = C_LapsNbMin;
	else Sound::Play("EditorMenuMove");
	declare L_LapsNb for Layers::GetPage("Multilaps") = 0;
	declare L_Direction for Layers::GetPage("Multilaps") = 0;
	L_LapsNb = Map.TMObjective_NbLaps;
	L_Direction = -1;
}

// ---------------------------------- //
/// Update laps number
Void Loop() {
	// If we pressed ::EInput::CursorPlace when we called Show() we would directly skip the pop up
	// To avoid that we skip the inputs of the first waiting frame
	if (G_SkipInput == Now) return;
	
	declare LapShift = 0;
	foreach (Event in PendingEvents) {
		if (Event.Type == CEditorPluginEvent::Type::EditorInput) {
			if (Event.Input == CEditorPluginEvent::EInput::CursorPlace) {
				G_Confirmed = True;
				return ;
			} else if (Event.Input == CEditorPluginEvent::EInput::RemoveAll) {
				if (Event.IsFromKeyboard) {
					G_Canceled = True;
					return ;
				}
			} else if (Event.Input == CEditorPluginEvent::EInput::CursorDelete) {
				if (Event.IsFromPad) {
					G_Canceled = True;
					return ;
				}
			}
		} else if (Event.Type == CEditorPluginEvent::Type::LayerCustomEvent) {
			if (Event.CustomEventType == C_Event_LapsMore) {
				LapShift = 1;
			} else if (Event.CustomEventType == C_Event_LapsLess) {
				LapShift = -1;
			} else if (Event.CustomEventType == C_Event_LapsConfirm) {
				G_Confirmed = True;
				return ;
			} else if (Event.CustomEventType == C_Event_LapsCancel) {
				G_Canceled = True;
				return ;
			}
		}
	}
	
	if (
		EditorInputIsDown_CursorDown ||
		EditorInputIsDown_IconDown ||
		EditorInputIsDown_CursorUp ||
		EditorInputIsDown_IconUp ||
		LapShift != 0
	) {
		if (G_AutoRepeat < 0 || Now >= G_AutoRepeat) {
			if (
				EditorInputIsDown_CursorDown ||
				EditorInputIsDown_IconDown ||
				LapShift < 0
			) {
				RemoveLap();
			} else if (
				EditorInputIsDown_CursorUp ||
				EditorInputIsDown_IconUp ||
				LapShift > 0
			) {
				AddLap();
			}
		}
		
		if (G_AutoRepeat < 0) {
			G_AutoRepeat = Now + C_AutoRepeat_Init;
			G_AutoRepeatCount += 1;
		} else if (Now >= G_AutoRepeat) {
			if (G_AutoRepeatCount > 10) {
				G_AutoRepeat = Now + (C_AutoRepeat_Delay / 4);
			} else {
				G_AutoRepeat = Now + C_AutoRepeat_Delay;
			}
			G_AutoRepeatCount += 1;
		}
		
	} else {
		G_AutoRepeat = -1;
		G_AutoRepeatCount = 0;
		
		declare L_Direction for Layers::GetPage("Multilaps") = 0;
		L_Direction = 0;
	}
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Destroy("Multilaps");
	
	G_Confirmed = False;
	G_Canceled = False;
	G_SkipInput = -1;
	G_AutoRepeat = -1;
	G_AutoRepeatCount = 0;
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	Buttons::Load();
	declare LayerMultilaps <=> Layers::Create("Multilaps");
	LayerMultilaps.ManialinkPage = Private_GetMultilapsML();
	Buttons::Unload();
	
	declare Page <=> LayerMultilaps.LocalPage;
	declare L_Visibility for Page = C_DefaultVisibility;
	declare L_LapsNb for Page = 0;
	declare L_Direction for Page = 0;
	L_Visibility = C_DefaultVisibility;
	L_LapsNb = Map.TMObjective_NbLaps;
	L_Direction = 0;
}