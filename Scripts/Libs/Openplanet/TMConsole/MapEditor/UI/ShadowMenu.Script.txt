/** 
 * Shadow quality selection UI
 */

#Const Version		"2016-03-21"
#Const ScriptName	"ShadowMenu.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Openplanet/Buttons.Script.txt" as Buttons
#Include "Libs/Openplanet/MLEffects.Script.txt" as MLE
#Include "Libs/Openplanet/Manialink3.Script.txt" as Manialink
#Include "Libs/Openplanet/TMConsole/MapEditor/Layers.Script.txt" as Layers
#Include "Libs/Openplanet/TMConsole/MapEditor/Sound.Script.txt" as Sound
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Colors.Script.txt" as Colors
#Include "Libs/Openplanet/TMConsole/MapEditor/UI/Stylesheet.Script.txt" as Styles

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_DefaultVisibility	False	///< Default visibility
#Const C_BgAnim False ///< Anim button background on mouse over/out
// Selection
#Const C_Selection_Null			0
#Const C_Selection_None			1
#Const C_Selection_VeryFast 2
#Const C_Selection_Fast			3
#Const C_Selection_Nice			4
#Const C_Selection_VeryNice 5

#Const C_DefaultSelection [3, 4]
#Const C_Selection [1, 2, 3, 4, 5]
/// Events
#Const C_Event_Hover	"LibShadowMenu_Hover"
#Const C_Event_Click	"LibShadowMenu_Click"
#Const C_Event_Confirm	"LibShadowMenu_Confirm"

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Private
// ---------------------------------- //
// ---------------------------------- //
/** Get the menu manialink
 *
 *	@param	_Options								The options to display in the menu
 *
 *	@return						The manialink
 */
Text Private_GetMenuML(Integer[] _Options) {
	declare MenuSizeX = 25.;
	declare MenuPosY = 4.;
	declare OptionSizeY = Styles::GetPosition2(<0., 1., 0.>, Styles::CircleSize_Bottom()).Y;
	declare ButtonBgSize = 8.;
	declare ButtonSize = 0.9;
	declare ButtonConfirm = Buttons::Menu_Select();
	
	declare Text Title;
	declare Text[Integer] Texts;
	if (_Options.count == 2 && _Options.exists(C_Selection_Fast) && _Options.exists(C_Selection_Nice)) {
		Title = _("|Setting to chose the quality of lights computation|Lighting quality");
		Texts = [
			//L16N [MapEditor] Fast shadow quality
			C_Selection_Fast => _("|Setting to chose the quality of lights computation|Fast"),
			//L16N [MapEditor] Fast shadow quality
			C_Selection_Nice => _("|Setting to chose the quality of lights computation|Nice")
		];
	} else {
		Title = _("Computing shadows");
		Texts = [
			//L16N [MapEditor] Fast shadow quality
			C_Selection_Fast => _("|LightMapQuality|Fast"),
			//L16N [MapEditor] Fast shadow quality
			C_Selection_Nice => _("|LightMapQuality|Default"),
			//L16N [MapEditor] VeryFast shadow quality
			C_Selection_VeryFast => _("|LightMapQuality|Very fast"),
			//L16N [MapEditor] VeryNice shadow quality
			C_Selection_VeryNice => _("|LightMapQuality|High"),
			//L16N [MapEditor] No shadows
			C_Selection_None => _("|LightMapQuality|None")
		];
	}
	
	declare Options = "";
	declare Count = 0;
	foreach (Key => Option in _Options) {
		if (!Texts.existskey(Option)) continue;
		Count += 1;
		
		Options ^= """
<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -(Count-1)*1., 0.>, Styles::CircleSize_Bottom()))}}} data-value="{{{Option}}}">
	{{{Styles::BuildBackground(<0., 0., -1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop())}}}
	{{{Styles::BuildLine(<0., 0., 0.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", "id" => "Quad_Button"])}}}
	{{{Styles::BuildLabel(<0., -0.45, 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
		"text" => Texts[Option], "class" => "turbo2-text-menu"
	])}}}
</frame>
""";
	}
	
	return """
<manialink version="3" name="MapEditor:ShadowMenu">
<stylesheet>
	{{{Styles::Get()}}}
</stylesheet>
<frame z-index="5" id="Frame_Global">
	<frame pos="0 -92" z-index="1" hidden="1" id="Frame_Menu">
		<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<-MenuSizeX*0.5, 0., 0.>, Styles::CircleSize_Bottom()))}}}>
			{{{Styles::BuildBackground(<0., 0., 0.>, <MenuSizeX, Count+3.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop())}}}
			{{{Styles::BuildLine(<0., 0., 1.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftTop(), Colors::Color_White(), True, True, Text[Text])}}}
			{{{Styles::BuildLabel(<0., -0.45, 2.>, <MenuSizeX, 1.>, Styles::CircleSize_Bottom(), Styles::Align_LeftCenter2(), [
				//L16N [MapEditor] Title of the menu where the player can select the shadow quality
				"text" => Title, "textcolor" => Colors::GetColorML(Colors::Color_Black()), "class" => "turbo2-text-title"
			])}}}
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<0., -2., 3.>, Styles::CircleSize_Bottom()))}}} id="Frame_Buttons">
				{{{Options}}}
			</frame>
			<frame {{{Styles::BuildPosition2(Styles::GetPosition2(<MenuSizeX, -Count-2., 4.>, Styles::CircleSize_Bottom()))}}} id="Button_Confirm">
				{{{Styles::BuildLine(<0., 0., 0.>, <ButtonBgSize, 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightTop(), Colors::Color_Black(), True, True, ["scriptevents" => "1", MLE::Data_Triggers() => "B1", "class" => MLE::ML_Class(), "id" => "Quad_Confirm"])}}}
				{{{Styles::BuildButton(ButtonConfirm, <-0.5, -0.5, 2.>, <ButtonSize, ButtonSize>, Styles::CircleSize_Bottom(), Styles::Align_CenterCenter(), Text[Text])}}}
				{{{Styles::BuildLabel(<-1., -0.45, 1.>, <ButtonBgSize-1., 1.>, Styles::CircleSize_Bottom(), Styles::Align_RightCenter2(), [
					//L16N [MapEditor] Confirm an action
					"text" => _("|Infinitive|Confirm"), MLE::Data_Effects() => """B1:{{{MLE::Effect_LabelHover()}}}""", "class" => """turbo2-text-button {{{MLE::ML_Class()}}}""", "id" => "Label_Confirm"
				])}}}
			</frame>
		</frame>
	</frame>
</frame>
<script><!--
#Include "TextLib" as TL
#Include "AnimLib" as AL
{{{Manialink::DefaultIncludes()}}}
{{{MLE::ML_Includes()}}}

#Const C_Black	{{{Colors::GetColor(Colors::Color_Black())}}}
#Const C_Red	{{{Colors::GetColor(Colors::Color_Red())}}}

declare Integer[] G_Selectables;
declare CMlQuad G_QuadSelected;

{{{Manialink::Animations(["EaseOutQuad"])}}}
{{{Buttons::ML_Functions()}}}
{{{MLE::ML_Functions()}}}

Void InitSelectables() {
	G_Selectables.clear();
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		declare Color for Control = 0;
		Value = TL::ToInteger(Control.DataAttributeGet("value"));
		Color = 0;
		G_Selectables.add(Value);
		
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare ItemKey for Quad_Button = -1;
		ItemKey = Value;
	}
}

Void SelectButton(Integer _Selected) {
	declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	foreach (Control in Frame_Buttons.Controls) {
		declare Frame_Button <=> (Control as CMlFrame);
		declare Quad_Button <=> (Frame_Button.GetFirstChild("Quad_Button") as CMlQuad);
		declare Value for Frame_Button = -1;
		declare Color for Frame_Button = 0;
		if (Value == _Selected && Color == 0) {
			G_QuadSelected <=> Quad_Button;
			Color = 1;
			//LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Red())}}}" />""")}}}, 250, "EaseOutQuad");
		} else if (Value != _Selected && Color == 1) {
			Color = 0;
			LibManialink_Anim(Quad_Button, {{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Black())}}}" />""")}}}, 25, "EaseOutQuad");
		}
	}
}

Void UpdateSelection(Integer[] _Selection) {
	/*declare Frame_Buttons <=> (Page.GetFirstChild("Frame_Buttons") as CMlFrame);
	declare Shift = 0;
	foreach (Control in Frame_Buttons.Controls) {
		declare Value for Control = -1;
		if (_Selection.exists(Value)) {
			Control.Visible = True;
			Control.RelativePosition_V3.Y = Shift * {{{OptionSizeY}}};
			Shift -= 1;
		} else {
			Control.Visible = False;
		}
	}*/
}

Void SetVisibility(Boolean _Visible) {
	if (_Visible) {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 {{{Styles::GetSize2(<0., MenuPosY>, Styles::CircleSize_Bottom()).Y}}}" hidden="0" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
	} else {
		LibManialink_Anim({{{Manialink::Inject("""<frame pos="0 -92" hidden="1" id="Frame_Menu" />""")}}}, 250, "EaseOutQuad");
	}
}

main() {
	declare L_Visibility for Page = {{{C_DefaultVisibility}}};
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = -1;
	declare L_Selection for Page = {{{C_DefaultSelection}}};
	declare L_SelectionUpdate for Page = -1;
	
	declare PrevVisibility = {{{C_DefaultVisibility}}};
	declare PrevSelectedUpdate = -1;
	declare PrevSelectionUpdate = -1;
	
	G_Selectables.clear();
	
	LibButtons_Init();
  LibMLEffects_Init();
	InitSelectables();
	
	declare AnimDir = 1;
	declare AnimStartTime = Now;
	declare AnimDuration = 350;
	
	while (True) {
		yield;
		
		LibManialink_AnimLoop();
		LibButtons_Loop();
    LibMLEffects_Loop();
		
		if (PrevVisibility != L_Visibility) {
			PrevVisibility = L_Visibility;
			SetVisibility(L_Visibility);
		}
		
		if (PrevSelectionUpdate != L_SelectionUpdate) {
			PrevSelectionUpdate = L_SelectionUpdate;
			UpdateSelection(L_Selection);
		}
		
		if (PrevSelectedUpdate != L_SelectedUpdate) {
			PrevSelectedUpdate = L_SelectedUpdate;
			SelectButton(L_Selected);
			
			AnimDir = 1;
			AnimStartTime = Now;
		}
		
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlEvent::Type::MouseOver) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Hover}}}", [TL::ToText(ItemKey)]);
				} else if (Event.ControlId == "Quad_Confirm") {
					if ({{{C_BgAnim}}}) LibManialink_Anim(
						(Event.Control as CMlQuad),
						{{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Red())}}}" />""")}}},
						250,
						"EaseOutQuad"
					);
				}
			} else if (Event.Type == CMlEvent::Type::MouseOut) {
				if (Event.ControlId == "Quad_Confirm") {
					if ({{{C_BgAnim}}}) LibManialink_Anim(
						(Event.Control as CMlQuad),
						{{{Manialink::Inject("""<quad colorize="{{{Colors::GetColorML(Colors::Color_Black())}}}" />""")}}},
						250,
						"EaseOutQuad"
					);
				}
			} else if (Event.Type == CMlEvent::Type::MouseClick) {
				if (Event.Control != Null && Event.ControlId == "Quad_Button") {
					declare ItemKey for Event.Control = -1;
					SendCustomEvent("{{{C_Event_Click}}}", [TL::ToText(ItemKey)]);
				} else if (Event.ControlId == "Quad_Confirm") {
					SendCustomEvent("{{{C_Event_Confirm}}}", Text[]);
				}
			}
		}
		
		if (L_Visibility && G_QuadSelected != Null) {
			if (AnimDir > 0) {
				declare X = AL::EaseOutQuad(Now - AnimStartTime, C_Black.X, C_Red.X - C_Black.X, AnimDuration);
				declare Y = AL::EaseOutQuad(Now - AnimStartTime, C_Black.Y, C_Red.Y - C_Black.Y, AnimDuration);
				declare Z = AL::EaseOutQuad(Now - AnimStartTime, C_Black.Z, C_Red.Z - C_Black.Z, AnimDuration);
				
				G_QuadSelected.Colorize = <X, Y, Z>;
				if (Now > AnimStartTime + AnimDuration) {
					AnimDir = -1;
					AnimStartTime = Now;
				}
			} else if (AnimDir < 0) {
				declare X = AL::EaseOutQuad(Now - AnimStartTime, C_Red.X, C_Black.X - C_Red.X, AnimDuration);
				declare Y = AL::EaseOutQuad(Now - AnimStartTime, C_Red.Y, C_Black.Y - C_Red.Y, AnimDuration);
				declare Z = AL::EaseOutQuad(Now - AnimStartTime, C_Red.Z, C_Black.Z - C_Red.Z, AnimDuration);
				
				G_QuadSelected.Colorize = <X, Y, Z>;
				if (Now > AnimStartTime + AnimDuration) {
					AnimDir = 1;
					AnimStartTime = Now;
				}
			}
		}
	}
}
--></script>
</manialink>	
""";
}

// ---------------------------------- //
// Public
// ---------------------------------- //
// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return						The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return						The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Get the events constants
Text Event_Hover() { return C_Event_Hover; }
Text Event_Click() { return C_Event_Click; }
Text Event_Confirm() { return C_Event_Confirm; }

// ---------------------------------- //
/// Get the selection constants
Integer Selection_Null() { return C_Selection_Null; }
Integer Selection_Fast() { return C_Selection_Fast; }
Integer Selection_Nice() { return C_Selection_Nice; }
Integer Selection_VeryFast() { return C_Selection_VeryFast; }
Integer Selection_VeryNice() { return C_Selection_VeryNice; }
Integer Selection_None() { return C_Selection_None; }

// ---------------------------------- //
/** Select a button in the menu
 *
 *	@param	_Selection			The button to select
 *	@param	_PlaySound			Play a sound
 */
Void Select(Integer _Selection, Boolean _PlaySound) {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Selection for Page = C_DefaultSelection;
	if (!L_Selection.exists(_Selection)) return;
	
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	L_Selected = _Selection;
	L_SelectedUpdate = Now;
	
	if (_PlaySound) Sound::Play("EditorMenuMove");
}

// ---------------------------------- //
/// Overload Select()
Void Select(Integer _Selection) {
	Select(_Selection, False);
}

// ---------------------------------- //
/** Select the next or the previous button in the menu
 *
 *	@param	_Shift				In which direction to shift
 */
Void Shift(Integer _Shift) {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Selection for Page = C_DefaultSelection;
	declare L_SelectedUpdate for Page = -1;
	declare L_Selected for Page = C_Selection_Null;
	declare Key = L_Selection.keyof(L_Selected);
	if (Key < 0) Key = 0;
	
	Key += _Shift;
	if (Key < 0) Key = L_Selection.count - 1;
	else if (Key > L_Selection.count - 1) Key = 0;
	
	L_Selected = L_Selection[Key];
	L_SelectedUpdate = Now;
}

// ---------------------------------- //
/// Go to the next entry in the menu
Void Next() {
	Sound::Play("EditorMenuMove");
	Shift(1);
}

// ---------------------------------- //
/// Go to the previous entry in the menu
Void Prev() {
	Sound::Play("EditorMenuMove");
	Shift(-1);
}

// ---------------------------------- //
/** Select the options displayed in the menu
 *
 *	@param	_Options				The options to display
 */
Void SetOptions(Integer[] _Options) {
	if (_Options.count <= 0) return;
	
	declare LayerShadowMenu <=> Layers::Get("ShadowMenu");
	declare Page <=> LayerShadowMenu.LocalPage;
	declare L_SelectionUpdate for Page = -1;
	declare L_Selection for Page = C_DefaultSelection;
	
	L_Selection.clear();
	foreach (Option in C_Selection) {
		if (_Options.exists(Option)) L_Selection.add(Option);
	}
	if (L_Selection.count <= 0) L_Selection = C_DefaultSelection;
	
	L_SelectionUpdate = Now;
	
	Buttons::Load();
	LayerShadowMenu.ManialinkPage = Private_GetMenuML(L_Selection);
	Buttons::Unload();
	
	// Check that the selection option still exists
	Shift(0);
}

// ---------------------------------- //
/** Check if the menu is visible
 *
 *	@return						True if the menu is visible, False otherwise
 */
Boolean IsVisible() {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Visibility for Page = C_DefaultVisibility;
	return L_Visibility;
}

// ---------------------------------- //
/** Set the menu visibility
 *
 *	@param	_Visible			Show the menu if True
 */
Void SetVisibility(Boolean _Visible) {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Visibility for Page = C_DefaultVisibility;
	
	if (_Visible && !L_Visibility) {	
		Select(C_Selection_Fast);
	}
	
	L_Visibility = _Visible;
}

// ---------------------------------- //
/// Show the menu
Void Show() {
	SetVisibility(True);
}

// ---------------------------------- //
/// Hide the menu
Void Hide() {
	SetVisibility(False);
}

// ---------------------------------- //
/// Toggle the menu
Void Toggle() {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Visibility for Page = C_DefaultVisibility;
	
	SetVisibility(!L_Visibility);
}

// ---------------------------------- //
/** Valid the current selection
 *
 *	@return						The current selection
 */
Integer Valid() {
	declare Page <=> Layers::GetPage("ShadowMenu");
	declare L_Selected for Page = C_Selection_Null;
	
	Sound::Play("EditorMenuValid");
	if (C_Selection.exists(L_Selected)) return L_Selected;
	return C_Selection_Null;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Destroy("ShadowMenu");
	//Layers::Unload();
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	
	//Layers::Load();
	Buttons::Load();
	declare LayerShadowMenu <=> Layers::Create("ShadowMenu");
	LayerShadowMenu.ManialinkPage = Private_GetMenuML(C_DefaultSelection);
	Buttons::Unload();
	
	declare Page <=> LayerShadowMenu.LocalPage;
	declare L_Visibility for Page = C_DefaultVisibility;
	declare L_Selected for Page = C_Selection_Null;
	declare L_SelectedUpdate for Page = -1;
	declare L_Selection for Page = C_DefaultSelection;
	declare L_SelectionUpdate for Page = -1;
	L_Visibility = C_DefaultVisibility;
	L_Selected = C_Selection_Null;
	L_SelectedUpdate = -1;
	L_Selection = C_DefaultSelection;
	L_SelectionUpdate = -1;
	
	Hide();
}