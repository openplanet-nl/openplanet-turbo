
#Const C_NbSceneries 1


declare Text   			G_FrameContent;
declare Vec2   			G_QuadSize;
declare Vec2   			G_PosFirstQuad;
declare Vec2   			G_QuadMarge;
declare Integer			G_Count_InstancesX;
declare Integer			G_Count_InstancesY;
declare Text[]			G_CatName;
declare Real[]			G_CatPosnX;

Void UnLoad()
{
	G_FrameContent     = "";
	G_PosFirstQuad     = <0., 0.>;
	G_QuadMarge        = <0., 0.>;
	G_CatPosnX.clear();
	G_CatName.clear();
}

Void Init(Real _SizeXQuad, Real _SizeYQuad, Integer Count_InstancesX, Integer Count_InstancesY)
{
	UnLoad();
	G_QuadSize = <_SizeXQuad, _SizeYQuad>;
	G_Count_InstancesY = Count_InstancesY;
	G_Count_InstancesX = Count_InstancesX;
}

Void SetPosFirstQuad(Real _PosX, Real _PosY)
{
	G_PosFirstQuad = <_PosX, _PosY>;
}

Void SetQuadMarge(Real _MargeX, Real _MargeY)
{
	G_QuadMarge = <_MargeX, _MargeY>;
}


Void AddLabel(Text _Id, Vec2 _Position, Integer _Size, Text _Font, Text _Color, Text _HAlign, Text _VAlign) {
	declare Text AddFont;
	if(_Font != "") AddFont = """textfont="{{{_Font}}}" """;
	G_CatName.add(_Id);
	G_CatPosnX.add(_Position.X);
	
	G_FrameContent^="""
	<label id="Content_{{{_Id}}}" halign="{{{_HAlign}}}" valign="{{{_VAlign}}}" textcolor="{{{_Color}}}" {{{AddFont}}} posn="{{{_Position.X}}} {{{_Position.Y}}} 2" sizen="{{{_Size}}}"/>""";
}

Void AddLabel(Text _Id, Vec2 _Position, Integer _Size) {
	 AddLabel(_Id, _Position, _Size, "", "fff", "left", "center");
}

Void AddQuad(Text _Id, Vec2 _Position, Vec2 _Size) {
	G_CatName.add(_Id);
	G_CatPosnX.add(_Position.X);
	G_FrameContent^="""
	<quad id="Content_{{{_Id}}}" halign="left" valign="center" sizen="{{{_Size.X}}} {{{_Size.Y}}}" posn="{{{_Position.X}}} {{{_Position.Y}}} 2"/>
	""";
}


Text InjectInFrameModel(){
	declare Text FrameBouton="""<framemodel id="Frame_Bouton">
		<quad halign="center" valign="center" sizen="{{{G_QuadSize.X}}} {{{G_QuadSize.Y}}}" bgcolor="333" id="Quad_Bg" scriptevents="1" opacity="0.3" />""";
	FrameBouton^=G_FrameContent;
	FrameBouton^="""</framemodel>""";

	return FrameBouton;
}

Text InjectInManialink(){
	declare Text BrowseContent;

	declare Real PosnY = G_PosFirstQuad.Y + G_QuadSize.Y;
	for(I, 0, G_CatName.count-1) {
		BrowseContent^="""<label id="Content" posn="{{{G_PosFirstQuad.X + G_CatPosnX[I]}}} {{{PosnY}}} 2." textcolor="000" halign="left" valign="left" sizen="30 30" text="{{{G_CatName[I]}}}"/>""";
	}

	BrowseContent^="""
		<quad halign="center" valign="center" sizen="{{{G_QuadSize.X}}} {{{G_QuadSize.Y}}}" bgcolor="922" id="Quad_Selector" posn="{{{G_PosFirstQuad.X}}} {{{G_PosFirstQuad.Y}}} 6"  opacity="0.7" />""";
	
	for(I, 0, G_Count_InstancesY -1)
	{
		declare Real IndexY = I*1.;
		declare Real PosnY = G_PosFirstQuad.Y - IndexY*G_QuadSize.Y - IndexY*G_QuadMarge.Y;
		
		for(J, 0, G_Count_InstancesX -1)
		{
			declare Real IndexJ = J*1.;
			declare Real PosnX = G_PosFirstQuad.X + IndexJ*G_QuadSize.X + IndexJ*G_QuadMarge.X;
			BrowseContent^="""
			<frameinstance modelid="Frame_Bouton" posn="{{{PosnX}}} {{{PosnY}}} 5." id="Frame_Instance{{{I}}}{{{J}}}" />""";
		}
	}
	return BrowseContent;
}


Text InjectInGlobalDeclaration(){
	declare Text GlobalInject;
	GlobalInject="""
	declare Integer G_Selection;
	declare Integer	G_IndexSelectY;
	declare Integer	G_IndexSelectX;
	declare Integer	G_IndexPage;
	""";
	return GlobalInject;
}

Text InjectInInit(){
	declare Text Init;
	Init="""
	G_Selection    	= -1;
	G_IndexSelectX 	= 0;
	G_IndexSelectY 	= 0;
	G_IndexPage		= 0;
	""";
	return Init;
}

Text InjectInMenuNavigation(){
	declare Text MenuNavigationContent;
	MenuNavigationContent="""
	switch(Event.MenuNavAction) {
		case CMlEvent::EMenuNavAction::Up : {
			if(G_IndexSelectY > 0)
			{
				G_IndexSelectY -= 1;
				UpdateSelection();
			}
		}
		case CMlEvent::EMenuNavAction::Down : {
			if(G_IndexSelectY < {{{G_Count_InstancesY - 1}}})
			{
				G_IndexSelectY += 1;
				UpdateSelection();
			}
		}
		case CMlEvent::EMenuNavAction::Left : {
			if(G_IndexSelectX > 0)
			{
				
				G_IndexSelectX -= 1;
				G_IndexPage -= 1;
				SwitchPage();
				UpdateSelection();
			}
			
			log("LEFT");
		}
		case CMlEvent::EMenuNavAction::Right : {
			if(G_IndexSelectX < {{{G_Count_InstancesX - 1}}})
			{
				
				G_IndexSelectX 	+= 1;
				G_IndexPage 	+= 1;
				SwitchPage();
				UpdateSelection();
			}
			
			// if(G_IndexSelectX < )
			// {
				// G_NbPages
			// }
		}
		case CMlEvent::EMenuNavAction::Select : {
			
			G_Selection = G_IndexSelectY;
		}
		case CMlEvent::EMenuNavAction::Cancel : {
			SendCustomEvent("GotoPrevious", [""]);
		}
		case CMlEvent::EMenuNavAction::AppMenu : {
			SendCustomEvent("GotoPrevious", [""]);
		}
	}
	break;
	""";

	return MenuNavigationContent;
}


Text InjectInFunction(){
	declare Text Functions;

	Functions="""

	Void SetColumnTextData(Text _Id, Integer _Index, Text _ContentLabel){
		declare CMlFrame Frame_Instance <=> (Page.GetFirstChild("Frame_Instance"^_Index^"0") as CMlFrame);
		if(Frame_Instance == Null){
			log("[SetColumnTextData()]Frame_Instance"^_Index^"0 doesn't exist");
			return;
		}
		declare CMlLabel MyLabel <=> (Frame_Instance.GetFirstChild("Content_"^_Id) as CMlLabel);
		MyLabel.Value = _ContentLabel;
	}

	Void SetColumnImageData(Text _Id, Integer _Index, Text _ImageURL){
		declare CMlFrame Frame_Instance <=> (Page.GetFirstChild("Frame_Instance"^_Index^"0") as CMlFrame);
		if(Frame_Instance == Null){
			log("[SetColumnImageData()]Frame_Instance"^_Index^"0 doesn't exist");
			return;
		}
		declare CMlQuad MyQuad <=> (Frame_Instance.GetFirstChild("Content_"^_Id) as CMlQuad);
		MyQuad.ChangeImageUrl(_ImageURL);
	}

	Void UpdateSelection()
	{
		declare CMlFrame NewFrame_Instance <=> (Page.GetFirstChild("Frame_Instance"^G_IndexSelectY^G_IndexSelectX) as CMlFrame);
		declare CMlQuad  Quad_Selector     <=> (Page.GetFirstChild("Quad_Selector")                                as CMlQuad);
		Quad_Selector.RelativePosition.X    = NewFrame_Instance.RelativePosition.X;
		Quad_Selector.RelativePosition.Y    = NewFrame_Instance.RelativePosition.Y;
		
	}
	
	Integer GetSelection()
	{
		declare Integer Selection;
		if(G_Selection < 0) return -1;
		Selection = G_Selection;
		G_Selection = -1;
		return Selection;
	}

	Integer GetIndexFocusX()
	{
		return G_IndexSelectX;
	}
	
	Integer GetIndexFocusY()
	{
		return G_IndexSelectY;
	}

	""";
	return Functions;
}
