#Include "TextLib"			as TextLib
#Include "MathLib" 			as MathLib
#Include "Libs/Openplanet/TMConsole/Menu/Pages.Script.txt"										as Pages
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"									as Layers
#Include "Libs/Openplanet/TMConsole/Menu/IngameAccessController.Script.txt"						as IngameAccessController
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/MainMenuHandler.Script.txt"				as MainMenuHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/BrowseRoomsHandler.Script.txt"				as BrowseRoomsHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/BrowseTracksHandler.Script.txt"			as BrowseTracksHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/CommunityTracksHandler.Script.txt"			as CommunityTracksHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/HelmetHandler.Script.txt"					as HelmetHandler
#Include "Libs/Openplanet/TMConsole/Menu/MenuMusicController.Script.txt" 						as MenuMusicController
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ConnectionHandler.Script.txt" 				as ConnectionHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/RoomManagerHandler.Script.txt" 			as RoomManagerHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/MyRoomsHandler.Script.txt" 				as MyRoomsHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/MapsOverviewHandler.Script.txt" 			as MapsOverviewHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/KindOfTracksHandler.Script.txt"			as KindOfTracksHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/MusicsHandler.Script.txt"					as MusicsHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ChallengeManagerHandler.Script.txt"		as ChallengeManagerHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/MyTracksHandler.Script.txt"				as MyTracks
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/RoomTracklistHandler.Script.txt"			as RoomTracklist
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ServerBrowserHandler.Script.txt"			as ServerBrowser
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ChallengeBrowserHandler.Script.txt"		as ChallengeBrowserHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ChallengeBuddiesBrowserHandler.Script.txt"	as ChallengeBuddiesBrowserHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/JoinAFriendHandler.Script.txt"				as JoinAFriendHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/PopUp_JoinAFriendHandler.Script.txt"		as PopUp_JoinAFriendHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/StartDemoHandler.Script.txt"				as StartDemoHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ChallengeTracksHandler.Script.txt"			as ChallengeTracksHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ChallengeBuddiesHandler.Script.txt"		as ChallengeBuddiesHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/TrackbuilderWorkshopHandler.Script.txt"	as TrackbuilderWorkshopHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/SettingsHandler.Script.txt"				as SettingsHandler
#Include "Libs/Openplanet/TMConsole/Logger.Script.txt"											as Logger
#Include "Libs/Openplanet/TMConsole/Menu/Controller/ModeController.Script.txt" 					as ModeController
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/RankingModuleHandler.Script.txt"			as RankingModuleHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/PadHandler.Script.txt"						as PadHandler
#Include "Libs/Openplanet/TMConsole/Menu/Controller/Solo_CampaignController.Script.txt"			as CampaignController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/SuperSolo_CampaignController.Script.txt"		as SuperSolo_CampaignController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/Duo_CampaignController.Script.txt"			as CampaignDuoController
#Include "Libs/Openplanet/TMConsole/Menu/XmlCreator.Script.txt"									as XmlCreator
#Include "Libs/Openplanet/TMConsole/Menu/Controller/OnlineController.Script.txt"	 				as OnlineController
#Include "Libs/Openplanet/TMConsole/Menu/PimpUnlock.Script.txt" 									as PimpUnlock
#Include "Libs/Openplanet/TMConsole/Menu/Controller/SmartStartController.Script.txt" 			as SmartStart
#Include "Libs/Openplanet/TMConsole/PopUpManager.Script.txt"										as PopUpManager
#Include "Libs/Openplanet/TMConsole/Menu/Controller/PrivilegeController.Script.txt"				as PrivilegeController
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ZoneHandler.Script.txt"					as ZoneHandler
#Include "Libs/Openplanet/TMConsole/TMTEnvironments.Script.txt"		   							as TMTEnvironments
#Include "Libs/Openplanet/TMConsole/Menu/MenuTracking.Script.txt"								as MenuTracking
#Include "Libs/Openplanet/TMConsole/Menu/MenuContext.Script.txt"									as MenuContext
#Include "Libs/Openplanet/TMConsole/Menu/Controller/OnlinePrivilegeController.Script.txt"		as OnlinePrivilegeController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/TaskMessageErrorController.Script.txt"		as TaskMessageErrorController
#Include "Libs/Openplanet/TMConsole/Menu/LibCheats.Script.txt"									as Cheats
#Include "Libs/Openplanet/UIPadButtons.Script.txt" 												as LibUIButtons

declare Text G_ActualLayer;
declare Integer G_ActiveButtonPlatform;

declare CWebServicesTaskResult G_TaskUplayLaunch;
declare CWebServicesTaskResult G_TaskBuyFullGame;
declare CManiaPlanet::EUplayFlow G_UplayFlow;

declare Text FakeExternalRequest_Type;

// ok, pas terrible, mais il nous faut un délai avant que uplay soit synchro
// sinon, il croit qu'on a aucune action
// declare Integer G_UplaySynchroDelay;

Void FakeExternalRequest(Text _Type) {
	FakeExternalRequest_Type  = _Type;
}

Void SetNextPage(Text _PageName) {
	
}

Void WarnNotEnoughParams(CMlAppEvent _Event) {
	Logger::Warn("[Menucontroller] event "^_Event.CustomEventType^": not enough params ["^_Event.CustomEventData^"]");
}

Void LoadNews() {
	G_ActiveButtonPlatform = LibUIButtons::GetPlatform();
	if(ManiaPlanet.MasterServer_MainMSUser == Null) {
		Logger::Warn("LoadNews() : MainUser Null");
		return;
	}
	Logger::Log("re-Load News");
	
	declare Integer 	UplayNewsUpdate			for LocalUser;
	declare Text[] 		UplayNewsID				for LocalUser;
	declare Text[] 		UplayNewsMediaUrls		for LocalUser;
	declare Text[] 		UplayNewsMediaType		for LocalUser;
	declare Text[] 		UplayNewsBodys			for LocalUser;
	declare Integer[] 	UplayNewsDisplayTime	for LocalUser;
	declare Text[] 		UplayNewsLinkType		for LocalUser;
	declare Text[] 		UplayNewsLinkUrls		for LocalUser;
	
	UplayNewsUpdate			= Now;
	UplayNewsID 			= Text[];
	UplayNewsMediaUrls 		= Text[];
	UplayNewsMediaType 		= Text[];
	UplayNewsBodys 			= Text[];
	UplayNewsDisplayTime 	= Integer[];
	UplayNewsLinkType 		= Text[];
	UplayNewsLinkUrls		= Text[];
	
	declare CNetUbiServicesNews[] AllNews;
	declare Text[] AllNewsIds;
	
	foreach(ProfileNews in ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews) {
		declare Text MyNewsId = ProfileNews.NewsId;
		if(! AllNewsIds.exists(MyNewsId)) {
			AllNews.add(ProfileNews);
			AllNewsIds.add(MyNewsId);
		}
	}
	foreach(SpaceNews in ManiaPlanet.MasterServer_MainMSUser.UbiServicesSpaceNews) {
		declare Text MyNewsId = SpaceNews.NewsId;
		if(! AllNewsIds.exists(MyNewsId)) {
			AllNews.add(SpaceNews);
			AllNewsIds.add(MyNewsId);
		}
	}
	
	// log("ManiaPlanet.MasterServer_MainMSUser.UbiServicesSpaceNews "^ManiaPlanet.MasterServer_MainMSUser.UbiServicesSpaceNews);
	// log("ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews "^ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews);
	
	// sort by priority (de la plus petite à la plus grande)
	// bubble sort.
	// yeah, yeah, I know
	declare Integer AllNewsCount = AllNews.count;
	for(I, 0, AllNewsCount-1) {
		declare Integer PrioI = AllNews[I].Priority;
		for(J, 0, I-1) {
			declare Integer PrioJ = AllNews[J].Priority;
			if(PrioI < PrioJ) {
				declare CNetUbiServicesNews BufferNews <=> AllNews[J];
				AllNews[J] <=> AllNews[I];
				AllNews[I] <=> BufferNews;
			}
		}
	}
	/*
	foreach(News in AllNews) {
		Logger::Log("News.id, Prio, IsProfile, url: "^News.NewsId^", "^News.Priority^", "^ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews.exists(News)^", "^News.MediaUrl);
	}
	*/
	
	// profile news first.
	foreach(News in AllNews) {
		// Logger::Log("News.MediaUrl: "^News.MediaUrl);
		// Logger::Log("News.Body: "^News.Body);
		declare Text NewsID 		= News.NewsId;
		declare Text NewsMediaUrl 	= News.MediaUrl;
		declare Text NewsMediaType 	= News.MediaType;
		// Logger::Log("NewsMediaType : "^NewsMediaType);
		declare Text NewsBody 		= News.Body;
		declare Integer DisplayTime = News.DisplayTime;
		
		declare Text LinkType	= "";
		declare Text LinkUrl 	= "";
		
		if(News.LinksCount > 0) {
			// EG : on ne supporte que 1 lien par news.
			declare Text LinkActionName = "";
			declare Text LinkActionDescription = "";
			
			News.GetLinkInfo(0, LinkType, LinkUrl, LinkActionName, LinkActionDescription);
			// log("LinkType ! "^LinkType);
			// log("LinkUrl ! "^LinkUrl);
		}
		
		
		UplayNewsID.add(NewsID);
		UplayNewsMediaUrls.add(NewsMediaUrl);
		UplayNewsMediaType.add(NewsMediaType);
		UplayNewsBodys.add(NewsBody);
		UplayNewsDisplayTime.add(DisplayTime);
		UplayNewsLinkType.add(LinkType);
		UplayNewsLinkUrls.add(LinkUrl);
		
		// Logger::Log("News.id, Prio, IsProfile, url: "^News.NewsId^", "^News.Priority^", "^ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews.exists(News)^", "^News.MediaUrl);
	}
	
	// Logger::Log("UplayNewsUpdate : "^UplayNewsUpdate);
	// Logger::Log("UplayNewsID"^UplayNewsID);
	// Logger::Log("UplayNewsMediaUrls"^UplayNewsMediaUrls);
	// Logger::Log("UplayNewsBodys"^UplayNewsBodys);
	// Logger::Log("UplayNewsDisplayTime"^UplayNewsDisplayTime);
	// Logger::Log("UplayNewsLinkType"^UplayNewsLinkType);
	// Logger::Log("UplayNewsLinkUrls"^UplayNewsLinkUrls);	
}

Void UplayWelcomeBackLoop() {
	// Logger::Log(" == UplayWelcomeBackLoop == ");
	declare Boolean UplayWelcomeBackDone for LocalUser = False;
	declare Boolean IsTryingToAutoJoinDontMessWithUplay for LocalUser;
	
	if(IsTryingToAutoJoinDontMessWithUplay) {
		UplayWelcomeBackDone = True;
		return;
	}
	
	// HACK 
	// Logger::Log(" == UplayWelcomeBackDone == " ^ UplayWelcomeBackDone);
	// UplayWelcomeBackDone = False;return;
	
	if(UplayWelcomeBackDone) return;
	if(UserMgr.MainUser == Null) return;
	if(! UserMgr.MainUser.PersistentIsReady) return;
	
	if(ManiaPlanet.MasterServer_MainMSUser == Null) return;
	if(ManiaPlanet.MasterServer_MainMSUser.ConnectionStatus == CNetMasterServerUserInfo::EMasterServerConnectionStatus::Connecting ) return;
	
	declare persistent Integer UplayBootCount for UserMgr.MainUser;
	declare persistent Boolean UplayBootShown for UserMgr.MainUser;
	
	// HACK : RaZ du compteur au besoin.
	// UplayBootCount = 0;
	// UplayBootShown = False;
	// UplayWelcomeBackDone = True;
	// Logger::Log(" Uplay Counter RAZ done , UplayBootShown = "^UplayBootShown);
	// UserMgr.MainUser.PersistentSave();
	// return;
	
	UplayBootCount = UplayBootCount + 1;
	
	// Logger::Log(" == UplayWelcomeBackLoop  - UplayBootCount updated == ");
	// Logger::Log("UplayBootCount = "^UplayBootCount^" UplayBootShown: "^UplayBootShown);
	
	UserMgr.MainUser.PersistentSave();
	
	UplayWelcomeBackDone = True;
	
	if(ManiaPlanet.MasterServer_MainMSUser.ConnectionStatus != CNetMasterServerUserInfo::EMasterServerConnectionStatus::Connected ) return;
	declare Boolean ConflictWithRankingZoneFirstChoice = (ManiaPlanet.MasterServer_MainMSUser != Null) && ManiaPlanet.MasterServer_MainMSUser.NeedToChangeZone;
	declare Boolean ConflictWithJoinSession = PrivilegeController::IsTryingToJoinSession();

	if(!UplayBootShown && UplayBootCount >= 2 &&  !ConflictWithRankingZoneFirstChoice && !ConflictWithJoinSession) {
		UplayBootShown = MainMenuHandler::ShowUbisoftClubPopup("MainSelector", True);
	}
}

Void NewsLoop() {
	if(ManiaPlanet.MasterServer_MainMSUser == Null) return;
	
	declare Integer		UplayNewsPrevNewsCount	for LocalUser = 0;
	
	declare Integer CurrentNewsCount = ManiaPlanet.MasterServer_MainMSUser.UbiServicesProfileNews.count + ManiaPlanet.MasterServer_MainMSUser.UbiServicesSpaceNews.count;
	
	if(UplayNewsPrevNewsCount != CurrentNewsCount) {
		UplayNewsPrevNewsCount = CurrentNewsCount;
		LoadNews();
	}
}

Boolean CommonLoops() {
	/*
	if(PlatformRequest_Type != "")
	{
		//Text[] PlatformRequest_Data
		log("PlatformRequest_Data: " ^ PlatformRequest_Data);
		PlatformRequest_Clear();
		Pages::GotoNext(G_NextPage);
	}
	*/

	if(ExternalRequest_Type == "logout" || FakeExternalRequest_Type == "logout") {
		FakeExternalRequest_Type = "";
		ExternalRequest_Clear();
		
		UILayerDestroyAll();
		return False;
	}
	else if (ExternalRequest_Type == "AutoJoinSession" || FakeExternalRequest_Type == "Hack_AutoJoinSession")
	{
		declare Boolean IsTryingToAutoJoinDontMessWithUplay for LocalUser;
		IsTryingToAutoJoinDontMessWithUplay = True;
		
		declare Text CurrentPage = Pages::GetCurrentPageName();
		if(CurrentPage != "Intro" && CurrentPage != "StartDemo")
		{
			
			declare Text SessionId;
			if(ExternalRequest_Data.count > 0)
			{
				SessionId = ExternalRequest_Data[0];
			}

			ExternalRequest_Clear();
			FakeExternalRequest_Type = "";
			ConnectionHandler::SetAutoJoinSessionId(SessionId);
			ConnectionHandler::AutoJoinSession();
		}
		
	}
	else if (ExternalRequest_Type == "External_LaunchEditor")
	{
		declare Text EditorType = ExternalRequest_Data[0];
		ExternalRequest_Clear();
		if(EditorType == "EditNewTrack")
		{
			KindOfTracksHandler::LaunchEditor();
		}
		else
		{
			KindOfTracksHandler::LaunchRandomGenerator();
		}
		
	}
	else if(ExternalRequest_Type == "ChallengeOpponent" || FakeExternalRequest_Type == "ChallengeOpponent") 
	{
		log("[MAINMENU] req = " ^ ExternalRequest_Type ^ "(" ^ ExternalRequest_Data ^ ")");
		FakeExternalRequest_Type = "";
		
		declare TrackPath 			= ExternalRequest_Data[0];
		declare TrackDifficulty 	= TextLib::ToInteger(ExternalRequest_Data[1]);
		declare TrackEnvironment 	= TextLib::ToInteger(ExternalRequest_Data[2]);
		declare TrackGhostUrl 		= ExternalRequest_Data[3];
		// log("TRACK GHOST URL: "^TrackGhostUrl);
		
		ExternalRequest_Clear();
		
		declare Integer PlayerMedals;
		declare Integer MedalsNeedsForNextUnlock;
		declare Integer MedalTypeNeededForNextUnlock;
		declare Boolean SameEnviro;
		declare Boolean SameDifficulty;
		declare Integer LastMedal;
		declare Integer NumberOfBronze;
		declare Integer NumberOfSilver;
		declare Integer NumberOfGold;
		declare Integer NumberOfAuthor;
		declare Integer NbMedalsToUnlockPimp;
		
		declare Integer[] MedalsByTypeByEnviroDiff;
		declare Integer[] MedalsByTypeByDiff;
		
		declare Text    Mode        = ModeController::GetModeName();
		
		if(Mode == "TMC_CampaignDuo")
		{
			PlayerMedals             = CampaignDuoController::GetPlayerMedals();
			declare Integer[]	NextUnlock = CampaignDuoController::GetNextUnlock();
			MedalsNeedsForNextUnlock 		= NextUnlock[0];
			MedalTypeNeededForNextUnlock 	= NextUnlock[1];
			SameEnviro               = CampaignDuoController::IsSameEnviro(TrackEnvironment);
			SameDifficulty           = CampaignDuoController::IsSameDifficulty(TrackDifficulty);
			LastMedal                = CampaignDuoController::GetLastMedal();
			CampaignDuoController::ActualTrackInfo(TrackDifficulty, TrackEnvironment, 0, 0);
			NumberOfBronze           = CampaignDuoController::GetMedalByType(3);
			NumberOfSilver           = CampaignDuoController::GetMedalByType(2);
			NumberOfGold             = CampaignDuoController::GetMedalByType(1);
			NumberOfAuthor           = CampaignDuoController::GetMedalByType(0);
			NbMedalsToUnlockPimp	 = -1;
		}
		else
		{
			declare Boolean IsInSuperSolo for LocalUser;
		
			if(IsInSuperSolo) {
				PlayerMedals             = SuperSolo_CampaignController::GetPlayerMedals();
				declare Integer[]	NextUnlock = SuperSolo_CampaignController::GetNextUnlock();
				MedalsNeedsForNextUnlock 		= NextUnlock[0];
				MedalTypeNeededForNextUnlock 	= NextUnlock[1];
				SameEnviro               = SuperSolo_CampaignController::IsSameEnviro(TrackEnvironment);
				SameDifficulty           = SuperSolo_CampaignController::IsSameDifficulty(TrackDifficulty);
				LastMedal                = SuperSolo_CampaignController::GetLastMedal();
				SuperSolo_CampaignController::ActualTrackInfo(TrackDifficulty, TrackEnvironment, 0, 0);
				NumberOfBronze           = SuperSolo_CampaignController::GetMedalByType(3);
				NumberOfSilver           = SuperSolo_CampaignController::GetMedalByType(2);
				NumberOfGold             = SuperSolo_CampaignController::GetMedalByType(1);
				NumberOfAuthor           = SuperSolo_CampaignController::GetMedalByType(0);
				NbMedalsToUnlockPimp	 = PimpUnlock::GetNbOfMedalsToNextUnlock() ;
				
				MedalsByTypeByEnviroDiff 	= SuperSolo_CampaignController::GetCurrentDoubleBlockMedals(TrackEnvironment, TrackDifficulty);
				MedalsByTypeByDiff 			= SuperSolo_CampaignController::GetMedalsByDifficulty(TrackDifficulty);
			} else {
				PlayerMedals             = CampaignController::GetPlayerMedals();
				declare Integer[]	NextUnlock = CampaignController::GetNextUnlock();
				MedalsNeedsForNextUnlock 		= NextUnlock[0];
				MedalTypeNeededForNextUnlock 	= NextUnlock[1];
				SameEnviro               = CampaignController::IsSameEnviro(TrackEnvironment);
				SameDifficulty           = CampaignController::IsSameDifficulty(TrackDifficulty);
				LastMedal                = CampaignController::GetLastMedal();
				CampaignController::ActualTrackInfo(TrackDifficulty, TrackEnvironment, 0, 0);
				NumberOfBronze           = CampaignController::GetMedalByType(3);
				NumberOfSilver           = CampaignController::GetMedalByType(2);
				NumberOfGold             = CampaignController::GetMedalByType(1);
				NumberOfAuthor           = CampaignController::GetMedalByType(0);
				NbMedalsToUnlockPimp	 = PimpUnlock::GetNbOfMedalsToNextUnlock() ;
				
				MedalsByTypeByEnviroDiff 	= CampaignController::GetCurrentDoubleBlockMedals(TrackEnvironment, TrackDifficulty);
				MedalsByTypeByDiff 			= CampaignController::GetMedalsByDifficulty(TrackDifficulty);
			}
			
		}
		
		declare Text SettingsXml = XmlCreator::GetXml(
			PlayerMedals, 
			LastMedal, 
			MedalsNeedsForNextUnlock, 
			MedalTypeNeededForNextUnlock, 
			TrackEnvironment, 
			TrackDifficulty-1, 
			SameEnviro, 
			SameDifficulty, 
			TrackGhostUrl^"", 
			NumberOfBronze, 
			NumberOfSilver, 
			NumberOfGold, 
			NumberOfAuthor, 
			NbMedalsToUnlockPimp,
			MedalsByTypeByEnviroDiff,
			MedalsByTypeByDiff);
			
		// ChallengeOpponent -> uniquement sur les maps de la campagne.
		IngameAccessController::PlayTrack(TrackPath, "TMC_CampaignSolo", SettingsXml, "OneScreen", True, TrackEnvironment, False);
		BrowseTracksHandler::ExitIngameFeedbackToUI();
	}
	
	foreach(PadIndex => Pad in Input.Pads) 
	{
		if(Input.Pads.existskey(Pad))
		{
			foreach(Button in Input.Pads[PadIndex].ButtonEvents)
			{
				switch(Button) 
				{
					case CInputPad::EButton::RightStick : 
					{
						declare CUILayer HeaderInfoLayer <=> Layers::Get("GlobalLeaderBoard");
						LayerCustomEvent(HeaderInfoLayer, "SwitchVisibility", [""]);
						
					}
					case CInputPad::EButton::LeftStick : 
					{
						//log("Here: " ^ ManiaPlanet.GlobalRanking_Get(DataMgr.MenuUserId, "Europe"));
					}
				}
			}
		}
	}

	
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;
		//log("Event.CustomEventType: " ^ Event.CustomEventType);
		switch(Event.CustomEventType) {
			// debug
			case "FakeExternalRequest": {
				FakeExternalRequest(Event.CustomEventData[0]);
			}
			case "GotoPage": {
				// HACK EG : décommenter pour teste les Actions Ubi Club
				// MenuAchievements::SendUplayActionEvent("TEST");
				
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text NewPage = Event.CustomEventData[0];
				
				if(!PrivilegeController::CanIGotoPage(NewPage)) continue;
				Pages::GotoNext(NewPage);
				MenuMusicController::PlayPageAmbiance(NewPage);
			}
			case "GotoPrevious" : {
				Pages::GotoPrevious();
				declare Text PrevPage = Pages::GetCurrentPageName();
				MenuMusicController::PlayPageAmbiance(PrevPage);
				
				// EG : pas top, mais bon.
				if(PrevPage == "Main") {
					MenuTracking::StopModeContext();
				}
			}
			case "GoandStartPage": {
				declare Text NextPage = "Main";
				Pages::GoandStartPage(NextPage);
				MenuMusicController::PlayPageAmbiance(NextPage);
			}
			case "LaunchTransition" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text Transition = Event.CustomEventData[0];
				declare Text Param2 = "";
				if(Event.CustomEventData.count > 1) Param2 = Event.CustomEventData[1];

				// EG : mettre dans un TransitionController ?
				declare CUILayer NextLayer <=> Layers::Get("TransitionPages");
				LayerCustomEvent(NextLayer, "StarTransition", [Transition, Param2]);
			}
			case "DetachPage" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				foreach(PageLayerName in Event.CustomEventData)
				{
					Pages::DetachPage(PageLayerName);
				}
			}
			/*
			case "UpdateHeaderTitle" : { 
				// EG : bouger ça. ça fait quoi ?
				// TODO à vérifier
				declare CUILayer HeaderInfoLayer <=> Layers::Get("HeaderInfo");
				LayerCustomEvent(HeaderInfoLayer, "ChangeColor", [""]);
			}
			*/
			case "SetActiveLayer" : { // EG : vérifie que c'est bien appelé
				declare Text LayerName    = Event.CustomEventData[0];
				Pages::SetActiveLayer(LayerName);
			}
			case "Hack_JoinFriend" : { //Hack - Peux être Delete

				declare Text SessionId = "sded_alpha_566958b181a67";
				ConnectionHandler::SetAutoJoinSessionId(SessionId);
				ConnectionHandler::AutoJoinSession();
			}
			case "HackEvent" : {
				FakeExternalRequest("AutoJoin");
			}
			case "CancelLoading" :{
				PrivilegeController::CancelLoading();
			}
			case "SetMode" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text ModeName = Event.CustomEventData[0];
				declare Boolean IsInSuperSolo for LocalUser;
				if(ModeName == "SuperSolo") IsInSuperSolo = True;
				else IsInSuperSolo = False;
				ModeController::SetModeName(ModeName);
			}
			case "SetMenu" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text MenuName = Event.CustomEventData[0];
				ModeController::SetMenuName(MenuName);
			}
			case "ConnectOnline_AskYesNo": {
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
				{
					if(PrivilegeController::GetNextPage() == "PopUp_JoinAFriend") {
						ConnectionHandler::StartWaitAutoJoin();
					}
					else
					{
						ConnectionHandler::StopWaitAutoJoin();
						PrivilegeController::InitNextPage();
					}
					

					declare Text NextPage = "StartDemo";
					//if(CurrentPage != "Main") Pages::GoandStartPage(NextPage);
					//else Pages::GotoPrevious();
					CampaignController::InitCampaignLoad();
					StartDemoHandler::TryToConnect(True);
					ConnectionHandler::ConnectionToMasterServer();
					Pages::GoandStartPage(NextPage);
				} else if (Answer == "False") {
					ConnectionHandler::StopWaitAutoJoin();
				}
			}
			case "ConnectOnline_WithLayerFeedback_AskYesNo" : {
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
					ConnectionHandler::ConnectionToMasterServer_WithFeedback();
				else if (Answer == "False")
					ConnectionHandler::SendConnectionFailed();
			}
			case "CheckConnection": {
				declare Text LayerName = Event.CustomEventData[0];
				OnlineController::CheckConnection();
			}
			case "RequestLeaderBoardList": {
				if(Event.CustomEventData.count < 3) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Text LayerName   = Event.CustomEventData[0];
				declare Text Zone        = Event.CustomEventData[1];
				declare Integer PageNeed = TextLib::ToInteger(Event.CustomEventData[2]);
				OnlineController::SendLeaderBoardList(LayerName, Zone, PageNeed);
			}
			//HACK GamesCon Version Lounge
			case "LaunchGCVersion": {
			
				//LoadingScreen::SetLoadingType(1, 2);

				declare Text Enviro = "Lagoon";
				declare Args = """
					<mode_script_settings>
						<setting name="S_RandomMap_Generate" value="1" type="boolean"/>
						<setting name="S_SimpleEditor" value="0" type="boolean"/>
					</mode_script_settings>
					""";
				
				
				declare Text Mood = "Day";
				if(Enviro == "Lagoon" || Enviro == "Valley") Mood = Mood^"48";
				/*
				TitleFlow.EditNewMap(
				  Enviro,                 	 //< Enviro
				  Mood,                 	 //< Deco
				  "",   	                 //< Mod
				  Enviro^"Car",              //< PlayerModel
				  "RaceCE.script.txt",       //< MapType
				  "PartyEditor2.Script.txt", //< Plugin script
				  Args                       //< Plugin arguments
				);
				*/
				IngameAccessController::EditNewMap( Enviro,  Mood,  "",  Enviro^"Car",  "RaceCE.script.txt",  "PartyEditor2.Script.txt",  Args, True);

			}
			case "SavePersistent": {
				//UserMgr.MainUser.SavePersistent();
				if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady) UserMgr.MainUser.PersistentSave();
			}
			case "ExitSmartStart": {
				//G_ActualLayer = Event.CustomEventData[0];
				//PopUpManager::AddAskYesNo("Exit Smart Start", "Smart Start", "ExitSmartStart");
			}
			case "ExitSmartStart_AskYesNo": {
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
				{
					SmartStart::SetSmartStartActivate(False);
					declare CUILayer ActualLayer <=> Layers::Get(G_ActualLayer);
					SmartStart::SetInfosToLayer(ActualLayer);
				}
			}
			case "BuyFullVersion_AskYesNo": {
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
				{
					Logger::Log("Ask Unlock Full Version");
					ManiaPlanet.IsLiveStreamingEnabled = False;
					G_TaskBuyFullGame = ManiaPlanet.BuyFullGame(DataMgr.MenuUserId);
				}
			}
			case "UPlayConnect_AskYesNo" :{
				declare Text Answer = Event.CustomEventData[0];
				if(ManiaPlanet.MasterServer_MainMSUser == Null) {
					Logger::Warn("[MainMenuHandler: ShowUbisoftClubPopup] ManiaPlanet.MasterServer_MainMSUser Null for Id "^DataMgr.MenuUserId);
					return False;
				}
				
				if(Answer == "True")
				{
					if(ManiaPlanet.MasterServer_MainMSUser.HasUplayProfile)
					{
						G_UplayFlow = CManiaPlanet::EUplayFlow::OverView;
						G_TaskUplayLaunch = ManiaPlanet.MasterServer_UplayLaunch(DataMgr.MenuUserId, G_UplayFlow, 0);
					}
					else
					{
						G_UplayFlow = CManiaPlanet::EUplayFlow::Auth;
						
						declare CWebServicesTaskResult_LaunchUplayScriptResult UplayLaunchTask = ManiaPlanet.MasterServer_UplayLaunchAndCompleteActions(DataMgr.MenuUserId, G_UplayFlow, "");
						if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady) {
							declare persistent 	Text[] 	UplayActionsDone 	for UserMgr.MainUser;
							foreach(LocalAction in UplayActionsDone) {
								UplayLaunchTask.AddActionToComplete(LocalAction);
							}
						}
						UplayLaunchTask.StartTask();
						G_TaskUplayLaunch = UplayLaunchTask;
					}
				}
				else
				{
					PrivilegeController::InitNextPage();
				}
			}
			case "QuitGame" :{
				PopUpManager::AddAskYesNo(_("Do you want to quit the game?"), _("Exit"), "fff", "QuitGame");
			}
			case "QuitGame_AskYesNo" :{
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
				{
					Menu_Quit();
				}
			}
			case "UPlayConnect_DirectLaunch" :{
				if(ManiaPlanet.MasterServer_MainMSUser == Null) {
					Logger::Warn("[MainMenuHandler: ShowUbisoftClubPopup] ManiaPlanet.MasterServer_MainMSUser Null for Id "^DataMgr.MenuUserId);
					return False;
				}
				
				// attention : cette ligne envoie une popup de connexion si on n'est pas connecté
				declare Boolean OnlineIsAccessible = PrivilegeController::IsOnlineAccessible();
				if(!OnlineIsAccessible) return False;

				if(ManiaPlanet.MasterServer_MainMSUser.HasUplayProfile)
				{
					G_UplayFlow = CManiaPlanet::EUplayFlow::OverView;
					G_TaskUplayLaunch = ManiaPlanet.MasterServer_UplayLaunch(DataMgr.MenuUserId, G_UplayFlow, 0);

					// HACK : test en direct avec l'action 12
					// G_UplayFlow = CManiaPlanet::EUplayFlow::Auth;
					// declare CWebServicesTaskResult_LaunchUplayScriptResult UplayLaunchTask = ManiaPlanet.MasterServer_UplayLaunchAndCompleteActions(DataMgr.MenuUserId, G_UplayFlow, "");
					// UplayLaunchTask.AddActionToComplete("118");
					// UplayLaunchTask.StartTask();
					// G_TaskUplayLaunch = UplayLaunchTask;
					// THE HACK END
				}
				else
				{
					G_UplayFlow = CManiaPlanet::EUplayFlow::Auth;
						
					declare CWebServicesTaskResult_LaunchUplayScriptResult UplayLaunchTask = ManiaPlanet.MasterServer_UplayLaunchAndCompleteActions(DataMgr.MenuUserId, G_UplayFlow, "");
					if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady) {
						declare persistent 	Text[] 	UplayActionsDone 	for UserMgr.MainUser;
						foreach(LocalAction in UplayActionsDone) {
							UplayLaunchTask.AddActionToComplete(LocalAction);
						}
					}
					UplayLaunchTask.StartTask();
					G_TaskUplayLaunch = UplayLaunchTask;
				}
			}
			case "UPlayConnectOverview_AskYesNo" :{
				if(ManiaPlanet.MasterServer_MainMSUser == Null) {
					Logger::Warn("[MainMenuHandler: ShowUbisoftClubPopup] ManiaPlanet.MasterServer_MainMSUser Null for Id "^DataMgr.MenuUserId);
					return False;
				}
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "True")
				{
					if(ManiaPlanet.MasterServer_MainMSUser.HasUplayProfile)
					{
						G_UplayFlow = CManiaPlanet::EUplayFlow::OverView;
						G_TaskUplayLaunch = ManiaPlanet.MasterServer_UplayLaunch(DataMgr.MenuUserId, G_UplayFlow, 0);
					}
					else
					{
						G_UplayFlow = CManiaPlanet::EUplayFlow::Auth;
						
						declare CWebServicesTaskResult_LaunchUplayScriptResult UplayLaunchTask = ManiaPlanet.MasterServer_UplayLaunchAndCompleteActions(DataMgr.MenuUserId, G_UplayFlow, "");
						if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady) {
							declare persistent 	Text[] 	UplayActionsDone 	for UserMgr.MainUser;
							foreach(LocalAction in UplayActionsDone) {
								UplayLaunchTask.AddActionToComplete(LocalAction);
							}
						}
						UplayLaunchTask.StartTask();
						G_TaskUplayLaunch = UplayLaunchTask;
					}
				}
				else
				{
					PrivilegeController::InitNextPage();
				}
			}
			case "SaveZone" :
			{
				if(Event.CustomEventData.count < 1) continue;
				declare Text Zone = Event.CustomEventData[0];
				if(ManiaPlanet.MasterServer_MainMSUser != Null)
				{
					//ManiaPlanet.MasterServer_MainMSUser.SetSubscriptionZone(Zone);
					//MasterServer_Zone_ChangeZone(DataMgr.MenuUserId, Zone);
					ZoneHandler::ChangeZone(Zone);
				}
			}
			case "SelectedTrackPath" :
			{
				if(Event.CustomEventData.count < 3) {
					WarnNotEnoughParams(Event);
					continue;
				}
				
				declare Text MapPath       	= Event.CustomEventData[0];
				declare Text MapEnviroText 	= Event.CustomEventData[1];
				declare Boolean IsRandom	= Event.CustomEventData[2] == "True";
				declare Boolean IsUGC		= Event.CustomEventData[3] == "True";
				
				if (IsRandom && Cheats::IsMonoscreenActivated())
				{
					//L16N Do not translate MonoScreen.
					PopUpManager::AddPopUp2(0, _("You cannot use random generated tracks with the \"MonoScreen\" secret code activated."), "", False);
				} else {
					declare Integer MapEnviro   = TMTEnvironments::GetEnviroIndex(MapEnviroText);								// TODO EG : donner l'enviro dans l'evenement.
					
					declare Text Mode        = ModeController::GetModeName();
					declare Text MultiMode   = ModeController::GetModeMultiScreen();
					declare Text SettingsXml = XmlCreator::GetXml_OnlyCheatSettings(IsUGC);
					
					// Uniquement sur des maps customs (d'ou le True à la fin)
					IngameAccessController::PlayTrack(MapPath, Mode, SettingsXml, MultiMode, False, MapEnviro, True);
				}
			}
			
			case "ShowProfile" : {
				UserMgr.ShowProfile(DataMgr.MenuUserId, Event.CustomEventData[0]);
			}
			case "SuperSoloAccesDenied" : {
				PopUpManager::AddPopUp2(Now, _("You need 200 Trackmaster medals to access to the Super Solo campaign and race against the best Trackmania players."), "", False);
			}
			case "OnExitRoom" : {
				ConnectionHandler::CheckPageOnlineAcces();
				if (ConnectionHandler::CheckIsConnected())
					OnlinePrivilegeController::Check_PlayMultiplayerSession(Pages::GetCurrentPageName());
				declare CUILayer RankingModuleLayer <=> Layers::Get("RankingModule");
				LayerCustomEvent(RankingModuleLayer, "Show", [""]);
				switch (TitleFlow.LatestResult)
				{
					case CTitleFlow::EResult::Error_Net_Disconnected : {
						PopUpManager::AddPopUp2(0, _("You have been returned to the menu because the connection with the server has been interrupted."), "", False);
					}
					case CTitleFlow::EResult::Error_Net_WrongPassword : {
						PopUpManager::AddPopUp2(0, TextLib::Compose("%1 %2", _("Error: the room could not be joined."), _("The specified password is invalid.")), "", False);
					}
					case CTitleFlow::EResult::Error_Network_OnlineExpired : {
						// On 'affiche rien, c'est redondant avec le message affiché par TaskMessageErrorController C_OnlineDemoTimeExpired.
						// PopUpManager::AddPopUp2(0, _("Your free one-hour online trial is expired."), "", False);
					}
					case CTitleFlow::EResult::Error_Network_ServerFull :  {
						PopUpManager::AddPopUp2(0, _("You can't join this room. The server is full."), "", False);
					}
					case CTitleFlow::EResult::Success : {
						//nice !
					}
					default : PopUpManager::AddPopUp2(0, _("You have been returned to the menu because the connection with the server has been interrupted."), "", False);
				}
			}
			
			case "ServerBrowser_PopUp_RoomIsFull" : {
				PopUpManager::AddPopUp2(10, _("You can't join this room. The server is full."), "Ok", False);
			}
			case "ServerBrowser_PopUp_NotEnoughLP" : {
				if (Event.CustomEventData.count < 2)
					WarnNotEnoughParams(Event);
				else
					PopUpManager::AddPopUp2(10 , TextLib::Compose(_("You can't join this room. You need at least %1 Ladder Points to enter, but you have only %2 of them."), ""^Event.CustomEventData[1], ""^TextLib::ToText(MathLib::FloorInteger(TextLib::ToReal(Event.CustomEventData[0])))), "Ok", False);
			}
			case "ServerInfo_TrackmaniaServersFailure" : {
				PopUpManager::AddPopUp2(0, TextLib::GetTranslatedText(_("The connection to the Trackmania Servers failed. "))^TextLib::GetTranslatedText(_("Please try again later or visit support.ubi.com")), "Ok", False);
			}
			
			case "SetActiveButtonPlaform" : {
				declare Integer ActiveButtonPlatform for LocalUser;
				G_ActiveButtonPlatform = TextLib::ToInteger(Event.CustomEventData[1]);
				ActiveButtonPlatform = G_ActiveButtonPlatform;
				declare CUILayer Layer <=> Layers::Get(Event.CustomEventData[0]);
				LayerCustomEvent(Layer, "SetActiveButtonPlatform", [TextLib::ToText(G_ActiveButtonPlatform)]);
			}
			case "GetActiveButtonPlatform" : {
				declare CUILayer Layer <=> Layers::Get(Event.CustomEventData[0]);
				LayerCustomEvent(Layer, "SetActiveButtonPlatform", [TextLib::ToText(G_ActiveButtonPlatform)]);
			}
			
			// case "": {
				
			// }
			
			/*
			default : {
				// HACK EG : à virer avant release ?
				assert(False,  "Unknown custom event : "^Event.CustomEventType);
			}
			*/
		}
	}
	
	return True;
}


/// Renvoie True si la tache s'est terminée.
Boolean CheckTask(CWebServicesTaskResult _Task)
{
	if(_Task == Null) return False;
	
	if(_Task.HasSucceeded || _Task.IsCanceled) {
		return True;
	} else if(_Task.HasFailed) {
		declare CWebServicesTaskResult::ETaskErrorType TaskErrorType = _Task.ErrorType;
		declare Integer                                ErrorCode     = _Task.ErrorCode;
		
		Logger::Warn("_Task HasFailed with error " ^ TaskErrorType^" : "^ErrorCode);
		
		TaskMessageErrorController::TaskErrorMessage(TaskErrorType, ErrorCode);
		return True;
	}
	
	return False;
}

Void CheckTasks() {
	if( CheckTask(G_TaskUplayLaunch) ) {
		ManiaPlanet.IsLiveStreamingEnabled = True;
		if(G_TaskUplayLaunch.HasSucceeded)
		{
			G_TaskUplayLaunch = Null;
			if(ManiaPlanet.MasterServer_MainMSUser == Null) {
				return;
			}
			if (ManiaPlanet.MasterServer_MainMSUser.ConnectionStatus == CNetMasterServerUserInfo::EMasterServerConnectionStatus::NotConnected)
			{
				TaskMessageErrorController::TaskErrorMessage("Unexpected", 0);
			}

			declare Text NextPage = PrivilegeController::GetNextPage();
			log("G_TaskUplayLaunch.HasSucceeded - NextPage: " ^ NextPage);
			if(ConnectionHandler::GetWaitAutoJoin()){
				//log("(G_TaskUplayLaunch.HasSucceeded - GetWaitAutoJoin: True");
				ConnectionHandler::StopWaitAutoJoin();
				NextPage = "PopUp_JoinAFriend";
			}

			if(NextPage == "")
			{
				return;
			}
			else if(NextPage == "PopUp_JoinAFriend")
			{
				ConnectionHandler::AutoJoinSession();
			}
			else
			{
				declare Boolean CanIGo = PrivilegeController::CanIGotoPage(NextPage, False);
			}
		}
		else
		{
			PrivilegeController::InitNextPage();
			
		}
		G_TaskUplayLaunch = Null;
	}

	if( CheckTask(G_TaskBuyFullGame) ) {
		G_TaskBuyFullGame = Null;
		ManiaPlanet.IsLiveStreamingEnabled = True;
	}
	
}

Void Loop() {
	
	declare Boolean CommonLoopsOk = CommonLoops();
	CheckTasks();

	MenuContext::Loop();
	RankingModuleHandler::Loop();
	PadHandler::Loop();
	MusicsHandler::Loop();
	PrivilegeController::Loop();
	ZoneHandler::Loop();

	NewsLoop();
	UplayWelcomeBackLoop();
	
	// log(Pages::GetCurrentPageName());
	switch(Pages::GetCurrentPageName()){
		case "Main" 						: MainMenuHandler::Loop();
		case "StartDemo"					: StartDemoHandler::Loop();	
		case "MyTracks"						: MyTracks::Loop();
		case "ChallengeBrowser"				: ChallengeBrowserHandler::Loop();
		case "ChallengeBuddies"				: ChallengeBuddiesHandler::Loop();
		case "ChallengeManager"				: ChallengeManagerHandler::Loop();
		case "ChallengeTracks"				: ChallengeTracksHandler::Loop();
		case "ChallengeManager"				: ChallengeManagerHandler::Loop();
		case "ServerBrowser"				: ServerBrowser::Loop();
		case "RoomPlaylist"					: RoomTracklist::Loop();
		case "BuddiesChallengeBrowser"		: ChallengeBuddiesBrowserHandler::Loop();
		case "JoinAFriend"					: JoinAFriendHandler::Loop();
		case "PopUp_JoinAFriend"			: PopUp_JoinAFriendHandler::Loop();
		case "TrackbuilderWorkshop"			: TrackbuilderWorkshopHandler::Loop();
		case "BrowseOnlineRooms" 			: BrowseRoomsHandler::Loop();
		case "HelmetEditor" 				: HelmetHandler::Loop();
		case "CommunityTracks" 				: CommunityTracksHandler::Loop();
		case "BrowseTracks" 				: BrowseTracksHandler::Loop();
		case "RoomManager"					: RoomManagerHandler::Loop();
		case "MyRooms"						: MyRoomsHandler::Loop();
		case "MapsOverview"					: MapsOverviewHandler::Loop();
		//case "Workshop"			    		: WorkshopHandler::Loop();
		case "KindOfTracks"					: KindOfTracksHandler::Loop();
		//case "Location"						: ZoneHandler::Loop();
		case "Settings"						: SettingsHandler::Loop();
	}
	
	//return CommonLoopsOk;
}