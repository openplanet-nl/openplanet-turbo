//LIB CHEATS
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"									as Layers

#Const C_CHEAT_ButtonSmash		0
#Const C_CHEAT_Collisions		1
#Const C_CHEAT_ScaledCar		2
#Const C_CHEAT_CatchUpSpeed		3
#Const C_CHEAT_CheckpointBonus	4
#Const C_CHEAT_UniqueCamera		5
#Const C_CHEAT_StuntTurbo		6
#Const C_CHEAT_TurboButton		7
#Const C_CHEAT_JumpButton		8
#Const C_CHEAT_LowGravity		9
#Const C_CHEAT_AerialCamera		10
#Const C_CHEAT_BonusEvents		11

declare Integer[][Text]	G_CheatModes;

declare Text			G_ActivatedCheatMode;
declare Text 			G_AdditionnalCheatMode; //Le monoscreen pour l'instant. Un cheatmode qui fait quasiment office de gamemode
declare Text 			G_ActivatedGameMode;

declare Boolean			G_UseCheats;

//////////////
// GET
//////////////
Text GetCheatName(Integer _Index)
{		
	switch (_Index)
	{
		case 0: 	return "ButtonSmash";
		case 1: 	return "Collisions";
		case 2: 	return "ScaledCar";
		case 3: 	return "CatchUpSpeed";
		case 4: 	return "CheckpointBonus";
		case 5: 	return "UniqueCamera";
		case 6: 	return "StuntTurbo";
		case 7: 	return "TurboButton";
		case 8: 	return "JumpButton";
		case 9: 	return "LowGravity";
		case 10: 	return "AerialCamera";
		case 11:	return "BonusEvents";
	}
	return "";
}

Text GetCurrentMenuName()
{
	declare Text MenuName;
	switch (G_ActivatedGameMode)
	{
		case "Arcade" : MenuName = "Arcade";
		case "HotSeat": MenuName = "HotSeat";
		case "Rounds" : {
			if (G_AdditionnalCheatMode == "UniqueCameraMode")
				MenuName = "Mono Screen";
			else
				MenuName = "Split Screen";
		}
	}
	if(G_ActivatedGameMode == "Arcade" || G_ActivatedGameMode == "HotSeat")
	{
		switch (G_ActivatedCheatMode)
		{
			case "ButtonSmashPro"  	: MenuName ^= " smash!";
			case "ButtonSmashFun"  	: MenuName ^= " smash!";
			case "CollisionsPro"   	: MenuName ^= " collisions!";	// ne peut pas arriver
			case "CollisionsFun"   	: MenuName ^= " collisions!";	// ne peut pas arriver
			case "BonusPro"			: MenuName ^= " bonus!";		// ne peut pas arriver
			case "BonusFun"			: MenuName ^= " bonus!";		// ne peut pas arriver
			case "StuntPro"			: MenuName ^= " stunt!";
			case "StuntFun"			: MenuName ^= " stunt!";
			case "MonoScreenPro"	: MenuName ^= " mono screen!";	// ne peut pas arriver
			case "MonoScreenFun"	: MenuName ^= " mono screen!";	// ne peut pas arriver
		}
	}
	else	// SplitScreen ou MonoScreen
	{
		switch (G_ActivatedCheatMode)
		{
			// cas ne pouvant pas arriver si G_AdditionnalCheatMode == "UniqueCameraMode"
			case "ButtonSmashPro"  	: MenuName ^= " smash pro!";
			case "ButtonSmashFun"  	: MenuName ^= " smash fun!";
			case "CollisionsPro"   	: MenuName ^= " classic pro!";
			case "CollisionsFun"   	: MenuName ^= " classic fun!";
			case "BonusPro"			: MenuName ^= " bonus pro!";
			case "BonusFun"			: MenuName ^= " bonus fun!";
			case "StuntPro"			: MenuName ^= " stunt pro!";
			case "StuntFun"			: MenuName ^= " stunt fun!";
			// cas ne pouvant arriver QUE si G_AdditionnalCheatMode == "UniqueCameraMode"
			case "MonoScreenPro"   	: MenuName ^= " pro!";
			case "MonoScreenFun"   	: MenuName ^= " fun!";
		}
	}
	
	return MenuName;
}

Boolean IsCheatActiveAndMonoScreen() {
	return G_UseCheats && (G_AdditionnalCheatMode == "UniqueCameraMode");
}

Text GetSettings() {
	if (G_UseCheats && G_CheatModes.existskey(G_ActivatedCheatMode))
	{
		declare Integer[] ActivatedCheats = G_CheatModes[G_ActivatedCheatMode];
		if (G_AdditionnalCheatMode != "")
			for (I, 0, G_CheatModes[G_AdditionnalCheatMode].count - 1)
				if (!ActivatedCheats.exists(G_CheatModes[G_AdditionnalCheatMode][I]))
					ActivatedCheats.add(G_CheatModes[G_AdditionnalCheatMode][I]);
					
		declare Text Settings;
		for (I, 0, ActivatedCheats.count - 1)
		{
			Settings ^= """<setting name="S_ArcadeCheatCode_{{{GetCheatName(ActivatedCheats[I])}}}" value="True" type="boolean" />""";
		}
		return Settings;
	}
	
	return "";
}

//////////////
// UNLOCK
//////////////
Boolean Unlock_GetIsMonoScreen(Text _Input)
{
	return _Input == "Select";
}

Text Unlock_GetGameModeFromInput(Text _Input)
{
	switch (_Input)
	{
		case "Select" : return "Rounds"; //monoscreen
		case "Cancel" : return "Rounds"; //splitscreen
		case "AppMenu" : return "Rounds"; //splitscreen
		case "Action1": return "Arcade";
		case "Action2": return "HotSeat";
	}
	return "";
}

Text Unlock_GetCheatModeFromInput(Text _GameMode, Boolean _IsMonoScreen, Text _Input2, Text _Input3)
{
	if (_GameMode == "Arcade" || _GameMode == "HotSeat")
	{
		if (_Input2 == "Action1" || _Input2 == "Cancel" || _Input2 == "AppMenu")
			return "ButtonSmashPro";
		else
			return "StuntPro";
	}
	
	declare Text CheatMode;
	if (_IsMonoScreen)
		CheatMode = "MonoScreen";
	else {
		switch(_Input2)
		{
			case "Select" : CheatMode = "Collisions";
			case "Cancel" : CheatMode = "Bonus";
			case "AppMenu" : CheatMode = "Bonus";
			case "Action1": CheatMode = "ButtonSmash";
			case "Action2": CheatMode = "Stunt";
		}
	}
	
	if (_Input3 == "Action2")
		CheatMode ^= "Pro";
	else
		CheatMode ^= "Fun";
		
	return CheatMode;
}

Void UnlockCheatByName(Text _GameMode, Text _CheatMode, Text _AdditionnalCheatMode)
{
	G_ActivatedGameMode = _GameMode;
	G_AdditionnalCheatMode = _AdditionnalCheatMode;
	G_ActivatedCheatMode = _CheatMode;
	G_UseCheats = True;
}

Void UnlockCheat(Text _Input1, Text _Input2, Text _Input3)
{
	G_ActivatedGameMode = Unlock_GetGameModeFromInput(_Input1);
	if (Unlock_GetIsMonoScreen(_Input1))
		G_AdditionnalCheatMode = "UniqueCameraMode";
	else
		G_AdditionnalCheatMode = "";
	G_ActivatedCheatMode = Unlock_GetCheatModeFromInput(G_ActivatedGameMode, G_AdditionnalCheatMode != "", _Input2, _Input3);
	
	if ((G_ActivatedGameMode == "Arcade" || G_ActivatedGameMode == "HotSeat") && (G_ActivatedCheatMode == "BonusMode" || G_ActivatedCheatMode == "CollisionsMode"))
	{
		G_ActivatedGameMode = "";
		G_ActivatedCheatMode = "";
		G_AdditionnalCheatMode = "";
		return;
	}
	
	declare CUILayer MainSelector <=> Layers::Get("MainSelector");
	
	declare Text Mode;
	if (G_ActivatedGameMode == "Rounds")
		if (G_AdditionnalCheatMode == "UniqueCameraMode")
			Mode = "MonoScreen";
		else
			Mode = "SplitScreen";
	else
		Mode = G_ActivatedGameMode;
	
	LayerCustomEvent(MainSelector, "SetCheatActivated", [GetCurrentMenuName(), Mode]);
}

Void ResetCheat()
{
	G_UseCheats = False;
	G_ActivatedGameMode = "";
	G_AdditionnalCheatMode = "";
	G_ActivatedCheatMode = "";
	
	declare CUILayer MainSelector <=> Layers::Get("MainSelector");
	LayerCustomEvent(MainSelector, "SetCheatReset", Text[]);
}

Text GetActivatedCheatMode() {
	if(G_UseCheats) return G_ActivatedCheatMode;
	return "";
}

Boolean IsMonoscreenActivated() {
	return G_UseCheats && G_ActivatedGameMode == "Rounds" && G_AdditionnalCheatMode == "UniqueCameraMode";
}

//////////////
// INIT & LOOP
//////////////
Void AddCheatMode(Text _ModeName, Integer[] _UnitCheats)
{
	G_CheatModes[_ModeName] = _UnitCheats;
}

Void Load()
{
	//CREATION DES CHEAT MODES
	G_CheatModes.clear();
	
	AddCheatMode("UniqueCameraMode", 	[C_CHEAT_UniqueCamera]);
	
	AddCheatMode("BonusFun", 			[C_CHEAT_Collisions, C_CHEAT_CheckpointBonus, C_CHEAT_CatchUpSpeed, C_CHEAT_BonusEvents]);
	AddCheatMode("BonusPro", 			[C_CHEAT_Collisions, C_CHEAT_CheckpointBonus]);
	AddCheatMode("CollisionsPro", 		[C_CHEAT_Collisions]);
	AddCheatMode("CollisionsFun", 		[C_CHEAT_Collisions, C_CHEAT_CatchUpSpeed]);
	AddCheatMode("ButtonSmashPro", 		[C_CHEAT_ButtonSmash]);
	AddCheatMode("ButtonSmashFun", 		[C_CHEAT_ButtonSmash, C_CHEAT_Collisions, C_CHEAT_CatchUpSpeed]);
	AddCheatMode("StuntPro", 			[C_CHEAT_StuntTurbo]);
	AddCheatMode("StuntFun",			[C_CHEAT_StuntTurbo, C_CHEAT_Collisions, C_CHEAT_CatchUpSpeed]);
	AddCheatMode("MonoScreenPro",		Integer[]);
	AddCheatMode("MonoScreenFun",		[C_CHEAT_Collisions]);

	G_UseCheats = False;
}

Void Loop()
{
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "UnlockCheat" : {
				if (Event.CustomEventData.count == 3)
					UnlockCheat(Event.CustomEventData[0], Event.CustomEventData[1], Event.CustomEventData[2]);
			}
			case "ResetCheat" : {
				ResetCheat();
			}
			case "LibCheats_SetCheatActive" : {
				if (Event.CustomEventData[0] == "True")
					G_UseCheats = True;
				else
					G_UseCheats = False;
			}
		}
	}
}
