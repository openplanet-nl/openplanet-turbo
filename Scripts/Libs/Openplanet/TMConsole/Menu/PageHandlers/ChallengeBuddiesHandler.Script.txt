#Include "TextLib"			as TextLib
#Include "Libs/Openplanet/TMConsole/Logger.Script.txt"										as Logger
#Include "Libs/Openplanet/TMConsole/Menu/Controller/ChallengeController.Script.txt" 			as ChallengeController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/UserController.Script.txt" 				as UserController
#Include "Libs/Openplanet/TMConsole/Menu/MenuContext.Script.txt" 							as MenuContext

declare Integer G_ChallengeId;	

Void WarnNotEnoughParams(CMlAppEvent _Event) {
	Logger::Warn("[Menucontroller] event "^_Event.CustomEventType^": not enough params ["^_Event.CustomEventData^"]");
}

Void SetChallengeId(Integer _Id)
{
	G_ChallengeId = _Id;
	ChallengeController::GetChallenge("ChallengeBuddies", _Id);
}

Void ChallengeBuddies(Text _RequestBody) {
	ChallengeController::ChallengeBuddies("ChallengeBuddies", G_ChallengeId, _RequestBody);
}

Void Loop() {
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "RequestBuddies" : {
				UserController::Layer_GetBuddies("ChallengeBuddies");
			}
			case "ChallengeBuddies_RetrieveContext" : {
				declare Text[] Context = MenuContext::GetContext("ChallengeBuddies");
				if (Context.count != 0) {
					declare ChallengeId = TextLib::ToInteger(Context[0]);
					SetChallengeId(ChallengeId);
				}
			}
			case "ChallengeBuddies" : {
				ChallengeBuddies(Event.CustomEventData[0]);
			}
		}
	}
}