#Include "TextLib"																			as TextLib
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"									as Layers
#Include "Libs/Openplanet/TMConsole/Logger.Script.txt"											as Logger
#Include "Libs/Openplanet/TMConsole/Menu/MenuMusicController.Script.txt" 						as MenuMusicController
#Include "Libs/Openplanet/TMConsole/PopUpManager.Script.txt"										as PopUpManager
#Include "Libs/Openplanet/TMConsole/Menu/Controller/PrivilegeController.Script.txt"				as PrivilegeController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/Solo_CampaignController.Script.txt" 			as Solo_CampaignController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/ModeController.Script.txt"					as ModeController
#Include "Libs/Openplanet/TMConsole/Menu/Controller/ChallengeController.Script.txt"				as ChallengeController
#Include "Libs/Openplanet/TMConsole/Menu/LoadingScreen.Script.txt"								as LoadingScreen
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/StartDemoHandler.Script.txt"				as StartDemoHandler
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ConnectionHandler.Script.txt" 				as ConnectionHandler
#Include "Libs/Openplanet/TMConsole/Menu/Controller/Solo_CampaignController.Script.txt"			as CampaignController
#Include "Libs/Openplanet/TMConsole/Menu/Pages.Script.txt"										as Pages
#Include "Libs/Openplanet/TMConsole/Menu/Controller/SuperSolo_CampaignController.Script.txt"		as SuperSolo_CampaignController

declare Boolean G_CheatSuperSolo;


Boolean GetCheatIsSuperSolo()
{
	return G_CheatSuperSolo;
}

Void IsSuperSolo(Text _Page)
{
	declare CUILayer LayerPage = Layers::Get(_Page);
	if(LayerPage == Null) return;
	declare Integer NumberOfSoloTM= Solo_CampaignController::GetMedalByType(0);
	declare Integer NumberOfSoloGold= Solo_CampaignController::GetMedalByType(1);
	if(NumberOfSoloTM >= 200||G_CheatSuperSolo) LayerCustomEvent(LayerPage, "SetSuperSolo", [""]);
	else if(NumberOfSoloGold >= 200 ) LayerCustomEvent(LayerPage, "ShowSuperSoloFeature", [""]);
	else LayerCustomEvent(LayerPage, "NoSuperSolo", [""]);
}

Integer GetMedalLevel()
{
	declare Integer[] LevelsNumbers = [200, 200, 160, 80];
	for(I, 0, LevelsNumbers.count -1)
	{
		declare Integer NumberOfMedal= Solo_CampaignController::GetMedalByType(I);
		if(NumberOfMedal >= LevelsNumbers[I]) return I;
	}
	
	return 4;
}


Void WarnNotEnoughParams(CMlAppEvent _Event) {
	Logger::Warn("[Menucontroller] event "^_Event.CustomEventType^": not enough params ["^_Event.CustomEventData^"]");
}

/// @param _OnlySayWelcomeBack : si 'True', ne pas proposer de lancer la fenetre et 'seulement dire bienvenue retour'.
/// @return True ssi on a bien envoyé la popup, False si on a envoyé une autre popup ou que ça a déconné.
Boolean ShowUbisoftClubPopup(Text _Layer, Boolean _OnlySayWelcomeBack) {

	if(ManiaPlanet.MasterServer_MainMSUser == Null) {
		Logger::Warn("[MainMenuHandler: ShowUbisoftClubPopup] ManiaPlanet.MasterServer_MainMSUser Null for Id "^DataMgr.MenuUserId);
		return False;
	}
	
	// attention : cette ligne envoie une popup de connexion si on n'est pas connecté
	declare Boolean OnlineIsAccessible = PrivilegeController::IsOnlineAccessible();
	if(!OnlineIsAccessible) return False;
	
	declare Text ColorText = TextLib::ColorToText(<1., 1., 1.>);
	
	if(ManiaPlanet.MasterServer_MainMSUser.HasUplayProfile) 
	{
		PopUpManager::AddAskYesNo2(
			TextLib::Compose("%1\n\n%2", _("Discover the benefits of the Ubisoft Club membership for Trackmania Turbo!\n\nRace online with thousands of players\nChallenge your friends on custom tracklists\nShare and discover the craziest creations from the Trackmania Community\nUnlock exclusive legendary paintworks for your cars\nProgress by earning XP, earn Club badges and more!"), _("Go to the Club?")), _("Welcome back!"), "fff", "UPlayConnectOverview");
	} else {
		PopUpManager::AddAskYesNo2(
			TextLib::Compose("%1\n\n%2", _("Discover the benefits of the Ubisoft Club membership for Trackmania Turbo!\n\nRace online with thousands of players\nChallenge your friends on custom tracklists\nShare and discover the craziest creations from the Trackmania Community\nUnlock exclusive legendary paintworks for your cars\nProgress by earning XP, earn Club badges and more!"), _("To join the Ubisoft Club, connect with your Uplay account!")), _("Go to Ubisoft Club?"), "fff", "UPlayConnect");
	}
	
	return True;
}

Boolean[Integer][Integer] GetTitleReachable()
{
	declare Boolean[Integer][Integer] TitleAcces;
	TitleAcces[0] = Boolean[Integer];
	TitleAcces[1] = Boolean[Integer];
	TitleAcces[2] = Boolean[Integer];
	TitleAcces[3] = Boolean[Integer];
	TitleAcces[4] = Boolean[Integer];

	declare Text    Mode        = ModeController::GetModeName();
		
	TitleAcces[0][0] = True;
	TitleAcces[0][1] = True;
	TitleAcces[1][0] = PrivilegeController::CanIGotoMode("TMC_HotSeat"     , False);
	TitleAcces[1][1] = PrivilegeController::CanIGotoMode("TMC_LocalArcade" , False);
	TitleAcces[1][2] = PrivilegeController::CanIGotoMode("TMC_LocalRounds" , False);
	TitleAcces[1][3] = True; //géré par LibCheat & MainSelector, en fonction du cheat sélectionné.
	TitleAcces[2][0] = PrivilegeController::CanIGotoMode("TMC_CampaignSolo", False);
	TitleAcces[2][1] = PrivilegeController::CanIGotoMode("TMC_CampaignDuo" , False);
	TitleAcces[2][2] = !PrivilegeController::IsTrial(False);
	TitleAcces[2][3] = !PrivilegeController::IsTrial(False);
	TitleAcces[2][4] = True;
	TitleAcces[3][0] = True;
	TitleAcces[3][1] = True;
	TitleAcces[4][0] = True;
	TitleAcces[4][1] = True;


	return TitleAcces;
}


Void Loop() {
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;

		if(Event.CustomEventType != "GetCheatCodes")
		{
			//log("Event: " ^ Event.CustomEventType);
		}
		switch(Event.CustomEventType) {
			case "SetupMainMenuFilter" : {
				if(Event.CustomEventData.count < 1) {
					WarnNotEnoughParams(Event);
					continue;
				}
				declare Integer Index = TextLib::ToInteger(Event.CustomEventData[0]);
				MenuMusicController::SetupMainMenuFilter(Index);
			}
			case "MuteSFX" : {
				MenuMusicController::MuteMenuSFX();
			}
			case "StartHelmet" : {
				if(!PrivilegeController::CanIGotoPage("Garage")) continue;
				LoadingScreen::SetLoadingType(3, 0);
				wait(TitleFlow.IsReady);
				TitleFlow.EditBadges(DataMgr.MenuUserId);
				wait(TitleFlow.IsReady);
				declare Boolean Garage_IsJoin for LocalUser;
				log("Garage_IsJoin: " ^ Garage_IsJoin);
				if(Garage_IsJoin)
				{
					declare Text NextPage = "StartDemo";
					CampaignController::InitCampaignLoad();
					StartDemoHandler::TryToConnect(True);
					ConnectionHandler::ConnectionToMasterServer();
					Pages::GoandStartPage(NextPage);
				}
			}
			case "FocusToMain" : {
				declare Text Direction = Event.CustomEventData[0];
				declare Text MenuSelect;
				if(Direction =="Down")
				{
					MenuSelect = Event.CustomEventData[1];
				}
				declare CUILayer MainSLayer <=> Layers::Get("MainSelector");
				declare Integer	Page_MainSelectorPosition for MainSLayer.LocalPage;
				Page_MainSelectorPosition = TextLib::ToInteger(MenuSelect);
				//LayerCustomEvent(MainSLayer, "MoveSelection", [Direction, MenuSelect]);
			}
			case "FocusToLeaderBoard" : {
				declare Text InitFramePosX = Event.CustomEventData[0];
				declare Text NewFramePosX  = Event.CustomEventData[1];
				declare CUILayer HeaderInfoLayer <=> Layers::Get("GlobalLeaderBoard");
				LayerCustomEvent(HeaderInfoLayer, "GetFocus", [InitFramePosX, NewFramePosX]);
			}
			case "FocusToStartMain" : {
				declare Text InitFramePosX = Event.CustomEventData[0];
				declare Text NewFramePosX  = Event.CustomEventData[1];
				declare Text MenuSelect    = Event.CustomEventData[2];
				declare CUILayer MainSLayer <=> Layers::Get("MainSelector");
				declare Integer	Page_MainSelectorPosition for MainSLayer.LocalPage;
				Page_MainSelectorPosition = -1;
				declare CUILayer HeaderInfoLayer <=> Layers::Get("StartMain");
				LayerCustomEvent(HeaderInfoLayer, "GetFocus", [InitFramePosX, NewFramePosX, MenuSelect]);
			}
			case "AskUplay" :{
				declare Text Layer = Event.CustomEventData[0];
				declare Boolean PopupShown = ShowUbisoftClubPopup(Layer, False);
			}
			case "SwitchUser" :{
				UserMgr.RequestMainUserChange();
			}
			case "BuyGame" :{
				if(ManiaPlanet.TmTurbo_IsDemo) {
					declare Text UFG = _("Unlock the full game and get");
					
					PopUpManager::AddAskYesNo2BuyFullGame(_("4 environments and 200 official tracks\n The complete Trackbuilder\n Online challenges and new multiplayer modes"),_("Unlock the full game"), "BuyFullVersion");
				} else  {
					PopUpManager::AddPopUp2(Now, _("Welcome to Trackmania Turbo"), "", False);
				}
			}
			case "CancelLoading" :{
				PrivilegeController::CancelLoading();
			}
			case "PopUp_CannotCreateRooms" : {
				//DEAD CODE
			}

			case "MainSelector_SelectServerBrowser" : {
				declare CUILayer MainSelector = Layers::Get("MainSelector");
				LayerCustomEvent(MainSelector, "SelectServerBrowser", Text[]);
			}
			case "MainSelector_SelectChallengeBrowser" : {
				declare CUILayer MainSelector = Layers::Get("MainSelector");
				LayerCustomEvent(MainSelector, "SelectChallengeBrowser", Text[]);
			}
			case "MainSelector_SelectBuddiesChallengesBrowser" : {
				declare CUILayer MainSelector = Layers::Get("MainSelector");
				LayerCustomEvent(MainSelector, "SelectBuddiesChallengesBrowser", Text[]);
			}
			case "IsSuperSolo" : {
				declare Integer NumberOfSoloTM= Solo_CampaignController::GetMedalByType(0);
					G_CheatSuperSolo = False;
				//if(NumberOfSoloTM >= 200)
				//{
				//}
				declare Text Page = Event.CustomEventData[0];
				IsSuperSolo(Page);
			}
			case "GetStats" : {
				declare Text Page = Event.CustomEventData[0];
				ChallengeController::GetStats(Page);
			}
			case "GetStatsFromLocalCache" : {
				if(UserMgr.MainUser != Null && UserMgr.MainUser.PersistentIsReady) {
					declare persistent Integer ChallengesCount 			for UserMgr.MainUser;
					declare persistent Integer BuddiesChallengesCount 	for UserMgr.MainUser;
					declare persistent Boolean HasNewBuddiesChallenges	for UserMgr.MainUser;
					declare Text Page = Event.CustomEventData[0];
					declare CUILayer LayerPage = Layers::Get(Page);
					LayerCustomEvent(LayerPage, "StatsReceivedFromLocalCache", [TextLib::ToText(ChallengesCount), TextLib::ToText(BuddiesChallengesCount), TextLib::ToText(HasNewBuddiesChallenges)]);
				}
			}
			case "Goto_SplitScreenMode" : {
				if(PrivilegeController::IsTrial()) continue;
				PopUpManager::AddAskYesNo(_("How many players?"), _("SplitScreen Mode"), "fff", "SplitScreen", _("Duel (2 players)"), _("Cup (3-4 players)"), True);
				
			}
			case "Goto_RecordOrSolo" : {
				declare Boolean SkipAnswer = False;
				if(ManiaPlanet.MasterServer_MainMSUser == Null) return;
				if (ManiaPlanet.MasterServer_MainMSUser.ConnectionStatus != CNetMasterServerUserInfo::EMasterServerConnectionStatus::Connected) SkipAnswer = True;

				declare Integer NumberOfMedal= Solo_CampaignController::GetPlayerMedals();
				if(NumberOfMedal > 0 && !SkipAnswer) PopUpManager::AddAskYesNo(_("Play Solo or Versus Friends"), _("Official Campaign"), "fff", "RecordCenter", _("Solo campaign"), _("Record Center"), True);
				else SkipAnswer = True;
				
				if(SkipAnswer) {
					declare CUILayer PopUpLayer <=> Layers::Get("MainSelector");
					LayerCustomEvent(PopUpLayer, "RecordCenterAnswer", ["False"]);
				}
			}
			case "SplitScreen_AskYesNo" : {
				declare Text Answer = Event.CustomEventData[0];
				if (Answer == "True" || Answer == "False")
				{
					declare Text ModeMulti = "DualSplitScreen";
					if(Answer == "True") ModeMulti = "FourSplitScreen";
					ModeController::SetModeMultiScreen(ModeMulti);
					declare CUILayer PopUpLayer <=> Layers::Get("MainSelector");
					LayerCustomEvent(PopUpLayer, "SplitScreenAnswer", [Answer]);
				}
			}
			case "RecordCenter_AskYesNo" : {
				declare Text Answer = Event.CustomEventData[0];
				if(Answer == "Cancel") continue;
				if(Answer == "True")
				{
					declare Boolean RecordCenterVisible  for LocalUser;
					RecordCenterVisible = True;
				}
				declare CUILayer PopUpLayer <=> Layers::Get("MainSelector");
				LayerCustomEvent(PopUpLayer, "RecordCenterAnswer", [Answer]);
			}
			case "OpenLink" : {
				declare Text TheLink;
				if(Event.CustomEventData.count > 0) {
					TheLink = Event.CustomEventData[0];
					if(
						(SystemPlatform == CMlScript::ESystemPlatform::PS4) ||
						(SystemPlatform == CMlScript::ESystemPlatform::XBoxOne)
					) {
						declare Text TheBody = "";
						if(Event.CustomEventData.count > 1) {
							TheBody = Event.CustomEventData[1];
						}
						
						declare Text PleaseVisit = "";
						if(TheLink != "") {
							PleaseVisit = _("For more information, please visit");
						}
						
						if(TheBody == "" && PleaseVisit == "") {
							TheBody = _("Welcome to Trackmania Turbo");
						}
						
						PopUpManager::AddPopUp2(Now, TextLib::Compose("%1\n\n%2\n%3", TheBody, PleaseVisit, TheLink), "", False);
					} else {
						OpenLink(TheLink, CManiaApp::ELinkType::ExternalBrowser);
					}
				}
			}
			case "NewsIsClicked" : {
				if(Event.CustomEventData.count > 0) {
					declare Text TheNewsID = Event.CustomEventData[0];
					ManiaPlanet.MasterServer_Tracking_NewsClick(DataMgr.MenuUserId, TheNewsID);
					// Logger::Log("ManiaPlanet.MasterServer_Tracking_NewsClick(DataMgr.MenuUserId, TheNewsID) "^DataMgr.MenuUserId^" - "^TheNewsID);
				}
			}
			case "SetMedalColor" : {
				declare Text Page = Event.CustomEventData[0];
				declare Integer MedalLevel = GetMedalLevel();
				declare CUILayer PopUpLayer <=> Layers::Get(Page);
				LayerCustomEvent(PopUpLayer, "SetMedalColor", [MedalLevel^""]);

			}
			case "Cheat_SuperSolo" :
			{
				if(!G_CheatSuperSolo)
				{
					declare Text Page = Event.CustomEventData[0];
					declare Text MasterServerStatus = ScoreMgr.ScoreStatus_GetMasterServerStatus(DataMgr.MenuUserId)^"";
					SuperSolo_CampaignController::Load("");
					G_CheatSuperSolo = True;
					IsSuperSolo(Page);
				}
				//declare Text Page = Event.CustomEventData[0];
				//SendAllInfos(Page);
			}
			case "NewsIsSeen" : {
				if(UserMgr.MainUser != Null) {
					declare Text[] UplayNewsIdImpressed for UserMgr.MainUser;
					// UplayNewsIdImpressed.clear(); 
					
					declare CUILayer MainSLayer <=> Layers::Get("MainSelector");
					declare Integer	Page_MainSelectorPosition for MainSLayer.LocalPage;
					
					// log("Page_MainSelectorPosition : "^Page_MainSelectorPosition);
					
					// ça veut dire qu'on ne regarde par la news.
					if(Page_MainSelectorPosition >= 0) continue;
					
					if(Event.CustomEventData.count > 0) {
						declare Text TheNewsID = Event.CustomEventData[0];
						
						declare Text[] UplayNewsIdImpressed for UserMgr.MainUser;
						if(! UplayNewsIdImpressed.exists(TheNewsID))  {
							UplayNewsIdImpressed.add(TheNewsID);
							
							ManiaPlanet.MasterServer_Tracking_NewsImpression(DataMgr.MenuUserId, TheNewsID);
							// Logger::Log("ManiaPlanet.MasterServer_Tracking_NewsImpression(DataMgr.MenuUserId, TheNewsID) "^DataMgr.MenuUserId^" - "^TheNewsID);
						}
					}
				}
			}
			case "GetTitleReachable" : {
				declare Text Page = Event.CustomEventData[0];
				declare CUILayer Layer = Layers::Get(Page);
				declare Boolean[Integer][Integer] TitleReachable for Layer.LocalPage;
				TitleReachable = GetTitleReachable();
				LayerCustomEvent(Layer, "SendTitleReachable", [""]);
			}
			/*
			default : {
				// HACK EG : à virer avant release ?
				assert(False,  "Unknown custom event : "^Event.CustomEventType);
			}
			*/
		}
	}
}