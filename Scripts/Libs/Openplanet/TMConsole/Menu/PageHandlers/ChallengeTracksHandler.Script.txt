#Include "TextLib"			as TextLib
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"								as Layers
#Include "Libs/Openplanet/TMConsole/Menu/Pages.Script.txt"									as Pages

#Include "Libs/Openplanet/TMConsole/MenuColor.Script.txt"		   							as MenuColor
#Include "Libs/Openplanet/TMConsole/Menu/Controller/ChallengeController.Script.txt" 			as ChallengeController
#Include "Libs/Openplanet/TMConsole/Menu/IngameAccessController.Script.txt"					as InGameAccessController
#Include "Libs/Openplanet/TMConsole/Menu/PageHandlers/ConnectionHandler.Script.txt" 			as ConnectionHandler

#Include "Libs/Openplanet/TMConsole/PopUpManager.Script.txt"									as PopUpManager
#Include "Libs/Openplanet/TMConsole/TMTEnvironments.Script.txt"								as TMTEnvironments

#Const C_MenuMode_TRAIN			0
#Const C_MenuMode_VALIDATION	1
#Const C_MenuMode_RACE			2
#Const C_MenuMode_RACEFOR		3

#Const C_GameContext_UNPUBLISHEDTRAIN		0
#Const C_GameContext_PUBLISHEDTRAIN			1
#Const C_GameContext_RACE					2
#Const C_GameContext_VALIDATION				3

declare Integer G_ChallengeId;
declare Integer G_ChallengeInstanceId;

Void SendTracksToLayer(Text _FromLayerName, Text _ChallengeId, Integer _MenuMode)
{
	declare CUILayer ChallengeTracksLayer = Layers::Get("ChallengeTracks");	
	G_ChallengeId = TextLib::ToInteger(_ChallengeId);
	LayerCustomEvent(ChallengeTracksLayer, "SetMenuMode", [TextLib::ToText(_MenuMode)]);
}

Void SetMode_RaceFor(Text _ChallengeId, Text _ChallengeInstanceId)
{
	declare CUILayer ChallengeTracksLayer = Layers::Get("ChallengeTracks");	
	declare CUILayer BuddiesChallengeBrowser = Layers::Get("BuddiesChallengeBrowser");	
	G_ChallengeId = TextLib::ToInteger(_ChallengeId);
	G_ChallengeInstanceId = TextLib::ToInteger(_ChallengeInstanceId);
	LayerCustomEvent(ChallengeTracksLayer, "SetMenuMode", [TextLib::ToText(C_MenuMode_RACEFOR)]);
	
	declare Text[Text][][Text]		Ghosts for ChallengeTracksLayer.LocalPage;
	declare Text[Text][][Text]		ChallengeGhosts for BuddiesChallengeBrowser.LocalPage ;	
	Ghosts = ChallengeGhosts;
	log("GhostsUrls ARE :"^ChallengeGhosts);
}

Void RequestStartRace(Text _Body)
{
	ChallengeController::StartRace("ChallengeTracks", G_ChallengeId, Integer[]);
}

Void RequestStartRaceFor(Text _Body)
{
	ChallengeController::StartRace("ChallengeTracks", G_ChallengeId, [G_ChallengeInstanceId]);
}

Void RequestInstalledChallenge()
{
	ChallengeController::GetInstalledChallenge("ChallengeTracks", G_ChallengeId);
}

Void LaunchTrain(Text _MapPath, Text _AuthorTime, Text _GoldTime, Text _SilverTime, Text _BronzeTime, Text _CollectionName, Text _IsPublished, Text _IsStunts, Text _TrackIndex)
{
	declare Text GameContext;
	if (_IsPublished == "True")
		GameContext = TextLib::ToText(C_GameContext_PUBLISHEDTRAIN);
	else
		GameContext = TextLib::ToText(C_GameContext_UNPUBLISHEDTRAIN);

	declare Text Settings = """
	<mode_script_settings>
		<setting name="S_GameContext"	   	value="{{{GameContext}}}"           type="integer"/>
		<setting name="S_ChallengeId"    	value="{{{G_ChallengeId}}}"         type="integer"/>
		<setting name="S_TrackIndex"    	value="{{{_TrackIndex}}}"         	type="integer"/>
		<setting name="S_AuthorTimes"		value="{{{_AuthorTime}}}"			type="text"/>
		<setting name="S_GoldTimes"			value="{{{_GoldTime}}}"				type="text"/>
		<setting name="S_SilverTimes"		value="{{{_SilverTime}}}"			type="text"/>
		<setting name="S_BronzeTimes"		value="{{{_BronzeTime}}}"			type="text"/>
		<setting name="S_IsStuntMode"		value="{{{_IsStunts}}}"				type="boolean"/>
	</mode_script_settings>
	""";
	
	// toujours sur des tracks custo
	// TODO EG : enviro
	declare Integer EnviroIndex = TMTEnvironments::GetEnviroIndex(_CollectionName);
	
	InGameAccessController::PlayTrack(_MapPath, "TMC_Championship", Settings, "", False, EnviroIndex, True);
	
	declare CUILayer ChallengeTracks = Layers::Get("ChallengeTracks");
	LayerCustomEvent(ChallengeTracks, "OnExitTrain", Text[]);
	ConnectionHandler::CheckPageOnlineAcces();
	
	if (ConnectionHandler::CheckIsConnected() && TitleFlow.CustomResultType == "Network_Disconnection")
		PopUpManager::AddPopUp2(0, _("You have been returned to the menu because the network connection with the server has been interrupted."), "", False);
	else if (TitleFlow.LatestResult == CTitleFlow::EResult::Error_DataMgr) 
		LayerCustomEvent(ChallengeTracks, "Quit", Text[]);
}

Void RequestGiveUpRace(Integer _RaceId)
{
	ChallengeController::FinishRace("ChallengeTracks", G_ChallengeId, _RaceId);
}

Void RequestPlayRace(	Text _MapPath, 
						Text _AuthorTime, Text _GoldTime, Text _SilverTime, Text _BronzeTime, 
						Integer _ChallengeId, Integer _RaceId, 
						Text _IsPublished, Text _IsStunts, Text _IsLastTrack, 
						Integer _AuthorMedals, Integer _GoldMedals, Integer _SilverMedals, Integer _BronzeMedals, 
						Integer _TrackIndex,
						Text _GhostsUrls)
{
	declare Text GameContext;

	if (_IsPublished == "True")
		GameContext = TextLib::ToText(C_GameContext_RACE);
	else
		GameContext = TextLib::ToText(C_GameContext_VALIDATION);
		
	declare Text RaceSettings = """
	<mode_script_settings>
		<setting name="S_GameContext"	   	value="{{{GameContext}}}"  			type="integer"/>
		<setting name="S_ChallengeId"    	value="{{{_ChallengeId}}}"         	type="integer"/>
		<setting name="S_RaceId"	     	value="{{{_RaceId}}}"             	type="integer"/>
		<setting name="S_TrackIndex"    	value="{{{_TrackIndex}}}"         	type="integer"/>
		<setting name="S_AuthorTime"		value="{{{_AuthorTime}}}"			type="text"/>
		<setting name="S_GoldTime"			value="{{{_GoldTime}}}"				type="text"/>
		<setting name="S_SilverTime"		value="{{{_SilverTime}}}"			type="text"/>
		<setting name="S_BronzeTime"		value="{{{_BronzeTime}}}"			type="text"/>
		<setting name="S_IsLastTrack"		value="{{{_IsLastTrack}}}"			type="boolean"/>
		<setting name="S_AuthorMedals"	   	value="{{{_AuthorMedals}}}"         type="integer"/>
		<setting name="S_GoldMedals"	   	value="{{{_GoldMedals}}}"         	type="integer"/>
		<setting name="S_SilverMedals"	   	value="{{{_SilverMedals}}}"         type="integer"/>
		<setting name="S_BronzeMedals"   	value="{{{_BronzeMedals}}}"         type="integer"/>
		<setting name="S_GhostsUrls"		value="{{{_GhostsUrls}}}"			type="text"/>
		<setting name="S_IsStuntMode"		value="{{{_IsStunts}}}"				type="boolean"/>
	</mode_script_settings>
	""";
	
	InGameAccessController::PlayTrack(_MapPath, "TMC_Championship", RaceSettings, "", False, 0, True);
	
	declare CUILayer ChallengeTracks = Layers::Get("ChallengeTracks");
	LayerCustomEvent(ChallengeTracks, "OnExitRace", Text[]);
	ConnectionHandler::CheckPageOnlineAcces();
	
	if (ConnectionHandler::CheckIsConnected() && TitleFlow.CustomResultType == "Network_Disconnection")
		PopUpManager::AddPopUp2(0, _("You have been returned to the menu because the network connection with the server has been interrupted."), "", False);
	else if (TitleFlow.LatestResult == CTitleFlow::EResult::Error_DataMgr) 
		LayerCustomEvent(ChallengeTracks, "Quit", Text[]);
}

Void Loop() {
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) continue;
		switch(Event.CustomEventType) {
			case "SendTracksToChallengeTracks_Train" : {
				SendTracksToLayer(Event.CustomEventData[0], Event.CustomEventData[1], C_MenuMode_TRAIN);
			}
			case "SendTracksToChallengeTracks_Race" : {
				SendTracksToLayer(Event.CustomEventData[0], Event.CustomEventData[1], C_MenuMode_RACE);
			}
			case "SendTracksToChallengeTracks_Validation" : {
				SendTracksToLayer(Event.CustomEventData[0], Event.CustomEventData[1], C_MenuMode_VALIDATION);
			}
			case "SendTracksToChallengeTracks_RaceFor" : {
				SetMode_RaceFor(Event.CustomEventData[0], Event.CustomEventData[1]);
			}
			case "RequestTries" : {
				declare Integer Offset = TextLib::ToInteger(Event.CustomEventData[0]);
				declare Integer Length = TextLib::ToInteger(Event.CustomEventData[1]);
				ChallengeController::GetChallengeTries("ChallengeTracks", G_ChallengeId, Offset, Length);
			}
			case "LaunchTrain" : {
				declare Text[] IsPublishedAndStunts = TextLib::Split(":", Event.CustomEventData[6]);
				declare Text IsPublished 		= IsPublishedAndStunts[0];
				declare Text IsStunts 			= IsPublishedAndStunts[1];
				
				LaunchTrain(Event.CustomEventData[0], Event.CustomEventData[1], Event.CustomEventData[2], Event.CustomEventData[3], Event.CustomEventData[4], Event.CustomEventData[5], IsPublished, IsStunts, Event.CustomEventData[7]);
			}
			case "PopUpRaceAskYesNo" : {
				log("AskingNew");
				declare Text TitleColor = TextLib::ColorToText(MenuColor::GetMenuColor(2));
				declare Text Action = Event.CustomEventData[1];
				PopUpManager::AddAskYesNo2(TextLib::Compose(_("|the validation / the race|Once %1 has begun, you won't be able to train challenge before it is finished. Do you want to proceed ?"), Action), TextLib::GetTranslatedText(Event.CustomEventData[0]), TitleColor, "ChallengeTracks_Race");
			}
			case "PlayRace" : {
				declare Text MapPath 			= Event.CustomEventData[0];
				declare Text AuthorTime 		= Event.CustomEventData[1];
				declare Text GoldTime 			= Event.CustomEventData[2];
				declare Text SilverTime 		= Event.CustomEventData[3];
				declare Text BronzeTime 		= Event.CustomEventData[4];
				declare Integer ChallengeId 	= TextLib::ToInteger(Event.CustomEventData[5]);
				declare Integer TryId 			= TextLib::ToInteger(Event.CustomEventData[6]);
				declare Text[] IsPublishedAndStunts = TextLib::Split(":", Event.CustomEventData[7]);
				declare Text IsPublished 		= IsPublishedAndStunts[0];
				declare Text IsStunts 			= IsPublishedAndStunts[1];
				declare Text IsLastTrack		= Event.CustomEventData[8];
				declare Integer AuthorMedals	= TextLib::ToInteger(Event.CustomEventData[9]);
				declare Integer GoldMedals		= TextLib::ToInteger(Event.CustomEventData[10]);
				declare Integer SilverMedals	= TextLib::ToInteger(Event.CustomEventData[11]);
				declare Integer BronzeMedals	= TextLib::ToInteger(Event.CustomEventData[12]);
				declare Integer TrackIndex		= TextLib::ToInteger(Event.CustomEventData[13]);
				RequestPlayRace(MapPath, AuthorTime, GoldTime, SilverTime, BronzeTime, ChallengeId, TryId, IsPublished, IsStunts, IsLastTrack, AuthorMedals, GoldMedals, SilverMedals, BronzeMedals, TrackIndex, Event.CustomEventData[14]);
			}
			case "ChallengeTracks_Race_AskYesNo" : {
				declare CUILayer ChallengeTracks = Layers::Get("ChallengeTracks");
				LayerCustomEvent(ChallengeTracks, "LaunchRace", [Event.CustomEventData[0]]);
			}
			case "RequestStartRace" : {
				RequestStartRace(Event.CustomEventData[1]);
			}
			case "RequestStartRaceFor" : {
				RequestStartRaceFor(Event.CustomEventData[1]);
			}
			
			case "ChallengeTracks_RequestInstalledChallenge" : {
				RequestInstalledChallenge();
			}
			case "RequestGiveUpRace" : {
				declare Integer RaceId = TextLib::ToInteger(Event.CustomEventData[0]);
				RequestGiveUpRace(RaceId);
			}
		}
	}
}