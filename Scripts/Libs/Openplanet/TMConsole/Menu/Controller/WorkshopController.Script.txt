#Include "TextLib"													as TextLib
#Include "MathLib"													as MathLib
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"			as Layers
#Include "Libs/Openplanet/TMConsole/Menu/Pages.Script.txt"				as Pages

#Const C_REQUESTTYPE_LAUNCHUNLOCKANIM	0
#Const C_REQUESTTYPE_ALLINFOS			1
#Const C_REQUESTTYPE_RELOADLAYER		2

#Const C_NbEnviro					4
#Const C_NbDifficulty				5
#Const C_NumberOfLvlByBlockY		2
#Const C_NumberOfLvlByBlockX		5

#Const TMC_MEDAL_AUTHOR   0
#Const TMC_MEDAL_GOLD     1
#Const TMC_MEDAL_SILVER   2
#Const TMC_MEDAL_BRONZE   3
#Const TMC_MEDAL_NONE     4

#Const TMC_ENVIRO_CANYON   0
#Const TMC_ENVIRO_VALLEY   1
#Const TMC_ENVIRO_LAGOON   2
#Const TMC_ENVIRO_STADIUM  3

#Const C_CampaignPathFilter			"""Campaigns\"""



declare Text				G_LayerToSend;
declare Integer				G_RequestType;
declare Text[]				G_ParamToSend;

//Sert à savoir quelle médaile doit être recalculée


declare Text[Text][]	G_WorkshopIndex;
declare Text[Text][]	G_WS_CanyonIndex;
declare Text[Text][]	G_WS_StadiumIndex;
declare Text[Text][]	G_WS_LagoonIndex;
declare Text[Text][]	G_WS_ValleyIndex;



Text GetFeedbackText(Boolean _Succeed) {
	if(G_RequestType == C_REQUESTTYPE_LAUNCHUNLOCKANIM) {
		return "LaunchUnlockAnim";
	}
	else if(G_RequestType == C_REQUESTTYPE_ALLINFOS){
		return "AllInfosSent";
	}
	else if(G_RequestType == C_REQUESTTYPE_RELOADLAYER){
		return "ReloadLayer";
	}
	return "";
}

Void SendFeedbackToUI(Boolean _Succeed) {
	declare CUILayer LayerToSend = Layers::Get(G_LayerToSend);
	if(LayerToSend == Null) return;
	declare Text FeedbackText = GetFeedbackText(_Succeed);
	LayerCustomEvent(LayerToSend, FeedbackText, G_ParamToSend);
}

Void Private_SetLoadFilter(Text _PathFilter)
{
	DataMgr.MapFilterStartWithPath = _PathFilter;
	wait(DataMgr.Ready);
}



Integer GetMedalsToHave(Integer _Difficulty)
{
	switch(_Difficulty)
	{
		case 0: return TMC_MEDAL_BRONZE;
		case 1: return TMC_MEDAL_BRONZE;
		case 2: return TMC_MEDAL_SILVER;
		case 3: return TMC_MEDAL_SILVER;
		case 4: return TMC_MEDAL_GOLD;
	}
	return 0;
}

Void SendAllAnimationToStart(){
	SendFeedbackToUI(True);
}


Boolean MapIsValid(CMapInfo _Map)
{
	// HACK : les dossiers apparaissent dans le DataMgr,
	// et renvoient ce genre de choses : on les filtre.
	if(_Map.CollectionName == "_Unassigned") return False;
	if(_Map.AuthorLogin == "") return False;
	return True;
}


Vec3 CreateMapIndice(CMapInfo _Map){
	declare Vec3 Indice = <0., 0., 0.>; //X: Difficulty | Y: Enviro | Z: MapIndex
	declare Text Enviro = _Map.CollectionName;

	switch(Enviro) {
		case "Canyon" 	: Indice.Y = 0.;
		case "Valley" 	: Indice.Y = 1.;
		case "Lagoon" 	: Indice.Y = 2.;
		case "Stadium" 	: Indice.Y = 3.;
	}

	declare Text[] PathInfo = TextLib::Split("\\", _Map.Path);
	declare Real Difficulty;
	if(PathInfo.existskey(1))
	{
		switch(PathInfo[1]) {
			case "01_White" 	: Difficulty = 1.;
			case "02_Green" 	: Difficulty = 2.;
			case "03_Blue" 		: Difficulty = 3.;
			case "04_Red" 		: Difficulty = 4.;
			case "05_Black" 	: Difficulty = 5.;
		}
	}
	Indice.X = Difficulty;

	
	return Indice;
}


Void RetrieveCampaignMaps() {
	G_WorkshopIndex.clear();
	
	foreach(Index => Map in DataMgr.Maps) {
		if(!MapIsValid(Map) || Index >= 200) continue;

		G_WorkshopIndex.add(Text[Text]);

		declare Vec3 MapIndice     = CreateMapIndice(Map);
		//declare Integer Difficulty = MathLib::NearestInteger(MapIndice.X);
		declare Integer Enviro     = MathLib::NearestInteger(MapIndice.Y);
		//declare Integer MapIndex   = MathLib::NearestInteger(MapIndice.Z);
		//declare Integer Line       = MapIndex/5;
		declare Text[Text] Infos;
		Infos["Id"] = Index ^"";
		Infos["BestTime"] = Map.CopperPrice^"";
		Infos["Name"] = Map.Name;
		Infos["Enviro"] = Map.CollectionName;
		switch(Enviro) {
			case TMC_ENVIRO_CANYON	: {
				G_WS_CanyonIndex.add(Infos);
			}
			case TMC_ENVIRO_VALLEY	: {
				G_WS_ValleyIndex.add(Infos);
			}
			case TMC_ENVIRO_LAGOON	: {
				G_WS_LagoonIndex.add(Infos);
			}
			case TMC_ENVIRO_STADIUM	: {
				G_WS_StadiumIndex.add(Infos);
			}
		}
		
		G_WorkshopIndex[Index] = Infos;
	}
}


Void LoadMaps(Text _PathFilter)
{	
	Private_SetLoadFilter(_PathFilter);
	DataMgr.RetrieveUserFiles(DataMgr.MenuUserId, "data0", CDataMgr::EFileType::Map);
	wait(DataMgr.Ready);
	RetrieveCampaignMaps();
}


// Functions to call in the Handlers
//-----------------------------------------------------------//
Void Load()
{
	LoadMaps(C_CampaignPathFilter);
}

Void SendAllInfos(Text _Layer){
	declare CUILayer 		LayerToSend 	= Layers::Get(_Layer);
	if(LayerToSend == Null) return;
	declare Text[Text][]	Net_WorkshopIndex		for LayerToSend.LocalPage;
	declare Text[Text][]	Net_WS_CanyonIndex		for LayerToSend.LocalPage;
	declare Text[Text][]	Net_WS_ValleyIndex		for LayerToSend.LocalPage;
	declare Text[Text][]	Net_WS_LagoonIndex		for LayerToSend.LocalPage;
	declare Text[Text][]	Net_WS_StadiumIndex		for LayerToSend.LocalPage;
	
	Net_WorkshopIndex	= G_WorkshopIndex;
	Net_WS_CanyonIndex	= G_WS_CanyonIndex;
	Net_WS_ValleyIndex	= G_WS_ValleyIndex;
	Net_WS_LagoonIndex	= G_WS_LagoonIndex;
	Net_WS_StadiumIndex	= G_WS_StadiumIndex;

	G_LayerToSend = _Layer;
	G_ParamToSend.clear();
	G_RequestType = C_REQUESTTYPE_ALLINFOS;
	SendFeedbackToUI(True);
}

Void SendRequestInfos(Text _Layer, Integer _Enviro){

	declare CUILayer 		LayerToSend 	= Layers::Get(_Layer);
	if(LayerToSend == Null) return;
	declare Text[Text][]	Net_WS_RequestIndex		for LayerToSend.LocalPage;
	declare Boolean			Net_EditionMode			for LayerToSend.LocalPage;
	Net_WS_RequestIndex.clear();

	switch(_Enviro) {
		case TMC_ENVIRO_CANYON	: Net_WS_RequestIndex	= G_WS_CanyonIndex;
		case TMC_ENVIRO_VALLEY	: Net_WS_RequestIndex	= G_WS_ValleyIndex;
		case TMC_ENVIRO_LAGOON	: Net_WS_RequestIndex	= G_WS_LagoonIndex;
		case TMC_ENVIRO_STADIUM	: Net_WS_RequestIndex	= G_WS_StadiumIndex;
		default                 : Net_WS_RequestIndex	= G_WorkshopIndex;
	}

 	declare Text PreviousPage = Pages::GetPreviousPage();
	Net_EditionMode = PreviousPage == "Main";
	G_LayerToSend = _Layer;
	G_ParamToSend.clear();
	G_RequestType = C_REQUESTTYPE_ALLINFOS;
	SendFeedbackToUI(True);
}

Void ReloadLayer()
{
	G_RequestType = C_REQUESTTYPE_RELOADLAYER;
	SendFeedbackToUI(True);
}