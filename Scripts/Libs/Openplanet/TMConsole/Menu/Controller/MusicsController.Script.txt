#Include "TextLib"													as TextLib
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"			as Layers
#Include "Libs/Openplanet/TMConsole/Menu/LibMusics.Script.txt"			as LibMusics

#Const C_REQUESTTYPE_SENTALLINFO 0

#Const MUSIC_FILE 0
#Const MUSIC_GAIN 1

#Const MUSIC_ETAT_LOCK     0
#Const MUSIC_ETAT_OPEN     1
#Const MUSIC_ETAT_ACTIVATE 2


declare Text				G_LayerToSend;
declare Integer				G_RequestType;
declare Text[]				G_ParamToSend;
declare Text[][]			G_Musics;
declare Text[Integer]		G_MusicsFileName;
declare Integer[Integer]	G_MusicsGain;
declare Text[Integer]		G_MusicsName;
declare Text[Integer]		G_MusicsLabel;
declare Text[Integer]		G_MusicsAuthor;
declare Text[Integer]		G_MusicsPreviews;

Integer GetMusicEtat()
{
	return MUSIC_ETAT_ACTIVATE;
}

Text GetMusicsXML()
{
	declare Text XML;
	for(I,0,G_Musics.count - 1)
	{
		if(TextLib::ToInteger(G_Musics[I][2]) != MUSIC_ETAT_ACTIVATE) continue;
		XML ^= ""^I;
		if(I < G_Musics.count - 1)
		{
			XML ^= "|";
		}
	}

	return XML;
}

Void SendMusicsAvailableToMode() {
	declare Text MusicAvailable for LocalUser;
	MusicAvailable = GetMusicsXML();
}

Void Load()
{
	G_Musics = LibMusics::Get_AllMusics();

	for(I,0, G_Musics.count -1)
	{
		if(!G_MusicsFileName.existskey(I))
		{
			//G_MusicsFileName[I] = Text[Integer];
			//G_MusicsGain[I] = Integer[Integer];
		}
		G_MusicsFileName[I] = G_Musics[I][0];
		G_MusicsGain[I]     = TextLib::ToInteger(G_Musics[I][1]);
		G_MusicsName[I]     = G_Musics[I][2];
		G_MusicsLabel[I]    = G_Musics[I][3];
		G_MusicsAuthor[I]   = G_Musics[I][4];
		G_MusicsPreviews[I] = G_Musics[I][5];

		/*
		if(!Pers_MusicsEtat2.existskey(I))
		{
			Pers_MusicsEtat2[I] = 2;
		}
		*/
	}
	SendMusicsAvailableToMode();
}

Text GetFeedbackText(Boolean _Succeed) {
	if(G_RequestType == C_REQUESTTYPE_SENTALLINFO) {
		return "SentAllInfo";
	}
	return "";
}

Void SendFeedbackToUI(Boolean _Succeed) {
	declare CUILayer LayerToSend = Layers::Get(G_LayerToSend);
	if(LayerToSend == Null) return;
	declare Text FeedbackText = GetFeedbackText(_Succeed);
	LayerCustomEvent(LayerToSend, FeedbackText, G_ParamToSend);
}



// Functions to call in the Handlers
//-----------------------------------------------------------//

Text GetMusicsUnlock()
{
	declare Text XML;
	XML = """
	[
	""";
	for(I,0,G_Musics.count - 1)
	{
		if(TextLib::ToInteger(G_Musics[I][2]) != MUSIC_ETAT_ACTIVATE) continue;
		XML ^= """[{{{MUSIC_FILE}}} => {{{G_Musics[I][0]}}},
		 {{{MUSIC_GAIN}}} => {{{G_Musics[I][1]}}}]""";
		if(I < G_Musics.count - 1)
		{
			XML ^= """,
			""";
		}
	}
	XML ^= """
	]""";

	return XML;
}


Void GetMusicsEtatToUI(Text _Layer)
{
	if(UserMgr.MainUser == Null) return;
	
	declare CUILayer 		LayerToSend 	= Layers::Get(_Layer);
	if(LayerToSend == Null) return;
	declare Text[Integer]		Page_MusicsFileName		for LayerToSend.LocalPage;
	declare Integer[Integer]	Page_MusicsGain			for LayerToSend.LocalPage;
	declare Integer[Integer]	Page_MusicsEtat			for LayerToSend.LocalPage;
	declare Text[Integer]		Page_MusicsName			for LayerToSend.LocalPage;
	declare Text[Integer]		Page_MusicsLabel		for LayerToSend.LocalPage;
	declare Text[Integer]		Page_MusicsAuthor		for LayerToSend.LocalPage;
	declare Text[Integer]		Page_MusicsPreviews		for LayerToSend.LocalPage;
	declare persistent Integer[Integer]	Pers_MusicsEtat2	for UserMgr.MainUser;
	
	Page_MusicsFileName = G_MusicsFileName;
	Page_MusicsGain     = G_MusicsGain;
	Page_MusicsEtat     = Pers_MusicsEtat2;
	Page_MusicsName     = G_MusicsName;
	Page_MusicsLabel    = G_MusicsLabel;
	Page_MusicsAuthor   = G_MusicsAuthor;
	Page_MusicsPreviews = G_MusicsPreviews;

	G_LayerToSend = _Layer;
	G_ParamToSend.clear();
	G_ParamToSend = [""];
	G_RequestType = C_REQUESTTYPE_SENTALLINFO;
	SendFeedbackToUI(True);
}

Void SetMusicEtat(Integer _Index, Integer _Etat)
{
	if(UserMgr.MainUser == Null) return;
	
	declare persistent Integer[Integer]	Pers_MusicsEtat2 for UserMgr.MainUser;

	G_Musics[_Index][2]     = _Etat^"";
	Pers_MusicsEtat2[_Index] = _Etat;
	//G_MusicsName[_Index]    = _Etat;
}

