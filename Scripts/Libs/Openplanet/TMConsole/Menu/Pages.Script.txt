#Const Version 		"2014-07-25"
#Const ScriptName	"PagesShift.Script.txt"

#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"								as Layers
#Include "Libs/Openplanet/TMConsole/Logger.Script.txt"										as Logger
#Include "Libs/Openplanet/TMConsole/CustomEvents.Script.txt"									as CEvents
#Include "Libs/Openplanet/TMConsole/Menu/Controller/SmartStartController.Script.txt" 		as SmartStart

declare Text[][Text] G_Pages;
declare Text[] G_NavigatedPages;
declare Text G_ActiveLayer;
declare Text G_PrevActiveLayer;

Text GetScriptVersion() {return Version;}
Text GetScriptName() {return ScriptName;}


Text[] GetLayers(Text _PageName) {
	declare Text[] EmptyTable;
	if(! G_Pages.existskey(_PageName)) return EmptyTable;
	return G_Pages[_PageName];
}


Text GetCurrentPageName() {
	declare Integer NavPages = G_NavigatedPages.count;
	if(NavPages <= 0) return "";
	declare Integer LastPageIndex = NavPages-1;
	
	return G_NavigatedPages[LastPageIndex];
}

Text GetPreviousPage(){
	declare Integer NavPages = G_NavigatedPages.count;
	if(NavPages <= 1) return "";
	declare Integer PrevPageIndex = NavPages - 2;
	declare Text 	PrevPageName	= G_NavigatedPages[PrevPageIndex];
	return PrevPageName;
}


Void SetActiveLayer(Text _ActiveLayerName) {
	declare Text CurrentPage = GetCurrentPageName();
	declare Text[] CurrentLayers = GetLayers(CurrentPage);
	if(!CurrentLayers.exists(_ActiveLayerName)) {
		Logger::Warn("[Pages.SetActiveLayer] bad layer name: "^_ActiveLayerName);
		return;
	}

	declare CUILayer NextLayer <=> Layers::Get(_ActiveLayerName);
	if(NextLayer == Null) return;

	LayerCustomEvent(NextLayer, "ActiveLayer", [""]);
	//LayerCustomEvent(NextLayer, "DesactiveLayer", [""]);
	
	G_ActiveLayer = _ActiveLayerName;
}

Void DesactiveLayer() {
	if(G_PrevActiveLayer == "")
	{
		G_PrevActiveLayer = G_ActiveLayer;
		G_ActiveLayer     = "";
	}
}

Void ReactiveLayer() {
	if(G_PrevActiveLayer != "")
	{
		G_ActiveLayer     = G_PrevActiveLayer;
		G_PrevActiveLayer = "";
	}
}


Void DetachPage(Text _PageLayerName)
{
	declare Text CurrentPageName = GetCurrentPageName();
	//log("CurrentPageName["^_PageLayerName^"]: " ^ CurrentPageName);
	if(CurrentPageName == "Main" && (_PageLayerName == "MainSelector" || _PageLayerName == "RankingModule" || _PageLayerName == "StartMain")) return;
	Layers::Detach(_PageLayerName);
}


Void Private_GoandStartPage(Text[] _NextPagesName, Boolean _NextPage) {
	// Hide current
	declare Text CurrentPageName = GetCurrentPageName();
	declare Text NextPageName = _NextPagesName[_NextPagesName.count-1];
	declare Text[] NextLayers = GetLayers(NextPageName);
	
	if(CurrentPageName != "") {
		declare Text[] CurrentLayers = GetLayers(CurrentPageName);

		foreach(LayerName in CurrentLayers) {
			declare CUILayer CurrentLayer <=> Layers::Get(LayerName);

			//TODO - Vérifier que la layer n'est pas dans la composition de la page suivante pour ne pas lancer l'event Hide
			if(!NextLayers.exists(LayerName))
			{
				//LayerCustomEvent(CurrentLayer, "Hide", [NextPageName]);
				Layers::Detach(LayerName);
			}
			//Layers::Detach(LayerName);
			
		}
	}
	// Show next
	foreach(LayerName in NextLayers) {
		declare CUILayer NextLayer <=> Layers::Get(LayerName);
		declare Boolean NextLayerVisibility = Layers::IsVisible(LayerName);
		//HACK
		if(LayerName == "MainSelector")
		{
			//log("["^Now^"]NextLayerVisibility : " ^ LayerName ^ " => " ^ NextLayerVisibility);
			NextLayerVisibility = False;
		}
		//HACKEnd
		if(NextLayer == Null || NextLayerVisibility) continue;
		Layers::Attach(LayerName);
		SmartStart::SetInfosToLayer(NextLayer);
		
		LayerCustomEvent(NextLayer, "Show", [CurrentPageName]);
	}
	
	G_NavigatedPages.clear();
	for(I, 0, _NextPagesName.count - 1)
	{
		G_NavigatedPages.add(_NextPagesName[I]);
	}
	
	if(NextLayers.count <= 0) 	SetActiveLayer("");
	else 						SetActiveLayer(NextLayers[0]);
}


Void Private_GotoPage(Text _NextPageName, Boolean _NextPage) {
	// Hide current
	declare Text CurrentPageName = GetCurrentPageName();
	declare Text[] NextLayers = GetLayers(_NextPageName);
	
	if(CurrentPageName != "") {
		declare Text[] CurrentLayers = GetLayers(CurrentPageName);

		foreach(LayerName in CurrentLayers) {
			declare CUILayer CurrentLayer <=> Layers::Get(LayerName);

			//TODO - Vérifier que la layer n'est pas dans la composition de la page suivante pour ne pas lancer l'event Hide
			if(!NextLayers.exists(LayerName))
			{
				LayerCustomEvent(CurrentLayer, "Hide", [_NextPageName]);
			}
			//Layers::Detach(LayerName);
			
		}
	}
	// Show next
	foreach(LayerName in NextLayers) {
		declare CUILayer NextLayer <=> Layers::Get(LayerName);
		declare Boolean NextLayerVisibility = Layers::IsVisible(LayerName);
		//HACK
		if(LayerName == "MainSelector")
		{
			//log("["^Now^"]NextLayerVisibility : " ^ LayerName ^ " => " ^ NextLayerVisibility);
			NextLayerVisibility = False;
		}
		//HACKEnd
		if(NextLayer == Null || NextLayerVisibility) continue;
		Layers::Attach(LayerName);
		SmartStart::SetInfosToLayer(NextLayer);

		LayerCustomEvent(NextLayer, "Show", [CurrentPageName]);
	}
	
	if(_NextPage) {
		G_NavigatedPages.add(_NextPageName);
	} else {
		declare Boolean Removed = G_NavigatedPages.removekey(G_NavigatedPages.count-1);
	}
	
	if(NextLayers.count <= 0) 	SetActiveLayer("");
	else 						SetActiveLayer(NextLayers[0]);
}

Void ReshowCurrentPage() {
	declare Text CurrentPageName = GetCurrentPageName();

	if(CurrentPageName != "") {
		declare Text[] CurrentLayers = GetLayers(CurrentPageName);
		foreach(LayerName in CurrentLayers) {
			declare CUILayer CurrentLayer <=> Layers::Get(LayerName);

			declare Boolean	Net_IsSmartStart for CurrentLayer.LocalPage;
			Net_IsSmartStart = SmartStart::IsSmartStartActivate();

			LayerCustomEvent(CurrentLayer, "Show", [CurrentPageName]);
			return; // EG : WTF ? on ne reshow que la première layer trouvée ?
		}
	}
}

Void DeleteMap(Text _MapPath) {
	DataMgr.DeleteFile(_MapPath);
	ReshowCurrentPage();
}

Void GotoNext(Text _NextPageName) {
	Private_GotoPage(_NextPageName, True);
}

Void GotoPrevious() {
	declare Integer NavPages = G_NavigatedPages.count;
	if(NavPages <= 1) return;
	declare Integer PrevPageIndex = NavPages-2;
	
	declare Text 	PrevPageName	= G_NavigatedPages[PrevPageIndex];
	Private_GotoPage(PrevPageName, False);
}

Void GoandStartPage(Text _NextPageName) {
	Private_GoandStartPage([_NextPageName], True);
}
Void GoandStartPage(Text[] _NextPagesName) {
	Private_GoandStartPage(_NextPagesName, True);
}
// manage pages events
Void Loop() {
	declare Text CurrentPage = GetCurrentPageName();
	declare Text[] CurrentLayers = GetLayers(CurrentPage);
	declare Integer NbLayers = CurrentLayers.count;
	if(NbLayers <= 0) return;
	
	foreach(Event in PendingEvents) {
		if(Event.Type != CMlAppEvent::EType::LayerCustomEvent) 		continue;
		
		declare CUILayer EventLayer <=> Event.CustomEventLayer;
		if(EventLayer == Null) 										continue;
		
		declare Text LayerName = Layers::GetName(EventLayer);
		if(G_ActiveLayer != "" && G_ActiveLayer != LayerName) 		continue;
		if(!CurrentLayers.exists(LayerName)) 						continue;
		
		
		declare Text 	EventType = Event.CustomEventType;
		declare Integer DataCount = Event.CustomEventData.count;
		
		switch(EventType) {
			case CEvents::GOTO_PREV(): {
				GotoPrevious();
			}
			case CEvents::GOTO_NEXT(): {
				if(DataCount <= 0) 									continue;
				declare Text NextPageName = Event.CustomEventData[0];
				GotoNext(NextPageName);
			}
			case CEvents::SET_ACTIVE(): {
				if(DataCount <= 0) 									continue;
				
				declare Text ActiveLayerName = Event.CustomEventData[0];
				if(!CurrentLayers.exists(ActiveLayerName)) {
					Logger::Warn("[Pages.Loop] Event: "^CEvents::SET_ACTIVE()^", bad layer name: "^ActiveLayerName);
																	continue;
				}
				
				SetActiveLayer(ActiveLayerName);
			}
			default: {
				// Do nothing
			}
		}
	}
}



Void Compose(Text _PageName, Text[] _Layers) {
	G_Pages[_PageName] = _Layers;
}