//Lib de génération et de gestion de la ligne d'inputs infos en bas des menus
#Include "Libs/Openplanet/UIPadButtons.Script.txt" 			as LibUIButtons
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt"	as Font

#Include "TextLib" as TL

#Const C_ImgBase2		"file://Media/Images/TMConsole/Ingame/"

//Pour la génération de Manialink
declare Text 	G_ManialinkText;
declare Real 	G_WidthUnit;
declare Real 	G_Height;
declare Real 	G_Space;
declare Real	G_InputOffset;
declare Text 	G_Prefix;

declare Text[]	G_Inputs;

//Pour la gestion des infos
declare Text[]					G_States;
declare Text[Text][Text][Text] 	G_Variables; //"text"&"visibility"[Input][State]
declare Text[Text]				G_Constants;

Void Init(Text _Prefix, Real _WidthUnit, Real _Height, Real _SpaceBetweenInputs /*in WidthUnits*/) {
	G_ManialinkText = "";
	G_WidthUnit = _WidthUnit;
	G_Height = _Height;
	G_Space = _SpaceBetweenInputs;
	G_Prefix = _Prefix;
	
	G_InputOffset = 0.;
	G_Inputs.clear();
	G_States.clear();
	G_Constants.clear();
	G_Variables.clear();
}	

//adds a new button, right To left
Void AddInput(Real _Width /*in WidthUnits*/, Text _Input) {
	declare Text 	IMGSlotSmallBg  = C_ImgBase2^"slot-medium-bg.dds";
	declare Text 	IMGSlotSmallFg  = C_ImgBase2^"slot-medium-fg.dds";
	declare Integer Platform   		= LibUIButtons::GetPlatform();
	//pour tester :
	//Platform = LibUIButtons::GetPlatform("PC");
	declare Text Image_PC;
	declare Text Image_XB1;
	declare Text Image_PS4;
	switch (_Input)
	{
		case "Select" 		: {
			Image_PC = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Select);
			Image_PS4 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Select);
			Image_XB1 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Select);
		}
		case "Cancel" 		: {
			Image_PC = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Cancel);
			Image_PS4 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Cancel);
			Image_XB1 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Cancel);
		}
		case "Action1" 		: {
			Image_PC = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Action1);
			Image_PS4 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Action1);
			Image_XB1 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Action1);
		}
		case "Action2" 		: {
			Image_PC = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PC"), CManiaAppEvent::EMenuNavAction::Action2);
			Image_PS4 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), CManiaAppEvent::EMenuNavAction::Action2);
			Image_XB1 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), CManiaAppEvent::EMenuNavAction::Action2);
		}		case "LStickPress" 	: {
			Image_PC = "file://Media/Manialinks/Common/PadButtons/PC/F5.dds";
			Image_PS4 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("PS4"), "RandomModel");
			Image_XB1 = LibUIButtons::GetImage(LibUIButtons::GetPlatform("XB1"), "RandomModel");
		}
		
	}
	
	G_Inputs.add(_Input);
	
	G_ManialinkText ^= """
		<frame id="Frame_InputInfo_{{{G_Prefix}}}_{{{_Input}}}" posn="{{{- G_InputOffset * G_WidthUnit}}}" hidden="1">
			<quad 	halign="right" valign="bottom" posn="0 0 6" sizen="{{{_Width*G_WidthUnit}}} {{{G_Height}}}" image="{{{IMGSlotSmallBg}}}"   />
			<quad 	halign="right" valign="bottom" posn="0 0 8" sizen="{{{_Width*G_WidthUnit}}} {{{G_Height}}}" image="{{{IMGSlotSmallFg}}}" id="MouseInput_{{{G_Prefix}}}InputInfo_{{{_Input}}}" scriptevents="1" />
			
	""";
	
	for (I, 0, 2) {
		declare Text Image;
		switch (I) {
			case LibUIButtons::GetPlatform("PC") : Image = Image_PC;
			case LibUIButtons::GetPlatform("PS4") : Image = Image_PS4;
			case LibUIButtons::GetPlatform("XB1") : Image = Image_XB1;
		}
		G_ManialinkText ^= """<quad 	halign="center" valign="center" posn="{{{-G_WidthUnit*0.5}}} 	{{{G_Height*0.5}}} 7" 	sizen="{{{G_WidthUnit*0.8}}} {{{G_WidthUnit*0.8}}} 6" 	image="{{{Image}}}" id="Quad_InputIcon_{{{I}}}" """;
		
		if (I  != Platform)
			G_ManialinkText ^= """ hidden="1" """;
		G_ManialinkText ^= "/>";
	}
		G_ManialinkText ^= """
			<label 	halign="right" valign="center2" posn="{{{-G_WidthUnit-2.}}} 	{{{G_Height*0.5}}} 7" 	sizen="{{{(_Width-1)* G_WidthUnit - 4. }}}" 			id="Label_Name" textcolor="ddd"  textsize="4." textfont="{{{Font::GetFontName("Main")}}}" textprefix="$t" />
		</frame>
	""";
	G_InputOffset += _Width + G_Space;
}

Void SetConstantInput(Text _Input, Text _Info) {
	//assert(G_Inputs.exists(_Input));
	G_Constants[_Input] = _Info;
}

Void SetStates(Text[] _States) {
	G_Variables.clear();
	for (I, 0, _States.count-1)
		G_Variables[_States[I]] = Text[Text][Text];
}

Void SetVariableInput(Text _State, Text _Input, Boolean _Visible) {
	//assert(G_Variables.existskey(_State) && G_Inputs.exists(_Input));
	G_Variables[_State][_Input] = ["visible"=>TL::ToText(_Visible)];
}

Void SetVariableInput(Text _State, Text _Input, Boolean _Visible, Text _Info) {
	//assert(G_Variables.existskey(_State) && G_Inputs.exists(_Input));
	G_Variables[_State][_Input] = ["visible"=>TL::ToText(_Visible), "text"=>_Info];
}

Text InjectInManialink () {
	return G_ManialinkText;
}

Text InjectInGlobals () {
	return """declare Text[Text][Text][Text]	G_{{{G_Prefix}}}_InputInfoRules;""";
}

Text InjectInInit () {
	if (G_Variables.count != 0)
		return """G_{{{G_Prefix}}}_InputInfoRules = {{{dump(G_Variables)}}};""";
	return """G_{{{G_Prefix}}}_InputInfoRules = Text[Text][Text][Text];""";		
}

Text InjectInFunctions() {
	declare Text Functions = """
		Void {{{G_Prefix}}}_UpdateInputInfos(Text _State) {
			declare CMlFrame FrameInput;
			declare CMlLabel LabelInfo;
			
			//assert(G_{{{G_Prefix}}}_InputInfoRules.existskey(_State));
			declare Text[Text][Text] State = G_{{{G_Prefix}}}_InputInfoRules[_State];
			foreach(Input=>Infos in State)
			{
				FrameInput	<=> (Page.GetFirstChild("Frame_InputInfo_{{{G_Prefix}}}_"^Input) as CMlFrame);
				log(Infos["visible"]);
				if (Infos["visible"] == "True")
				{
					FrameInput.Show();
					LabelInfo	<=> (FrameInput.GetFirstChild("Label_Name") as CMlLabel);
					LabelInfo.Value = TL::GetTranslatedText(Infos["text"]);
				} else {
					FrameInput.Hide();
				}
			}
		}
	
		Void {{{G_Prefix}}}_InitInputInfos(Text _State) {
			declare CMlFrame FrameInput;
			declare CMlLabel LabelInfo;
	""";
	
	foreach(Input=>InputText in G_Constants)
	{
		Functions ^= """
			FrameInput	<=> (Page.GetFirstChild("Frame_InputInfo_{{{G_Prefix}}}_{{{Input}}}") as CMlFrame);
			FrameInput.Show();
			LabelInfo	<=> (FrameInput.GetFirstChild("Label_Name") as CMlLabel);
			LabelInfo.Value = "{{{TL::GetTranslatedText(InputText)}}}";
		""";
	}
	
	Functions ^= """
			if (_State != "")
				{{{G_Prefix}}}_UpdateInputInfos(_State);
		}
	""";
	// log(Functions);
	return Functions;
}
