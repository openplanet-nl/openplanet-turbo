

		
Text MLMapsManager(Integer _NbEnviro) {
	declare Text C_DefaultPathFilter ="""Campaigns\\Summer\\""";

	declare Text MLText = """
	// <script><!-- // pour la colo syntaxique :)

	declare Real[Integer]				G_CustomMapIndex; //Tableau qui permet de donner un ordre d'index pour les CustomMaps
	declare Integer[Integer][Integer]	G_CustomMapsInfoIndex;
	declare Boolean[Integer]			G_IsEnviroFolderOpen;
	declare Integer[Integer]			G_EnviroByIndex; // 0:Stadium, 1:Canyon, 2:Valley, 3:Lagoon
	declare Integer[Integer]			G_NumberOfMapByEnviro;
	declare Integer[Integer]			G_PositionEnviro; // Indique où dans le tableau commence l'enviro

	Void Private_SetLoadFilter(Text _PathFilter)
	{
		//log("_PathFilter: " ^ _PathFilter);
		DataMgr.MapFilterStartWithPath = _PathFilter;
		wait(DataMgr.Ready);
	}

	//Fonction qui renvois True si la map existe bien dans le tableau
	Boolean IsMapFound(Integer _MapIndex, Integer _Enviro, Integer _Difficulty)
	{
		declare Integer[Integer][Integer][Integer]	MapInfoIndex		for This;
		//log("MapInfoIndex: " ^ MapInfoIndex);
		if(_Difficulty != 0)
		{
			if(MapInfoIndex.existskey(_Difficulty))
			{
				if(MapInfoIndex[_Difficulty].existskey(_Enviro))
				{
					if(MapInfoIndex[_Difficulty][_Enviro].existskey(_MapIndex))
					{
						return True;
					}
				}
			}
		}
		else
		{
			if(G_CustomMapsInfoIndex.existskey(_Enviro))
			{
				if(G_CustomMapsInfoIndex[_Enviro].existskey(_MapIndex))
				{
					return True;
				}
			}
		}
		return False;
	}

	CMapInfo GetMapInfo(Integer _DifficultySelect, Integer _Enviro, Integer _MapIndex)
	{
		declare Integer[Integer][Integer][Integer]	MapInfoIndex		for This;
		

		declare CMapInfo Map;
		declare Integer Index;

		if(_DifficultySelect != 0)
		{
			Index = MapInfoIndex[_DifficultySelect][_Enviro][_MapIndex];
		}
		else
		{
			Index = G_CustomMapsInfoIndex[_Enviro][_MapIndex];
		}
		Map <=> DataMgr.Maps[Index];
		return Map;
	}


	Boolean MapIsValid(CMapInfo _Map)
	{
		// HACK : les dossiers apparaissent dans le DataMgr,
		// et renvoient ce genre de choses : on les filtre.
		if(_Map.CollectionName == "_Unassigned") return False;
		if(_Map.AuthorLogin == "") return False;

		// HACK : pour l'instant, on n'affiche que les maps de la campagne "Summer"
		declare Text[] PathInfo = TL::Split("\\", _Map.Path);
		if(PathInfo.count < 2) return False;
		if(PathInfo[1] == "Summer") return True;

		return False;
	}


	Vec3 GetMapIndice(CMapInfo _Map, Boolean _IsCustomMap){
		declare Vec3 Indice = <0., 0., 0.>; //X: Difficulty | Y: Enviro | Z: MapIndex
		declare Text Enviro = _Map.CollectionName;

		switch(Enviro) {
			case "Stadium" 	: Indice.Y = 0.;
			case "Canyon" 	: Indice.Y = 1.;
			case "Valley" 	: Indice.Y = 2.;
			case "Lagoon" 	: Indice.Y = 3.;
		}

		declare Text[] PathInfo = TL::Split("\\", _Map.Path);
		if(PathInfo.existskey(2))
		{
			switch(PathInfo[2]) {
				case "00 - Custom" 	: Indice.X = 0.;
				case "01 - White" 	: Indice.X = 1.;
				case "02 - Green" 	: Indice.X = 2.;
				case "03 - Blue" 	: Indice.X = 3.;
				case "04 - Red" 	: Indice.X = 4.;
				case "05 - Black" 	: Indice.X = 5.;
			}
		}

		

		declare Text[] NameInfo = TL::Split("0", _Map.Name);
		if(NameInfo.existskey(1) && !_IsCustomMap)
		{
			Indice.Z = (TL::ToReal(NameInfo[1])-1.);
		}
		if(_IsCustomMap)
		{
			declare Integer EnviroIndex = ML::NearestInteger(Indice.Y);
			Indice.Z = G_CustomMapIndex[EnviroIndex];
			G_CustomMapIndex[EnviroIndex] += 1;
		}


		return Indice;
	}


	Void RetrieveCustomMaps() {
		G_CustomMapIndex[0] = 1.;
		G_CustomMapIndex[1] = 1.;
		G_CustomMapIndex[2] = 1.;
		G_CustomMapIndex[3] = 1.;
		G_CustomMapsInfoIndex.clear();

		//Init le tableau
		for(IndexEnviro, 0, C_NumberOfQuadCreateY) {
			G_CustomMapsInfoIndex[IndexEnviro] = Integer[Integer];
		}

		foreach(Index => Map in DataMgr.Maps) {

			//if(!MapIsValid(Map)) continue;

			declare Vec3 MapIndice     = GetMapIndice(Map, True);
			declare Integer Difficulty = ML::NearestInteger(MapIndice.X);
			declare Integer Enviro     = ML::NearestInteger(MapIndice.Y);
			declare Integer MapIndex   = ML::NearestInteger(MapIndice.Z);
			
			G_CustomMapsInfoIndex[Enviro][MapIndex] = Index;
		}
	}

	Void RetrieveCustomMaps2() {
		G_CustomMapIndex[0] = 0.;
		G_CustomMapIndex[1] = 0.;
		G_CustomMapIndex[2] = 0.;
		G_CustomMapIndex[3] = 0.;
		G_CustomMapsInfoIndex.clear();

		//Init le tableau
		for(IndexEnviro, 0, C_NumberOfQuadCreateY) {
			G_CustomMapsInfoIndex[IndexEnviro] = Integer[Integer];
		}

		declare Integer PositionX = 0;
		declare Integer PositionY = 0;
		foreach(Index => Map in DataMgr.Maps) {

			//if(!MapIsValid(Map)) continue;
			/*
			declare Vec3 MapIndice     = GetMapIndice(Map, True);
			declare Integer Difficulty = ML::NearestInteger(MapIndice.X);
			declare Integer Enviro     = ML::NearestInteger(MapIndice.Y);
			declare Integer MapIndex   = ML::NearestInteger(MapIndice.Z);
			*/
			if(PositionX > 3)
			{
				PositionX = 0;
				PositionY += 1;
			}
			else
			{
				PositionX += 1;
			}

			G_CustomMapsInfoIndex[PositionY][PositionX] = Index;
		}
	}

	//Version de la fonction qui réageance le tableau de map en fonction des Folders Open ou Closed
	Void SortWithFoldersStates() {
		declare Integer[Integer][Integer]	NewDisposition;
		declare Boolean[Integer]	IsButtonOpen; //Sert à garder une place dans le tableau affiché pour mettre le bouton "Open Folder"
		G_CustomMapIndex[0] = 1.;
		G_CustomMapIndex[1] = 1.;
		G_CustomMapIndex[2] = 1.;
		G_CustomMapIndex[3] = 1.;
		IsButtonOpen[0]     = False;
		IsButtonOpen[1]     = False;
		IsButtonOpen[2]     = False;
		IsButtonOpen[3]     = False;
		

		//Init le tableau
		for(IndexEnviro, 0, C_NumberOfQuadCreateY) {
			NewDisposition[IndexEnviro] = Integer[Integer];
		}
		
		declare Integer PositionX = 0;
		declare Integer PositionY = -1;
		declare PrevEnviro = -1;
		G_NumberOfMapByEnviro.clear();
		G_NumberOfMapByEnviro[0] = 0;
		G_NumberOfMapByEnviro[1] = 0;
		G_NumberOfMapByEnviro[2] = 0;
		G_NumberOfMapByEnviro[3] = 0;
		declare Integer StartEnviroPosnY = 0;

		foreach(Enviro => EnviroArray in G_CustomMapsInfoIndex) {
			if(Enviro <= 3)
			{
				G_PositionEnviro[Enviro] = StartEnviroPosnY;
				if(EnviroArray.count <=0)
				{
					StartEnviroPosnY +=1;
				}

				foreach(MapIndex => Index in EnviroArray)
				{
					//log("["^Enviro^"]: " ^PositionY);
					G_NumberOfMapByEnviro[Enviro] +=1;
					if(Enviro != PrevEnviro)
					{
						PositionY += 1;
						StartEnviroPosnY +=1;
						PositionX =  0;
						PrevEnviro = Enviro;
						if(G_CustomMapsInfoIndex.existskey(Enviro-1))
						{
							if(G_CustomMapsInfoIndex[Enviro-1].count == 0)
							{
								PositionY += 1;
							}
						}
					}

					if(!G_IsEnviroFolderOpen[Enviro])
					{
						NewDisposition[PositionY][MapIndex] = Index;
					}
					else 
					{
						PositionX += 1;
						if(PositionX > 4)
						{
							PositionY += 1;
							StartEnviroPosnY +=1;
							PositionX  = 0;
						}
						NewDisposition[PositionY][PositionX] = Index;
					}

					//Crée une place pour le boutton "Open Folder"
					if(PositionX == 3 && !IsButtonOpen[Enviro] && G_CustomMapsInfoIndex[Enviro].count > 4)
					{
						IsButtonOpen[Enviro] = True;
						PositionX += 1;
						if(PositionX > 4)
						{
							PositionY += 1;
							PositionX  = 0;
						}
					}
					G_EnviroByIndex[Index] = Enviro;
				}
			}
		}
		G_CustomMapsInfoIndex.clear();

		for(I, 0, NewDisposition.count -1) {
			G_CustomMapsInfoIndex[I] = Integer[Integer];
		}
		G_CustomMapsInfoIndex = NewDisposition;


		/*
		foreach(Index => Map in DataMgr.Maps) {

			//if(!MapIsValid(Map)) continue;

			declare Vec3 MapIndice     = GetMapIndice(Map, True);
			declare Integer Difficulty = ML::NearestInteger(MapIndice.X);
			declare Integer Enviro     = ML::NearestInteger(MapIndice.Y);
			declare Integer MapIndex   = ML::NearestInteger(MapIndice.Z);
			if(!G_IsEnviroFolderOpen[Enviro])
			{
				if(Enviro != PrevEnviro)
				{
					PositionY += 1;
					PrevEnviro = Enviro;
				}
				//G_CustomMapsInfoIndex[PositionY][MapIndex] = Index;
			}
			else
			{

			}
		}
		*/
	}

	Void RetrieveCampaignMaps() {
		declare Integer[Integer][Integer][Integer] MapInfoIndex for This;
		MapInfoIndex.clear();

		//Init le tableau
		for(IndexDiff, 0, C_NbDifficulty) { 	// C_NbDifficulty : le nombre de diff, i.e. custom:0 + white:1 + green:2 + blue:3 + red:4 + black:5
			MapInfoIndex[IndexDiff] = Integer[Integer][Integer];
			for(IndexEnviro, 0, {{{_NbEnviro - 1}}}) { 	// _NbEnviro :  le nombre d'enviro, i.e. Stadium:0 + Canyon:1 + Valley:2 + Lagoon:3
				MapInfoIndex[IndexDiff][IndexEnviro] = Integer[Integer];
			}
		}

		foreach(Index => Map in DataMgr.Maps) {

			if(!MapIsValid(Map)) continue;

			declare Vec3 MapIndice     = GetMapIndice(Map, False);
			declare Integer Difficulty = ML::NearestInteger(MapIndice.X);
			declare Integer Enviro     = ML::NearestInteger(MapIndice.Y);
			declare Integer MapIndex   = ML::NearestInteger(MapIndice.Z);

			MapInfoIndex[Difficulty][Enviro][MapIndex] = Index;
		}
	}

	Void RetrieveRecords(CMapInfo _MapId)
	{
		//log("Login: "^ );
		DataMgr.RetrieveRecords(_MapId, DataMgr.MenuUserId);
	}

	Void LoadCampaignMaps(Text _PathFilter)
	{	
		Private_SetLoadFilter(_PathFilter);
		DataMgr.RetrieveGameFiles(CDataMgr::EFileType::Map);
		wait(DataMgr.Ready);
		RetrieveCampaignMaps();

		for(I,0,3)
		{
			G_PositionEnviro[I] = I;
		}
	}

	Void LoadCampaignMaps()
	{
		LoadCampaignMaps("{{{C_DefaultPathFilter}}}");
	}

	Void LoadUserMaps()
	{
		DataMgr.RetrieveUserFiles (DataMgr.MenuUserId, "data0", CDataMgr::EFileType::Map);
		wait(DataMgr.Ready);
		for(I, 0, 3)
		{
			if(!G_IsEnviroFolderOpen.existskey(I))
			{
				G_IsEnviroFolderOpen[I] = False;
			}
		}

		RetrieveCustomMaps();
		SortWithFoldersStates();
	}


	Void OpenCustomFolder(Integer _Enviro)
	{
		G_IsEnviroFolderOpen[_Enviro] = True;
	}
	
	Void CloseCustomFolder(Integer _Enviro)
	{
		G_IsEnviroFolderOpen[_Enviro] = False;
	}
	
	""";
	
	return MLText;
}
