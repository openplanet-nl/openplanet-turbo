#Const GREEN_MASTER 	"GreenMaster"
#Const YELLOW 			"Yellow"
#Const YELLOW_INTENSE 	"YellowIntense"
#Const ORANGE 			"Orange"
#Const RED 				"Red"
#Const RED2 			"Red2"
#Const BLUE 			"Blue"
#Const BLUE_LIGHT 		"BlueLight"
#Const GREEN 			"Green"
#Const GREEN2 			"Green2"
#Const PURPLE 			"Purple"
#Const CYAN 			"Cyan"
#Const WHITE 			"White"
#Const BLACK 			"Black"
#Const GREY 			"Grey"
#Const GREY_WHITE		"GreyWhite"
#Const GREY_BLACK		"GreyBlack"
#Const PINKRED 			"PinkRed"
#Const CYAN2 			"Cyan2"
#Const GOLD 			"Gold"
#Const SILVER 			"Silver"
#Const BRONZE 			"Bronze"



#Const C_DifficultyCustom 		<1.0, 0.9, 0.0>
#Const C_DifficultyWhite 		<1., 1., 1.>
#Const C_DifficultyGreen 		<0., 1., 0.>
#Const C_DifficultyBlue  		<0., 0.2, 1.>
#Const C_DifficultyRed   		<1., 0., 0.>
#Const C_DifficultyBlack 		<0.25, 0.25, 0.25>

#Const C_ColorQuadScreen0 		<0.8, 0.0, 0.0>
#Const C_ColorQuadScreen1 		<1.0, 1.0, 0.0>



Text[] GetColorList()
{
	return [YELLOW, YELLOW_INTENSE, ORANGE, RED, BLUE, BLUE_LIGHT, GREEN, GREEN2, GREEN_MASTER, PURPLE, CYAN, CYAN2, WHITE, BLACK, GREY, PINKRED];
}



Vec3 GetColor(Text _Color)
{ 
	switch(_Color)
	{
		case YELLOW 		: return <0.898, 0.848, 0.000>;
		case YELLOW_INTENSE : return <1.000, 0.641, 0.000>;
		case ORANGE 		: return <1.000, 0.355, 0.109>;
		case RED 			: return <1.000, 0.195, 0.109>;
		case RED2 			: return <1.000, 0.285, 0.000>;
		case BLUE 			: return <0.133, 0.426, 0.812>;
		case BLUE_LIGHT 	: return <0.000, 0.871, 1.000>;
		case GREEN 	 		: return <0.277, 0.629, 0.156>;
		case GREEN2 	 	: return <0.000, 1.000, 0.750>;
		case GREEN_MASTER 	: return <0.000, 1.000, 0.082>;
		case PURPLE 		: return <0.566, 0.277, 0.836>;
		case CYAN 			: return <0.000, 0.637, 0.738>;
		case CYAN2 			: return <0.000, 1.000, 1.000>;
		case WHITE 			: return <0.879, 0.879, 0.879>;
		case BLACK 			: return <0.129, 0.129, 0.129>;
		case GREY 			: return <0.436, 0.436, 0.436>;
		case GREY_WHITE		: return <0.600, 0.600, 0.600>;
		case GREY_BLACK		: return <0.250, 0.250, 0.250>;
		case PINKRED 		: return <1.000, 0.285, 0.477>;
		case BRONZE			: return <0.561, 0.376, 0.235>;
		case SILVER			: return <0.506, 0.541, 0.592>;
		case GOLD			: return <0.741, 0.686, 0.278>;
	}
	
	log("[WARNING] COLORS : Can't find color '" ^ _Color ^ "'.");
	return <0.,0.,0.>;
}

Vec3 GetEchelonColor(Integer _Echelon) {
	switch(_Echelon)
	{
		case 0				: return GetColor("White");
		case 1				: return GetColor("YellowIntense");
		case 2				: return GetColor("Orange");
		case 3				: return <1.0, 0.050, 0.0>;
		case 4				: return <1.0, 0.439, 0.647>;
		case 5				: return <0.827, 0.149, 0.996>;
		case 6				: return <0.431, 0.149, 0.921>;
		case 7				: return <0.388, 0.819, 0.172>;
		case 8				: return <0.0, 0.776, 0.541>;
		case 9				: return <0.0, 0.654, 0.800>;
	}
	return <0.0, 0.0, 0.0>;
}

Text GetColorXml(Text _Color)
{
	declare Color = GetColor(_Color);
	return """{{{Color.X}}} {{{Color.Y}}} {{{Color.Z}}}""";
}



// DEPRECATED : SHOULD BE REMOVED. USE GetColorXml(_Color) INSTEAD
Text GetColorHexa(Text _Color)
{
	return GetColorXml(_Color);
}

//Correspond aux couleurs des Label(ON) de l'écran "Résumé de la campagne"
Vec3 GetLabelColorLight(Text _Color)
{ 
	switch(_Color)
	{
		case WHITE 			: return <0.941, 0.941, 0.941>;
		case GREEN 	 		: return <0.593, 1.0, 0.220>;
		case BLUE 			: return <0.254, 0.543, 0.688>;
		case RED 			: return <1.000, 0.195, 0.109>;
		case BLACK 			: return <0.329, 0.329, 0.329>;
	}
	
	return <0.,0.,0.>;
}

//Correspond aux couleurs des Label(OFF) de l'écran "Résumé de la campagne"
Vec3 GetLabelColorUnLight(Text _Color)
{ 
	switch(_Color)
	{
		case WHITE 			: return <0.40, 0.40, 0.40>;
		case GREEN 	 		: return <0.318, 0.494, 0.122>;
		case BLUE 			: return <0.295, 0.441, 0.515>;
		case RED 			: return <1.000, 0.195, 0.109>;
		case BLACK 			: return <0.129, 0.129, 0.129>;
	}
	
	return <0.,0.,0.>;
}


Vec3 GetQuadColorUnLight(Text _Color)
{ 
	switch(_Color)
	{
		case WHITE 			: return <0.089, 0.089, 0.089>;
		case GREEN 	 		: return <0.089, 0.089, 0.089>;
		case BLUE 			: return <0.089, 0.089, 0.089>;
		case RED 			: return <0.089, 0.089, 0.089>;
		case BLACK 			: return <0.089, 0.089, 0.089>;
	}
	
	return <0.,0.,0.>;
}


Vec3 GetQuadColorLight(Text _Color)
{ 
	switch(_Color)
	{
		case WHITE 			: return <0.58, 0.58, 0.58>;
		case GREEN 	 		: return <0.406, 0.623, 0.168>;
		case BLUE 			: return <0.254, 0.543, 0.688>;
		case RED 			: return <1.000, 0.195, 0.109>;
		case BLACK 			: return <0.129, 0.129, 0.129>;
	}
	
	return <0.,0.,0.>;
}

Vec3 GetDifficultyColor(Integer _IndexDifficulty) 
{
	switch(_IndexDifficulty)
	{
		case 1: return GetColor(WHITE);
		case 2: return GetColor(GREEN);
		case 3: return GetColor(BLUE);
		case 4: return GetColor(RED);
		case 5: return GetColor(BLACK);
	}
	return GetColor(BLACK);
}
			
Text GetModeColorName(Integer _IndexMenu) 
{
	switch(_IndexMenu)
	{
		case 0: return RED; 	// ONLINE
		case 1: return GREEN2;	// MULTIPLAYER
		case 2: return YELLOW; 	// CAMPAIGN
		case 3: return WHITE;	// EDITOR
		case 4: return BLACK;	// LEADERBOARD
	}
	return "";
}		

Vec3 GetModeColor(Integer _IndexMenu) 
{
	return GetColor(GetModeColorName(_IndexMenu));
}
		
Text GetModeColorXml(Integer _IndexMenu) 
{
	return GetColorXml(GetModeColorName(_IndexMenu));
}
		
Vec3 GetColorQuadScreen(Integer _Index) 
{
	switch(_Index)
	{
		case 0: return C_ColorQuadScreen0;
		case 1: return C_ColorQuadScreen1;
	}
	return <0., 0., 0.>;
}