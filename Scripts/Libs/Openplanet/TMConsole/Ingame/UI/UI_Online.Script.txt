/** 
 *	In-Game UI library
 */
 

#Include "TextLib" as TL

#Include "Libs/Openplanet/Anim.Script.txt" 										as Anim
#Include "Libs/Openplanet/Manialink2.Script.txt"  								as Manialink
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt"					as Layers
#Include "Libs/Openplanet/TMConsole/HSVColors.Script.txt" 						as Hue
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt" 						as Font
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt" 							as Colors
#Include "Libs/Openplanet/TMConsole/Volumes.Script.txt" 							as Volumes
#Include "Libs/Openplanet/UIPadButtons.Script.txt"								as UIButtons
#Include "Libs/Openplanet/TMConsole/Prompter2.Script.txt"						as Prompter2
#Include "Libs/Openplanet/TMConsole/Ingame/UI/UI_CheatCode.Script.txt" 			as UICheatCode
#Include "Libs/Openplanet/TMConsole/Ingame/UI/UIBindingPadButtons.Script.txt" 	as UIBindingPadButtons
#Include "Libs/Openplanet/TMConsole/Ingame/UI/UILastDeviceUsed.Script.txt" 		as UILastDeviceUsed

#Const Version		"2016-02-25"
#Const ScriptName	"UI.Script.txt"

#Const C_LAYERNAME_UICHEATCODE				"UICheatCode"

#Const IMGPATH								"file://Media/Images/TMConsole/Ingame/"
#Const SOUNDPATH							"file://Media/Sounds/TMConsole/"
#Const SOUNDPATH_VOICES						"file://Media/Sounds/TMConsole/Voices/"
#Const VIDEOPATH							"file://Media/Manialinks/Nadeo/TMConsole/Video/"

//////////////////////////////////////////
// IMAGES
#Const IMG_DOUBLEDRIVER_LOGO				"dd-logo.dds"
#Const IMG_FG								"slot-medium-fg.dds"
#Const IMG_BG								"slot-medium-bg.dds"
#Const IMG_BG_LINE							"menu-bg-1.dds"
#Const IMG_BG_LINE_LONGER					"menu-bg-1-2.png"
#Const IMG_ENGINE_OFF						"engine-off.dds"
#Const IMG_ENGINE_ON						"engine-on.dds"
#Const IMG_TURBO							"turbo.dds"

#Const IMG_INTRO_3							"race-3.dds"
#Const IMG_INTRO_2							"race-2.dds"
#Const IMG_INTRO_1							"race-1.dds"
#Const IMG_INTRO_GO							"race-go.dds"
#Const IMG_INTRO_GO2						"race-go2.dds"
#Const IMG_INTRO_GLOW_3						"race-3-glow.dds"
#Const IMG_INTRO_GLOW_2						"race-2-glow.dds"
#Const IMG_INTRO_GLOW_1						"race-1-glow.dds"
#Const IMG_INTRO_GLOW_GO					"race-go-glow.dds"
	
	

//////////////////////////////////////////
// SOUNDS

#Const SOUND_VOICE_CHECKPOINT_1				"Voices/voice-checkpoint-1.wav"
#Const SOUND_VOICE_CHECKPOINT_2				"Voices/voice-checkpoint-2.wav"
#Const SOUND_VOICE_CHECKPOINT_3				"Voices/voice-checkpoint-3.wav"
#Const SOUND_VOICE_CHECKPOINT_4				"Voices/voice-checkpoint-4.wav"
#Const SOUND_VOICE_CHECKPOINT_YES			"Voices/voice-checkpoint-yes-"
#Const SOUND_VOICE_CHECKPOINT_NO			"Voices/voice-checkpoint-no-"
#Const SOUND_VOICE_CARHIT					"Voices/voice-carhit-"
#Const SOUND_SPEEDEFFECT 					"event-speedeffect.wav"
#Const SOUND_CHECKPOINT_TIME 				"checkpoint-time.wav"
#Const SOUND_CHECKPOINT_NO 					"checkpoint-no.wav"
#Const SOUND_CHECKPOINT_YES 				"checkpoint-yes.wav"
#Const SOUND_CHECKPOINT_LAP 				"checkpoint-lap.wav"
#Const SOUND_ENDRACE_YES 					"endrace-yes.wav"
#Const SOUND_ENDRACE_NO						"endrace-no.wav"
#Const SOUND_CROWD_YES						"checkpoint-crowd-yes.ogg"
#Const SOUND_CROWD_NO						"checkpoint-crowd-no.ogg"
#Const SOUND_WHOOSHTEST 					"whooshtest-mono.wav"
#Const SOUND_SHOWLINE 						"event-woosh-small.wav"
#Const SOUND_RACE_1 						"race-1.wav"
#Const SOUND_RACE_2 						"race-2.wav"
#Const SOUND_RACE_3 						"race-3.wav"
#Const SOUND_RACE_GO						"race-go.wav"
#Const SOUND_DRIFTRISE 						"skid-gauge.wav"
#Const SOUND_ISFLYING 						"state-flying.ogg"
#Const SOUND_ISFREEWHEEL					"state-freewheel.ogg"

#Const SOUND_VOICE_LAP2						"voice-lap-2.wav"
#Const SOUND_VOICE_LAP3						"voice-lap-3.wav"
#Const SOUND_VOICE_LAP4						"voice-lap-4.wav"
#Const SOUND_VOICE_LAP5						"voice-lap-5.wav"
#Const SOUND_VOICE_LAPFINAL					"voice-lap-final.wav"


//////////////////////////////////////////
// VIDEO

#Const VIDEO_SPEEDSTEP   					"video_smoke_green.webm"
#Const VIDEO_BGANIM_MESSAGE					"hud_bganim_msg.webm"



//////////////////////////////////////////
// ALIGN

#Const vT 	""" valign="top" """
#Const vB 	""" valign="bottom" """
#Const vC 	""" valign="center" """
#Const hC 	""" halign="center" """
#Const hR 	""" halign="right" """



//////////////////////////////////////////
// NON-SETTINGS CONST

#Const C_LAYERNAME_UI						"Race"
#Const C_LAYERNAME_321GO					"321Go"
// #Const C_LAYERNAME_TIMEOUT					"TimeOut"

#Const C_RATIO 								12.962

#Const C_LEFT								0
#Const C_HCENTER							1
#Const C_RIGHT								2
#Const C_NONE								3

#Const C_RATIO_1CIRCLE						0.06666666667
#Const C_DURATION_LABELSHOW					2000
#Const C_DELAY_LAP							0
#Const C_DELAY_ENDRACE						1500



//////////////////////////////////////////
// RACE ML SETTINGS

#Const C_RACE_CLIP_OFFSET 					0.2
#Const C_RACE_FREEWHEEL_SIZE_X 				46.
#Const C_RACE_MAPNAME_SIZE_X 				70.
#Const C_RACE_MAPNAME_TEXTSIZE_SIGN 		5
#Const C_RACE_MAPNAME_TEXTSIZE_NAME			7
#Const C_RACE_MAPNAME_MARGIN_SIGN			3
#Const C_RACE_MAPNAME_POSX_MEDAL			-1
#Const C_RACE_MAPNAME_SIZE_MEDAL			18
#Const C_RACE_MAPNAME_POSY_LAP				-11.5
#Const C_RACE_MAPNAME_POSY_LAPTEXT			-1.5
#Const C_RACE_MAPNAME_SIZE_LAP				6
#Const C_RACE_SPEEDVIDEO_SIZERATIO			1.02
#Const C_RACE_DOUBLEDRIVER_LOGO_SIZEX		52



//////////////////////////////////////////
// 321GO ML SETTINGS

#Const C_INTRO_QUAD_SIZE 					37
#Const C_INTRO_QUAD_OPACITY 				0.8
#Const C_INTRO_QUAD_OPACITY_NORMAL 			1.
#Const C_INTRO_POSX							0
#Const C_INTRO_POSY 						0



//////////////////////////////////////////
// REWARD ML SETTINGS

#Const C_REWARDS_TRANSITION_SIZE_X			1012.5
#Const C_REWARDS_BUTTON_SIZE_X				10
#Const C_REWARDS_TEXT_INTERVAL				-0.13
#Const C_REWARDS_PRESSTOCONTINUE_INTERVAL	1
#Const C_REWARDS_PRESSTOCONTINUE_POSY		-75



//////////////////////////////////////////
// PRESS TO RESTART ML SETTINGS

#Const C_PRESSTORESTART_IMG_SIZE 			60
#Const C_PRESSTORESTART_TEXT_SIZE 			4
#Const C_PRESSTORESTART_TEXT_INTERLIGN 		-0.5



//////////////////////////////////////////
// SPEED COUNTER 

#Const C_SPEED_SIZEGAUGE					30.
#Const C_SPEED_SIZEGAUGE_RATIO				1.75
#Const C_SPEED_FULLCIRCLEVALUE				400.
#Const C_GAUGE_OPACITY						0.6
#Const C_GAUGEPERSISTENT_OPACITY			0.5
#Const C_GAUGEPERSISTENT_FADEDURATION		3000



//////////////////////////////////////////
// CHECKPOINT TIMER SETTINGS

// THE TEXT SIZE IS THE DEFAULT ONE USED OTHER COUNTERS (C_TEXT_DEFAUTSIZE), WITH A SCALE APPLIED TO THE WHOLE FRAME (C_TEXT_CHECKPOINT_SCALE)
#Const C_TEXT_CHECKPOINT_SCALE 				1.

#Const C_Y_SPACEBETWEEN_CHECKPOINTTIME		11.
#Const C_X_SPACEBETWEEN_CHECKPOINTTIME		40.

#Const C_CHECKPOINT_SHOW_DURATION			3000



//////////////////////////////////////////
// GENERAL SETTINGS

#Const C_TEXT_DEFAUTSIZE 					5

// HERE TO SET THE UI MARGINS FOR THE "90%"
// 1. = 10% Vertically & 10% Horizontally (16/9)
#Const C_MARGINS_GLOBALRATIO				1.


#Const C_WHITE_OPACITY						0.85
#Const C_SPEED_ANIM_BLINKSPEED				0.0125
#Const C_TURBO_ANIM_BLINKSPEED				0.100

/*
#Const C_COMMENTARIES_MAXCOUNT_CP_YES 		23
#Const C_COMMENTARIES_MAXCOUNT_CP_NO 		38
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_YES 	18
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_NO 	37
#Const C_COMMENTARIES_MAXCOUNT_CARHIT 		16
*/

#Const C_COMMENTARIES_MAXCOUNT_CP_YES 		10
#Const C_COMMENTARIES_MAXCOUNT_CP_NO 		10
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_YES 	10
#Const C_COMMENTARIES_MAXCOUNT_ENDRACE_NO 	10
#Const C_COMMENTARIES_MAXCOUNT_CARHIT 		10

#Const C_COMMENTARIES_CARHIT_MIN_INTERVAL	2000
#Const C_COMMENTARIES_TOPLAY_EACH_XX_CP_MIN	2
#Const C_COMMENTARIES_TOPLAY_EACH_XX_CP_MAX 4
#Const C_COMMENTARIES_DELAY					400

declare Text 	G_ModeName;
declare Integer G_SpawnDuration;
	
declare Text 	G_FontTitle;
declare Text 	G_FontMain;
declare Text 	G_FontMainSmall;
declare Text 	G_FontChrono;
declare Text 	G_FontNumberBig;

// ---------------------------------- //
/** Create the Race manialink
 *
 *	@return	The manialink Text
 */

Text Private_GetMLRace(Real _Scale, Real _PosXRatio) {
	
	declare ColorWhite 					= Colors::GetColor		("White");
	declare ColorYellow					= Colors::GetColor		("Yellow");
	declare ColorXmlRed 				= Colors::GetColorXml	("Red");
	declare ColorXmlGreen 				= Colors::GetColorXml	("Green");
	
	////////////////////////////
	// DYNAMIC SETTINGS         
	
	declare MapMarginRatio 				= 1.  * C_MARGINS_GLOBALRATIO;
	declare SeriesNameMarginX			= 16. * MapMarginRatio;
	declare MapNameMarginY				= 9.  * MapMarginRatio;
	
	declare MarginGaugeRatio 			= 0.5 * C_MARGINS_GLOBALRATIO;
	
	////////////////////////////
	// CALCULATIONS             
	declare CircleSize					= C_RATIO_1CIRCLE * C_RACE_MAPNAME_SIZE_X;
	
	declare MapNameSizeY 				= C_RACE_MAPNAME_SIZE_X / C_RATIO;
	declare MapNameSeparator 			= MapNameSizeY * 0.095;
	declare MapNameSizeYElement			= MapNameSizeY * 2. - MapNameSeparator;
	declare MapNameSizeXElement			= C_RACE_MAPNAME_SIZE_X * C_RATIO_1CIRCLE * 13.;
	declare MapNamePosXSign				= - MapNameSizeXElement + C_RACE_MAPNAME_MARGIN_SIGN;
	declare MapNamePosXName				= MapNamePosXSign + C_RACE_MAPNAME_MARGIN_SIGN + 1.;
	
	declare OpponentScreenMarginsRatio 	= 1. * C_MARGINS_GLOBALRATIO;
	declare OpponentScreenMarginsY		= 9 * OpponentScreenMarginsRatio;
	
	declare OpponentSizeX				= C_RACE_MAPNAME_SIZE_X;
	declare OpponentSizeY				= MapNameSizeY;
	declare OpponentSizeXElement		= MapNameSizeXElement;
	declare OpponentSizeYElement		= MapNameSizeY - MapNameSeparator;
	declare OpponentMargins				= 1.5;
	declare OpponentTimeSizeRatio 		= 0.66;
	
	declare OpponentNamePosX			= 1.;
	declare OpponentTimePosX			= OpponentSizeXElement - 2;
	declare OpponentTimeDiffPosX		= OpponentTimePosX;
	declare OpponentTextPosY			= OpponentSizeY * 0.5 - 0.25;
	declare OpponentTextsSizeX			= OpponentSizeX - OpponentNamePosX - OpponentMargins;
	declare OpponentTimeSizeX			= OpponentTimeSizeRatio * OpponentTextsSizeX;
	declare OpponentTimeDiffSizeX		= OpponentTextsSizeX - OpponentTimeSizeX;
	
	declare TurboSizeX 					= 22;
	declare TurboSizeY 					= TurboSizeX / 2.;
	
	declare OpponentMedalSizeX 			= OpponentSizeYElement * 2.704;
	
	declare MarginYChrono				= 9. * C_MARGINS_GLOBALRATIO;
	
	declare PosXGauge					=  ( 160 * _PosXRatio - C_SPEED_SIZEGAUGE * 0.5 * C_SPEED_SIZEGAUGE_RATIO - 9 * MarginGaugeRatio);
	declare PosYGauge					= -( 90	 - C_SPEED_SIZEGAUGE * 0.5 * C_SPEED_SIZEGAUGE_RATIO - 9  * MarginGaugeRatio);
	
	declare MusicBoosterName			= UIBindingPadButtons::GetMusicBoostKeyCode();
	
	// log(OpponentSizeYElement);
	////////////////////////////
	// STYLES                   
	
	declare TextStyleMain				= """ textfont="{{{G_FontMain}}}" textsize="3" scale="0.95" """;
	declare TextStyleMainSmall			= """ textfont="{{{G_FontMainSmall}}}" textsize="3" scale="0.95" """;
	declare TextStyleCheckpoints		= """ {{{vB^hC}}} textfont="{{{G_FontChrono}}}" textsize="{{{C_TEXT_DEFAUTSIZE}}}" text="" """;
	declare QuadStyleBg					= """ sizen="{{{C_RACE_MAPNAME_SIZE_X}}} {{{MapNameSizeY}}}" image="{{{IMGPATH^IMG_BG_LINE}}}" """;
	declare QuadStyleBgRight			= """ {{{QuadStyleBg}}} {{{hR}}} """;
	declare QuadStyleGauge				= """ posn="0 0 .2" sizen="{{{C_SPEED_SIZEGAUGE*0.5}}} {{{C_SPEED_SIZEGAUGE}}}" {{{vC^hR}}} """;
	declare FreeWheelStyle				= """ posn="0. 15. 	1." sizen="{{{C_RACE_FREEWHEEL_SIZE_X}}} {{{C_RACE_FREEWHEEL_SIZE_X/2.}}}" {{{hC}}} {{{vB}}} hidden="1" """;
	declare LapStyle					= """ sizen="{{{C_RACE_MAPNAME_SIZE_X-10}}} {{{MapNameSizeY}}}" textsize="{{{C_RACE_MAPNAME_TEXTSIZE_NAME}}}"  textcolor="{{{Colors::GetColorXml("Black")}}}"	{{{vC}}} 	 """;
	declare QuadStyleBg2					= """ sizen="{{{C_RACE_MAPNAME_SIZE_X+4.75}}} {{{MapNameSizeY}}}" image="{{{IMGPATH^IMG_BG_LINE_LONGER}}}" """;
	
	declare Text ML = """
<framemodel id="Framemodel_PlayerCard">
	<quad  id="Quad_Avatar" 	posn="{{{OpponentNamePosX}}}    	{{{-MapNameSeparator}}}	.2" 	sizen="{{{OpponentMedalSizeX+4.5}}} {{{OpponentSizeYElement}}}" 	bgcolor="333" hidden="1" />
	<label id="Label_Name" 		posn="{{{OpponentNamePosX}}} 		{{{-OpponentTextPosY}}} .2" 	sizen="45.0 1.0" 	{{{vC}}} {{{TextStyleMain}}} textprefix="$t" text="GABRIEL"	/>
	<label id="Label_Time" 		posn="{{{OpponentTimePosX+4.5}}} 		{{{-OpponentTextPosY}}} .2" 	sizen="{{{OpponentTimeSizeX}}}" 	{{{vC}}} {{{hR}}} 	{{{TextStyleMainSmall}}} text="00:00.00"  />
	<label id="Label_TimeDiff" 	posn="{{{OpponentTimeDiffPosX+4.5}}}	{{{-OpponentTextPosY}}} .2" 	sizen="{{{OpponentTimeDiffSizeX}}}" {{{vC}}} {{{hR}}} 	{{{TextStyleMainSmall}}} text="-00:00.00" />
	<quad 						posn="0.  							{{{-MapNameSeparator}}}	.1"  	sizen="{{{MapNameSizeXElement+4.5}}} {{{OpponentSizeYElement}}}" {{{vT}}} 	image="{{{IMGPATH^IMG_BG}}}" />
	<quad 						posn="0.  							{{{-MapNameSeparator}}} 1." 	sizen="{{{MapNameSizeXElement+4.5}}} {{{OpponentSizeYElement}}}" {{{vT}}} 	image="{{{IMGPATH^IMG_FG}}}" />
</framemodel>

<framemodel id="Frame_BigCounter">
	<label id="Label_Title" 	posn=" 0.  0.   0."   {{{vT}}}  {{{TextStyleMain}}} text="DRIFT (m) :"/>
	<label id="Label_Value" 	posn="-0. -0.25 0."   {{{vB}}}  textsize="11"  textfont="{{{G_FontNumberBig}}}" text="500"/>
</framemodel>	

<frame id="Frame_Chrono" posn="0.0 {{{-(90 - MarginYChrono)}}} 1">
	<label id="Label_Chrono" {{{hC^vB}}} textfont="{{{G_FontChrono}}}"  textsize="{{{C_TEXT_DEFAUTSIZE}}}" text="" />
</frame>

<frame id="Frame_Checkpoints" 			hidden="0" posn="0. {{{-(90 - MarginYChrono)}}} 1" scale="{{{C_TEXT_CHECKPOINT_SCALE}}}">
	<label id="Label_CheckpointLap"  	hidden="0" posn="0. {{{C_Y_SPACEBETWEEN_CHECKPOINTTIME}}} 1." 	{{{TextStyleCheckpoints}}} textcolor="{{{Colors::GetColorXml("Yellow")}}}" />
	<label id="Label_CheckpointDiff" 	hidden="0" posn="0. 0.	1."  									{{{TextStyleCheckpoints}}} />
</frame>

<frame id="Frame_Hud" scale="{{{_Scale}}}" hidden="1">	
	
	<frame id="Frame_Engine" posn="0. 20. 0." >	
		<quad 	id="Quad_EngineOff" {{{FreeWheelStyle}}} colorize="{{{ColorXmlRed}}}" image="{{{IMGPATH^IMG_ENGINE_OFF}}}" />
		<quad 	id="Quad_EngineOn" 	{{{FreeWheelStyle}}} colorize="{{{ColorXmlGreen}}}" image="{{{IMGPATH^IMG_ENGINE_ON}}}"/>
	</frame>
	
	
	
	<frame id="Frame_ModeName" posn="-{{{160 * _PosXRatio - 2}}} 88">
		<label id="Label_ModeName" posn="0 0 3"  text="$ff0SUPER  $fffMODE"  {{{vT}}} textsize="8" textfont="{{{G_FontMain}}}" />
	</frame>

	<frameinstance id="Frame_DriftInfo" posn="-157. -74. 3" modelid="Frame_BigCounter" hidden="1" />
	<frameinstance id="Frame_JumpInfo" 	posn="137. 	 74. 3" modelid="Frame_BigCounter" hidden="1"/>
	<frameinstance id="Frame_HeightInfo" 	posn="137. 	 148. 3" modelid="Frame_BigCounter" hidden="1"/>
	
	<label hidden="1" id="Label_SeriesName" 	posn="-{{{160 - SeriesNameMarginX}}} -{{{90 - MapNameMarginY - 3}}} 3"    {{{vT}}} {{{TextStyleMain}}} text="STADIUM GREEN SERIES"/>
	
	
	
	<frame id="Frame_Server" posn="{{{- 160 * _PosXRatio + C_RACE_MAPNAME_SIZE_X}}} {{{90 - MapNameMarginY}}} 31."  hidden="0">
		<frame id="Frame_ServerAnim">
			<quad id="Quad_DoubleDriverLogo" posn="{{{-MapNameSizeXElement}}} {{{-MapNameSizeYElement*1.75}}} -1."  	sizen="{{{C_RACE_DOUBLEDRIVER_LOGO_SIZEX}}} 		{{{C_RACE_DOUBLEDRIVER_LOGO_SIZEX/2.}}}" image="{{{IMGPATH^IMG_DOUBLEDRIVER_LOGO}}}" hidden="1" />
			
			<quad id="Quad_Bg1" posn="0. 0. 				   30." 	{{{QuadStyleBgRight}}} />
			<quad id="Quad_Bg2" posn="0. {{{-MapNameSizeY}}}   30." 	{{{QuadStyleBgRight}}} />
			<quad id="Quad_Bg3" posn="0. {{{-MapNameSizeY*2}}} 30." 	{{{QuadStyleBgRight}}} />
			
			<frame id="Frame_ServerContent">
				<quad 	posn="0.  	{{{-MapNameSeparator}}}			31."  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeY}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
				<quad 	posn="0.  	{{{-MapNameSeparator}}}			32."  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeY}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_FG}}}" /> 
				
				<quad 	posn="0.  	{{{-OpponentSizeY}}}			31."  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeY}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
				<quad 	posn="0.  	{{{-OpponentSizeY}}}			32."  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeY}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_FG}}}" /> 
				
				{{{Prompter2::InjectInManialink("RoomName", <-29.5, -2.5, 31.2>, <57., 50.>, 3, G_FontMain, """textcolor="{{{Colors::GetColorXml("Black")}}}" """)}}}
				{{{Prompter2::InjectInManialink("MapName", <-29.5, -7.5, 31.2>, <57., 50.>, 3, G_FontMain, """textcolor="{{{Colors::GetColorXml("White")}}}" """)}}}
				
				<label id="Label_RoomName"	posn="{{{MapNamePosXName-5.}}} -1.0 31.2"	 {{{TextStyleMain}}} textcolor="{{{Colors::GetColorXml("Black")}}}"/>
				<label id="Label_MapName"	posn="{{{MapNamePosXName-5.}}} -6.0 31.2"	 {{{TextStyleMain}}} textcolor="{{{Colors::GetColorXml("White")}}}" hidden="1"/>
				
				<quad 	id="Quad_RoomBg" posn="0. {{{-MapNameSeparator+0.1}}} 31.1" sizen="{{{MapNameSizeXElement}}} {{{OpponentSizeY}}}" 	{{{vT}}} {{{hR}}} bgcolor="{{{Colors::GetColorXml("White")}}}" hidden="0" />
				<quad 	id="Quad_MapBg" posn="0. {{{-OpponentSizeY}}} 31.1" sizen="{{{MapNameSizeXElement}}} {{{OpponentSizeY}}}" 	{{{vT}}} {{{hR}}} bgcolor="{{{Colors::GetColorXml("White")}}}" hidden="1" />
				
				<frame id="Frame_Music">
					<quad 	posn="0.  	{{{-MapNameSizeY*2}}}			31."  	sizen="{{{MapNameSizeXElement}}} {{{OpponentSizeY}}}" 	{{{vT}}} {{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
					<quad 	posn="0.  	{{{-MapNameSizeY*2}}}			32."  	sizen="{{{MapNameSizeXElement}}} {{{OpponentSizeY}}}" 	{{{vT}}} {{{hR}}} image="{{{IMGPATH^IMG_FG}}}" /> 
					<quad 	id="Quad_MusicBg" posn="0. {{{-MapNameSizeY*2}}} 31.1" sizen="{{{MapNameSizeXElement}}} {{{OpponentSizeY}}}" 	{{{vT}}} {{{hR}}} bgcolor="{{{Colors::GetColorXml("White")}}}" hidden="0" />
					<quad 	id="Quad_ButtonBoost" posn="-56.7 {{{-MapNameSizeY*2.44}}} 31.5" sizen="6 6" {{{vC}}} {{{hC}}} image="{{{UIButtons::GetAlternateImage("View")}}}"/>
					{{{UIBindingPadButtons::InjectInManialink(C_LAYERNAME_UI, MusicBoosterName, <-54.7, -MapNameSizeY*2.44, 31.5>, 0.5)}}}
					{{{Prompter2::InjectInManialink("MusicName", <-24., -13., 31.2>, <45.5, 50.>, 3, G_FontMain, """textcolor="{{{Colors::GetColorXml("Black")}}}" """)}}}
				</frame>
				
				<!--
					<frame id="Frame_CampaignMapContent">
					</frame>
					<frame clip="True" clipsizen="{{{MapNameSizeXElement}}} {{{MapNameSizeYElement*0.9}}}" clipposn="{{{-C_RACE_MAPNAME_SIZE_X*0.5 + CircleSize}}} {{{-MapNameSizeY}}}">
					</frame>
				-->
			</frame>	
		</frame>	
	</frame>
	
	<frame id="Frame_ModeScore" posn="{{{- 160 * _PosXRatio + C_RACE_MAPNAME_SIZE_X}}} {{{90 - MapNameMarginY - MapNameSizeY*3.}}} 31."  hidden="0">
		<frame id="Frame_ModeScoreAnim">
			<frame id="Frame_ModeScoreAnimOnChange">
					<quad id="Quad_Bg1" posn="0. 0. 				   30." 	{{{QuadStyleBgRight}}} />
				<frame id="Frame_ModeScoreBg">
					<quad id="Quad_Bg2" posn="0. {{{-MapNameSizeY}}}   30." 	{{{QuadStyleBgRight}}} />
					<quad id="Quad_Bg3" posn="0. {{{-MapNameSizeY*2}}} 30." 	{{{QuadStyleBgRight}}} />
				</frame>
				
				<frame id="Frame_ModeScoreContent">
					<frame id="Frame_ModeScoreContentOnChange">
						<frame 	id="Frame_Lap">
							<quad 	id="Quad_LapBg" 		posn="0. {{{-MapNameSeparator}}} 31.1"  	 sizen="{{{MapNameSizeXElement}}} 		{{{MapNameSizeYElement}}}" 	{{{vT}}} {{{hR}}} 	bgcolor="{{{Colors::GetColorXml("Yellow")}}}" 	hidden="0" />
							<quad 							posn="0. {{{-MapNameSeparator}}} 31.2"  	 sizen="{{{MapNameSizeXElement}}} 		{{{MapNameSizeYElement}}}" 	{{{vT}}} {{{hR}}} 	image="{{{IMGPATH^IMG_FG}}}" /> 
							<frame posn="{{{-MapNameSizeXElement/2.}}} .1">
								<label 	id="Label_ModeContent"		posn="0. {{{-MapNameSizeYElement/2.}}}	31.15" textfont="{{{G_FontNumberBig}}}" 	{{{LapStyle}}} {{{hC}}}  />	
							</frame>	
						</frame>	
						<frame posn="0 {{{-MapNameSizeY*2.}}}">
							<quad 	posn="0.  	{{{-MapNameSeparator}}}			31.1"  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
							<quad 	posn="0.  	{{{-MapNameSeparator}}}			31.5"  	sizen="{{{MapNameSizeXElement}}} 		{{{OpponentSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_FG}}}" /> 
							<label 	id="Label_ModeCompInf" posn="-30. {{{-OpponentSizeYElement/2.}}}	31.2" sizen="{{{MapNameSizeXElement-4.}}}" textsize="3" textfont="{{{G_FontMain}}}" textcolor="{{{Colors::GetColorXml("White")}}}" {{{vC}}} halign="center" textprefix="$t" />						
						</frame>
					</frame>	
				</frame>	
			</frame>	
		</frame>
	</frame>
	
	<frame id="Frame_Position">
		<label id="Label_TACurPosition" 	posn="-5. 0. 0."   {{{vB}}}  textsize="5"  textfont="{{{G_FontNumberBig}}}" text=""/>
	</frame>
	
	<frame id="Frame_Challenge" posn="{{{160 * _PosXRatio - OpponentSizeX}}} {{{90-OpponentScreenMarginsY}}}">
		<frame id="Frame_ChallengeAnim">
			<frame id="Frame_ChallengeContent">
				<frameinstance id="Frame_Opponent" 	posn="0 0 31." modelid="Framemodel_PlayerCard" />
				<frameinstance id="Frame_Player"	posn="0 {{{-OpponentSizeY}}} 31." modelid="Framemodel_PlayerCard" />
				
			</frame>
			
			<frame hidden="0">
				<quad id="Quad_Bg1" posn="-5. 0. 				   30." 	{{{QuadStyleBg2}}} />
				<quad id="Quad_Bg2" posn="-5. {{{-MapNameSizeY}}}   30." 	{{{QuadStyleBg2}}} />
				<quad id="Quad_Bg3" posn="-5. {{{-MapNameSizeY*2}}} 30." 	{{{QuadStyleBg2}}} />
			</frame>
		</frame>
	</frame>
	
	<!--
		<quad 	posn="0.  	{{{-MapNameSeparator}}}			31."  	sizen="{{{MapNameSizeXElement}}} 		{{{MapNameSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_BG}}}" />
		<quad 	posn="0.  	{{{-MapNameSeparator}}}			32."  	sizen="{{{MapNameSizeXElement}}} 		{{{MapNameSizeYElement}}}" 	{{{vT}}} 	{{{hR}}} image="{{{IMGPATH^IMG_FG}}}" /> 
	-->
	
	<frame id="Frame_Speed" posn="{{{PosXGauge}}} {{{PosYGauge}}}" scale="{{{C_SPEED_SIZEGAUGE_RATIO}}}" hidden="0">
	
		<label 	id="Label_Speed" 		posn="0 0.1 	3"  {{{vC^hC}}}  textfont="{{{G_FontChrono}}}" textsize="{{{C_TEXT_DEFAUTSIZE}}}" text="---" />	
		<quad 	id="Quad_SpeedEffect" 	posn="0. -0.5   5"  {{{vC^hC}}} rot="-30" sizen="{{{C_SPEED_SIZEGAUGE*C_RACE_SPEEDVIDEO_SIZERATIO}}} {{{C_SPEED_SIZEGAUGE*C_RACE_SPEEDVIDEO_SIZERATIO}}}" image="{{{VIDEOPATH^VIDEO_SPEEDSTEP}}}" hidden="0" />	
		<quad 	id="Quad_Turbo" 		posn="-2 {{{C_SPEED_SIZEGAUGE/2.}}} 1" sizen="{{{TurboSizeX}}} {{{TurboSizeY}}}" valign="bottom" halign="center" image="{{{IMGPATH^IMG_TURBO}}}" colorize="fff" />
		
		<frame id="Frame_SpeedGauge">
			
			<frame id="Frame_ClipLeft" clip="True" clipposn="{{{-C_SPEED_SIZEGAUGE*0.25-C_RACE_CLIP_OFFSET+0.153}}} 0" clipsizen="{{{C_SPEED_SIZEGAUGE*0.5}}} 	{{{C_SPEED_SIZEGAUGE}}}" >
			""";
			
			
			
			for(I, 1, 3) ML ^= """
					<quad id="Quad_GaugePersistentLeft{{{I}}}"	{{{QuadStyleGauge}}} image="{{{IMGPATH}}}speed-gauge{{{I}}}.dds" rot="0"  opacity="0." 						hidden="0"/>
					<quad id="Quad_GaugeLeft{{{I}}}"			{{{QuadStyleGauge}}} image="{{{IMGPATH}}}speed-gauge{{{I}}}.dds" rot="0"  opacity="{{{C_GAUGE_OPACITY}}}" 	hidden="0"/>
			""";
			
			
			
			ML ^= """	
			</frame>
			
			<frame id="Frame_ClipRight" clip="True" clipposn="{{{C_SPEED_SIZEGAUGE*0.25+C_RACE_CLIP_OFFSET-0.152}}} 0" clipsizen="{{{C_SPEED_SIZEGAUGE*0.5}}} 	{{{C_SPEED_SIZEGAUGE}}}">
			""";
			
			
			
			for(I, 1, 3) ML ^= """
				<quad id="Quad_GaugePersistentRight{{{I}}}"		{{{QuadStyleGauge}}} image="{{{IMGPATH}}}speed-gauge{{{I}}}.dds" rot="180"  opacity="0." />
				<quad id="Quad_GaugeRight{{{I}}}"				{{{QuadStyleGauge}}} image="{{{IMGPATH}}}speed-gauge{{{I}}}.dds" rot="180"  opacity="{{{C_GAUGE_OPACITY}}}" />
			""";
			
			
			
			ML ^= """	
			</frame>
		</frame>
	</frame>
</frame>

<script><!--




#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "AnimLib" as AL

#Const DebugName  					"L_UI"

#Const C_MaxRotationLeft 			0.
#Const C_MaxRotationRight 			180.

#Const C_POS_FIRST 					<0., 0., 1.>
#Const C_POS_SECOND 				<0., -{{{OpponentSizeY}}}, 1.>

#Const TMC_MEDAL_AUTHOR   			0
#Const TMC_MEDAL_GOLD   			1
#Const TMC_MEDAL_SILVER   			2
#Const TMC_MEDAL_BRONZE   			3
#Const TMC_MEDAL_PLAYER  			4
#Const TMC_MEDAL_NONE   			5
#Const TMC_MEDAL_ANOTHERPLAYER		6

#Const C_GAMEPHASE_CHALLENGE		3
#Const C_GAMEPHASE_PREPARATION		0
#Const C_GAMEPHASE_GAME				1
#Const C_GAMEPHASE_POSTGAME			2

#Const C_HUE_RANGE 					0.59

#Const C_ANIMSHOW_OFFSET			40.
#Const C_ANIMSHOW_DURATION 			300
#Const C_ANIMSHOW_DELAY	 			100

#Const C_MESSAGE_DURATION_SCROLL	4500
#Const C_MESSAGE_DURATION_ANIM_IN	450
#Const C_MESSAGE_DURATION_ANIM_OUT	300
#Const C_MESSAGE_DURATION_FADE		120

#Const C_CHALLENGE_ANIM_DURATION 	500

#Const C_FREEWHEEL_OPACITY 			1.
#Const C_FREEWHEEL_SIN_SPEED_OFF 	0.01
#Const C_FREEWHEEL_SIN_SPEED_ON 	0.06
#Const C_FREEWHEEL_BACKON_DURATION 	1000

#Const C_CHECKPOINT_SIN_SPEED 		0.06

#Const C_LAPSTOGO_DURATION_HIDDEN 	450
#Const C_LAPSTOGO_DURATION_VISIBLE 	8000

#Const C_Device_Keyboard 			0
#Const C_Device_Pad 				1

declare Real G_FadeOpacity;
{{{Prompter2::InjectInGlobals()}}}
{{{UIBindingPadButtons::InjectInGlobals()}}}
{{{Anim::Inject("Minimal")}}}
{{{Hue::MLHSVColors()}}}
{{{Prompter2::InjectInFunctions()}}}
{{{UIButtons::GetMLFunctionPcButtons()}}}

{{{UIBindingPadButtons::InjectInFunctions()}}}
Text GetTimeDiffToText(Integer _TimeDiff, CTmMlPlayer _Player) 
{
	declare TimeDiffToText = TL::TimeToText(_TimeDiff, True);
	if (_TimeDiff >= 10) // EG : Pourquoi 10 et pas 0 ?
	{
		if(_TimeDiff < 600000) TimeDiffToText = "0"^TimeDiffToText;
		TimeDiffToText = "+"^TimeDiffToText;
	} 
	else if (_TimeDiff <= -10) 
	{
		if(_TimeDiff > -600000) TimeDiffToText = TL::Replace(TimeDiffToText, "-", "-0");
	} 
	else 
	{
		TimeDiffToText = "00:00.00";
	}
	
	return TimeDiffToText;
}

Vec3 GetTimeDiffColor(Integer _TimeDiff, CTmMlPlayer _Player) 
{
	if (_TimeDiff >= 10) return {{{Colors::GetColor("Red2")}}}; // (+)
	return {{{Colors::GetColor("BlueLight")}}};	// (-)
}

Real GetTimeDiffPosX(Integer _TimeDiff, CTmMlPlayer _Player) 
{
	if (_TimeDiff >= 10) return {{{-C_X_SPACEBETWEEN_CHECKPOINTTIME}}}; // (+)
	return {{{C_X_SPACEBETWEEN_CHECKPOINTTIME}}};	// (-)
}

Vec3 GetSeriesColorFromMapNumber(Integer _MapNumber)
{
	if		(_MapNumber >= 1 	&& _MapNumber <= 40) 	return {{{Colors::GetDifficultyColor(1)}}};
	else if	(_MapNumber >= 41 	&& _MapNumber <= 80) 	return {{{Colors::GetDifficultyColor(2)}}};
	else if	(_MapNumber >= 81 	&& _MapNumber <= 120) 	return {{{Colors::GetDifficultyColor(3)}}};
	else if	(_MapNumber >= 121 	&& _MapNumber <= 160) 	return {{{Colors::GetDifficultyColor(4)}}};
	else if	(_MapNumber >= 161 	&& _MapNumber <= 200) 	return {{{Colors::GetDifficultyColor(5)}}};
	
	return  <0.5, 0.5, 0.5>;
}

Text GetSeriesNameFromMapNumber(Integer _MapNumber)
{
	declare Text SeriesName;
	
	if		(_MapNumber >= 1 	&& _MapNumber <= 40) 	SeriesName = "WHITE";
	else if	(_MapNumber >= 41 	&& _MapNumber <= 80) 	SeriesName = "GREEN";
	else if	(_MapNumber >= 81 	&& _MapNumber <= 120) 	SeriesName = "BLUE";
	else if	(_MapNumber >= 121 	&& _MapNumber <= 160) 	SeriesName = "RED";
	else if	(_MapNumber >= 161 	&& _MapNumber <= 200) 	SeriesName = "BLACK";
		
	return SeriesName;
}

Text GetMedalForTime(Integer _Time) 
	{
		if (_Time <= 0) return "MedalSlot";
		if (_Time <= Map.TMObjective_AuthorTime) 	return "MedalNadeo";
		if (_Time <= Map.TMObjective_GoldTime) 		return "MedalGold";
		if (_Time <= Map.TMObjective_SilverTime)	return "MedalSilver";
		if (_Time <= Map.TMObjective_BronzeTime) 	return "MedalBronze";
		
		return "MedalSlot";
	}

	Text GetMedalUrl(Integer _Medal)
	{
		declare MedalFile 	= "";
		switch(_Medal)
		{
			case TMC_MEDAL_AUTHOR 	: MedalFile = "medal-author.dds";
			case TMC_MEDAL_GOLD 	: MedalFile = "medal-gold.dds";
			case TMC_MEDAL_SILVER 	: MedalFile = "medal-silver.dds";
			case TMC_MEDAL_BRONZE 	: MedalFile = "medal-bronze.dds";
			case TMC_MEDAL_NONE 	: MedalFile = "medal-empty.dds";
			case TMC_MEDAL_PLAYER 	: MedalFile = "";
		}
		
		if(MedalFile == "") return "";
		
		return "{{{IMGPATH}}}" ^ MedalFile;
	}
	
	Text GetJokerUrl(Integer _Medal) {
		declare MedalFile 	= "";
		switch(_Medal)
		{
			case TMC_MEDAL_GOLD 	: MedalFile = "medal-gold-joker.dds";
			case TMC_MEDAL_SILVER 	: MedalFile = "medal-silver-joker.dds";
			case TMC_MEDAL_BRONZE 	: MedalFile = "medal-bronze-joker.dds";
		}
		if(MedalFile == "") return "";
		
		return "{{{IMGPATH}}}" ^ MedalFile;
	}

Void PreloadSounds() 
{
	declare Text[] SoundsToPreload = [
	"{{{SOUNDPATH ^ SOUND_CHECKPOINT_TIME	}}}", 
	"{{{SOUNDPATH ^ SOUND_CHECKPOINT_NO		}}}", 
	"{{{SOUNDPATH ^ SOUND_CHECKPOINT_YES	}}}", 
	"{{{SOUNDPATH ^ SOUND_ENDRACE_YES		}}}", 
	"{{{SOUNDPATH ^ SOUND_ENDRACE_NO		}}}",
	"{{{SOUNDPATH ^ SOUND_CROWD_YES			}}}", 
	"{{{SOUNDPATH ^ SOUND_CROWD_NO			}}}",
	"{{{SOUNDPATH ^ SOUND_CHECKPOINT_LAP	}}}",
	"{{{SOUNDPATH_VOICES^SOUND_VOICE_LAP2}}}",
	"{{{SOUNDPATH_VOICES^SOUND_VOICE_LAP3}}}",
	"{{{SOUNDPATH_VOICES^SOUND_VOICE_LAP4}}}",
	"{{{SOUNDPATH_VOICES^SOUND_VOICE_LAP5}}}",
	"{{{SOUNDPATH_VOICES^SOUND_VOICE_LAPFINAL}}}"
	];
	foreach(Sound in SoundsToPreload) Audio.CreateSound(Sound);
}

Void GaugeUpdate(CMlQuad _QuadLeft, CMlQuad _QuadRight, Real _GaugeRatio)
{
	declare SecondHalf = (_GaugeRatio > 0.5 && _GaugeRatio <= 1.) || (_GaugeRatio > 1.5 && _GaugeRatio <= 2.) || (_GaugeRatio > 2.5 && _GaugeRatio <= 3.);

	if(SecondHalf)
	{
		declare GaugeRatioRight = 2.* (_GaugeRatio - 0.5);
		_QuadLeft 	.RelativeRotation 	= 0.;
		_QuadRight 	.RelativeRotation 	= 0 + 180 * GaugeRatioRight;
	} 
	else
	{
		declare GaugeRatioLeft 	= 2.*  _GaugeRatio ;
		_QuadLeft 	.RelativeRotation 	= -180 + 180 * GaugeRatioLeft;
		_QuadRight 	.RelativeRotation 	=  0.;
	}
}

Void SetGauges(CMlQuad[] _QuadsLeft, CMlQuad[] _QuadsRight, Real _GaugeRatio)
{
	
	declare Boolean Phase2 					= (_GaugeRatio > 1. && _GaugeRatio <= 2.);
	declare Boolean Phase3 					= (_GaugeRatio > 2. && _GaugeRatio <= 3.);
	
	if(Phase2)
	{
		_QuadsLeft[1]	.Visible 			= True;
		_QuadsRight[1]	.Visible 			= True;
		_QuadsLeft[2]	.Visible 			= False;
		_QuadsRight[2]	.Visible 			= False;
		_QuadsLeft[0]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[0]	.RelativeRotation 	= C_MaxRotationRight;
		GaugeUpdate(_QuadsLeft[1], _QuadsRight[1], _GaugeRatio);
	}
	else 
	if(Phase3)
	{
		_QuadsLeft[1]	.Visible 			= True;
		_QuadsRight[1]	.Visible 			= True;
		_QuadsLeft[2]	.Visible 			= True;
		_QuadsRight[2]	.Visible 			= True;
		_QuadsLeft[0]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[0]	.RelativeRotation 	= C_MaxRotationRight;
		_QuadsLeft[1]	.RelativeRotation 	= C_MaxRotationLeft;
		_QuadsRight[1]	.RelativeRotation 	= C_MaxRotationRight;
		GaugeUpdate(_QuadsLeft[2], _QuadsRight[2], _GaugeRatio);
	}
	else // (Phase1)
	{
		_QuadsLeft[1]	.Visible 			= False;
		_QuadsRight[1]	.Visible 			= False;
		_QuadsLeft[2]	.Visible 			= False;
		_QuadsRight[2]	.Visible 			= False;
		GaugeUpdate(_QuadsLeft[0], _QuadsRight[0], _GaugeRatio);
		
	}
}

Text GetTimeToText(Integer _Time)
{
	declare TimeText = TL::TimeToText(_Time, True);
	if(_Time < 600000) TimeText = "0"^TimeText;
	
	return TimeText;
}


Void UpdateCounter(CMlFrame _Frame, CMlLabel _LabelTitle, CMlLabel _LabelValue, Integer _Value, Boolean _VisibilityCondition, Vec3 _Pos, Real _SpeedImpact)
{
	declare Integer PrevValue 		for _Frame;
	declare Integer Trigger 		for _Frame;
	declare Integer TriggerFadeIn 	for _Frame;
	declare Boolean IsActive = False;
	
	if(_Value > PrevValue)
	{
		PrevValue 		= _Value;
		Trigger			= Now;
		IsActive		= True;
		_LabelValue.Value = ""^_Value;
		if(_Frame.Visible == False) TriggerFadeIn = Now;
	}
	
	declare OffsetY			= 20.;
	declare FadeDuration	= 500;
	declare FadeOutDuration	= 700;
	declare ShowDuration 	= 500 + FadeOutDuration; 
	
	declare FadeOutTrigger	= ShowDuration - FadeOutDuration;
	declare CurrTime		= Now - Trigger;
	declare CurrTimeFadeIn	= Now - TriggerFadeIn;
	declare CurrTimeFadeOut	= CurrTime - FadeOutTrigger;
	declare Opacity 		= 1.;
	
	if(CurrTime > ShowDuration)
	{
		PrevValue = 0;
		_Frame.Visible = False;
	}
	else
	{
		if(_VisibilityCondition) _Frame.Visible = True;
	}
	
	if(CurrTime > FadeOutTrigger) 
	{
		Opacity = AL::Ease("CircOut", CurrTimeFadeOut*1., 1., -1., FadeDuration*1.);
	}	
	else 
	if(CurrTimeFadeIn < FadeDuration) 
	{
		Opacity = AL::Ease("Linear", CurrTimeFadeIn*1., 0., 1., FadeDuration*1.);
	}
	
	Opacity *= G_FadeOpacity;
	
	_LabelValue.Opacity = Opacity;
	_LabelTitle.Opacity = Opacity;
	
	if(IsActive && GUIPlayer != Null)
	{
		// (Value - MinValue) / MaxValue
		declare Ratio = (_Value - 50) / 600.;
		if		(Ratio > 1.) Ratio = 1.;
		else if	(Ratio < 0.) Ratio = 0.;
		declare Hue = Ratio * C_HUE_RANGE;
		_LabelTitle.TextColor = ToRGB(<Hue, 1., 1.>);
		_LabelValue.TextColor = ToRGB(<Hue, 1., 1.>);
		
		declare SpeedImpact = _SpeedImpact * GUIPlayer.DisplaySpeed / 1000.;
		declare Sinz		= 1.25 * SpeedImpact * ML::Sin(Now * 0.05);
		_Frame.RelativePosition = <_Pos.X + Sinz, _Pos.Y + Sinz, _Pos.Z>;
	}
	else 
	if(CurrTime > FadeOutTrigger)	
	{
		CheckToPlayMoveTo("CircOut", _Frame, Trigger+FadeOutTrigger, _Pos, <_Pos.X, _Pos.Y + OffsetY, _Pos.Z>, FadeOutDuration+15);
	}
	
	// DEBUG
	// _Frame.RelativePosition = <_Pos.X, _Pos.Y, _Pos.Z>;
	// _Frame.Visible = True;
	// _LabelValue.Opacity = 1.;
	// _LabelTitle.Opacity = 1.;
}

Void StopVideoQuad(CMlQuad _Quad) 
{
	_Quad.Hide();
	_Quad.Video_Rewind();
	_Quad.Video_IsPlaying = False;
}

Void PlayVideoQuad(CMlQuad _Quad, Integer _Duration) 
{
	StopVideoQuad(_Quad);
	_Quad.Video_IsPlaying = False;
	_Quad.Video_Rewind();
	_Quad.Show();
	_Quad.Video_IsPlaying = True;
	_Quad.Video_IsLooping = False;	
	
	declare Integer ForQuad_Video_LastPlayedTrigger for _Quad;
	declare Integer ForQuad_Video_Duration 			for _Quad;
	ForQuad_Video_Duration 			= _Duration;
	ForQuad_Video_LastPlayedTrigger = Now;
}

Void PlayVideoQuad(CMlQuad _Quad, Integer _Duration, Text _VideoUrl) 
{
	_Quad.ImageUrl = _VideoUrl;
	PlayVideoQuad(_Quad, _Duration);
}

{{{Volumes::GetPlayVoiceSoundML()}}}


main() 
{	
	{{{UIBindingPadButtons::InjectInInit(C_LAYERNAME_UI)}}}
	{{{Prompter2::InjectInInit()}}}
	declare Frame_Hud 						<=> (Page			.GetFirstChild("Frame_Hud") 					as CMlFrame);

	declare Quad_EngineOff 					<=> (Page			.GetFirstChild("Quad_EngineOff")				as CMlQuad);
	declare Quad_EngineOn 					<=> (Page			.GetFirstChild("Quad_EngineOn")					as CMlQuad);
	declare Quad_ButtonBoost				<=> (Page			.GetFirstChild("Quad_ButtonBoost")					as CMlQuad);
	
	
	declare Label_Chrono 					<=> (Page			.GetFirstChild("Label_Chrono") 					as CMlLabel);
	
	declare Frame_ModeScoreAnim 				<=> (Page			.GetFirstChild("Frame_ModeScoreAnim") 			as CMlFrame);
	declare Frame_ModeScoreBg 					<=> (Page			.GetFirstChild("Frame_ModeScoreBg") 			as CMlFrame);
	declare Frame_ModeScoreContent 				<=> (Page			.GetFirstChild("Frame_ModeScoreContent") 		as CMlFrame);
	// declare Label_LapCurrent 				<=> (Page			.GetFirstChild("Label_LapCurrent") 				as CMlLabel);
	// declare Label_LapMax 					<=> (Page			.GetFirstChild("Label_LapMax") 					as CMlLabel);
	declare Label_ModeContent 				<=> (Page			.GetFirstChild("Label_ModeContent") 					as CMlLabel);
	declare Label_ModeCompInf 				<=> (Page			.GetFirstChild("Label_ModeCompInf") 				as CMlLabel);
	
	// declare Label_CheckpointTime 		<=> (Page			.GetFirstChild("Label_CheckpointTime") 			as CMlLabel);
	declare Label_CheckpointDiff 			<=> (Page			.GetFirstChild("Label_CheckpointDiff") 			as CMlLabel);
	declare Label_CheckpointLap 			<=> (Page			.GetFirstChild("Label_CheckpointLap") 			as CMlLabel);
	
	declare Frame_DriftInfo 				<=> (Page			.GetFirstChild("Frame_DriftInfo") 				as CMlFrame);
	declare Label_DriftValue 				<=> (Frame_DriftInfo.GetFirstChild("Label_Value") 					as CMlLabel);
	declare Label_DriftTitle 				<=> (Frame_DriftInfo.GetFirstChild("Label_Title") 					as CMlLabel);
	
	declare Frame_JumpInfo 					<=> (Page			.GetFirstChild("Frame_JumpInfo") 				as CMlFrame);
	declare Label_JumpValue 				<=> (Frame_JumpInfo	.GetFirstChild("Label_Value") 					as CMlLabel);
	declare Label_JumpTitle 				<=> (Frame_JumpInfo	.GetFirstChild("Label_Title") 					as CMlLabel);
	
	declare Frame_HeightInfo				<=> (Page			.GetFirstChild("Frame_HeightInfo") 				as CMlFrame);
	declare Label_HeightValue 				<=> (Frame_HeightInfo	.GetFirstChild("Label_Value") 				as CMlLabel);
	declare Label_HeightTitle 				<=> (Frame_HeightInfo	.GetFirstChild("Label_Title") 				as CMlLabel);
	
	declare Label_ModeName 					<=> (Page			.GetFirstChild("Label_ModeName") 				as CMlLabel);
		
	declare Frame_Server 					<=> (Page			.GetFirstChild("Frame_Server") 				as CMlFrame);
	declare Frame_ServerAnim 				<=> (Frame_Server	.GetFirstChild("Frame_ServerAnim") 			as CMlFrame);
	declare Frame_ServerContent 			<=> (Frame_Server	.GetFirstChild("Frame_ServerContent") 			as CMlFrame);
	// declare Frame_Medal 					<=> (Frame_Server	.GetFirstChild("Frame_Medal") 					as CMlFrame);
	// declare Label_NumberSign 				<=> (Frame_Server	.GetFirstChild("Label_NumberSign") 				as CMlLabel);
	// declare Quad_Medal 						<=> (Frame_Medal	.GetFirstChild("Quad_Medal") 					as CMlQuad);

	declare Quad_DoubleDriverLogo 			<=> (Page			.GetFirstChild("Quad_DoubleDriverLogo")			as CMlQuad);
	
	declare Frame_Challenge 				<=> (Page			.GetFirstChild("Frame_Challenge") 				as CMlFrame);
	declare Frame_ChallengeAnim 			<=> (Frame_Challenge.GetFirstChild("Frame_ChallengeAnim")			as CMlFrame);
	declare Frame_ChallengeContent 			<=> (Frame_Challenge.GetFirstChild("Frame_ChallengeContent")		as CMlFrame);
	
	declare Frame_Opponent 					<=> (Page			.GetFirstChild("Frame_Opponent") 				as CMlFrame);
	declare Quad_OpponentAvatar 			<=> (Frame_Opponent	.GetFirstChild("Quad_Avatar") 					as CMlQuad);
	declare Label_OpponentName 				<=> (Frame_Opponent	.GetFirstChild("Label_Name") 					as CMlLabel);
	declare Label_OpponentTime 				<=> (Frame_Opponent	.GetFirstChild("Label_Time") 					as CMlLabel);
	declare Label_OpponentTimeDiff 			<=> (Frame_Opponent	.GetFirstChild("Label_TimeDiff") 				as CMlLabel);
	declare Label_TACurPosition 			<=> (Page	.GetFirstChild("Label_TACurPosition") 			as CMlLabel);
	
	declare Frame_Player 					<=> (Page			.GetFirstChild("Frame_Player") 					as CMlFrame);
	declare Label_PlayerName 				<=> (Frame_Player	.GetFirstChild("Label_Name") 					as CMlLabel);
	declare Label_PlayerTime 				<=> (Frame_Player	.GetFirstChild("Label_Time") 					as CMlLabel);
	declare Label_PlayerTimeDiff			<=> (Frame_Player	.GetFirstChild("Label_TimeDiff") 				as CMlLabel);
	
	declare Frame_Speed 					<=> (Page			.GetFirstChild("Frame_Speed") 					as CMlFrame);
	declare Frame_SpeedGauge 				<=> (Page			.GetFirstChild("Frame_SpeedGauge") 				as CMlFrame);
	declare Label_Speed 					<=> (Frame_Speed	.GetFirstChild("Label_Speed") 					as CMlLabel);
	declare Quad_SpeedEffect 				<=> (Frame_Speed	.GetFirstChild("Quad_SpeedEffect") 				as CMlQuad);
	declare Quad_Turbo 						<=> (Frame_Speed	.GetFirstChild("Quad_Turbo") 					as CMlQuad);
	
	declare Quad_GaugeLeft1 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft1") 				as CMlQuad);
	declare Quad_GaugeRight1				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight1") 				as CMlQuad);
	declare Quad_GaugeLeft2 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft2") 				as CMlQuad);
	declare Quad_GaugeRight2				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight2") 				as CMlQuad);
	declare Quad_GaugeLeft3 				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeLeft3") 				as CMlQuad);
	declare Quad_GaugeRight3				<=> (Frame_Speed	.GetFirstChild("Quad_GaugeRight3") 				as CMlQuad);
	
	declare Quad_GaugePersistentLeft1 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft1") 	as CMlQuad);
	declare Quad_GaugePersistentRight1 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight1") 	as CMlQuad);
	declare Quad_GaugePersistentLeft2 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft2") 	as CMlQuad);
	declare Quad_GaugePersistentRight2 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight2") 	as CMlQuad);
	declare Quad_GaugePersistentLeft3 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentLeft3") 	as CMlQuad);
	declare Quad_GaugePersistentRight3 		<=> (Frame_Speed	.GetFirstChild("Quad_GaugePersistentRight3") 	as CMlQuad);
	declare Quad_MusicBg 						<=> (Frame_Server	.GetFirstChild("Quad_MusicBg") 					as CMlQuad);
	
	declare Frame_Music 					<=> (Page			.GetFirstChild("Frame_Music") 				as CMlFrame);
	declare Quad_Gauge 						 = [Quad_GaugeLeft1,  			Quad_GaugeRight1, 			Quad_GaugeLeft2, Quad_GaugeRight2, Quad_GaugeLeft3, Quad_GaugeRight3];
	declare Quad_GaugeRight					 = [Quad_GaugeRight1, 			Quad_GaugeRight2, 			Quad_GaugeRight3];
	declare Quad_GaugeLeft 					 = [Quad_GaugeLeft1,  			Quad_GaugeLeft2,  			Quad_GaugeLeft3];
	
	declare Quad_GaugePersistent 			 = [Quad_GaugePersistentLeft1, 	Quad_GaugePersistentRight1, Quad_GaugePersistentLeft2, Quad_GaugePersistentRight2, Quad_GaugePersistentLeft3, Quad_GaugePersistentRight3];
	declare Quad_GaugePersistentLeft		 = [Quad_GaugePersistentLeft1,	Quad_GaugePersistentLeft2, 	Quad_GaugePersistentLeft3];
	declare Quad_GaugePersistentRight 		 = [Quad_GaugePersistentRight1, Quad_GaugePersistentRight2, Quad_GaugePersistentRight3];
	
	declare	netread 	Integer 	Net_BestMedal 					for UI;
	declare	netread 	Text 		Net_PlayerNickname 				for UI;
	declare	netread 	Integer 	Net_OpponentType 				for UI;
	declare	netread 	Integer 	Net_BestTime 					for UI;
	declare	netread 	Integer[] 	Net_OpponentCheckpointsTime 	for UI;
	declare	netread 	Boolean 	Net_ChallengeFrameVisibility 	for UI;
	declare	netread 	Boolean 	Net_MapNameFrameVisibility 		for UI;
	declare netread 	Integer 	Net_GamePhase 					for UI;
	declare netread 	Boolean 	Net_SymbioseActive 				for UI;
	declare netread		Boolean 	Net_IsTrackRandom 				for UI;
	declare netread		Text		Net_ModeName					for Teams[0];
	declare netread 	Integer 	Net_CutOffTimeLimit 			for UI;
	declare netread 	Integer		Net_NbLaps						for Teams[0];
	declare netread 	Integer 	Net_MaxPoints 					for Teams[0];
	declare netread 	Integer 	Net_LibTMC_SpawnStatus 			for UI;
	
	declare netwrite 	Integer 	Net_MusicNextTempoDelay 		for UI;
	declare netwrite 	Integer 	Net_MusicBeatDuration	 		for UI;
	declare netwrite 	Boolean 	Net_IsPauseMenuEnabled 			for UI;
	declare netwrite 	Boolean 	Net_IsScoreTableVisible 		for UI;
	declare netwrite 	Boolean 	Net_IsPluginEnabled 			for UI;
	declare netwrite 	Real 		Net_CoopSymbiosysRatio			for UI;
	declare netread		Integer		Net_OpponentUpdate				for UI;
	declare				Integer		Pre_OpponentUpdate				for UI;
	declare netwrite 	Boolean 	Net_IsRoomFavorite				for UI;
	declare netwrite 	Boolean 	Net_IsTrackFavorite 			for UI;
	declare netwrite	Boolean		Net_IsFavoriteManagerShown		for UI;
	declare netwrite 	Boolean 	Net_IsBuddiesListShown 			for UI;
	declare netread 	Integer 	Net_NbCheckpoints 				for Teams[0];
	declare 			Integer 	Net_PlayerMusicState			for UI;
	declare				Boolean		Net_HudIsVisible				for UI;
	declare				Text		UI_ModeName						for UI;
	declare 			Boolean 	Net_IsServerPrivate 			for UI;
	
	declare netwrite 	Integer 	Net_LibLastDeviceUsed_LastDeviceUsed for UI;
	
	declare Text		Net_TrackFinalName				for UI;
	declare Text		Net_RoomFinalName				for UI;
	
	// declare netwrite Boolean 	Net_IsRoomFavorite 			for UI;
	
	declare M_PrevBestMedal			 	= -1; 	
	declare M_PrevOpponentType			= -1; 	
	declare M_PrevBestTime				= -1; 	
	declare M_PrevSpeedValue 			= -1; 	
	declare M_PrevRaceState 		 	= CTmMlPlayer::ERaceState::Running;
	declare M_PrevUIStatus 				= CUIConfig::EUIStatus::None;
	
	declare M_PluginInterface_UIPlugin = GetPluginInterface("UIPlugin");
	
	declare Integer M_CpCountVoice;
	declare Integer M_LatestCarHitSound;
	declare Integer M_CpCommentariesToPlayEachXXCp = ML::Rand({{{C_COMMENTARIES_TOPLAY_EACH_XX_CP_MIN}}}, {{{C_COMMENTARIES_TOPLAY_EACH_XX_CP_MAX}}});
	declare Integer M_RemainingLap;
	declare Integer M_PrevRemainingLap = M_RemainingLap;
	declare Integer M_OpponentTime;
	declare Integer M_TimeDiff; 
	declare Integer M_LastCpTime; 
	declare Integer M_TriggerWoosh;
	declare Integer M_TriggerShowModeSpec;
	declare Integer M_TriggerShowAnim;
	declare Integer M_TriggerHideAnim;
	declare Integer M_TriggerAnim;
	declare Integer M_TriggerChallengeAnim;
	declare Integer M_TriggerCheckpoint;
	declare Integer M_TriggerMessage;
	declare Integer M_TriggerFreewheel;
	declare Integer M_CurCheckpointIndex = -1;
	declare Integer M_PrevTriggerMessage;
	declare Integer M_PrevTriggerChallengeAnim;
	declare Integer M_PrevTriggerWoosh;
	declare Integer M_PrevLastCpTime = -1;
	declare Real 	M_ChronoBlinkOpacity = 1.;
	declare Real 	M_PrevGaugeRatioAnim;
	declare Real 	M_PrevGaugeRatioPersistent; 	
	declare Real 	M_LatestGaugeRatioStep = -1.; 
	declare Real 	M_GaugeRatioPersistent;
	declare Real 	M_GaugeRatio = 0.;
	declare Integer M_LatestUpGaugeRatio;	
	declare Vec3 	M_GaugeColor;
	declare Boolean	M_SwitchUpdateAlternate;
	declare Boolean M_ResetGaugeNeeded;
	declare Boolean M_PrevIsFreeWheel;
	declare Boolean M_PrevHudIsVisible;
	declare Boolean M_PrevPageIsVisible;
	declare Text 	M_PrevMapName;
	declare Text 	M_MessageSound;
	declare Text	M_PrevCurrentServerName = "-1";
	declare Integer	M_PrevScore = -42;
	declare Integer	M_PrevNbPlayer = -1;
	declare Text PreMusicFinalName;
	
	declare CAudioSource M_SFX_Rise;
	
	declare Boolean[] M_OpponentCheckpointValidated;
	foreach (Checkpoint in Net_OpponentCheckpointsTime) M_OpponentCheckpointValidated.add(False);
	if(Net_OpponentCheckpointsTime.count > 0) M_PrevLastCpTime = Net_OpponentCheckpointsTime[Net_OpponentCheckpointsTime.count-1];
	
	declare Vec3 	M_AnimStartPosOpponent 	= C_POS_SECOND;
	declare Vec3 	M_AnimStartPosPlayer 	= C_POS_FIRST;
	declare Vec3 	M_AnimEndPosOpponent 	= C_POS_FIRST;
	declare Vec3 	M_AnimEndPosPlayer 		= C_POS_SECOND;
	
	declare CAudioSource M_SoundWhoosh = Audio.CreateSound("{{{SOUNDPATH ^ SOUND_WHOOSHTEST}}}", 0., False, False, True);
	declare M_RandomDir = -1.;
	
	PreloadSounds();
	StopVideoQuad(Quad_SpeedEffect);
	foreach(Quad in Quad_Gauge) 			Quad.Blend = CMlQuad::EBlendMode::Add;
	foreach(Quad in Quad_GaugePersistent) 	Quad.Blend = CMlQuad::EBlendMode::Add;
	Quad_Turbo				.Blend = CMlQuad ::EBlendMode::Add;
	Quad_SpeedEffect		.Blend = CMlQuad ::EBlendMode::Add;
	Quad_EngineOff			.Blend = CMlQuad ::EBlendMode::Add;
	Quad_EngineOn			.Blend = CMlQuad ::EBlendMode::Add;
	Quad_DoubleDriverLogo	.Blend = CMlQuad ::EBlendMode::Add;
	Label_Speed				.Blend = CMlLabel::EBlendMode::Add;
	Label_Chrono			.Blend = CMlLabel::EBlendMode::Add;
	Label_DriftValue		.Blend = CMlLabel::EBlendMode::Add;
	Label_DriftTitle		.Blend = CMlLabel::EBlendMode::Add;
	Label_JumpValue			.Blend = CMlLabel::EBlendMode::Add;
	Label_JumpTitle			.Blend = CMlLabel::EBlendMode::Add;
	Label_HeightValue		.Blend = CMlLabel::EBlendMode::Add;
	Label_HeightTitle		.Blend = CMlLabel::EBlendMode::Add;
	Label_CheckpointDiff	.Blend = CMlLabel::EBlendMode::Add;
	Label_CheckpointLap		.Blend = CMlLabel::EBlendMode::Add;
	Label_TACurPosition		.Blend = CMlLabel::EBlendMode::Add;
	
	// Label_ModeName			.Value 		= "$ff0" ^ TL::ToUpperCase("{{{G_ModeName}}}") ^ " $fffMODE";
	Label_DriftTitle		.Value		= _("DRIFT DISTANCE (m)");
	Label_JumpTitle			.Value		= _("JUMP DISTANCE (m)");
	Label_HeightTitle		.Value		= _("HEIGHT (m)");
	Label_JumpTitle			.TextColor	= {{{ColorYellow}}};
	Label_HeightTitle		.TextColor	= {{{ColorYellow}}};
	
	Frame_Hud				.Hide();
	Label_ModeName			.Hide();
	Label_OpponentTimeDiff	.Hide();
	Label_PlayerTime		.Hide();
	
	if(Net_NbLaps > 9)
	{
		// Label_LapCurrent.TextFont = "{{{G_FontTitle}}}";
		// Label_LapMax	.TextFont = "{{{G_FontTitle}}}";
	}
	else
	{
		// Label_LapCurrent.TextFont = "{{{G_FontNumberBig}}}";
		// Label_LapMax	.TextFont = "{{{G_FontNumberBig}}}";
	}
	
	G_FadeOpacity = 1.;
	
	M_SFX_Rise = Audio.CreateSound("{{{SOUNDPATH^SOUND_DRIFTRISE}}}", {{{Volumes::GetVolumedB("SFXRise")}}}, False, True, False);
	M_SFX_Rise.Stop();	
	
	
	// VOICE : CHECKPOINT 
	declare CAudioSource[] M_SoundsCheckpointYes;
	declare CAudioSource[] M_SoundsCheckpointNo;
	
	for(I, 1, {{{C_COMMENTARIES_MAXCOUNT_CP_YES}}})
		M_SoundsCheckpointYes	.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_YES}}}"^I^".wav", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
	for(I, 1, {{{C_COMMENTARIES_MAXCOUNT_CP_NO}}})
		M_SoundsCheckpointNo	.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_NO}}}" ^I^".wav", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
		
	M_SoundsCheckpointYes.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_1}}}", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
	M_SoundsCheckpointYes.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_2}}}", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
	M_SoundsCheckpointNo.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_3}}}", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
	M_SoundsCheckpointNo.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CHECKPOINT_4}}}", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
		
	// VOICE : CAR HIT
	declare CAudioSource[] M_SoundsCarHit;
	
	for(I, 1, {{{C_COMMENTARIES_MAXCOUNT_CARHIT}}})
		M_SoundsCarHit	.add(Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_VOICE_CARHIT}}}" ^I^".wav", {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, False, False, False));
		
		
		
	declare M_SoundSpeedEffect 				= Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_SPEEDEFFECT}}}", 	{{{Volumes::GetVolumedB("SpeedEffect")}}}, 		False, False, False);
	declare M_SoundIsFreewheel				= Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_ISFREEWHEEL}}}", 	{{{Volumes::GetVolumedB("StateFreewheel")}}}, 	False, True, False);
	declare M_SoundIsFlying 				= Audio.CreateSound("{{{SOUNDPATH}}}{{{SOUND_ISFLYING}}}", 		0., False, True, False);
	declare M_SoundIsFlyingDesiredVolume 	= 0.;
	M_SoundSpeedEffect	.PanRadiusLfe 		= {{{Volumes::GetPanRadiusLfe("SpeedEffectStart")}}};
	M_SoundIsFlying		.PanRadiusLfe 		= {{{Volumes::GetPanRadiusLfe("StateFlying")}}};
	M_SoundIsFlying		.Stop();

	declare Video_BgAnim = Video.CreateVideo("{{{VIDEOPATH^VIDEO_BGANIM_MESSAGE}}}", False, False);
	M_ResetGaugeNeeded = True;
	
	// Prompter_SetBanner("RoomName", "Super long message qui devrait prompter", 4000, 20, <0.129, 0.129, 0.129>);
	// Prompter_SetBannerIsActive("RoomName", True, True);

	declare UI_LibRS_IsVisible for UI = False;
	Playground.DisablePlayingStateTracking = UI_LibRS_IsVisible;
	
	declare PrevLapRaceTime = -1;

	while(True)  
	{
		yield;
		{{{UIBindingPadButtons::InjectInLoop()}}}
		// log(PageIsVisible^" "^GUIPlayer);
		// log(Now^"IN UI ONLINE: "^Net_ModeName);

		Playground.DisablePlayingStateTracking = UI_LibRS_IsVisible;
		//log(Now^"> Playground.DisablePlayingStateTracking : "^Playground.DisablePlayingStateTracking);

		if(!PageIsVisible) 						continue;
		if(Net_ModeName == "") 					continue;
		if (Net_ModeName != UI_ModeName) {
			UI_ModeName = Net_ModeName;
		}
		
		// log("2"^Now);
		
		{{{Prompter2::InjectInLoop()}}}
		
		if(M_PrevPageIsVisible != PageIsVisible)
		{
			M_PrevPageIsVisible = PageIsVisible;
			if(M_PrevPageIsVisible) 
				M_TriggerShowAnim = Now;
		}
		
		////////////////////////////////////////
		// RACE STATE
		if(GUIPlayer != Null) {
			if(M_PrevRaceState != GUIPlayer.RaceState) 
			{
				M_PrevRaceState = GUIPlayer.RaceState;
				
				M_TimeDiff = -1;
				if(Net_OpponentCheckpointsTime.count > 0)
				{
					if(Net_BestTime > 0)
					{
						M_TimeDiff 				= Net_BestTime - M_OpponentTime;
						M_TriggerChallengeAnim 	= Now;
					}
				}
					
				if (M_PrevRaceState == CTmMlPlayer::ERaceState::Finished) 
				{
					if(GUIPlayer.CurRace != Null && GUIPlayer.CurRace.Time >= 0)
						Label_Chrono.Value 	= GetTimeToText(GUIPlayer.CurRace.Time);
					else
						Label_Chrono.Value 	= "--:--:--";				
				} 
				else 
				if (M_PrevRaceState == CTmMlPlayer::ERaceState::BeforeStart) 
				{
					if(Net_BestTime <= 0)
					{
						Label_PlayerTimeDiff	.Value 		= "";
						Label_OpponentTimeDiff	.Value 		= "";
						M_AnimEndPosOpponent = C_POS_FIRST;
						M_AnimEndPosPlayer   = C_POS_SECOND;
					}
					M_CpCountVoice 		 = M_CpCommentariesToPlayEachXXCp;
					
					M_CurCheckpointIndex 	= -1;
					M_ResetGaugeNeeded 		= True;
					for(I, 0, M_OpponentCheckpointValidated.count-1) M_OpponentCheckpointValidated[I] = False;
					Label_Chrono	.Value 	= "00:00.00";
					// Frame_ClipLeft	.ClipWindowActive = True; 
					// Frame_ClipRight	.ClipWindowActive = True; 
					M_RemainingLap = -1;
					M_PrevRemainingLap = -1;
					M_TriggerShowModeSpec = 0;

					if (Net_ModeName == "OnlineTimeAttack") {
						Frame_ModeScoreContent.Visible = (Label_ModeContent.Value != "");
						Frame_ModeScoreBg.Visible = Frame_ModeScoreContent.Visible;
					}
				} 
			}
		}

		declare IsRunning 		= M_PrevRaceState == CTmMlPlayer::ERaceState::Running;
		declare IsBeforeStart 	= M_PrevRaceState == CTmMlPlayer::ERaceState::BeforeStart;
		declare IsThereOpponent = Net_OpponentType != TMC_MEDAL_NONE && Net_OpponentType != -1;
		
		//////////////////////////////
		// MAP NAME BUSINESS
		if(M_PrevMapName != Net_TrackFinalName) 
		{
			Prompter_SetBanner("MapName", TL::ToUpperCase(Net_TrackFinalName), 4000, 20, <0.879, 0.879, 0.879>);
			Prompter_SetBannerIsActive("MapName", True, True);
			M_PrevMapName = Net_TrackFinalName;
		}
		
		if(M_PrevCurrentServerName != Net_RoomFinalName) {
			Prompter_SetBanner("RoomName", TL::ToUpperCase(Net_RoomFinalName), 4000, 20, <0.129, 0.129, 0.129>);
			Prompter_SetBannerIsActive("RoomName", True, True);
			M_PrevCurrentServerName = Net_RoomFinalName;
		}
	
		// UPDATE MEDAL IF NEW DURING RACE
		if(M_PrevBestMedal != Net_BestMedal)
		{
			M_PrevBestMedal != Net_BestMedal;
			// Quad_Medal.ImageUrl = GetMedalUrl(Net_BestMedal);
		}
		
		declare	Text	Net_MusicFinalName	for UI;
		if(PreMusicFinalName != Net_MusicFinalName && GameTime > InputPlayer.RaceStartTime && Net_MusicFinalName != "") {
			Prompter_SetBanner("MusicName", Net_MusicFinalName, 4000, 20, <0.129, 0.129, 0.129>);
			Prompter_SetBannerIsActive("MusicName", True, True);
			PreMusicFinalName = Net_MusicFinalName;
			// Frame_Music.Visible = True;
		} else if(GameTime < InputPlayer.RaceStartTime) {
			Prompter_SetBanner("MusicName", "", 4000, 20, <0.129, 0.129, 0.129>);
			Prompter_SetBannerIsActive("MusicName", True, True);
			PreMusicFinalName = "";
			// Frame_Music.Visible = False;
		}
		
		if(Net_PlayerMusicState == 1) {
			Quad_MusicBg.BgColor = {{{Colors::GetColor("Yellow")}}};
		} else if(Net_PlayerMusicState == 0) {
			Quad_MusicBg.BgColor = {{{Colors::GetColor("White")}}};
		} else if(Net_PlayerMusicState == 2) {
			Quad_MusicBg.BgColor = {{{Colors::GetColor("Black")}}};
		}
		
		/////////////////////////////////////
		// FRAME HUD VISIBILITY CHANGE
		declare HudDesiredVisible = False;
		
		if(GUIPlayer != Null) {
			if(LocalUser.StereoDisplayMode == CUser::EStereoDisplayMode::None) {
				if(IsRunning || IsBeforeStart) {
					HudDesiredVisible = !Net_IsBuddiesListShown && !Net_IsPauseMenuEnabled && !Net_IsScoreTableVisible && !Net_IsFavoriteManagerShown && (GameTime < Net_CutOffTimeLimit || Net_CutOffTimeLimit == -1) && GUIPlayer != Null && UI.UISequence != CUIConfig::EUISequence::Podium;
				} else {
					HudDesiredVisible = !Net_IsBuddiesListShown && !Net_IsPauseMenuEnabled && !Net_IsScoreTableVisible && !Net_IsFavoriteManagerShown && UI.UISequence != CUIConfig::EUISequence::Podium;
				}
			}
		} else {
			HudDesiredVisible = False;
		}
		// HudDesiredVisible = True;
		Net_HudIsVisible = HudDesiredVisible;
		
		/*
		if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Keyboard) {
			SetBindableKeysVisible("{{{MusicBoosterName}}}", True);
			Quad_ButtonBoost.Visible = False;
		} else if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Pad) {
			SetBindableKeysVisible("{{{MusicBoosterName}}}", False);
			Quad_ButtonBoost.Visible = True;
		}
		*/
		
		SetBindableKeysVisible("{{{MusicBoosterName}}}", True);
		Quad_ButtonBoost.Visible = False;
		
		//Deprecated
		/*
		if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Keyboard) {
			SetBindableKeysVisible("{{{MusicBoosterName}}}", True);
			Quad_ButtonBoost.Visible = False;
		} else if(Net_LibLastDeviceUsed_LastDeviceUsed == C_Device_Pad) {
			SetBindableKeysVisible("{{{MusicBoosterName}}}", False);
			Quad_ButtonBoost.Visible = True;
			Quad_ButtonBoost.ImageUrl = GetImageForButton("{{{UIButtons::GetAlternateImage("View")}}}");
		}
		*/
		
		if(M_PrevHudIsVisible != HudDesiredVisible)
		{
			M_PrevHudIsVisible = HudDesiredVisible;
			Frame_Music.Visible = True;
			if(HudDesiredVisible)
			{
				M_TriggerShowModeSpec = Now - C_LAPSTOGO_DURATION_HIDDEN;
				M_TriggerShowAnim = Now;
				Audio.PlaySoundEvent("{{{SOUNDPATH^SOUND_SHOWLINE}}}", {{{Volumes::GetVolumedB("ShowLine") - 7.5}}}, 150);
				Frame_Hud.Visible = True;
			}
			else {
				M_TriggerHideAnim = Now;
				M_SoundIsFlying.Stop();
				M_SFX_Rise.Stop();
				M_SoundSpeedEffect.Stop();
				M_SoundIsFreewheel.Stop();
			}

			if (Net_ModeName == "OnlineTimeAttack") {
				Frame_ModeScoreContent.Visible = (Label_ModeContent.Value != "");
				Frame_ModeScoreBg.Visible = Frame_ModeScoreContent.Visible;
			}
		}

		Frame_ServerAnim			.RelativePosition = <0.,0.,1.>;
		Frame_ModeScoreAnim			.RelativePosition = <0.,0.,1.>;
		declare Trigger 			= M_TriggerShowAnim;			
		declare StartOpacity 		= 0.;
		declare DiffOpacity			= 1.;
		declare PosVisible 			= <0., 					0., 	1.>;
		declare StartPosLeft		= <-C_ANIMSHOW_OFFSET,	0., 	1.>;
		declare StartPosRight		= < C_ANIMSHOW_OFFSET,	0., 	31.>;
		declare EndPosLeft 			= PosVisible;
		declare EndPosRight 		= PosVisible;
		
		if(HudDesiredVisible)
		{
			Frame_ServerAnim	.RelativePosition = <0.,0.,1.>;
			Frame_ModeScoreAnim	.RelativePosition = <0.,0.,1.>;
			
			if(Now > Trigger + C_ANIMSHOW_DURATION)
			{
				Frame_ModeScoreContent		.RelativePosition.X = 0.;
				Frame_ServerContent			.RelativePosition.X = 0.;				
			} 
			else 
			{
				CheckToPlayMoveTo("BackOut", Frame_ServerContent, 	Trigger, StartPosLeft, EndPosLeft, C_ANIMSHOW_DURATION);
				CheckToPlayMoveTo("BackOut", Frame_ModeScoreContent, Trigger, StartPosLeft, EndPosLeft, C_ANIMSHOW_DURATION);
			}
			
			if(IsThereOpponent)
			{
				// log(Now^">CHALLENGE FRAME VISIBILITY");
				Frame_ChallengeAnim	.RelativePosition 	= <0.,0.,1.>;
				declare Real SpecialChallengeOffset 	= 5.;
				declare Vec3 EndPosnChallenge = <EndPosRight.X-SpecialChallengeOffset, EndPosRight.Y, EndPosRight.Z>;
				CheckToPlayMoveTo("BackOut", Frame_ChallengeContent, 	Trigger, StartPosRight, EndPosnChallenge, C_ANIMSHOW_DURATION);
				if(Now > Trigger + C_ANIMSHOW_DURATION)
					Frame_ChallengeContent.RelativePosition.X = 0.-SpecialChallengeOffset;
			}

			/*
			if(Now <= M_TriggerShowModeSpec + C_LAPSTOGO_DURATION_HIDDEN)
			{
				declare Duration 		= C_ANIMSHOW_DURATION;
				declare Trigger 		= M_TriggerShowModeSpec;
				declare StartPosLeft 	= PosVisible;
				declare EndPosLeft		= <{{{-C_RACE_MAPNAME_SIZE_X}}},	0., 	1.>;
				if(M_RemainingLap == Net_NbLaps)
					Duration = 0;
				CheckToPlayMoveTo("BackOut", Frame_ModeScoreAnimOnChange , Trigger, StartPosLeft, EndPosLeft, Duration);	
			}
			else
			{
				declare Trigger = M_TriggerShowModeSpec + C_LAPSTOGO_DURATION_HIDDEN;
				Frame_ModeScoreAnimOnChange	.RelativePosition = <0.,0.,1.>;
				if(Now > Trigger + C_ANIMSHOW_DURATION)
					Frame_ModeScoreContentOnChange	.RelativePosition.X = 0.;
				else 
					CheckToPlayMoveTo("BackOut", Frame_ModeScoreContentOnChange, Trigger, StartPosLeft, EndPosLeft, C_ANIMSHOW_DURATION);	
			
				if(M_RemainingLap == 1)
					Quad_LapBg.BgColor = {{{Colors::GetColor("Red")}}};
				else 
					Quad_LapBg.BgColor = {{{Colors::GetColor("Yellow")}}};						
			}
			*/
		}
		else
		{
			Trigger = M_TriggerHideAnim;
			if(Now <= Trigger + C_ANIMSHOW_DURATION)
			{
				
				StartOpacity 	= 1.;
				DiffOpacity		= -1.;
				StartPosLeft 	= PosVisible;
				StartPosRight 	= PosVisible;
				EndPosLeft		= <{{{-C_RACE_MAPNAME_SIZE_X}}},	0., 	1.>;
				EndPosRight		= <{{{ C_RACE_MAPNAME_SIZE_X}}},	0., 	1.>;
				CheckToPlayMoveTo("BackOut", Frame_ServerAnim,  Trigger, StartPosLeft, EndPosLeft, C_ANIMSHOW_DURATION);	
				CheckToPlayMoveTo("BackOut", Frame_ModeScoreAnim, Trigger, StartPosLeft, EndPosLeft, C_ANIMSHOW_DURATION);	
				
				if(IsThereOpponent) 
					CheckToPlayMoveTo("BackOut", Frame_ChallengeAnim, Trigger, StartPosRight, EndPosRight, C_ANIMSHOW_DURATION);
			}
			else
			{
				Frame_Hud.Visible = False;
			}
		}
		
		if(GUIPlayer == Null) {
			if(M_SoundIsFlying.IsPlaying) {
				M_SoundIsFlying.Stop(); 
			}
			
			if(M_SFX_Rise != Null) {
				if(M_SFX_Rise.IsPlaying) {
					M_SFX_Rise.Stop();
				}
			}
			Label_Chrono					.Visible = False;
			Label_CheckpointDiff			.Visible = False;
			Label_CheckpointLap				.Visible = False;
			continue;
		}
		
		G_FadeOpacity = AL::Ease("Linear", Now - Trigger*1., StartOpacity, DiffOpacity, C_ANIMSHOW_DURATION*1.);
		declare OpacitySpeedAnim = 1.;
		if(GUIPlayer.DisplaySpeed <= 0)
			OpacitySpeedAnim = 0.5 + 0.5 * ML::Sin(Now*{{{C_SPEED_ANIM_BLINKSPEED}}});
		Label_Speed				.Opacity = {{{C_WHITE_OPACITY}}} * OpacitySpeedAnim * G_FadeOpacity;
		Quad_DoubleDriverLogo	.Opacity = 1. * G_FadeOpacity;
		Quad_DoubleDriverLogo	.Visible = False;
		Label_ModeCompInf.Opacity = 0.5 + 0.5 * ML::Sin(Now*{{{C_SPEED_ANIM_BLINKSPEED}}});
		
		if(M_PrevRaceState == CTmMlPlayer::ERaceState::Finished && UI.UISequence != CUIConfig::EUISequence::Podium) {
			Label_Chrono			.Opacity = 1.0;
		} else {
			Label_Chrono			.Visible = Frame_Hud.Visible;
			Label_Chrono			.Opacity = {{{C_WHITE_OPACITY}}} * G_FadeOpacity * M_ChronoBlinkOpacity;
		}
		
		
		
		/*
		if(UI.UISequence == CUIConfig::EUISequence::Podium) {
			Label_Chrono.Visible 			= False;
			Label_CheckpointDiff.Visible 	= False;	
		}
		*/
		
		/////////////////////////////
		// CHECKPOINT TIMERS         
		declare CpVisibility 	 = Now <= M_TriggerCheckpoint + {{{C_CHECKPOINT_SHOW_DURATION}}} && UI.UISequence != CUIConfig::EUISequence::Podium;
		declare CpTimeFreeze 	 = Now <= M_TriggerCheckpoint + {{{C_CHECKPOINT_SHOW_DURATION*0.5}}};
		declare CpFade			 = 50;
		declare CpStartOpacity	 = 0.;
		declare CpDiffOpacity	 = 1.;
		declare CpTrigger 		 = M_TriggerCheckpoint;
		declare CpFadeOutTrigger = M_TriggerCheckpoint + {{{C_CHECKPOINT_SHOW_DURATION}}} - C_ANIMSHOW_DURATION;
		
		if(Now >= CpFadeOutTrigger) 
		{
			CpTrigger 		= CpFadeOutTrigger;
			CpStartOpacity 	= 1.;
			CpDiffOpacity 	= -1.;
			CpFade 			= C_ANIMSHOW_DURATION;
		}
		
	
		declare CpOpacity = G_FadeOpacity * AL::Ease("Linear", Now - CpTrigger*1., CpStartOpacity, CpDiffOpacity, CpFade*1.);
		
		Label_CheckpointDiff.Visible = CpVisibility && IsThereOpponent;
		Label_CheckpointLap	.Visible = CpVisibility && GUIPlayer.CurrentNbLaps > 0 && (Net_NbLaps > 1 || (IndependantLaps && Map.TMObjective_IsLapRace));
		Label_CheckpointLap	.Opacity = CpOpacity;
	
		if(M_PrevRaceState != CTmMlPlayer::ERaceState::Finished) {
			Label_CheckpointDiff.Opacity = CpOpacity;
		} else {
			if (GUIPlayer.Score != Null && GUIPlayer.Score.BestRace.Time != -1) {
				Label_CheckpointDiff.Visible = True;
				Label_CheckpointDiff.Opacity = 1.0;	
			}
		}
		
		// if(UI.UISequence == CUIConfig::EUISequence::Podium) {
			// Label_CheckpointDiff.Visible = False;
		// }
		
		// log(Now^" "^Label_CheckpointDiff.Visible);
		
		
		M_ChronoBlinkOpacity = 1.;
		if(CpTimeFreeze) 
		{
			M_ChronoBlinkOpacity = ML::Sin(Now*C_CHECKPOINT_SIN_SPEED) * 0.5 + 0.5;
			Label_Chrono.Value = GetTimeToText(M_LastCpTime);
		}
		
		// SHOW/HIDE HUD ANIM
		if(!Frame_Hud.Visible)
			continue;

		
		///////////////////////////////////////////
		// MAIN UI BUSINESS STARTS HERE
		if(Net_ModeName == "OnlineTimeAttack") {
			if (GUIPlayer != Null && GUIPlayer.Score != Null && M_PrevScore != GUIPlayer.Score.BestRace.Time) {
				M_PrevScore = GUIPlayer.Score.BestRace.Time;
				if (M_PrevScore < 0) Label_ModeContent.Value = "";
				else Label_ModeContent.Value = TL::TimeToText(M_PrevScore, True);
				Label_ModeCompInf.Value = _("Best time");

				if (Label_ModeContent.Value == "") {
					Frame_ModeScoreContent.Visible = False;
					Frame_ModeScoreBg.Visible = Frame_ModeScoreContent.Visible;
				} else if (IndependantLaps) {
					Frame_ModeScoreContent.Visible = (Label_ModeContent.Value != "");
					Frame_ModeScoreBg.Visible = Frame_ModeScoreContent.Visible;
				}
			}
		} else if(Net_ModeName == "OnlineRounds") {
			declare CurPoints = 0;
			if (GUIPlayer.Score != Null) {
				CurPoints = GUIPlayer.Score.Points;
			} else {
				foreach(IndexScore => Score in Scores) {
					if(Score.User.Login == GUIPlayer.Login) {
						CurPoints = Score.Points;
					}
				}
			}
			
			// log(Net_MaxPoints);
			
			declare Boolean UpdateScore		= False;
			if(M_PrevScore != CurPoints && Net_MaxPoints > 0) {
				
				UpdateScore = True;
				M_PrevScore = CurPoints;
			}
			
			if(UpdateScore) {
				// log("Max points: "^Net_MaxPoints);
				Label_ModeContent.Value 	= CurPoints^" /"^Net_MaxPoints;
				Label_ModeCompInf.Value 	= _("Points");
				UpdateScore					= False;
			}
		} else if(Net_ModeName == "OnlineLaps") {
			declare Boolean UpdateScore		= False;
			declare Integer CurNbCheckpoints = 0;
			if (GUIPlayer.Score != Null) {
				declare netread Integer NbCheckpoints for GUIPlayer.Score;
				// log("NB CHECKPOINT: "^NbCheckpoints);
				if(M_PrevScore != NbCheckpoints) {
					UpdateScore = True;
					M_PrevScore = NbCheckpoints;
				}
				CurNbCheckpoints = NbCheckpoints;
			}
			
			if(UpdateScore) {
				if(Map.TMObjective_IsLapRace) {
					Label_ModeContent.Value 	= CurNbCheckpoints^" /"^Net_NbCheckpoints*Net_NbLaps;
				} else {
					Label_ModeContent.Value 	= CurNbCheckpoints^" /"^Net_NbCheckpoints;
				}
				
				Label_ModeCompInf.Value 	= _("Checkpoints");
				UpdateScore					= False;
			}
		}

		// UPDATE IF OPPONENT CHANGE
		declare OpponentCpLast = Net_OpponentCheckpointsTime.count-1;
		declare IsThereOpponentCpTime = OpponentCpLast >= 0;
		if(IsThereOpponentCpTime && M_PrevLastCpTime != Net_OpponentCheckpointsTime[OpponentCpLast])
		{
			M_PrevLastCpTime = Net_OpponentCheckpointsTime[Net_OpponentCheckpointsTime.count-1];
			M_OpponentCheckpointValidated.clear();
			foreach(Checkpoint in Net_OpponentCheckpointsTime) 
				M_OpponentCheckpointValidated.add(False);
		}
		
		/////////////////////
		// CONTINUE UPDATE
		declare SpeedValue 		= GUIPlayer.DisplaySpeed;
		declare DriftDuration 	= GUIPlayer.SkiddingDuration;
		declare DriftDistance 	= ML::FloorInteger(GUIPlayer.SkiddingDistance);
		declare JumpDuration 	= GUIPlayer.FlyingDuration;
		declare JumpDistance 	= ML::FloorInteger(GUIPlayer.FlyingDistance);
		declare CarHeight 		= ML::FloorInteger(GUIPlayer.Position.Y);
		
		if(IsRunning) 
			Net_CoopSymbiosysRatio = GUIPlayer.CoopSymbiosysPercentTotal * 0.01;
		
		/////////////////////
		// VIDEO CHECK
		foreach(Quad in [Quad_SpeedEffect])
		{
			declare Integer ForQuad_Video_LastPlayedTrigger 	for Quad;
			declare Integer ForQuad_Video_Duration 				for Quad;
			if(Now > ForQuad_Video_LastPlayedTrigger + ForQuad_Video_Duration)
			{
				StopVideoQuad(Quad);
			}
		}
		
		/////////////////////
		// LAP EVENT	
		if(IsRunning && Net_NbLaps > 1) 
		{
			M_RemainingLap = Net_NbLaps - GUIPlayer.CurrentNbLaps;
			if(M_PrevRemainingLap != M_RemainingLap)
			{
				M_PrevRemainingLap = M_RemainingLap;
				if(M_RemainingLap == 1) {
					M_MessageSound 	= "{{{SOUND_VOICE_LAPFINAL}}}";
				} else if(M_RemainingLap <= 5) {
					if(M_RemainingLap == 2) M_MessageSound 	= "{{{SOUND_VOICE_LAP2}}}";
					if(M_RemainingLap == 3) M_MessageSound 	= "{{{SOUND_VOICE_LAP3}}}";
					if(M_RemainingLap == 4) M_MessageSound 	= "{{{SOUND_VOICE_LAP4}}}";
					if(M_RemainingLap == 5) M_MessageSound 	= "{{{SOUND_VOICE_LAP5}}}";
				}
				if(M_RemainingLap == Net_NbLaps)
					M_TriggerMessage = Now + 1500;
				else
					M_TriggerMessage = Now + Net_MusicNextTempoDelay;					
			}
		}
		
		/////////////////////
		// RACE EVENTS LOOP
		
		foreach(Event in RaceEvents)
		{
			if(Event.Player.Id != GUIPlayer.Id)
			{
				continue;
			}
			
			// events for local player:
			switch(Event.Type)
			{
				case CTmRaceClientEvent::EType::WayPoint : 
				{
					// declare PlayDefaultVoice = True;
					M_CurCheckpointIndex += 1;
					M_TimeDiff = -1;
					
					declare EndRace 				= Event.IsEndRace;
					declare EndLap 					= Event.IsEndLap;
					M_LastCpTime 					= GUIPlayer.CurCheckpointRaceTime;
					declare LocalCpTime				= M_LastCpTime;
					declare CurCheckpointLapTime 	= GUIPlayer.CurCheckpointLapTime;

					// Leo ---
					declare CheckpointIndex = -1;
					declare CheckpointTime = -1;
					declare LapTime = GUIPlayer.CurCheckpointLapTime;
					if (GUIPlayer.CurCheckpointLapTime < 0) {
						if (GUIPlayer.CurrentNbLaps <= 1) {
							LapTime = GUIPlayer.CurCheckpointRaceTime;
						} else {
							LapTime = GUIPlayer.CurCheckpointRaceTime - PrevLapRaceTime;
						}
						PrevLapRaceTime = GUIPlayer.CurCheckpointRaceTime;
					} else {
						LapTime = GUIPlayer.CurCheckpointLapTime;
					}
				
					if (IndependantLaps) {
						CheckpointTime = LapTime;
						CheckpointIndex = GUIPlayer.CurLap.Checkpoints.count - 1;
					} else {
						CheckpointTime = GUIPlayer.CurCheckpointRaceTime;
						CheckpointIndex = GUIPlayer.CurRace.Checkpoints.count - 1;
					}

					if (
						IndependantLaps
						&& GUIPlayer.Score != Null 
						&& GUIPlayer.Score.BestLap != Null 
						&& GUIPlayer.Score.BestLap.Time >= 0
						&& GUIPlayer.CurLap != Null
					) {
						if (CheckpointIndex >= 0 && GUIPlayer.Score.BestLap.Checkpoints.count > CheckpointIndex) {
							LocalCpTime = GUIPlayer.CurLap.Checkpoints[CheckpointIndex];
						} else {
							LocalCpTime = LapTime;
						}
					} 
					else if (
						GUIPlayer.Score != Null 
						&& GUIPlayer.Score.BestRace != Null 
						&& GUIPlayer.Score.BestRace.Time >= 0
						&& GUIPlayer.CurRace != Null
					) {
						if (CheckpointIndex >= 0 && GUIPlayer.Score.BestRace.Checkpoints.count > CheckpointIndex) {
							LocalCpTime = GUIPlayer.CurRace.Checkpoints[CheckpointIndex];
						}
					}
					// Leo ---

					if(Net_OpponentCheckpointsTime.existskey(CheckpointIndex))
					{
						declare CurCheckpointTimeOpponent 	= Net_OpponentCheckpointsTime[CheckpointIndex];
						M_TimeDiff 							= LocalCpTime - CurCheckpointTimeOpponent;
						M_TriggerChallengeAnim 				= Now;
					} // In independant laps, when crossing finish line
					else if (CheckpointIndex < 0 && Net_OpponentCheckpointsTime.count > 0) {
						declare CurCheckpointTimeOpponent 	= Net_OpponentCheckpointsTime[Net_OpponentCheckpointsTime.count-1];
						M_TimeDiff 							= LocalCpTime - CurCheckpointTimeOpponent;
						M_TriggerChallengeAnim 				= Now;
					}
					else
					{
						M_TimeDiff = 0;
					}

					if(!EndRace)
					{
						// Label_CheckpointTime	.Value 				= GetTimeToText(LocalCpTime);
						Label_CheckpointDiff	.Value 				= GetTimeDiffToText	(M_TimeDiff, GUIPlayer);
						Label_CheckpointDiff	.TextColor 			= GetTimeDiffColor	(M_TimeDiff, GUIPlayer);
						Label_CheckpointDiff	.RelativePosition.X = GetTimeDiffPosX	(M_TimeDiff, GUIPlayer);
						Label_CheckpointLap		.Value 				= GetTimeToText		(LapTime);
						if(LapTime < 10) {
							Label_CheckpointLap.Value = GetTimeToText(LocalCpTime);
						}
						
						if(GUIPlayer.CurrentNbLaps > 0 && Map.TMObjective_IsLapRace) 
							Audio.PlaySoundEvent("{{{SOUNDPATH ^ SOUND_CHECKPOINT_LAP}}}", 	{{{Volumes::GetVolumedB("CheckpointLap")}}}, 	{{{C_DELAY_LAP}}});
						
						M_TriggerCheckpoint = Now;
						M_TriggerWoosh = Now;
					} else {
						
						declare Integer CurPosition = 0;
						foreach(IndexScore => Score in Scores) {
							if(Score.User.Login == GUIPlayer.Login) {
								CurPosition = IndexScore;
							}
						}
						
						declare Integer TimeDiff = 0;
						if(GUIPlayer.Score != Null && GUIPlayer.Score.BestRace != Null)  {
							if(GUIPlayer.Score.BestRace.Time > -1) {
								TimeDiff = GUIPlayer.CurRace.Time - GUIPlayer.Score.BestRace.Time;
							} else {
								TimeDiff = -GUIPlayer.CurRace.Time;
							}
						} else {
							TimeDiff = 0;
						}
						
						Label_CheckpointDiff	.Value 				= GetTimeDiffToText	(TimeDiff, GUIPlayer);
						Label_CheckpointDiff	.TextColor 			= GetTimeDiffColor	(TimeDiff, GUIPlayer);
						Label_CheckpointDiff	.RelativePosition.X = GetTimeDiffPosX	(TimeDiff, GUIPlayer);
						Label_CheckpointDiff	.Visible 			= True;
					}

					declare IsAhead = M_TimeDiff <= 0;
					if(M_TimeDiff != 0 && !EndRace)
					{
						if(IsAhead) {
							PlayVoiceSound("{{{SOUNDPATH ^ SOUND_CHECKPOINT_YES}}}", 	{{{Volumes::GetVolumedB("CheckpointYes")}}}, 0);
						}
						else
							PlayVoiceSound("{{{SOUNDPATH ^ SOUND_CHECKPOINT_NO}}}", 	{{{Volumes::GetVolumedB("CheckpointNo")}}},  0);
					}
					
					M_CpCountVoice  += 1;
					
					if(M_CpCountVoice > M_CpCommentariesToPlayEachXXCp && !EndLap)
					{
							
						declare CAudioSource SoundToPlay;
						declare Delay = {{{C_COMMENTARIES_DELAY}}};
						
						if(!EndRace)
						{
							if(IsAhead)
								SoundToPlay = M_SoundsCheckpointYes[ML::Rand(0, M_SoundsCheckpointYes.count-1)];
							else
								SoundToPlay = M_SoundsCheckpointNo[ML::Rand(0, M_SoundsCheckpointNo.count-1)];
							PlayVoiceSound(SoundToPlay, {{{Volumes::GetVolumedB("VoiceCommentaries")}}}, Delay);
						}
						
						M_CpCountVoice   = 0;
						M_CpCommentariesToPlayEachXXCp = ML::Rand({{{C_COMMENTARIES_TOPLAY_EACH_XX_CP_MIN}}}, {{{C_COMMENTARIES_TOPLAY_EACH_XX_CP_MAX}}});
					}
					
					if(!EndRace && !EndLap)
						PlayVoiceSound("{{{SOUNDPATH ^ SOUND_CHECKPOINT_TIME}}}", 	{{{Volumes::GetVolumedB("CheckpointTime")}}}, 	{{{C_DELAY_LAP}}});
					
				}
				
				case CTmRaceClientEvent::EType::Impact : 
				{
					if(Now > M_LatestCarHitSound + {{{C_COMMENTARIES_CARHIT_MIN_INTERVAL}}}
						&& 	Event.Player.DamageHullRatio >= 0.1)
					{
						// M_SoundsCarHit[ML::Rand(0, M_SoundsCarHit.count-1)].Play();
						PlayVoiceSound(M_SoundsCarHit[ML::Rand(0, M_SoundsCarHit.count-1)], 	{{{Volumes::GetVolumedB("VoiceCommentaries")}}}, 800);
						M_LatestCarHitSound = Now;
					}
				}
			}
		}
		
		//////////////////////////////
		// PLUGIN EVENTS LOOP
		if(M_PluginInterface_UIPlugin == Null)
		{
			M_PluginInterface_UIPlugin = GetPluginInterface("UIPlugin");
			// log(Now^"> Warning : M_PluginInterface_UIPlugin == Null");
		}
		else
		{
			foreach(Event in M_PluginInterface_UIPlugin.PendingEvents)
			{
				log(Now ^ "> UI> Received : " ^ Event.EventType);
				
				switch(Event.EventType)
				{
					case "ShowPlugin" : Net_IsPluginEnabled = True;
					case "HidePlugin" : Net_IsPluginEnabled = False;
				}
			}
		}
		
		//////////////////////////////
		// WHOOSHS        
		if(M_PrevTriggerWoosh != M_TriggerWoosh)
		{
			M_PrevTriggerWoosh = M_TriggerWoosh;
			M_SoundWhoosh.Play();
			M_SoundWhoosh.RelativePosition = <0., 0., 0.>;
			M_RandomDir = ML::Rand(-0.5, 0.5);
		}	
		
		if(M_SoundWhoosh != Null)
		{
			declare Speed 			= GUIPlayer.DisplaySpeed;
			declare MinSpeed		= 100.;
			declare MinVolume		= 0.25;
			declare MinPitch		= 0.33;
			if(Speed > MinSpeed)
			{
				declare VolumeRatio	 	= (Speed - MinSpeed) / 500.;
				declare PitchRatio	 	= (Speed - MinSpeed) / 300.;
				declare Volume 			= MinVolume + VolumeRatio;
				declare Pitch 			= MinPitch 	+ PitchRatio;
				
				M_SoundWhoosh.Volume 	= Volume * 0.5;
				M_SoundWhoosh.Pitch 	= Pitch;
				
				declare Pos = AL::Ease("Linear", Now - M_PrevTriggerWoosh*1., 0., -2., 1200.);
				M_SoundWhoosh.RelativePosition = 
				<
					M_RandomDir * Pos * 1., 
					Pos*0.33, 
					Pos
				>;
			}
			else 
			{
				M_SoundWhoosh.Volume = 0.;
			}
		}
		
		

		/////////////////////////////////
		// OPPONENT BEING CHALLENGED
		
		declare NeedTextUpdate = True;
		
		Frame_Challenge.Visible = IsThereOpponent;
		
		if(IsThereOpponent)
		{
			// CHECK WHO'S FIRST WHEN THE GHOST HITS A CHECKPOINT
			
			foreach (I => Checkpoint in Net_OpponentCheckpointsTime)
			{
				if(M_OpponentCheckpointValidated.existskey(I))
				{
					if(M_OpponentCheckpointValidated[I] == False && GUIPlayer.CurRace.Time > Checkpoint) 
					{
						M_OpponentCheckpointValidated[I] 	= True;
						NeedTextUpdate						= False;
						if(M_CurCheckpointIndex < I && M_TimeDiff < 0) 
						{
							M_TriggerChallengeAnim = Now;
							M_TimeDiff = 1;
						}
					}
				}
			}
			
			
			
			if(M_PrevTriggerChallengeAnim != M_TriggerChallengeAnim)
			{
				M_PrevTriggerChallengeAnim = M_TriggerChallengeAnim;
				
				if(NeedTextUpdate)
				{
					declare TimeDiffToText 				= GetTimeDiffToText	( M_TimeDiff, GUIPlayer);
					declare TimeDiffToTextOpponent		= GetTimeDiffToText	(-M_TimeDiff, GUIPlayer);
					declare TimeDiffColorPlayer			= GetTimeDiffColor 	( M_TimeDiff, GUIPlayer);
					declare TimeDiffColorOpponent		= GetTimeDiffColor 	(-M_TimeDiff, GUIPlayer);
					if(TimeDiffToText == "" || M_OpponentTime <= 0)
					{
						TimeDiffToText = "--:--.--";
						TimeDiffColorPlayer = {{{ColorWhite}}};
					}
					
					Label_PlayerTimeDiff	.TextColor 	= TimeDiffColorPlayer;
					Label_OpponentTimeDiff	.TextColor 	= TimeDiffColorOpponent;
					
					Label_PlayerTimeDiff	.Value 		= TimeDiffToText;
					Label_OpponentTimeDiff	.Value 		= TimeDiffToTextOpponent;
				}
				
				M_AnimStartPosOpponent 		= Frame_Opponent.RelativePosition;
				M_AnimStartPosPlayer 		= Frame_Player	.RelativePosition;
				if(M_TimeDiff <= 0)
				{
					M_AnimEndPosOpponent 	= C_POS_SECOND;
					M_AnimEndPosPlayer 		= C_POS_FIRST;
				}
				else
				{
					M_AnimEndPosOpponent 	= C_POS_FIRST;
					M_AnimEndPosPlayer 		= C_POS_SECOND;
				}
			}
			
			CheckToPlayMoveTo("BackOut", Frame_Opponent, 	M_TriggerChallengeAnim, M_AnimStartPosOpponent, M_AnimEndPosOpponent, 	C_CHALLENGE_ANIM_DURATION);
			CheckToPlayMoveTo("BackOut", Frame_Player, 		M_TriggerChallengeAnim, M_AnimStartPosPlayer, 	M_AnimEndPosPlayer, 	C_CHALLENGE_ANIM_DURATION);
			
			
			
			// UPDATE THE CHALLENGE FRAME (ONLY WHEN YOU CHANGE THE OPPONENT TYPE - TO BE CHECKED WHEN "CHALLENGING REAL PEOPLE" WILL BE AVAILABLE)
			
			if(M_PrevOpponentType != Net_OpponentType || M_PrevBestTime != Net_BestTime || Pre_OpponentUpdate != Net_OpponentUpdate && Net_OpponentType == TMC_MEDAL_PLAYER && OpponentCpLast != -1)
			{
				Pre_OpponentUpdate	= Net_OpponentUpdate;
				M_PrevOpponentType 	= Net_OpponentType;
				M_PrevBestTime 		= Net_BestTime;
				
				M_OpponentCheckpointValidated.clear();
				foreach (Checkpoint in Net_OpponentCheckpointsTime) M_OpponentCheckpointValidated.add(False);
				
				declare Text OpponentImage;
				declare Text OpponentName;
				declare Text OpponentTimeToText;
				M_OpponentTime = -1;
				M_TimeDiff = -1;
				
				OpponentName 		= _("Personal record");
				OpponentImage 		= "";
				if(IsThereOpponentCpTime) 
					M_OpponentTime = Net_OpponentCheckpointsTime[OpponentCpLast];
				
				/*
				switch(Net_OpponentType)
				{
					case TMC_MEDAL_AUTHOR : 
					{
						OpponentImage 		= "medalsmall-author.dds";
						M_OpponentTime		= Net_OpponentCheckpointsTime[OpponentCpLast];
					}
					
					case TMC_MEDAL_GOLD : 
					{
						OpponentImage 		= "medalsmall-gold.dds";
						M_OpponentTime		= Net_OpponentCheckpointsTime[OpponentCpLast];
					}
					
					case TMC_MEDAL_SILVER : 
					{
						OpponentImage 		= "medalsmall-silver.dds";
						M_OpponentTime		=Net_OpponentCheckpointsTime[OpponentCpLast];
					}
					
					case TMC_MEDAL_BRONZE : 
					{
						OpponentImage 		= "medalsmall-bronze.dds";
						M_OpponentTime		= Net_OpponentCheckpointsTime[OpponentCpLast];
					}
					
					case TMC_MEDAL_PLAYER : 
					{
						
					}
					
					case TMC_MEDAL_ANOTHERPLAYER : 
					{
						declare netread Text Net_OpponentName for UI;
						if(Net_OpponentName == "")
							OpponentName 		= _("Opponent");
						else
							OpponentName 		= TL::ToUpperCase(Net_OpponentName);
							
						OpponentImage 		= "";
						
						if(IsThereOpponentCpTime) 
							M_OpponentTime = Net_OpponentCheckpointsTime[OpponentCpLast];
					}
				}
				*/				
				
				Quad_OpponentAvatar.Visible 	= False;
				if(OpponentImage != "")
				{
					OpponentImage 				= "{{{IMGPATH}}}" ^ OpponentImage;
					Quad_OpponentAvatar.Visible = True;
				}
				OpponentTimeToText	= TL::TimeToText(M_OpponentTime, True);
				if(OpponentTimeToText == "" || M_OpponentTime <= 0) OpponentTimeToText = "--:--.--";
				
				Label_OpponentName	.Value 		= OpponentName;
				Label_OpponentTime	.Value 		= OpponentTimeToText;
				Quad_OpponentAvatar	.ImageUrl 	= OpponentImage;
				
				if(Net_OpponentCheckpointsTime.count > 0)
				{
					if(Net_BestTime > 0)
					{
						M_TimeDiff 				= Net_BestTime - M_OpponentTime;
						M_TriggerChallengeAnim 	= Now;
					}
				}
			}

			// PLAYER NAME
			/*
			declare PlayerNameParts = TL::Split("_", GUIPlayer.Name);
			declare PlayerName = "";
			
			if(PlayerNameParts.existskey(0))
				PlayerName = PlayerNameParts[0];
			if(Net_PlayerNickname != "")
				PlayerName = Net_PlayerNickname;
			
			if(PlayerNameParts.existskey(0))
			{

			}
			*/
			
			Label_PlayerName.Value = TL::ToUpperCase(GUIPlayer.Name);
			// Label_PlayerName.Value = TL::ToUpperCase("MWMWMWMWMWMWMWM");
			Label_PlayerName.TextColor = {{{ColorYellow}}};
			
			// PLAYER TIME
			
			declare PlayerTime = TL::TimeToText(Net_BestTime, True);
			if(PlayerTime == "" || PlayerTime == "???") PlayerTime = "--:--.--";
			Label_PlayerTime.Value = PlayerTime;
		}
		
		
		// FREEWHEEL STATE
		
		declare IsFreeWheel 	= GUIPlayer.FreeWheelingDuration > 0;
		declare IsAnimBackOn	= !IsFreeWheel && Now < M_TriggerFreewheel + C_FREEWHEEL_BACKON_DURATION;
		
		if(M_PrevIsFreeWheel != IsFreeWheel)
		{
			M_PrevIsFreeWheel 		= IsFreeWheel;
			Quad_EngineOff.Visible 	= IsFreeWheel;
			M_TriggerFreewheel 		= Now;
			
			if(M_PrevIsFreeWheel)
				M_SoundIsFreewheel.Play();
			else
				M_SoundIsFreewheel.Stop();
		}
		
		Quad_EngineOn.Visible = IsAnimBackOn;
		
		if(IsFreeWheel) 
			Quad_EngineOff.Opacity = C_FREEWHEEL_OPACITY * G_FadeOpacity * (0.5 + ML::Sin(Now * C_FREEWHEEL_SIN_SPEED_OFF)*0.5);
		else 
		if(IsAnimBackOn)
			Quad_EngineOn .Opacity = C_FREEWHEEL_OPACITY * G_FadeOpacity * (0.5 + ML::Sin(Now * C_FREEWHEEL_SIN_SPEED_ON)*0.5);
		
		// FEEDBACK : DRIFT SOUND
		
		if(!Net_IsPauseMenuEnabled && IsRunning && DriftDuration > 500)
		{
			declare PitchRatio 	= DriftDistance / 125.;
			declare MinPitch	= 0.5;
			M_SFX_Rise.VolumedB = {{{Volumes::GetVolumedB("SFXRise")}}};
			M_SFX_Rise.Play();
			M_SFX_Rise.Pitch = MinPitch + PitchRatio;
		}
		else
		{
			M_SFX_Rise.Stop();
		}

		// FEEDBACK : DRIFT && JUMP LABEL
		declare CounterPosX		= -74.;
		declare CounterPosY		=  147.;
		declare DriftVisibility = IsRunning && (DriftDuration > 500 || DriftDistance > 50);
		declare DriftPos 		= <-{{{_PosXRatio}}}*CounterPosY, CounterPosX, 3.>;
		declare JumpVisibility 	= IsRunning && (JumpDuration > 500 || (JumpDistance > 50 && JumpDuration > 0)) && (GUIPlayer.InWaterDuration < 500);
		declare JumpPos 		= <-{{{_PosXRatio}}}*CounterPosY, CounterPosX+25, 3.>;
		declare HeightVisibility = IsRunning && JumpVisibility && (CarHeight > 1000);
		
		
		//CB : Si on est sur PC et une partie privée, on affiche pas le drift
		if(!(Net_IsServerPrivate && (SystemPlatform == CManiaApp::ESystemPlatform::Steam || SystemPlatform != CManiaApp::ESystemPlatform::UPlay))) {
		// if(True) {
			UpdateCounter(Frame_DriftInfo, 	Label_DriftTitle, 	Label_DriftValue, 	DriftDistance, DriftVisibility, DriftPos, 1.);
			UpdateCounter(Frame_JumpInfo, 	Label_JumpTitle, 	Label_JumpValue, 	JumpDistance,  JumpVisibility,  JumpPos,  1.);
			UpdateCounter(Frame_HeightInfo, Label_HeightTitle, 	Label_HeightValue, 	CarHeight,  HeightVisibility,  DriftPos,  1.);
		}
		
		/////////////////////////////////
		// SOUND WHEN CAR IS FYLING (WIND)
		if(!Net_IsPauseMenuEnabled && JumpVisibility)
		{
			if(!M_SoundIsFlying.IsPlaying)
				M_SoundIsFlying.Play(); 
			
			if(M_SoundIsFlyingDesiredVolume < {{{Volumes::GetVolume("StateFlying")}}})
			{
				M_SoundIsFlyingDesiredVolume += Period * 0.0009;
				if(M_SoundIsFlyingDesiredVolume > {{{Volumes::GetVolume("StateFlying")}}})
					M_SoundIsFlyingDesiredVolume = {{{Volumes::GetVolume("StateFlying")}}};
			}
		}
		else
		{
			if(M_SoundIsFlyingDesiredVolume > 0. && !Net_IsPauseMenuEnabled)
			{
				M_SoundIsFlyingDesiredVolume -= Period * 0.0009;
				if(M_SoundIsFlyingDesiredVolume < 0.)
					M_SoundIsFlyingDesiredVolume = 0.;
			}
			else
			{
				if(M_SoundIsFlying.IsPlaying) 
					M_SoundIsFlying.Stop(); 
			}
		}
		
		if(M_SoundIsFlying.IsPlaying)
		{	
			M_SoundIsFlying.Volume = M_SoundIsFlyingDesiredVolume;
			M_SoundIsFlying.Pitch = AL::Ease("Linear", SpeedValue*1., 0.5, 1., 350.);
		}
		
		/////////////////////////////////
		// MESSAGE
		
		
		if(M_PrevTriggerMessage != M_TriggerMessage)
		{
			if(Now >= M_TriggerMessage)
			{
				M_PrevTriggerMessage = M_TriggerMessage;
				if(M_MessageSound != "") 
				{
					PlayVoiceSound("{{{SOUNDPATH_VOICES}}}"^M_MessageSound, {{{Volumes::GetVolumedB("VoiceMessage")}}});
					// PlayVideoQuad(Quad_MessageVideo, C_MESSAGE_DURATION_SCROLL);
					Video_BgAnim.Stop();
					Video_BgAnim.Play();
				}
			}
		}
		
		/////////////////////////////////
		// TURBO VISIBILITY AND BLINK      
		
		if(GUIPlayer.EngineTurboRatio > 0)
		{
			// log(" : "^0.5 + 0.5 * (1.-GUIPlayer.EngineTurboRatio));
			Quad_Turbo.Visible = True;
			Quad_Turbo.Opacity = {{{C_WHITE_OPACITY}}} * (0.5 + 0.5 * ML::Sin(Now * {{{C_TURBO_ANIM_BLINKSPEED}}}));
		}
		else
		{
			Quad_Turbo.Visible = False;
		}
		
		/////////////////////////////////
		// MAIN UPDATE (ALTERNATED)      
		
		M_SwitchUpdateAlternate = !M_SwitchUpdateAlternate;
		if(M_SwitchUpdateAlternate) // UPDATE : A-SIDE
		{
			// Label_LapCurrent	.Value 		= CurrentNbLapsToText;
			// Label_LapMax		.Value 		= MapNbLapsToText;
			// Frame_ModeScore		.Visible 	= Map.TMObjective_IsLapRace && GUIPlayer.RaceState != CTmMlPlayer::ERaceState::BeforeStart;
			// Frame_ModeScore		.Visible 	= GUIPlayer.RaceState != CTmMlPlayer::ERaceState::BeforeStart;

			if(M_PrevSpeedValue != SpeedValue || M_ResetGaugeNeeded) 
			{
				if(!GUIPlayer.InputIsBraking && M_PrevSpeedValue <= 5 && SpeedValue > 5) 
				{ 
					Quad_SpeedEffect.Scale = 1.;
					PlayVideoQuad(Quad_SpeedEffect, 1500, "{{{VIDEOPATH^VIDEO_SPEEDSTEP}}}"); 
					M_SoundSpeedEffect.Stop();
					Audio.PlaySoundEvent(M_SoundSpeedEffect, {{{Volumes::GetVolumedB("SpeedEffectStart")}}}, 0);
					
					// Video_BgAnim.Stop();
					// Video_BgAnim.Play();
				}  
				M_PrevSpeedValue = SpeedValue;
				
				
				
				// SPEED COUNTER : LABEL
			
				declare Text SpeedToText = TL::ToText(SpeedValue);
				
				if	(SpeedValue < 100) 	
				{
					if (SpeedValue < 10) 	SpeedToText = "00"^	SpeedToText;
					else 					SpeedToText = "0"^	SpeedToText;
				}
				
				Label_Speed.Value = SpeedToText;
				
				
				
				// SPEED COUNTER : GAUGE
				
				M_GaugeRatio = SpeedValue / {{{C_SPEED_FULLCIRCLEVALUE}}};
				
				if(M_GaugeRatioPersistent < M_GaugeRatio)
				{
					M_LatestUpGaugeRatio 		= Now;
					M_GaugeRatioPersistent 		= M_GaugeRatio;
				}
				else
				{
					declare CurrTime = Now - M_LatestUpGaugeRatio;
					if(CurrTime >= {{{C_GAUGEPERSISTENT_FADEDURATION}}})
					{
						M_LatestUpGaugeRatio  	= Now;
						M_GaugeRatioPersistent 	= M_GaugeRatio;
					}		
				}
				
				SetGauges(Quad_GaugeLeft, Quad_GaugeRight, M_GaugeRatio);
				
				if(M_PrevGaugeRatioPersistent != M_GaugeRatioPersistent || M_ResetGaugeNeeded) {
					M_PrevGaugeRatioPersistent = M_GaugeRatioPersistent;
					if(M_ResetGaugeNeeded) M_GaugeRatioPersistent = 0.;
					SetGauges(Quad_GaugePersistentLeft, Quad_GaugePersistentRight, 	M_GaugeRatioPersistent);
				}
				
				M_ResetGaugeNeeded = False;
			}
			
			
			
			if (UI != Null && M_PrevUIStatus != UI.UIStatus) 
			{
				M_PrevUIStatus = UI.UIStatus;
				switch (UI.UIStatus) 
				{
					case CUIConfig::EUIStatus::Warning	: Label_Chrono.TextColor = <1., 0., 0.>;
					case CUIConfig::EUIStatus::Error	: Label_Chrono.TextColor = <1., 0., 0.>;
					case CUIConfig::EUIStatus::Official	: Label_Chrono.TextColor = <0., 0., 0.>;
					default								: Label_Chrono.TextColor = <1., 1., 1.>;
				}
			}
			
			if(IsRunning && !CpVisibility)
			{
				if(GUIPlayer.CurRace != Null) Label_Chrono.Value = GetTimeToText(GUIPlayer.CurRace.Time);
			}
		}
		else // UPDATE : B-SIDE
		{
		
			// GAUGE COLOR SETTING
			
			declare GaugeColorUpdate = False;
			if(M_GaugeRatio > M_LatestGaugeRatioStep + 0.25 || M_GaugeRatio < M_LatestGaugeRatioStep)
			{
				declare Real GaugeHue;
				if		(M_GaugeRatio >= 0. 	&& M_GaugeRatio < 0.25) { M_LatestGaugeRatioStep = 0.00; GaugeHue = 0.00; 	}
				else if	(M_GaugeRatio >= 0.25 	&& M_GaugeRatio < 0.5) 	{ M_LatestGaugeRatioStep = 0.25; GaugeHue = 0.05;	}		
				else if	(M_GaugeRatio >= 0.5 	&& M_GaugeRatio < 0.75) { M_LatestGaugeRatioStep = 0.50; GaugeHue = 0.1;	}	
				else if	(M_GaugeRatio >= 0.75 	&& M_GaugeRatio < 1.) 	{ M_LatestGaugeRatioStep = 0.75; GaugeHue = 0.15;	}
				else if	(M_GaugeRatio >= 1.		&& M_GaugeRatio < 1.25) { M_LatestGaugeRatioStep = 1.00; GaugeHue = 0.3;	}
				else if	(M_GaugeRatio >= 1.25	&& M_GaugeRatio < 1.5) 	{ M_LatestGaugeRatioStep = 1.25; GaugeHue = 0.4;	}
				else if	(M_GaugeRatio >= 1.5	&& M_GaugeRatio < 1.75) { M_LatestGaugeRatioStep = 1.50; GaugeHue = 0.5;	}
				else if	(M_GaugeRatio >= 1.75	&& M_GaugeRatio < 2.) 	{ M_LatestGaugeRatioStep = 1.75; GaugeHue = 0.6;	}
				else if	(M_GaugeRatio >= 2.		&& M_GaugeRatio < 2.25) { M_LatestGaugeRatioStep = 2.00; GaugeHue = 0.7;	}
				else if	(M_GaugeRatio >= 2.25	&& M_GaugeRatio <= 2.5) { M_LatestGaugeRatioStep = 2.25; GaugeHue = 0.8;	}
				M_GaugeColor 		= ToRGB(<GaugeHue, 1., 1.>);
				
				declare Vec3 UI_GaugeColor for UI;
				UI_GaugeColor = M_GaugeColor;
				
				GaugeColorUpdate 	= True;
			}
			
			
			
			// GAUGE ANIMATION TRIGGER
			
			if(ML::FloorInteger(M_PrevGaugeRatioAnim) != ML::FloorInteger(M_GaugeRatio)) 
			{ 
				M_TriggerAnim = Now; 
				if(ML::FloorInteger(M_PrevGaugeRatioAnim) < ML::FloorInteger(M_GaugeRatio)) 
				{
					Quad_SpeedEffect.Scale = 1.37;
					PlayVideoQuad(Quad_SpeedEffect, 1500, "{{{VIDEOPATH^VIDEO_SPEEDSTEP}}}");
					M_SoundSpeedEffect.Stop();
					Audio.PlaySoundEvent(M_SoundSpeedEffect, {{{Volumes::GetVolumedB("SpeedEffect")}}}, 0);
					// Video_BgAnim.Stop();
					// Video_BgAnim.Play();
				}
				M_PrevGaugeRatioAnim = M_GaugeRatio; 
			}	

			CheckToPlayAnimScaleTo("ElasticOut", Frame_SpeedGauge, 	M_TriggerAnim, 0.5, 1., 750);
			
			// GAUGE PERSISTENT FADE OUT : OPACITY VALUE			
			declare Real QuadOpacity = {{{C_GAUGEPERSISTENT_OPACITY}}};
			if(M_GaugeRatioPersistent != M_GaugeRatio)
			{
				declare CurrTime = Now - M_LatestUpGaugeRatio;
				if(M_GaugeRatioPersistent >= M_GaugeRatio && CurrTime < {{{C_GAUGEPERSISTENT_FADEDURATION}}}) 
				{
					QuadOpacity = (1. - CurrTime*1. / {{{1.* C_GAUGEPERSISTENT_FADEDURATION}}}) * {{{C_GAUGEPERSISTENT_OPACITY}}};
				}
				else
				{
					QuadOpacity = 0.;
				}
			}
			
			
			
			// GAUGE COLOR, AND PERSISTENT FADE OUT
			
			if(GaugeColorUpdate || QuadOpacity != -1.) 
			{
				foreach(I => Quad_Persistent in Quad_GaugePersistent) 
				{
					if(GaugeColorUpdate)
					{
						Quad_Gauge[I]	.Colorize 	= M_GaugeColor;
						Quad_Persistent	.Colorize 	= M_GaugeColor;
					}
					Quad_Gauge[I]		.Opacity 	= 1. 			* G_FadeOpacity; 
					Quad_Persistent		.Opacity 	= QuadOpacity 	* G_FadeOpacity; 
				}
				Quad_SpeedEffect.Colorize = M_GaugeColor;
				// Quad_Turbo		.Colorize = M_GaugeColor;
			}
		}
	}
}
--></script>""";
	return ML;
}

Text Private_GetML321Go() 
{
	// EG
	// Alors
	// le Frame_321Go contient en fait les images "Glow"
	// le Frame_321GoNormal contient les images "normales" du 3, 2, 1 go (GO x 2 pour l'effet de clignottement)
	declare Text ML =
	"""
	<framemodel id="Framemodel_321Go">
		<quad id="Quad_3" 	posn="0 0 .1" 	sizen="{{{C_INTRO_QUAD_SIZE}}} 		{{{C_INTRO_QUAD_SIZE}}}" image="{{{IMGPATH^IMG_INTRO_GLOW_3}}}" 	opacity="{{{C_INTRO_QUAD_OPACITY}}}" {{{hC}}} {{{vC}}} />
		<quad id="Quad_2" 	posn="0 0 .1" 	sizen="{{{C_INTRO_QUAD_SIZE}}} 		{{{C_INTRO_QUAD_SIZE}}}" image="{{{IMGPATH^IMG_INTRO_GLOW_2}}}" 	opacity="{{{C_INTRO_QUAD_OPACITY}}}" {{{hC}}} {{{vC}}} />
		<quad id="Quad_1"  	posn="0 0 .1" 	sizen="{{{C_INTRO_QUAD_SIZE}}} 		{{{C_INTRO_QUAD_SIZE}}}" image="{{{IMGPATH^IMG_INTRO_GLOW_1}}}" 	opacity="{{{C_INTRO_QUAD_OPACITY}}}" {{{hC}}} {{{vC}}} />
		<quad id="Quad_GoHead"  posn="0 0 .1" 	sizen="{{{C_INTRO_QUAD_SIZE*2.}}} 	{{{C_INTRO_QUAD_SIZE}}}" image="{{{IMGPATH^IMG_INTRO_GLOW_GO}}}" opacity="{{{C_INTRO_QUAD_OPACITY_NORMAL}}}" {{{hC}}} {{{vC}}} />
		<quad id="Quad_GoTail"  posn="0 0 .1" 	sizen="{{{C_INTRO_QUAD_SIZE*2.}}} 	{{{C_INTRO_QUAD_SIZE}}}" image="{{{IMGPATH^IMG_INTRO_GLOW_GO}}}" opacity="{{{C_INTRO_QUAD_OPACITY_NORMAL}}}" {{{hC}}} {{{vC}}} />
	</framemodel>
	<frame id="Frame_321GoVisible">
		<frameinstance id="Frame_321GoNormal" 	posn="{{{C_INTRO_POSX}}} {{{C_INTRO_POSY}}} 10." hidden="1" modelid="Framemodel_321Go" />
		<frameinstance id="Frame_321Go" 		posn="{{{C_INTRO_POSX}}} {{{C_INTRO_POSY}}} 9." hidden="1" modelid="Framemodel_321Go" />
	</frame>
	<script><!--
	
	{{{Manialink::GetIncludes()}}}
	#Const DebugName  "L_321Go"
	{{{Manialink::Load("GameTime")}}}
	
	{{{Volumes::GetPlayVoiceSoundML()}}}
	
	
	main() 
	{
		declare netread Integer LibTMC_321Go_TriggerAnim 		for UI;
		declare netread Integer LibTMC_321Go_TriggerCancelAnim 	for UI;

		declare Frame_321GoVisible <=> (Page.GetFirstChild("Frame_321GoVisible") as CMlFrame);
		
		declare CMlFrame	Frame_321Go 		<=> (Page.GetFirstChild("Frame_321Go") 			as CMlFrame);
		declare CMlFrame	Frame_321GoNormal 	<=> (Page.GetFirstChild("Frame_321GoNormal") 	as CMlFrame);
		
		declare CMlQuad 	Quad_3 				<=> (Frame_321Go.GetFirstChild("Quad_3") 		as CMlQuad);
		declare CMlQuad 	Quad_2 				<=> (Frame_321Go.GetFirstChild("Quad_2") 		as CMlQuad);
		declare CMlQuad 	Quad_1 				<=> (Frame_321Go.GetFirstChild("Quad_1") 		as CMlQuad);
		declare CMlQuad 	Quad_GoHead 			<=> (Frame_321Go.GetFirstChild("Quad_GoHead") 		as CMlQuad);
		declare CMlQuad 	Quad_GoTail 			<=> (Frame_321Go.GetFirstChild("Quad_GoTail") 		as CMlQuad);
		
		declare CMlQuad 	Quad_3Normal 		<=> (Frame_321GoNormal.GetFirstChild("Quad_3") 	as CMlQuad);
		declare CMlQuad 	Quad_2Normal 		<=> (Frame_321GoNormal.GetFirstChild("Quad_2") 	as CMlQuad);
		declare CMlQuad 	Quad_1Normal 		<=> (Frame_321GoNormal.GetFirstChild("Quad_1") 	as CMlQuad);
		declare CMlQuad 	Quad_GoNormalHead 		<=> (Frame_321GoNormal.GetFirstChild("Quad_GoHead") as CMlQuad);
		declare CMlQuad 	Quad_GoNormalTail 		<=> (Frame_321GoNormal.GetFirstChild("Quad_GoTail") as CMlQuad);
		
		declare CMlQuad[]	Quads 		= [Quad_3,  Quad_2, Quad_1, Quad_GoHead, Quad_GoTail];
		
		
		foreach(Quad in Quads) Quad.Blend = CMlQuad::EBlendMode::Add;
		
		Quad_3Normal		.ImageUrl 	= "{{{IMGPATH^IMG_INTRO_3}}}";
		Quad_2Normal		.ImageUrl 	= "{{{IMGPATH^IMG_INTRO_2}}}";
		Quad_1Normal		.ImageUrl 	= "{{{IMGPATH^IMG_INTRO_1}}}";
		Quad_GoNormalHead	.ImageUrl 	= "{{{IMGPATH^IMG_INTRO_GO}}}";
		Quad_GoNormalTail	.ImageUrl 	= "{{{IMGPATH^IMG_INTRO_GO2}}}";
		
		Frame_321Go			.Visible 	= False;
		Frame_321GoNormal	.Visible 	= False;
		
		Quad_3Normal.Visible = False;
		Quad_2Normal.Visible = False;
		Quad_1Normal.Visible = False;
		declare Countries = [
		 "ara"
		,"eng"
		,"fra"
		,"ger"
		,"ner"
		,"por"
		,"ita"
		,"jap"
		,"kor"
		,"rus"
		,"spa"
		// ,"swe"
		// ,"tur"
		];
		declare SoundRace3 		= Audio.CreateSound("{{{SOUNDPATH^SOUND_RACE_3}}}", 			{{{Volumes::GetVolumedB("VoiceRace321Go")}}}, False, False, False);
		declare SoundRace2 		= Audio.CreateSound("{{{SOUNDPATH^SOUND_RACE_2}}}", 			{{{Volumes::GetVolumedB("VoiceRace321Go")}}}, False, False, False);
		declare SoundRace1 		= Audio.CreateSound("{{{SOUNDPATH^SOUND_RACE_1}}}", 			{{{Volumes::GetVolumedB("VoiceRace321Go")}}}, False, False, False);
		declare SoundRaceGo 	= Audio.CreateSound("{{{SOUNDPATH^SOUND_RACE_GO}}}", 			{{{Volumes::GetVolumedB("VoiceRace321Go")}}}, 	False, False, False);
		
		declare CAudioSource[][] SoundsRaceAll;
		foreach(Country in Countries)
		{
			declare CAudioSource[] Sounds;
			Sounds.add(Audio.CreateSound("{{{SOUNDPATH}}}Race321Go/"^Country^"-{{{SOUND_RACE_3}}}", {{{Volumes::GetVolumedB("VoiceRace321")}}}, False, False, False));
			Sounds.add(Audio.CreateSound("{{{SOUNDPATH}}}Race321Go/"^Country^"-{{{SOUND_RACE_2}}}", {{{Volumes::GetVolumedB("VoiceRace321")}}}, False, False, False));
			Sounds.add(Audio.CreateSound("{{{SOUNDPATH}}}Race321Go/"^Country^"-{{{SOUND_RACE_1}}}", {{{Volumes::GetVolumedB("VoiceRace321")}}}, False, False, False));
			Sounds.add(Audio.CreateSound("{{{SOUNDPATH}}}Race321Go/"^Country^"-{{{SOUND_RACE_GO}}}", {{{Volumes::GetVolumedB("VoiceRaceGo")}}}, False, False, False));
			SoundsRaceAll.add(Sounds);
		}
		
		declare SoundsRace 		= [SoundRace3, SoundRace2, SoundRace1, SoundRaceGo];
		declare Integer Anim_321GoEnd 	= -1;
		declare Integer StepDuration 	= 920;
		declare Integer TimerGo			= 0;
		
		declare Integer WhichSec 		= 3;
		declare Integer PreWhichSec		= -1; ///< Not 3 or we do not play the first "3" sound
		
		declare netread Integer 	Net_SplitscreenMode 	for UI;
		declare			 Integer 	Pre_SplitscreenMode 	for UI;
		Pre_SplitscreenMode = -1;
		
		// Randomize first 321Go sounds
		if (SoundsRaceAll.count > 0) SoundsRace = SoundsRaceAll[ML::Rand(0, SoundsRaceAll.count-1)];

		declare PrevUISequence = CUIConfig::EUISequence::None;
		
		while (True) 
		{
			yield;
			LibManialink_AnimLoop();

			if (PrevUISequence != UI.UISequence) {
				PrevUISequence = UI.UISequence;
				if (UI.UISequence == CUIConfig::EUISequence::Podium) {
					Frame_321GoVisible.Visible = False;
				} else {
					Frame_321GoVisible.Visible = True;
				}
			}

			if(GUIPlayer == Null) continue;

			if(Pre_SplitscreenMode != Net_SplitscreenMode) {
				if(Net_SplitscreenMode > 1) {
					Frame_321GoNormal.RelativePosition.Z 	= 40.;
					Frame_321Go.RelativePosition.Z 			= 39.;
				} else {
					Frame_321GoNormal.RelativePosition.Z 	= 10.;
					Frame_321Go.RelativePosition.Z 			= 9.;
				}
				Pre_SplitscreenMode = Net_SplitscreenMode;
			}
			
			if(GUIPlayer != Null && GameTime < GUIPlayer.RaceStartTime && GUIPlayer.RaceStartTime != -1) {
				Quad_GoTail			.Visible = False;
				Quad_GoHead			.Visible = False;
				Frame_321GoNormal	.Visible = True;
				Quad_GoNormalHead.Visible = False;
				Quad_GoNormalTail.Visible = False;

				// At least 500ms before the "go" to say "one"
				if (GUIPlayer.RaceStartTime - GameTime > 500 && GUIPlayer.RaceStartTime - GameTime <= 1000) {
					Quad_3Normal.Visible = False;
					Quad_2Normal.Visible = False;
					Quad_1Normal.Visible = True;
					Quad_1Normal.Opacity = 1.;
					
					WhichSec = 1;
					
					if(PreWhichSec != WhichSec) {
						declare Volume = {{{Volumes::GetVolumedB("VoiceRace321")}}};
						PlayVoiceSound(SoundsRace[2], Volume, 100);
						PreWhichSec = WhichSec;
					}
				} else if (GUIPlayer.RaceStartTime - GameTime > 1500 && GUIPlayer.RaceStartTime - GameTime <= 2000) {
					Quad_3Normal.Visible = False;
					Quad_2Normal.Visible = True;
					Quad_3Normal.Visible = False;
					Quad_2Normal.Opacity = 1.;
					
					WhichSec = 2;
					
					if(PreWhichSec != WhichSec) {
						declare Volume = {{{Volumes::GetVolumedB("VoiceRace321")}}};
						PlayVoiceSound(SoundsRace[1], Volume, 100);
						PreWhichSec = WhichSec;
					}
				} else if (GUIPlayer.RaceStartTime - GameTime > 2500 && GUIPlayer.RaceStartTime - GameTime <= 3000) {
					Quad_3Normal.Visible = True;
					Quad_2Normal.Visible = False;
					Quad_1Normal.Visible = False;
					Quad_3Normal.Opacity = 1.;
					
					WhichSec = 3;
					
					if(PreWhichSec != WhichSec) {
						SoundsRace = SoundsRaceAll[ML::Rand(0, SoundsRaceAll.count-1)];
						declare Volume = {{{Volumes::GetVolumedB("VoiceRace321")}}};
						PlayVoiceSound(SoundsRace[0], Volume, 100);
						PreWhichSec = WhichSec;
					}
				}
			} else if(GUIPlayer != Null && GUIPlayer.RaceState == CTmMlPlayer::ERaceState::Running) {
			
				Anim_321GoEnd = Now;
				WhichSec = 0;
					
				if(PreWhichSec != WhichSec) {
					declare Volume = {{{Volumes::GetVolumedB("VoiceRaceGo")}}};
					PlayVoiceSound(SoundsRace[3], Volume, 100);
					PreWhichSec = WhichSec;
					TimerGo = Now + 1000;
				}
				
				if(Now < TimerGo) {
					Quad_1Normal.Visible = False;
					Quad_1Normal.Opacity = 1.;
					Quad_GoNormalTail.Opacity = 1.;
					if(Anim_321GoEnd > 0 && Now > (Anim_321GoEnd - StepDuration + 100)) { // petit delta
						declare Alternate = ML::Sin(Now*0.06) >= 0;
						if(Alternate) {
							Quad_GoNormalHead.Visible = True;
							Quad_GoNormalTail.Visible = False;
							
						} else {
							Quad_GoNormalHead.Visible = False;
							Quad_GoNormalTail.Visible = True;
						}
					}
				} else {
					Frame_321GoNormal	.Visible = False;
				}
			} else {
				Quad_GoTail			.Visible = False;
				Quad_GoHead			.Visible = False;
				Frame_321GoNormal	.Visible = False;
			}
		}
	}
	--></script>
	""";
	
	return ML;
}

Void Load() 
{
	////////////////////////////////////////
	// INITS                                
	// G_Mode 					   <=> _Mode;
	// G_ModeName 					= _ModeName;
	G_SpawnDuration				= 3000;
	G_FontTitle 				= Font::GetFontName("Title");
	G_FontMain 					= Font::GetFontName("Main");
	G_FontMainSmall 			= Font::GetFontName("MainSmall");
	G_FontChrono 				= Font::GetFontName("Chrono");
	G_FontNumberBig				= Font::GetFontName("NumberBig");
	
	Layers::Create("LastDeviceUsed", UILastDeviceUsed::GetMl());
	Layers::Attach("LastDeviceUsed");
	Layers::Create(C_LAYERNAME_UI, 	Private_GetMLRace(1., 1.));
	Layers::Attach(C_LAYERNAME_UI);
	Layers::Create(C_LAYERNAME_UICHEATCODE, UICheatCode::Private_GetCheatCodeML(1., 1., 1.));
	Layers::Attach(C_LAYERNAME_UICHEATCODE);
	Layers::Create(C_LAYERNAME_321GO, Private_GetML321Go());
	Layers::Attach(C_LAYERNAME_321GO);
	UIButtons::Load();
}
