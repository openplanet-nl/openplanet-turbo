/** 
 *	UILast Device Used
 */
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt" 								as Colors
#Include "Libs/Openplanet/UIPadButtons.Script.txt"									as UIButtons
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt" 							as Font
 
#Const C_ImgBaseManialinksButton			"file://Media/Manialinks/Common/PadButtons/PC/"

#Const C_LengthX 	21.0
#Const C_LengthY	6.87

#Const C_MinimumSpace 2.0		

declare Text[][Text] G_ButtonBindableCode;

Text GetRespawnKeyCode() {
	return "Respawn";
}

Text GetRestartKeyCode() {
	return "Restart";
}

Text GetMusicBoostKeyCode() {
	return "MusicBoost";
}

Text GetTurboKeyCode() {
	return "Turbo";
}

Text GetAccelerateButton() {
	return "Accelerate";
}

Text GetPitchPlusButton() {
	return "PitchPlus";
}

Text GetPitchMinusButton() {
	return "PitchMinus";
}

Text GetYawPlusButton() {
	return "YawPlus";
}

Text GetYawMinusButton() {
	return "YawMinus";
}

Text GetRollPlusButton() {
	return "RollPlus";
}

Text GetRollMinusButton() {
	return "RollMinus";
}

Text GetChargeJumpButton() {
	return "ChargeJump";
}

Text GetJumpButton() {
	return "Jump";
}

Text GetOnlinePingButton() {
	return "OnlinePing";
}

Text GetUseBonusButton() {
	return "UseBonus";
}

Text GetMirrorButton() {
	return "Mirror";
}

Text InjectInManialink(Text _LayerName, Text _KeyCode, Vec3 _Position, Real _Size) {
	if(!G_ButtonBindableCode.existskey(_LayerName)) G_ButtonBindableCode[_LayerName] = Text[];
	
	if (!G_ButtonBindableCode[_LayerName].exists(_KeyCode)) G_ButtonBindableCode[_LayerName].add(_KeyCode);
	declare FontTitle 				= Font::GetFontName("Title");
	declare FontMain 				= Font::GetFontName("Main");
	declare FontMainSmall 			= Font::GetFontName("MainSmall");
	declare FontChrono 				= Font::GetFontName("Chrono");
	declare FontNumberBig			= Font::GetFontName("NumberBig");
	
	declare MLText =
	"""
		<frame id="Frame_BindableButton_{{{_KeyCode}}}" posn="{{{_Position.X}}} {{{_Position.Y}}} {{{_Position.Z}}}" scale="{{{_Size}}}" clip="True" clipsizen="{{{C_LengthX}}} {{{C_LengthY}}}"   hidden="1">
			<quad id="Quad_BindableButton_{{{_KeyCode}}}" 
				posn="0. 0. 0."
				sizen="{{{C_LengthX}}} {{{C_LengthY}}}" 
				valign="center" 
				halign="center"
				bgcolor="{{{Colors::GetColorXml("Black")}}}"
				opacity="0.8"
			/>
			
			<label id="Label_BindableButton_{{{_KeyCode}}}"
				posn="0. 0.2 0."
				sizen="{{{C_LengthX-1.5}}} {{{C_LengthY}}}"
				text=""
				valign="center"
				halign="center"
				autonewline="0"
				textsize="3.5"
				textfont="{{{FontMainSmall}}}"
			/>
			
			<label id="Label_BindableButton_{{{_KeyCode}}}_2"
				posn="0. 0.2 0."
				sizen="{{{C_LengthX}}} {{{C_LengthY}}}"
				text=""
				valign="center"
				halign="center"
				autonewline="0"
				textsize="3.5"
				textfont="{{{FontMainSmall}}}"
				hidden="1"
			/>
			
		</frame>
	""";
	return MLText;
}

Text InjectInGlobals() { 
	declare MLText =
	"""
		declare CMlLabel[Text] 	G_MyBindableLabels;
		declare CMlLabel[Text] 	G_MyBindableLabels2;
		declare CMlQuad[Text]	G_MyBindableQuads;
		declare CMlFrame[Text]	G_MyBindableButtonFrame;
		declare Text[]			G_BindableKeys;
		declare Integer			G_LastBindableKeyUpdate;
	""";
	return MLText;
}

Text InjectInInit(Text _LayerName) {
	declare MLText =
	"""
		G_MyBindableLabels.clear();
		G_MyBindableLabels2.clear();
		G_BindableKeys.clear();
		G_MyBindableButtonFrame.clear();
		G_MyBindableQuads.clear();
		
		declare CInputManager::EButton[Text] KeyButtonToButton;
		KeyButtonToButton["Respawn"] 		= CInputManager::EButton::Y;
		KeyButtonToButton["Restart"] 		= CInputManager::EButton::B;
		KeyButtonToButton["Accelerate"] 	= CInputManager::EButton::X;
		KeyButtonToButton["Brake"] 			= CInputManager::EButton::A;
		KeyButtonToButton["MusicBoost"] 	= CInputManager::EButton::View;
		KeyButtonToButton["Turbo"] 			= CInputManager::EButton::L1;
		KeyButtonToButton["PitchPlus"] 		= CInputManager::EButton::LeftStick_Up;
		KeyButtonToButton["PitchMinus"] 	= CInputManager::EButton::LeftStick_Down;
		KeyButtonToButton["YawPlus"] 		= CInputManager::EButton::LeftStick_Right;
		KeyButtonToButton["YawMinus"] 		= CInputManager::EButton::LeftStick_Left;
		KeyButtonToButton["RollPlus"] 		= CInputManager::EButton::RightStick_Right;
		KeyButtonToButton["RollMinus"] 		= CInputManager::EButton::RightStick_Left;
		KeyButtonToButton["OnlinePing"] 	= CInputManager::EButton::LeftStick;
		KeyButtonToButton["ChargeJump"] 	= CInputManager::EButton::RightStick_Down;
		KeyButtonToButton["Jump"] 			= CInputManager::EButton::RightStick_Up;
		KeyButtonToButton["UseBonus"] 		= CInputManager::EButton::L1;
		KeyButtonToButton["Mirror"] 		= CInputManager::EButton::Down;
	""";
	
	if(G_ButtonBindableCode.existskey(_LayerName)) {
		foreach(KeyCode in G_ButtonBindableCode[_LayerName]) {
			MLText ^= """
				G_MyBindableButtonFrame["{{{KeyCode}}}"]	<=> (Page.GetFirstChild("Frame_BindableButton_{{{KeyCode}}}") as CMlFrame);
				G_MyBindableLabels["{{{KeyCode}}}"] 		<=> (Page.GetFirstChild("Label_BindableButton_{{{KeyCode}}}") as CMlLabel);
				G_MyBindableLabels2["{{{KeyCode}}}"] 		<=> (Page.GetFirstChild("Label_BindableButton_{{{KeyCode}}}_2") as CMlLabel);
				G_MyBindableQuads["{{{KeyCode}}}"] 			<=> (Page.GetFirstChild("Quad_BindableButton_{{{KeyCode}}}") as CMlQuad);
				G_BindableKeys.add("{{{KeyCode}}}");
			""";
		}
	}
	MLText ^=
	"""
		foreach(KeyCode in G_BindableKeys) {
			declare CMlLabel CurrentBindableLabel = G_MyBindableLabels[KeyCode];
			declare CMlLabel CurrentBindableLabel2 = G_MyBindableLabels2[KeyCode];
			CurrentBindableLabel2.RelativePosition.X = CurrentBindableLabel.RelativePosition.X + (CurrentBindableLabel.ComputeWidth(CurrentBindableLabel.Value));
		}
		
		declare Boolean IsInit = False;
		declare CInputPad PlayerPad;
		if(Input.Pads.existskey(0)) {
			PlayerPad = Input.Pads[0];
		}
	""";
	return MLText;
}

Text InjectInFunctions() {
	declare Text MLText = 
	"""
		Void SetBindableKeysVisible(Text _KeyCode, Boolean _Visible) {
			G_MyBindableButtonFrame[_KeyCode].Visible = _Visible;
		}
		
		Void SetBindableKeysOpacity(Text _KeyCode, Real _Real) {
			G_MyBindableQuads[_KeyCode].Opacity 	= _Real;
			G_MyBindableLabels[_KeyCode].Opacity 	= _Real; 
			G_MyBindableLabels2[_KeyCode].Opacity	= _Real;
		}
	""";
	return MLText;
}

Text InjectInLoop()
{
	declare Text MLText =
	"""
		declare Text KeyName;

		declare Boolean IsSplitscreen = False;		
		declare netread Boolean  BindingPad_IsSplitscreen for UI;
		declare netread Boolean PopupUsed for UI;
		
		if(GUIPlayer != Null && (BindingPad_IsSplitscreen || GUIPlayer.ControllerCount == 2) && !PopupUsed) {
			PlayerPad = Null;
			foreach(Pad in Input.Pads) {
				if(Pad.ControllerId == GUIPlayer.ControllerId0) {
					PlayerPad <=> Pad;
				}
			}
		} else {
			if (Input.PendingEvents.count > 0) {
				PlayerPad <=> Input.PendingEvents[0].Pad;
			} else {
				if(IsInit) {
					PlayerPad = Null;
				}
			}
		}

		if(PlayerPad != Null) {
			foreach(KeyCode in G_BindableKeys) {
				KeyName = Input.GetPadButtonPlaygroundBinding(PlayerPad, KeyButtonToButton[KeyCode]);
				declare KeyNameLength = TL::Length(KeyName);
				declare CMlLabel CurrentBindableLabel = G_MyBindableLabels[KeyCode];
				declare CMlLabel CurrentBindableLabel2 = G_MyBindableLabels2[KeyCode];
				declare Real Offset =  ML::ToReal(Now-G_LastBindableKeyUpdate) / 100.0;
				CurrentBindableLabel.Value 			= KeyName;
				if(KeyNameLength <= 2) {
					G_MyBindableQuads[KeyCode].Size.X = {{{C_LengthX/2}}};
				} else {
					G_MyBindableQuads[KeyCode].Size.X = {{{C_LengthX}}};
				}
			}
			IsInit = True;
		}
		G_LastBindableKeyUpdate = Now;
	""";
	return MLText;
}
