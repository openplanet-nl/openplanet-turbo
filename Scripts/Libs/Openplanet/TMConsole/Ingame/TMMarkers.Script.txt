
#Include "Libs/Openplanet/Layers2.Script.txt" 			as Layers
#Include "Libs/Openplanet/TMConsole/Logger.Script.txt" 	as Logger

#Const C_MaxFrames	64
#Const C_MarkerLayerName	"MarkerLayer"

declare Integer	G_MaxFrames;
declare Ident[]	G_GhostIds;


// TODO : passer par l'ui des joueurs, pas la localpage


Void BuildLayer() {
	declare MLText = 
	"""
	<framemodel id="markermodel" class="markerframe">
		<quad sizen="20 10" bgcolor="f00d" />
		<label id="Label_Player" />
	</framemodel>
	""";
	
	for(IFrame, 0, G_MaxFrames-1) {
		MLText ^= """
		<frameinstance modelid="markermodel" id="FrameMarker{{{IFrame}}}" hidden="1"/>""";
	}
	
	
	MLText ^= """
	<!--
	<frame id="FrameMarker0" >
		<label text="TROLOLO" posn="20 20"/>
	</frame>
	-->
	
	<script><!--
		main() {
			declare CMlLabel Label_Player <=> (Page.GetFirstChild("Label_Player") as CMlLabel);
			
			declare netread Text[]		GhostNamesMarkers 	for UI;
			declare netread Integer		GhostNamesUpdate 	for UI;
			declare Integer		PrevGhostNamesUpdate = -1;
			
			Page.GetClassChildren("markerframe", Page.MainFrame, True);
			declare CMlControl[] MarkerFrames;

			foreach(ControlResult in Page.GetClassChildren_Result) {
				MarkerFrames.add(ControlResult);
			}
			
			while(True) {
				yield;
				
				if(PrevGhostNamesUpdate != GhostNamesUpdate) {
					PrevGhostNamesUpdate = GhostNamesUpdate;
					
					log(""^GhostNamesMarkers);
					
					foreach(Frame in MarkerFrames) {
						Frame.Hide();
					}
					
					declare Integer IFrame = -1;
					foreach(GhostName in GhostNamesMarkers) {
						IFrame += 1;
						declare CMlFrame FrameMarker <=> (Page.GetFirstChild("FrameMarker"^IFrame) as CMlFrame);
						if(FrameMarker == Null) continue;
						
						declare CMlLabel Label_Player <=> (FrameMarker.GetFirstChild("Label_Player") as CMlLabel);
						if(Label_Player == Null) continue;
						
						log(".. SetText: "^GhostName);
						Label_Player.SetText(GhostName);
						FrameMarker.Show();
					}
					
					log("endloop");
				}
			}
		}
	--></script>""";
	
	// Layers::Destroy(C_MarkerLayerName);
	Layers::Create(C_MarkerLayerName , MLText);
	
	// Layers::Create(C_MarkerLayerName , """<frame />""");

	Layers::Attach(C_MarkerLayerName);
	declare CUILayer MarkerLayer <=> Layers::Get(C_MarkerLayerName);
	MarkerLayer.Type = CUILayer::EUILayerType::Markers;
}

Void Load() {
	G_MaxFrames = C_MaxFrames;
	G_GhostIds.clear();
	BuildLayer();
}

/**
 * _MaxFrames est le nombre max de markers qu'on aura dans le jeu.
 * Comme on doit construire le manialink des markers  l'avance avec chaque Frame dcrite, on doit connatre le nombre de manialinkframeid.
 */
Void SetMaxFrames(Integer _MaxFrames) {
	G_MaxFrames = _MaxFrames;
}

Void Init() {
	declare CUIConfig UI = UIManager.GetUI(Players[0]);
	if(UI == Null) return; // HACK : + WARN
	
	declare netwrite Text[] 	GhostNamesMarkers	for UI;
	declare netwrite Integer	GhostNamesUpdate	for UI;
		
	GhostNamesUpdate = Now;
	GhostNamesMarkers.clear();
	G_GhostIds.clear(); // HACK EG :  revoir quand on aura plusieurs joueurs.
}


Void BuildXML() {
	declare CUIConfig UI = UIManager.GetUI(Players[0]);
	if(UI == Null) return; // HACK : + WARN
	
	UIManager.UIAll.MarkersXML = "";
	
	declare CUILayer MarkerLayer <=> Layers::Get(C_MarkerLayerName);
	if(MarkerLayer == Null) {
		Logger::Warn("BuildXML: Null MarkerLayer");
		return;
	}
	
	Logger::Log(""^G_GhostIds);
	
	declare Integer FrameCounter = -1;
	foreach(PlayerId in G_GhostIds) {
		FrameCounter += 1;
		if(FrameCounter > G_MaxFrames) {
			Logger::Warn("TMMarkers::Build() : Too many markers to build ("^G_GhostIds.count^")");
			break;
		}
		
		UIManager.UIAll.MarkersXML ^= 
			"""<marker manialinkframeid="FrameMarker{{{FrameCounter}}}" playerid="{{{PlayerId}}}" />""";
	}
	
	Logger::Log("UIManager.UIAll.MarkersXML"^UIManager.UIAll.MarkersXML);
}

Void ClearOpponentMarkers() {
	Init();
	BuildXML();
}

Void AddOpponentMarker( Ident _OpponentId, Text _OpponentName) {
	declare CUIConfig UI = UIManager.GetUI(Players[0]);
	if(UI == Null) return; // HACK : + WARN
	
	declare netwrite Text[] 	GhostNamesMarkers	for UI;
	declare netwrite Integer	GhostNamesUpdate	for UI;
	
	if(GhostNamesMarkers.count >= G_MaxFrames) {
		Logger::Warn("AddOpponentMarker: Too many markers to add");
		return;
	}
	
	GhostNamesUpdate = Now;
	
	GhostNamesMarkers.add(_OpponentName);
	G_GhostIds.add(_OpponentId);
	
	BuildXML();
}

Void RemoveOpponentMarker(Ident _OpponentId) {
	declare CUIConfig UI = UIManager.GetUI(Players[0]);
	if(UI == Null) return; // HACK : + WARN
	
	declare netwrite Text[] 	GhostNamesMarkers	for UI;
	declare netwrite Integer	GhostNamesUpdate	for UI;
	
	GhostNamesUpdate = Now;
	
	declare Integer OpponentKey = G_GhostIds.keyof(_OpponentId);
	if(OpponentKey >= 0) {
		G_GhostIds.removekey(OpponentKey);
		GhostNamesMarkers.removekey(OpponentKey);
	}
	
	BuildXML();
}

