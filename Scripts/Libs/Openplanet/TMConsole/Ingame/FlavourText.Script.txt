/**
 * Ce script contient la donnée des textes à intégrer aux modes de jeu.
 **/
#Const ScriptName			"FlavourText.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib



// TODO PERF LATER
// Ci-dessous, on appelle souvent cette fonction avec un tableau pas constant.
// Du coup côté perfs c'est un peu con, mais ça améliore la lisibilité de ce code.
// Si on est à la rue ici (ce dont je doute, puisque ces fonctions sont appellées peu souvent), 
//  on pourra rendre CONST tous ces tableaux.
Text RandomText(Text[] _PossibleChoices) {
	declare Integer NbTexts = _PossibleChoices.count;
	if(NbTexts <= 0) return "";
	
	return _PossibleChoices[MathLib::Rand(0, NbTexts-1)];
}


Text GetArcadeTryAgainTitle() {
	//L16N IMPERATIVE. Title of the final screen where the player hasn't win his race, "you should try again"
	return _("Try Again");
}

Text GetArcadeTryAgainSubTitle() {
	return RandomText([
	_("Sorry! You didn't make it to the leaderboard."),
	_("You've got to push harder to make the board!"),
	_("You need to really put your foot down to make the board!"),
	_("You didn't place on the board. Don't give up!")	
	]);
}

Text GetArcadeCloseTitle() {
	//L16N In the sens "you almost made it!"
	return _("Close!");
}

Text GetArcadeCloseSubTitle() {
	//L16N A subtitle of a game final screen. The player is in the top 10 player of the game
	return _("You didn't quite make the board. Keep going!");
}

Text GetArcadeTop10Title() {
	//L16N A title of a game final screen. The player is in the top 10 player of the game
	return _("Bravo!");
}

Text GetArcadeTop10SubTitle() {
	//L16N A subtitle of a game final screen. The player is in the top 10 player of the game
	return _("You've made it to the Top 10!");
}

Text GetArcadeLeaderTitle() {
	//L16N A title of a game final screen. The player is first
	return _("Pole position!");
}

Text GetArcadeLeaderSubTitle() {
	//L16N A subtitle of a game final screen. The player is first
	return _("You've set the fastest time!");
}

Text GetLocalTeamWinTitle(Text _TeamName) {
	return TextLib::Compose(_("Teams %1 wins!"), _TeamName);
}

Text GetLocalTeamWinSubTitle() {
	return RandomText([
		//L16N This is a celebration when a team of players wins
		_("Group hug!"),
		//L16N This is a celebration when a team of players wins
		_("You are the ruling party!"),
		//L16N This is a celebration when a team of players wins
		_("Congratulations!"),
		//L16N This is a celebration when a team of players wins
		_("Good work!"),
		//L16N This is a celebration when a team of players wins
		_("You're the dominant pack!"),
		//L16N This is a celebration when a team of players wins
		_("You're awesome!"),
		//L16N This is a celebration when a team of players wins
		_("Make some noise!")
	]);
}

Text GetLocalTeamWinRedSubTitle() {
	return RandomText([
		_("Red team rule the roost!"),
		_("The reds reign supreme!"),
		_("Red team are the winners!")
	]);
}

Text GetLocalTeamWinBlueSubTitle() {
	return RandomText([
		_("Blue team takes the win!"),
		_("A clear win for the blues!"),
		_("The blue team bring it home!")
	]);
}

Text GetLocalTeamWinGreenSubTitle() {
	return RandomText([
		_("Green team gets the win!"),
		_("A great win for the greens!"),
		_("Give it up for the greens!")
	]);
}

Text GetLocalTeamWinPurpleSubTitle() {
	return RandomText([
		_("The purple team rule supreme!"),
		_("Purple team are the winners!"),
		_("The purple team take the win!")
	]);
}

Text GetLocalTeamWinPinkSubTitle() {
	return RandomText([
		_("Pink team takes the prize!"),
		_("The pink team are the winners!"),
		_("Pink team have won!")
	]);
}

Text GetLocalTeamWinCyanSubTitle() {
	return RandomText([
		_("Cyan team scoop the win!"),
		_("Cyan team sail to victory!"),
		_("The cyan team are the winners!")
	]);
}

Text GetLocalTeamWinBlackSubTitle() {
	return RandomText([
		_("The black team comes out on top!"),
		_("The black team take the win!"),
		_("The black team are the best!")
	]);
}

Text GetLocalTeamWinWhiteSubTitle() {
	return RandomText([
		_("The white team win!"),
		_("Victory for the white team!"),
		_("White team are the winners!")
	]);
}

Text GetLocalSoloWin(Text _PlayerName) {
	return TextLib::Compose(_("Player %1 wins!"), _PlayerName);
}

Text GetLocalSoloWinSubTitle() {
	return RandomText([
		//L16N This is a celebration when a player wins
		_("Congratulations!"),
		//L16N This is a celebration when a player wins
		_("Leader of the pack!"),
		//L16N This is a celebration when a player wins
		_("Take a bow!"),
		//L16N This is a celebration when a player wins
		_("You're the boss!"),
		//L16N This is a celebration when a player wins
		_("You're the champ!"),
		//L16N This is a celebration when a player wins
		_("Don't forget to gloat!"),
		//L16N This is a celebration when a player wins
		_("You're the fastest!")
	]);
}

Text GetHotSeatOurOfGas() {
	return RandomText([
		_("You're out of gas!"),
		_("No more gas!"),
		_("You've run out of gas!"),
		_("The tank is empty!"),
		_("Your tank's empty!"),
		_("That's it! No more gas!"),
		_("Your gas is gone!"),
		_("You're all out of gas!"),
		_("There's no more in the tank!"),
		_("No more fuel!"),
		_("Out of fuel!")
	]);
}


Text GetHotSeatCallOutLead() {
	return RandomText([
		_("You're the leader!"),
		_("You're in the lead!"),
		_("You're in first place!"),
		_("We have a leader!"),
		_("You've taken the lead!"),
		_("You've got the best time!"),
		_("You have the fastest time!")
	]);
}


Text GetHotSeatCallOutGood() {
	return RandomText([
		_("Pretty good!"),
		_("Nice driving!"),
		_("Good effort!"),
		_("Not too bad!"),
		_("That was okay!"),
		_("That's a good time!"),
		_("Not bad!")
	]);
}

Text GetHotSeatCallOutBad() {
	return RandomText([
		_("Ouch! That was slow!"),
		_("Too slow!"),
		_("Not good enough!"),
		_("You need to do better than that!"),
		_("Better luck next time!"),
		_("That wasn't fast enough!"),
		_("You're gonna need to go faster!")
	]);
}

Text GetLocalCheerUpRed() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Red team, get ready!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Red team, let's roll!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Red team, you rock!")
	]);
}

Text GetLocalCheerUpBlue() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Blue team, buckle up!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Blue team, you're up!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Blue team, be the best!")
	]);
}

Text GetLocalCheerUpGreen() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Green team, you are go!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Green team, get ready!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Green team, you're great!")
	]);
}

Text GetLocalCheerUpPurple() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Purple team, time to play!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Purple team, you're up!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Purple team, power up!")
	]);
}


Text GetLocalCheerUpPink() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Pink team, let's play!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Pink team, get ready!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Pink team, let's party!")
	]);
}

Text GetLocalCheerUpCyan() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Cyan team, start your engines!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Cyan team, step up!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Cyan team, you're superbad!")
	]);
}

Text GetLocalCheerUpBlack() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("Black team, bring it on!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Black team, get ready!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("Black team, let's get busy!")
	]);
}

Text GetLocalCheerUpWhite() {
	return RandomText([
		//L16N This is a cheer-up sentence when the team starts a race
		_("White team, spin your wheels!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("White team, let's go!"),
		//L16N This is a cheer-up sentence when the team starts a race
		_("White team, you're wicked!")
	]);
}

Text GetCampaignTryAgainTitle() {
	//L16N IMPERATIVE. Title of the final screen where the player hasn't win his race, "you should try again"
	return _("Try Again");
}

Text GetCampaignTryAgainSubTitle() {
	return RandomText([
		_("You need to go faster!"),
		_("Really put your foot down!"),
		_("Get in the zone and stay there!"),
		_("Foot down and focus!")
	]);
}

Text GetCampaignBronzeTitle() {
	//L16N Title of the final screen where the player has won the bronze medal
	return _("Well done!");
}
Text GetCampaignBronzeSubTitle() {
	return _("You've taken the bronze medal!");
}

Text GetCampaignSilverTitle() {
	//L16N Title of the final screen where the player has won a silver medal
	return _("Great!");
}
Text GetCampaignSilverSubTitle() {
	return _("You've won the silver medal!");
}

Text GetCampaignGoldTitle() {
	return _("Outstanding!");
}
Text GetCampaignGoldSubTitle() {
	return _("You've taken the gold medal!");
}

Text GetCampaignTrackmasterTitle() {
	return "Trackmaster";
}
Text GetCampaignTrackmasterSubTitle() {
	return _("You rule this track!!!");
}

Text GetCampaignNewRecordTitle() {
	//L16N Title of the final screen where the player has a new record in the campaign
	return _("Well played!");
}

Text GetCampaignNewRecordSubtitle() {
	return _("You have a new record!");
}

Text GetCampaignRecordCenterWinTitle() {
	return _("Well done!");
}

Text GetCampaignRecordCenterWinSubtitle() {
	return _("You have beaten your friend!");
}

Text GetOnlineWinnerTitle() {
	//L16N Title of the final screen where the player has won a game
	return _("Outstanding!");
}

Text GetOnlineGoodTitle() {
	//L16N Title of the final screen where the player has made a good score
	return _("Great!");
}

Text GetOnlineAverageTitle() {
	//L16N Title of the final screen where the player has made a pretty good score
	return _("Not bad!");
}

Text GetOnlineBadTitle() {
	//L16N Title of the page where the player hasn't won in online game
	return _("Sorry!");
}

Text GetGlobalRankingTitle() {
	//L16N Title of the final screen where the player win new ranks in the worldwide ranking
	return _("Global Ranking");
}

Text GetSplitscreenFinalist() {
	//L16N Finalist status for splitscreen
	return _("Finalist");
}

Text GetSplitscreenBadTitle() {
	//L16N Title of the final screen when the player loses his score
	return _("Sorry!");
}

Text GetRoundsNotFinishedRace() {
	//L16N In final screen, the player hasn't finished the race
	return _("You didn't finish the race");
}

Text GetCampaignDefaultSubtitle() {
	//L16N Default name of the official campaign
	return _("official campaign & challenges");
}

Text GetChampionshipDefaultSubtitle() {
	
	return "Trackmania Championship";
}

Text GetArcadeDefaultSubtitle() {
	return "Trackmania Arcade";
}

Text GetHotseatDefaultSubtitle() {
	return "Trackmania Hotseat";
}

Text GetSplitscreenDefaultSubtitle() {
	return "Trackmania Splitscreen";
}

Text GetSplitscreenLoseTitle() {
	return "Sorry!";
}

Text GetOnlineTimeAttackDefaultSubtitle() {
	return "Trackmania Online Time Attack";
}

Text GetOnlineRoundsDefaultSubtitle() {
	return "Trackmania Online Rounds";
}

Text GetOnlineLapsDefaultSubtitle() {
	return "Trackmania Laps";
}

Text GetMasterChallengeMedalSubtitle() {
	return _("You've taken the ChallengeMaster!");
}

Text GetGoldChallengeMedalSubtitle() {
	return _("You've taken the gold challenge medal!");
}

Text GetSilverChallengeMedalSubtitle() {
	return _("You've taken the silver challenge medal!");
}

Text GetBronzeChallengeMedalSubtitle() {
	return _("You've taken the bronze challenge medal!");
}

Text GetFinalistLoseRounds() {
	//L16N. The player hasn't finished first of the race. Traduction should be no more longer than the original message or it will not fit in the screen.
	return _("You've got to push harder to reach the 1st place!");
}

Text GetNewRecordOfThePlayer(Integer _PlayerTime) {
	//L16N The new best record of the player. %1 is the record, for instance 00:01.28 
	return TextLib::Compose(_("Your new best record: %1"), TextLib::TimeToText(_PlayerTime, True));
}

Text GetLastRecordOfThePlayer(Integer _PlayerTime) {
	//L16N The last record of the player. %1 is the record, for instance 00:01.28 
	return TextLib::Compose(_("Your last best record: %1"), TextLib::TimeToText(_PlayerTime, True));
}


Text GetRecordOfThePlayer(Integer _PlayerTime) {
	//L16N The record of the player. %1 is the record, for instance 00:01.28 
	return TextLib::Compose(_("Your record: %1"), TextLib::TimeToText(_PlayerTime, True));
}
