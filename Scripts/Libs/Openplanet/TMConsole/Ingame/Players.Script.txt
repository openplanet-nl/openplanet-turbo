/**
 *	PlayerManager Library
 * 	Especially made for console
 */

#Const Version				"2014-09-26"
#Const ScriptName			"Players.Script.txt"


#Include "Libs/Openplanet/Layers2.Script.txt" 				as Layers
#Include "Libs/Openplanet/UIPadButtons.Script.txt" 			as UIButtons
#Include "Libs/Openplanet/TMConsole/FontManager.Script.txt" 	as Font

// RESSOURCES
#Const ImgSrc					"file://Media/Images/TMConsole/Ingame/"

// LIB SETTINGS
#Const C_IdleTimeMax 			10

// MISC CONST
#Const C_LayerNameJoin 			"LibScoreTable_Join"
#Const TMC_MANAGER_ON			0
#Const TMC_MANAGER_OFF			1
#Const TMC_MANAGER_FINAL		2

// ---------------------------------- //
// Functions
// ---------------------------------- //

Void Private_CreateLayerJoin() {

	declare Text LayerName 			= C_LayerNameJoin;
	
	declare Text ClockBGImage	= ImgSrc^"/Test/SimpleBG.png";
	declare Text ClockMGImage  	= ImgSrc^"/Test/MG.dds";
 	declare Text ClockFG2Image  = ImgSrc^"/Test/FG2.dds";
	declare Integer ClockSize 	= 11;
	
	
	
	// MANIALINK
	
	declare Text MLText = """
		
	<frame posn="158 83" id="Frame_ChangeMap" hidden="1">
	
		<label 	id="Label_Change" 	
				posn="{{{-ClockSize-0.5}}} 0.5 0" 	
				sizen="30 40" 		
				valign="center" 	
				halign="right" 	
				textfont="{{{Font::GetFontName("Main")}}}" 
				textsize="4" 
				text="QUIT"
		/>
		
		<frame posn="-{{{ClockSize*0.5}}} 0 0">
			<quad 	id="Quad_Icon"		
					posn="0 0 3" 	
					sizen="{{{ClockSize-2.5}}} {{{ClockSize-2}}}" 		
					valign="center" 	
					halign="center" 	
					image="{{{UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Action2)}}}" 
			/>
			
			<frame id="TurnCursor" hidden="1" posn="0 0 0" scale="1.">
				<frame id="Frame_Timer" posn="0 0 8" scale="1.">
					<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockBG" posn="0 0 1" image="{{{ClockBGImage}}}"  halign="center" valign="center" keepratio="Fit" />
					<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockMG" posn="0 0 2" image="{{{ClockMGImage}}}"  halign="center" valign="center" keepratio="Fit" />
					<quad sizen="{{{ClockSize}}} {{{ClockSize}}}" id="ClockFG" posn="0 0 3" image="{{{ClockFG2Image}}}" halign="center" valign="center" keepratio="Fit " />
				</frame>
			</frame>
		</frame>
		
	</frame>
	
	
	<script><!--
		
		#Const C_NbPlayersMax 		4
		
		#Const TMC_MANAGER_ON		0
		#Const TMC_MANAGER_OFF		1
		#Const TMC_MANAGER_FINAL 	2
		
		Void CheckForResetPads() 
		{
		
			declare netwrite 	Integer[] 	LibTMC_PairingPads_PadsPlaying 		for UI;
			
			declare netread		Integer		LibTMC_Symbiose_ResetPadsTrigger 	for UI;
			declare				Integer 	PrevResetPadsTrigger				for UI;
			
			
			if (PrevResetPadsTrigger != LibTMC_Symbiose_ResetPadsTrigger) 
			{
				// log(Now^">HERE CLEAR PADS");
				PrevResetPadsTrigger = LibTMC_Symbiose_ResetPadsTrigger;
				LibTMC_PairingPads_PadsPlaying.clear();
			}
		}
			
		main() 
		{
			
			
			
			declare	netread		Integer		LibTMC_PlayerManager_Status					for UI;
			declare netwrite	Integer		LibTMC_PlayerManager_ChangeMap				for UI;
			declare netwrite	Integer		LibTMC_PlayerManager_PrevChangeMap			for UI;
			declare netwrite	Boolean		LibTMC_PlayerManager_ConfirmChange			for UI;

			LibTMC_PlayerManager_ChangeMap 			= 0;
			LibTMC_PlayerManager_PrevChangeMap 		= 0;
			LibTMC_PlayerManager_ConfirmChange		= False;
			
			// declare netwrite 	Integer[] 	LibTMC_PairingPads_PadsPlaying 				for UI;
			// LibTMC_PairingPads_PadsPlaying.clear();
			
			
			while(True) 
			{
				yield;
				if (!PageIsVisible || InputPlayer == Null) continue;
				
				CheckForResetPads();
				
				if(LibTMC_PlayerManager_Status == TMC_MANAGER_OFF) 
				{
					// Frame_ChangeMap	.Visible = False;
				} 
				else if(LibTMC_PlayerManager_Status == TMC_MANAGER_ON) 
				{
					// Frame_ChangeMap	.Visible = True;
					
					
					// OFF UNTIL WE HAVE PLAYLISTS
					/*
					if(ChangeMapRequest) {
						Frame_TurnCursor.Show();
						declare Real TurnTick = (Period * 360.) / ClockTurnTime;

						if(Input.Pads[PadChangesMapRequest].IdleDuration != 0) {
							ChangeMapRequest = False;
							Frame_TurnCursor.Hide();
							ClockMG.RelativeRotation = 360.;
						}

						if(ClockMG.RelativeRotation == 0.) {
							ChangeMapRequest = False;
							LibTMC_PlayerManager_ChangeMap = Now;
							LibTMC_PlayerManager_ConfirmChange = True;
							// ClockMG.RelativeRotation  = 360.;
							Frame_TurnCursor.Hide();
						}
						
						ClockMG.RelativeRotation -= TurnTick;
						if(ClockMG.RelativeRotation > 360.) {
							ClockMG.RelativeRotation = 360.;
						}
						
						if(ClockMG.RelativeRotation < 0.) {
							ClockMG.RelativeRotation = 0.;
						}
		
						if(!ClockSwitched && ClockMG.RelativeRotation < 180.) {
							ClockSwitched = True;
							ClockFG.ImageUrl = "{{{ClockFG1Image}}}";
						}

						if(!ClockColored && ClockMG.RelativeRotation < 90.) {
							ClockColored = True;
							ClockMG.Colorize = <0.7, 0., 0.>;
							ClockFG.Colorize = <0.7, 0., 0.>;
						}
					}
					foreach(PadIndex => Pad in Input.Pads) 
					{
						if(Input.Pads.existskey(Pad))
						{
							foreach(Button in Input.Pads[PadIndex].ButtonEvents)
							{
								switch(Button) 
								{
									case CInputScriptPad::EButton::Y : 
									{
										ClockTurnTime	= 1000;
										ClockMG.RelativeRotation = 360.;
										ClockSwitched = False;
										ClockColored = False;
										ClockFG.ImageUrl = "{{{ClockFG2Image}}}";
										ClockMG.Colorize = <0., 1., 0.2>;
										ClockFG.Colorize = <0., 1., 0.2>;
										ChangeMapRequest = True;
										PadChangesMapRequest = PadIndex;
									}
								}
							}
						}
					}
					*/
				}
				else if(LibTMC_PlayerManager_Status == TMC_MANAGER_FINAL) 
				{
					// Frame_ChangeMap	.Visible = False;
				}
			}
		}
	--></script>
	""";
	
	Layers::Create(LayerName, MLText);
	Layers::Attach(LayerName);
}


Void CopyPadsPlayingArrays() {
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare netread Integer[] 	LibTMC_PairingPads_PadsPlaying 			for UI;
		declare netwrite Integer[] 	LibTMC_PairingPads_PadsPlayingCurRace	for UI;
		LibTMC_PairingPads_PadsPlayingCurRace.clear();
		LibTMC_PairingPads_PadsPlayingCurRace = LibTMC_PairingPads_PadsPlaying;
	}	
}

Boolean ShouldStart() {
	declare Boolean GameHasStarted = False;
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare netread	Boolean	LibTMC_PlayerManager_GameStarted 			for UI;
		declare netread Integer[] 	LibTMC_PairingPads_PadsPlaying 			for UI;
		declare netwrite Integer[] 	LibTMC_PairingPads_PadsPlayingCurRace	for UI;
		GameHasStarted = LibTMC_PlayerManager_GameStarted;
		if(GameHasStarted) {
			LibTMC_PairingPads_PadsPlayingCurRace.clear();
			LibTMC_PairingPads_PadsPlayingCurRace = LibTMC_PairingPads_PadsPlaying;
		}
	}
	
	return GameHasStarted;
}

Boolean ShouldChangeMap() {
	declare Boolean ChangeMap = False;
	foreach(Player in Players) {
		declare UI <=> UIManager.GetUI(Player);
		declare netread	Integer		LibTMC_PlayerManager_ChangeMap				for UI;
		declare netread	Integer		LibTMC_PlayerManager_PrevChangeMap			for UI;
		if(LibTMC_PlayerManager_PrevChangeMap != LibTMC_PlayerManager_ChangeMap) {
			ChangeMap = True;
		}
	}
	
	return ChangeMap;
}

// ---------------------------------- //
/** Return the version number of the script
 *
 *	@return		The version number of the script
 */
Text GetScriptVersion() {
	return Version;
}

// ---------------------------------- //
/** Return the name of the script
 *
 *	@return		The name of the script
 */
Text GetScriptName() {
	return ScriptName;
}

// ---------------------------------- //
/// Unload the library
Void Unload() {
	Layers::Destroy(C_LayerNameJoin);
}

// ---------------------------------- //
/// To re-attach layers in case of UI ResetAll
Void Attach() {
	Layers::Attach(C_LayerNameJoin);
}

// ---------------------------------- //
/** RESET PADS
 *	@param	CTmPlayer		_Player
 */

Void ResetPads(CTmPlayer _Player) 
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;
	
	declare netwrite Integer LibTMC_Symbiose_ResetPadsTrigger for UI;
	LibTMC_Symbiose_ResetPadsTrigger = Now;
}

Void ResetPads () 
{
	foreach(Player in AllPlayers) ResetPads(Player);
}



// ---------------------------------- //
/** UPDATE PADS
 *	@param	CTmPlayer		_Player
 */
Void UpdatePads(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return;

	declare netread Integer[] 	LibTMC_PairingPads_PadsPlaying 				for UI;
	declare  		Integer 	LibTMC_PairingPads_PadsPlayingPrevCount 	for UI;
	
	declare Count = LibTMC_PairingPads_PadsPlaying.count;
	
	_Player.CoopModeControllerCount = LibTMC_PairingPads_PadsPlaying.count;
	_Player.CoopMode = CTmPlayer::ETmRacePlayerCoopMode::Symbiosys;
	// log("youyou");
	// if(LibTMC_PairingPads_PadsPlayingPrevCount != Count)
	if(True)
	{
		LibTMC_PairingPads_PadsPlayingPrevCount = Count;

		if (LibTMC_PairingPads_PadsPlaying.existskey(0) && Input.Pads.existskey(LibTMC_PairingPads_PadsPlaying[0])) {
			_Player.CoopModeControllerId0 = Input.Pads[LibTMC_PairingPads_PadsPlaying[0]].ControllerId;
		}
		
		if (LibTMC_PairingPads_PadsPlaying.existskey(1) && Input.Pads.existskey(LibTMC_PairingPads_PadsPlaying[1])) {
			_Player.CoopModeControllerId1 = Input.Pads[LibTMC_PairingPads_PadsPlaying[1]].ControllerId;
		}
		
		if (LibTMC_PairingPads_PadsPlaying.existskey(2) && Input.Pads.existskey(LibTMC_PairingPads_PadsPlaying[2])) {
			_Player.CoopModeControllerId2 = Input.Pads[LibTMC_PairingPads_PadsPlaying[2]].ControllerId;
		}
		
		if (LibTMC_PairingPads_PadsPlaying.existskey(3) && Input.Pads.existskey(LibTMC_PairingPads_PadsPlaying[3])) {
			_Player.CoopModeControllerId3 = Input.Pads[LibTMC_PairingPads_PadsPlaying[3]].ControllerId;	
		}
	}
}

Void UpdatePads() 
{
	foreach(Player in AllPlayers) UpdatePads(Player);
}

// ---------------------------------- //
/** SET PLAYER MANAGER ON / OFF
 *
 */
Void SetPlayerManagerOff() {
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Integer	LibTMC_PlayerManager_Status	for UI;
		LibTMC_PlayerManager_Status = TMC_MANAGER_OFF;
	}
}

Void SetPlayerManagerOn() {
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Integer LibTMC_PlayerManager_Status for UI;
		if(LibTMC_PlayerManager_Status != TMC_MANAGER_ON) {
			LibTMC_PlayerManager_Status = TMC_MANAGER_ON;
			UpdatePads();
		}
	}
}

Void SetPlayerManagerChangeMap() {
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Integer LibTMC_PlayerManager_Status for UI;
		if(LibTMC_PlayerManager_Status != TMC_MANAGER_FINAL) {
			LibTMC_PlayerManager_Status = TMC_MANAGER_FINAL;
		}
	}
}

Boolean ConfirmChangeMap() {
	declare Boolean MapChange = False;
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		declare netread	Boolean		LibTMC_PlayerManager_ConfirmChange			for UI;
		MapChange = LibTMC_PlayerManager_ConfirmChange;
	}
	return MapChange;
}

// ---------------------------------- //
/** KNOW IF ALL PLAYERS ARE IDLE FOR TOO LONG
 *	@param	CTmPlayer		_Player
 */
 
Boolean GetIsIdleForTooLong(CTmPlayer _Player) 
{
	declare UI <=> UIManager.GetUI(_Player);
	if(UI == Null) return False;
	
	declare Integer NbPadsTooLong = 0;
	foreach(I => Pad in Input.Pads) {
		if(Pad.IdleDuration >= C_IdleTimeMax*1000) {
			NbPadsTooLong += 1;
		}
	}
	
	return NbPadsTooLong == Input.Pads.count;
}

Integer GetNbPlayer() {
	declare Integer PlayerCount = 0;
	foreach(Player in AllPlayers) {
		declare UI <=>UIManager.GetUI(Player);
		if(UI == Null) return 0;
		declare netwrite Integer[] LibTMC_PairingPads_PadsPlayingCurRace for UI;
		PlayerCount = LibTMC_PairingPads_PadsPlayingCurRace.count;
	}
	return PlayerCount;
}

Boolean GetIsIdleForTooLong()
{
	declare Boolean IsIdleForTooLong = False;
	
	foreach(Player in Players) 
	{
		if(GetIsIdleForTooLong(Player)) IsIdleForTooLong = True;
	}
	
	return IsIdleForTooLong;
}

// ---------------------------------- //
/// Load the library
Void Load() {
	Unload();
	UIButtons::Load();
	foreach(Player in AllPlayers) {
		declare UI <=> UIManager.GetUI(Player);
		if(UI == Null) return;
		declare	netwrite Integer LibTMC_PlayerManager_Status for UI;
		LibTMC_PlayerManager_Status = -1;
	}
	
	Private_CreateLayerJoin();
	
	
}