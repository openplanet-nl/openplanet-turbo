
#Include "Libs/Openplanet/Manialink2.Script.txt"					as Manialink
#Include "Libs/Openplanet/UIPadButtons.Script.txt"				as UIButtons
#Include "Libs/Openplanet/TMConsole/UIXmlBuilder.Script.txt"		as UIXmlBuilder
#Include "Libs/Openplanet/TMConsole/Menu/MenuLayers.Script.txt" 	as Layers

#Const C_LayerName				"MySweetLayerName"



Void CreateLayer()
{
	// IF LAYER SIZE IS NEEDED USE THIS FUNCTION
	// IF THE SIZE DOESNT SEEM CORRECT ADD "True" AS AN ARGUMENT : UIXmlBuilder::GetSize(True);
	
	declare Real LayerScale = 1.;
	declare Vec3 LayerPos 	= <-117., 34., 15.>;
	declare Text[][] LayerContent;
	
	
	
	////////////////////////////////////////////
	// CREATION DU CONTENU DU LAYER
	// ["ObjectType", "ObjectId", "PlaceHolderText", "SizeY", "Nothing", "Param", "Nothing"] 
	
	// Et dans le cas d'un objet custom --- (Params : Bg Bg2 Bg3 Fg) :
	// ["Custom", "CustomId", """ <frame id="Frame_MLCustom"> </frame> """, "SizeY", "", "Param", ""] 
	
	LayerContent.add(["Title", 	"Title",     "Titre du popup", 	"2",	"", "", ""]);
	LayerContent.add(["Space", 	"", 	     "", 			 	"1",	"", "", ""]);
	LayerContent.add(["Button", "Yes", 	     _("Yes"), 			"1",	"", "", ""]);
	LayerContent.add(["Button", "No", 	     _("No"), 			"1",	"", "", ""]);
	LayerContent.add(["Input", 	"Input",     "", 			 	"1",	"", "", ""]);
	
	
	
	////////////////////////////////////////////
	// SHOW ANIM
	// Ici on stocke le code nécessaire à l'animation du layer  
	// ShowAnim + Prompteur du Label_SubtitleId (Souvent Label_SubtitleTitle)
	// Comme on a besoin de :
	// - variables déclarées au début du main, avant le while 
	// - code dans le while
	// La fonction GetShowAnim renvoie un tableau de texte avec deux élements
	// le [0] = var d'init 
	// le [1] = loop while
	
	// ON UTILISE DONC LE MÊME TABLEAU DE LayerContent
	declare MLShowAnim 	= UIXmlBuilder::GetShowAnim(LayerContent, LayerPos);
	
	
	
	////////////////////////////////////////////
	// BUTTONS
	// On stock le code pour les bouttons
	// Set à True pour avoir des logs de debug lors d'un clic
	// Aide a savoir quel control a été clické
	
	// ON UTILISE DONC LE MÊME TABLEAU DE LayerContent
	declare MLOnClick 	= """log(Now^"> YOU CLICKED A BUTTON");""";
	declare MLOnCancel 	= """log(Now^"> YOU PRESSED CANCEL");""";
	declare MLButtons 	= UIXmlBuilder::GetButtons(LayerContent, MLOnClick, MLOnCancel, False);
	
	
	
	// J'ai mis une frame d'example pour bien comprendre que c'est du Manialink, 
	// mais le plugin doit déjà renvoyer Frame_IdMainFrame du "IdMainFrame" de la fonction GetXml
	declare ML = 
	"""
	<frame id="Frame_Example_MaisPasNecaissaire">
		{{{UIXmlBuilder::GetXml("IdMainFrame", LayerContent, LayerScale, LayerPos)}}}
	</frame>
	
	
	
	<script><!--
		{{{Manialink::GetIncludes()}}}
		#Const DebugName "L_MonLayerDeTest"
		{{{Manialink::Load()}}}
		
		
		main() 
		{
			// INPUT BUTTONS
			{{{UIXmlBuilder::GetSetInputsML("Input", 
			UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Select), _("Go !"),
			UIButtons::GetImage(CManiaAppEvent::EMenuNavAction::Cancel), _("Cancel"))}}}
			
			
			
			// SUBTITLES
			{{{UIXmlBuilder::GetSetSubtitleML("Title", "Mon super prompteur qui tue")}}}

			
			
			////////////////////
			// MLShowAnim & MLButtons
			// [0] = var d'init 
			{{{MLShowAnim[0]}}}
			{{{MLButtons[0]}}}
			
			
			// Should not be necessary
			// declare M_PrevPageIsVisible = False; 
			
			log(Now^" > LOAD OK : {{{C_LayerName}}}");
			
			while(True)
			{
				yield;
				
				// Should not be necessary
				// if(M_PrevPageIsVisible != PageIsVisible)
				// {
					// M_PrevPageIsVisible = PageIsVisible;
					// EnableMenuNavigation(M_PrevPageIsVisible, True, Button_Back, 1);
				// }
				
				
				
				////////////////////
				// MLShowAnim
				// [1] = Loop (Only on show/hide page)
				{{{MLShowAnim[1]}}}
				
				
				
				// IMPORTANT POUR LES PERFS
				if(!PageIsVisible && PendingEvents.count == 0) continue;
				
				// IMPORTANT POUR LES ANIMS
				LibManialink_AnimLoop();
				
				
				
				////////////////////
				// MLButtons
				// [1] = Loop (Events)
				{{{MLButtons[1]}}}
			}
		}
	--></script>
	""";
	
	
	Layers::Create(C_LayerName, ML);
	Layers::Attach(C_LayerName);
	declare Layer = Layers::Get(C_LayerName);
	Layer.OutAnimation = CUILayer::EUILayerAnimation::LeftFast;
}



Void Load()
{
	CreateLayer();
}

CUILayer GetLayer()
{
	return Layers::Get(C_LayerName);
}

Text GetLayerName()
{
	return C_LayerName;
}