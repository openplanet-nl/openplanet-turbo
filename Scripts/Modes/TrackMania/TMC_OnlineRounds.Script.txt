/**
 *	Rounds mode
 */

#Extends "Modes/TrackMania/TMC_OnlineRoundsBase.Script.txt"

#Const  CompatibleMapTypes  "Race,RaceCE"
#Const	Version		"2016-01-30"
#Const	ScriptName	"Rounds.Script.txt"

#Include "Libs/Openplanet/TMConsole/Ingame/FlavourText.Script.txt" 							as FlavourText
#Include "Libs/Openplanet/TMConsole/Ingame/RewardScreens.Script.txt" 						as RewardScreens
// #Include "Libs/Openplanet/TMConsole/Ingame/IngameAchievements.Script.txt" 				as IngameAchievements
#Include "Libs/Openplanet/TMConsole/Ingame/IngameTempQuestion.Script.txt" 					as IngameTempQuestion
#Include "Libs/Openplanet/TMConsole/Ingame/CarsModels.Script.txt" 							as CarsModels
#Include "Libs/Openplanet/TMConsole/Ingame/UI/UISequences.Script.txt"						as UISequences
#Include "Libs/Openplanet/TMConsole/Colors.Script.txt" 										as Colors

#Include "MathLib" as ML

// ---------------------------------- //
// Settings
// ---------------------------------- //
// #Setting S_PointsLimit	10
#Setting S_UseTieBreak		True	as _("Use tie-break :")	///< Continue to play the map until the tie is broken
#Setting S_IsStuntMode		False	as _("Stunt mode")

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_BotsNb 0
#Const Description _("""$fffIn $f00Rounds$fff mode, the goal is to win a maximum number of $f00points.

$fffThe rounds mode consists of $f00a series of races$fff.
When you finish a race in a good $f00position$fff, you get $f00points$fff, added to your total.

The $f00winner$fff is the first player whose total reaches the $f00point limit$fff (30 for example).""")

#Const C_SpawnStatus_Racing			1	///< The player is currently racing
#Const C_SpawnStatus_Waiting		2	///< The player is winting to be spawned
#Const C_SpawnStatus_Outro			3	///< The player is watching the outro sequence
#Const C_SpawnStatus_Browsing		4   ///< The player is browsing the score table

#Const C_GAMEPHASE_CHALLENGE		3
#Const C_GAMEPHASE_PREPARATION		0
#Const C_GAMEPHASE_GAME				1
#Const C_GAMEPHASE_POSTGAME			2
#Const C_GAMEPHASE_OUTRO			4

declare Ident[]						G_CarModels;
declare Integer						G_CarModelIndex;
declare Boolean						G_OnePlayerHasRaced;

// ---------------------------------- //
// Extend
// ---------------------------------- //
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
***

***InitServer***
***
declare PrevPointsLimit = -1;
***

***BeforeLoadMap***
***
declare Text EnviroName 		= MapList[NextMapIndex].CollectionName;

CarsModels::StartItemList();
G_CarModels 		= CarsModels::LoadCarsModels(EnviroName, "Arcade", False);
CarsModels::EndItemList();
***

***InitMap***
***
// ---------------------------------- //
// Initialize scores
Scores_Clear();
***

***StartMap***
***
Layers::DestroyAll();
// UISequences::ComposeVideoTrailerLayer();

if(Map.TMObjective_IsLapRace) {
	NbLaps = Map.TMObjective_NbLaps;
	Game::SetNbLaps(NbLaps);
}
// ---------------------------------- //
// Initialize map

// ---------------------------------- //
// Initialize map
Users_SetNbFakeUsers(C_BotsNb, 0);

// ---------------------------------- //
// Layers
Game::Load(This, "OnlineRounds");
Game::SetNbPadsNeeded(1);

if(!S_UseAlternateRules) {
	Game::SetMaxPoints(S_PointsLimit);
} else {
	Game::SetMaxPoints(S_AlternateRulesPointsLimit);
}
UIManager.HoldLoadingScreen = False;

if (PrevMapUid != Map.MapInfo.MapUid) PrevMapUid = Map.MapInfo.MapUid;
else Game::ForceLikeDislikeUpdate();

***

***StartRound***
***
G_NbPlayersReachedLine = 0;

foreach(Player in AllPlayers) {
	declare ModeOR_HasTimeToSpawn for Player = True;
	ModeOR_HasTimeToSpawn = True;

	if(S_IsStuntMode && !Player.EnableStuntMode) {
		SetPlayerStuntMode(Player);
	}
}
***

***PlayLoop***
***
Game::Loop();
CheckOnePlayerHasRaced();
// log(Now^">PLAYERS COUNT: "^Players.count);

// ---------------------------------- //
// Spawn players for the race
foreach (Player in Players) {
	if (Player.Score == Null) continue;
	declare CanSpawn  for Player.Score = False;
	if(CanSpawn && Game::IsWaiting(Player)) {
		declare ModeOR_HasTimeToSpawn for Player = True;
		if (ModeOR_HasTimeToSpawn) {
			declare netwrite Boolean Net_HasPlayedOnce for Player = False;
			Net_HasPlayedOnce = True;

			declare TimeBeforeSpec for Player = Now;
			TimeBeforeSpec = -1;
			
			if(Game::IsPlayerBrowseScoresTable(Player)) {
				Game::HideScoresTable(Player);
				Game::SetInputAvailableScoresTable(Player, False);
			}

			if(S_IsStuntMode && !Player.EnableStuntMode) {
				SetPlayerStuntMode(Player);
			}
			
			Game::StartRace(Player, G_RoundStartTime);
			CanSpawn = False;
			SetOpponentForUI(Player, TMC_MEDAL_PLAYER);
		}
	} else if (!CanSpawn && Game::IsWaiting(Player)) {
		declare TimeBeforeSpec for Player = Now;
		if (TimeBeforeSpec >= 0 && Now >= TimeBeforeSpec) {
			TimeBeforeSpec = -1;
			Game::HideReward(Player);
		}
	} else if(!CanSpawn && Game::IsWatchingOutro(Player)) {
		declare TimeBeforeSpec for Player = Now;
		if (TimeBeforeSpec >= 0 && Now >= TimeBeforeSpec) {
			Game::WaitRace(Player);
			TimeBeforeSpec = -1;
			Game::HideReward(Player);
		}
	}
}

// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	PassOn(Event);
	// XmlRpc::PassOn(Event);
	
	// ---------------------------------- //
	// Waypoint
	if (Event.Type == CTmModeEvent::EType::WayPoint) {
		if (Event.IsEndRace) {
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestRace.Compare(Event.Player.CurRace, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestRace = Event.Player.CurRace;
				}
			}
			Event.Player.Score.PrevRace = Event.Player.CurRace;
			ComputeLatestRaceScores();
			
			G_NbPlayersReachedLine += 1;
			Game::SetGamePhase(Event.Player, C_GAMEPHASE_POSTGAME);
			
			Scores_Sort(CTmMode::ETmScoreSortOrder::TotalPoints);
			Game::EndRace(Event.Player);
			SetOpponentForUI(Event.Player, TMC_MEDAL_NONE);
			RewardScreenEndRace(Event.Player, True);
			
			if (Event.Player != Null) {
				declare TimeBeforeSpec for Event.Player = Now;
				TimeBeforeSpec = Now + 3000;
			}
			
			CutOffTimeLimit = GetFinishTimeout();
		}
		if (Event.IsEndLap) {
			if (Event.Player.Score != Null) {
				if (Event.Player.Score.BestLap.Compare(Event.Player.CurLap, CTmResult::ETmRaceResultCriteria::Time) <= 0) {
					Event.Player.Score.BestLap = Event.Player.CurLap;
				}
			}
		}
	}
	// ---------------------------------- //
	// On player added
	else if(Event.Type == CTmModeEvent::EType::OnPlayerAdded) {
		Game::SetInputAvailableScoresTable(Event.Player, False);
		Game::SetGamePhase(Event.Player, C_GAMEPHASE_GAME);
		Game::WaitRace(Event.Player);
		Game::SendOnPlayerAdded(Event.Player.User.Name);
		declare CanSpawn for Event.Player.Score = False;
		CanSpawn = True;
		if(S_IsStuntMode && !Event.Player.EnableStuntMode) {
			SetPlayerStuntMode(Event.Player);
		}

		if (Event.Player != Null) {
			declare ModeOR_HasTimeToSpawn for Event.Player = True;
			ModeOR_HasTimeToSpawn = (CutOffTimeLimit < 0);
		}
	}
	else if(Event.Type == CTmModeEvent::EType::OnPlayerRemoved) {

	}
	// ---------------------------------- //
	// GiveUp
	else if (Event.Type == CTmModeEvent::EType::GiveUp) {
		if(Game::IsRacing(Event.Player)) {
			Game::WaitRace(Event.Player);
			RewardScreenEndRace(Event.Player, False);
			Game::SetGamePhase(Event.Player, C_GAMEPHASE_POSTGAME);
			SetOpponentForUI(Event.Player, TMC_MEDAL_NONE);
			
			if (Event.Player != Null) {
				declare TimeBeforeSpec for Event.Player = Now;
				TimeBeforeSpec = Now + 3000;
			}
		}
	}
}

// log(PlayersRacing.count);
// ---------------------------------- //
// End the round 
// If All players finished
// if (G_NbPlayersReachedLine + G_NbPlayersGiveUp >= Players.count && Players.count  > 0) {
if (Players.count > 0 && PlayersRacing.count <= 0 && G_OnePlayerHasRaced) {	
	MB_StopRound = True;
}

// If time limit is reached
if (CutOffTimeLimit > 0 && Now >= CutOffTimeLimit) {
	MB_StopRound = True;
}

// If forced end round
if (ForceEndRound) MB_StopRound = True;
***

***EndRound***
***
if(!MatchEndRequested) {
	CutOffTimeLimit = -1;
	foreach(Player in AllPlayers) {
		if(Game::IsRacing(Player)) {
			Game::SetGamePhase(Player, C_GAMEPHASE_POSTGAME);
			RewardScreenEndRace(Player, False);
		}
	}

	Game::WaitTime(3000);

	ComputeScores();
	
	// ---------------------------------- //
	// Score table
	Scores_Sort(CTmMode::ETmScoreSortOrder::TotalPoints);
	
	if (ForceEndRound) {
		ForcedEndRoundSequence();
	} else {
		if (MapIsOver()) {
			// ---------------------------------- //
			// Close ladder
			// Do not grant LP if the map was skipped
			if (CutOffTimeLimit < 0 || Now >= CutOffTimeLimit) {
				Ladder_ComputeRank(CTmMode::ETmScoreSortOrder::TotalPoints);
				MB_Ladder_CloseMatch();
			} else {
				MB_Ladder_CancelMatch();	
			}
			
			declare Text RewardUrl = RewardScreens::GetScreenOnline();
			declare Vec3 TextColor = <0.0, 0.0, 0.0>;
			
			//Hide previous score table
			foreach(Player in AllPlayers) {
				declare Integer Status = Game::GetPlayerStatus(Player);
				if(Status == C_SpawnStatus_Outro) {
					// Game::HideReward(Player);
				}
				
				if(Game::IsPlayerBrowseScoresTable(Player)) {
					Game::HideScoresTable(Player);
				}
				Game::SetGamePhase(Player, C_GAMEPHASE_POSTGAME);
				SetOpponentForUI(Player, TMC_MEDAL_NONE);
			}
			
			//See which player will see end sequence
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				declare netwrite Boolean Net_HasPlayedOnce for Player = False;
				if(Net_HasPlayedOnce) {
					SeeEndSequence = True;
				} else {
					SeeEndSequence = False;		
				}
			}
			
			/*
			// ---------------------------------- //
			// Score table
			//If players does not see end sequence, display scores table leaderboard
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				if(!SeeEndSequence) {
					Game::ShowReward(Player, "", "", "", "to continue", RewardUrl, TextColor, "", False);
					Game::SetInputAvailableScoresTable(Player, False);
					Game::DisplayScoresTable(Player);
				}
			}
			
			RewardScreenEndMap();
			Game::WaitTime(3000);
			Game::WaitRaceAll();
			
			if(!S_IsShowcase) {
				CutOffTimeLimit = -1;
				Game::RankingSequence();
			}
			
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				if(SeeEndSequence) {
					Game::ShowReward(Player, "", "", "", "to continue", RewardUrl, TextColor, "", False);
				}
			}

			Game::WaitTime(500);
			
			IngameTempQuestion::StartTempQuestion(TMC_TEMPQUESTION_LIKEMAP);
			while(IngameTempQuestion::GetTempQuestionState() != TMC_TEMPQUESTION_OFF) {
				yield;
				Game::Loop();
				IngameTempQuestion::TempQuestionLoop();
			}
			
			Game::WaitTime(500);
			Game::PodiumSequence();
			Game::SendTrackIncrementPlayerCount(S_ApiKey);
			*/
			
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				if(SeeEndSequence) {
					Game::ShowReward(Player, "", "", "", "to continue", RewardUrl, TextColor, "", False);
				}
			}
			
			//If players does not see end sequence, display scores table leaderboard
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				if(!SeeEndSequence) {
					Game::SetInputAvailableScoresTable(Player, False);
					Game::DisplayScoresTable(Player);
				}
			}
			
			foreach (Player in AllPlayers) {
				declare UI <=> UIManager.GetUI(Player);
				if (UI != Null) UI.UISequence = CUIConfig::EUISequence::None;
				Game::WaitRace(Player);
				// Game::SetReplayMusic(Player);

				declare Boolean SeeEndSequence for Player = False;
				if(SeeEndSequence) {
					Game::SetInputAvailableScoresTable(Player, False);
					Game::DisplayScoresTable(Player);
				}
			}
					
			Game::WaitTime(3000);
			
			foreach(Player in AllPlayers) {
				declare Boolean SeeEndSequence for Player = False;
				if(SeeEndSequence) {
					Game::HideScoresTable(Player);
				}
			}
			
			Game::WaitTime(500);
			
			RewardScreenEndMap();
			
			if(!S_IsShowcase) {
				CutOffTimeLimit = -1;
				Game::RankingSequence();
			}
			foreach(Player in AllPlayers) {
				Game::HideReward(Player);
			}
			Game::WaitTime(100);
			Game::PodiumSequence();
			
			UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
			foreach (Player in AllPlayers) {
				Game::SetStopMusic(Player);
			}
			
			Game::WaitRaceAll();
			MB_StopMap = True;
		} else {
			
			//Wait for the final reward screen to be seen
			declare Text RewardUrl = RewardScreens::GetScreenOnline();
			declare Vec3 TextColor = <0.0, 0.0, 0.0>;
			
			
			foreach(Player in AllPlayers) {
				Game::ShowReward(Player, "", "", "", "to continue", RewardUrl, TextColor, "", False);
				Game::SetInputAvailableScoresTable(Player, False);
				Game::DisplayScoresTable(Player);
			}

			Game::WaitTime(5000);

			foreach(Player in AllPlayers) {
				Game::HideScoresTable(Player);
				Game::HideReward(Player);
				Game::WaitRace(Player);
			}
		}
	}
}
***

// ---------------------------------- //
// Functions
// ---------------------------------- //
Void CheckOnePlayerHasRaced() {
	if(Players.count >= 1 && PlayersRacing.count >= 1) {
		G_OnePlayerHasRaced = True;
	}
}

Void SetPlayerStuntMode(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	declare netwrite Boolean Net_IsStuntMode for UI;
	Net_IsStuntMode = True;
	_Player.EnableStuntMode = True;
	_Player.EnableOnlineMode = True;
}

Void IncrementCarModelIndex() {
	G_CarModelIndex += 1;
	if(G_CarModelIndex >= G_CarModels.count) G_CarModelIndex = 0;
}

/** Get the time left to the players to finish the round after the first player
 *
 *	@return 		The time left in ms
 */
Integer GetFinishTimeout() {
	declare FinishTimeout = 0;
	
	if (S_FinishTimeout >= 0) {
		FinishTimeout = S_FinishTimeout * 1000;
	} else {
		FinishTimeout = 5000;
		if (Map.TMObjective_IsLapRace && NbLaps > 0 && Map.TMObjective_NbLaps > 0) {
			FinishTimeout += ((Map.TMObjective_AuthorTime / Map.TMObjective_NbLaps) * NbLaps) / 6;
		} else {
			FinishTimeout += Map.TMObjective_AuthorTime / 6;
		}
	}
	
	if (S_UseAlternateRules) {
		if (Map.TMObjective_IsLapRace && NbLaps > 0 && Map.TMObjective_NbLaps > 0) {
			return G_RoundStartTime + ((Map.TMObjective_AuthorTime / Map.TMObjective_NbLaps) * NbLaps) + FinishTimeout;
		} else {
			return G_RoundStartTime + Map.TMObjective_AuthorTime + FinishTimeout;
		}
	} else {
		return Now + FinishTimeout;
	}
	
	// Default value from TMO, TMS (not used)
	return Now + 15000;
}

// ---------------------------------- //
/// Compute the latest race scores
Void ComputeLatestRaceScores() {
	Scores_Sort(CTmMode::ETmScoreSortOrder::PrevRace_Time);
	
	// Only points for the first players
	if (S_UseAlternateRules) {
		declare Points = 1;
		
		foreach (Score in Scores) {
			if (Score.PrevRace.Time > 0) {
				Score.PrevRaceDeltaPoints = Points;
				if (Points > 0) Points -= 1;
			} else {
				Score.PrevRaceDeltaPoints = 0;
			}
		}
	} 
	// Points distributed between all players
	else {		
		declare I = 0;
		foreach (Score in Scores) {
			if (Score.PrevRace.Time > 0) {
				declare Points = 0;
				if (MB_PointsRepartition.count > 0) {
					if (MB_PointsRepartition.existskey(I)) {
						Points = MB_PointsRepartition[I];
					} else {
						Points = MB_PointsRepartition[MB_PointsRepartition.count - 1];
					}
				}
				Score.PrevRaceDeltaPoints = Points;
				I += 1;
			} else {
				Score.PrevRaceDeltaPoints = 0;
			}
		}
	}
}

// ---------------------------------- //
/// Compute the map scores
Void ComputeScores() {
	foreach (Score in Scores) {
		Score.Points += Score.PrevRaceDeltaPoints;
		Score.PrevRaceDeltaPoints = 0;
	}
}

// ---------------------------------- //
/** Check if we should go to the next map
 *
 *	@return		True if it is the case, false otherwise
 */
Boolean MapIsOver() {
	declare MaxScore = -1;
	declare Tie = False;
	foreach (Score in Scores) {
		if (Score.Points > MaxScore) {
			MaxScore = Score.Points;
			Tie = False;
		} else if (Score.Points == MaxScore) {
			Tie = True;
		}
	}
	
	if (S_UseTieBreak && Tie) return False;
	if(S_UseAlternateRules) {
		if (MaxScore >= S_AlternateRulesPointsLimit) return True;
	} else {
		if (MaxScore >= S_PointsLimit) return True;
	}
		
	return False;
}

Integer GetPointsAccordingPosition(Integer _Position) {
	declare Integer Points = -1;
	if(!S_UseAlternateRules) {
		if (MB_PointsRepartition.count > 0) {
			if (MB_PointsRepartition.existskey(_Position)) {
				Points = MB_PointsRepartition[_Position];
			} else {
				Points = MB_PointsRepartition[MB_PointsRepartition.count - 1];
			}
		}
	} else {
		if(_Position == 1) {
			Points = 1;
		} else {
			Points = 0;
		}
	}
	return Points;
}

// ---------------------------------- //
/** Display the final screen
 *
 *	@return		True if it is the case, false otherwise
 */
 /*
Void RewardScreenEndRace(CTmPlayer _Player, Boolean _HasFinishedRace) {
	declare Text 	RankMessage 	= Game::GetRankMessage(G_NbPlayersReachedLine);
	declare Text 	Subtitle2		= "You get "^TL::ToText(GetPointsAccordingPosition(G_NbPlayersReachedLine))^" points";
	declare Text 	RewardUrl		= RewardScreens::GetScreenOnline();
	declare Vec3 	TextColor 		= Colors::GetColor("White");
	
	if(!_HasFinishedRace) {
		RankMessage 	= "Sorry...";
		Subtitle2		= "You didn't finished the race";
		RewardUrl		= RewardScreens::GetScreenOnline();
		TextColor 		= Colors::GetColor("White");
	}
	
	Game::ShowReward(_Player, _("Congrats!"), RankMessage, Subtitle2, _("to continue"), RewardUrl, TextColor, "+", False);
	declare Integer RewardTimer for _Player;
	RewardTimer = 2000;
}
*/

/*
Text GetRankMessage(Integer _Position) {
	declare Text RankMessage = "";
	switch(_Position) {
		case 1	:	RankMessage = _("1st place");
		case 2	:	RankMessage = _("2nd place");
		case 3	:	RankMessage = _("3rd place");
		default	:	RankMessage = TL::Compose(_("%1th place"), ""^_Position+1);
	}
	return RankMessage;
}
*/

Void RewardScreenEndRace(CTmPlayer _Player, Boolean _HasFinishRace) {
	declare Title 		= "Well done!";
	declare TextColor 	= Colors::GetColor("White");

	declare Subtitle 	= Game::JustRankMessage(G_NbPlayersReachedLine-1, GetPointsAccordingPosition(G_NbPlayersReachedLine-1));
	declare Subtitle2	= "";
	declare Sign 		= "+";
	declare RewardUrl 	= RewardScreens::GetScreenOnline();
	
	if(!S_UseAlternateRules) {
		if(_HasFinishRace) {
			if(G_NbPlayersReachedLine == 1) {
				Title 		= FlavourText::GetLocalSoloWinSubTitle();
				TextColor 	= <1.0, 1.0, 1.0>;
			} else if(G_NbPlayersReachedLine < Players.count) {
				Title 		= FlavourText::GetOnlineGoodTitle();
			} else {
				Title 		= FlavourText::GetOnlineBadTitle();
			}
		} else {
			Title 		= FlavourText::GetOnlineBadTitle();
			Subtitle	= FlavourText::GetRoundsNotFinishedRace();
		}
	} else {
		if(_HasFinishRace) {
			if(G_NbPlayersReachedLine == 1) {
				Title 	= FlavourText::GetOnlineGoodTitle();
			} else {
				Title 	= FlavourText::GetOnlineBadTitle();
			}
		} else {
			Title 		= FlavourText::GetOnlineBadTitle();
			Subtitle	= FlavourText::GetRoundsNotFinishedRace();
		}
	}

	declare Integer Time 	= _Player.Score.PrevRace.Time;
	declare Text RecordText = FlavourText::GetOnlineRoundsDefaultSubtitle();
	if(Time > 0)
		// RecordText = TL::Compose(_("Your record: %1"), TL::TimeToText(_Player.Score.PrevRace.Time, True));
		// RecordText = TL::Compose(_("Your record: %1"), TL::TimeToText(_Player.Score.PrevRace.Time, True));
		RecordText = FlavourText::GetRecordOfThePlayer(_Player.Score.PrevRace.Time);
	
	Subtitle2 = RecordText;
	
	if(!_HasFinishRace)
		Sign = "-";
		
	Game::ShowReward(_Player, Title, Subtitle, Subtitle2, "", RewardUrl, TextColor, Sign, False);
}

Void RewardScreenEndMap() {
	// ---------------------------------- //
	// Game Reward
	foreach(Player in Players) {
		declare Integer PlayerPosition 	= Game::GetPlayerPosition(Player);
		declare Text	Title			= FlavourText::GetCampaignBronzeTitle();
		
		declare Real 	GoodPart 		= Players.count*1.0/2.0;
		declare Integer GoodPartInt 	= ML::FloorInteger(GoodPart);
		
		declare Text Sign = "+";
		if(!S_UseAlternateRules) {
			if(PlayerPosition == 0) {
				Title = FlavourText::GetOnlineWinnerTitle();
			} else if(PlayerPosition <= GoodPartInt){
				Title = FlavourText::GetOnlineGoodTitle();
			} else {
				Title = FlavourText::GetOnlineBadTitle();
				Sign = "-";
			}
		} else {
			if(PlayerPosition == 0) {
				Title = FlavourText::GetOnlineWinnerTitle();
			} else {
				Title = FlavourText::GetOnlineBadTitle();
				Sign = "-";
			}
		}
		
		declare Text 	RankMessage 	= Game::GetRankMessage(PlayerPosition);
		// declare Text 	Subtitle2		= FlavourText::GetOnlineRoundsDefaultSubtitle();
		declare Text 	Subtitle2		= "";
		declare Text 	RewardUrl		= RewardScreens::GetScreenOnline();
		declare Vec3 	TextColor 		= Colors::GetColor("White");
		Game::ShowReward(Player, Title, RankMessage, Subtitle2, _("to continue"), RewardUrl, TextColor, "ONLINERANKING", False);
	}
}
